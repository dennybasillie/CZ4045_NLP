{'answer': "Java has a LinkedList implementation, that you might wanna check out. You can download the JDK and it's sources at java.sun.com.", 'questionId': '10042', 'answerId': '10050'}
{'answer': 'Use java.util.LinkedList. Like this:', 'questionId': '10042', 'answerId': '12432'}
{'answer': "The obvious solution to developers familiar to Java is to use the LinkedList class already provided in java.util. Say, however, you wanted to make your own implementation for some reason. Here is a quick example of a linked list that inserts a new link at the beginning of the list, deletes from the beginning of the list and loops through the list to print the links contained in it. Enhancements to this implementation include making it a double-linked list, adding methods to insert and delete from the middle or end, and by adding get and sort methods as well.  Note: In the example, the Link object doesn't actually contain another Link object -  nextLink is actually only a reference to another link.", 'questionId': '10042', 'answerId': '25311'}
{'answer': "Its much better to use java.util.LinkedList, because it's probably much more optimized, than the one that you will write.", 'questionId': '10042', 'answerId': '690660'}
{'answer': 'The above linked list display in opposite direction. I think the correct implementation of insert method should be', 'questionId': '10042', 'answerId': '1963840'}
{'answer': '', 'questionId': '10042', 'answerId': '6674458'}
{'answer': 'Well, I think I fixed it by doing the following: At least, things seem to be working now.....', 'questionId': '10506', 'answerId': '10549'}
{'answer': 'In my case it was an expired DB/2 license.  You can see your licenses by issuing  db2licm -l If you have a license file you can install it by, for example:  db2licm -a db2ese.lic See also: http://publib.boulder.ibm.com/infocenter/tivihelp/v2r1/index.jsp?topic=/com.ibm.IBMDS.doc/pdguide10.htm', 'questionId': '10506', 'answerId': '1003806'}
{'answer': 'After a bit of mucking around, the answer seems to be to use the Event reader/writer versions rather than the Stream versions. (i.e. javax.xml.stream.XMLEventReader and javax.xml.stream.XMLEventWriter) See also http://www.devx.com/tips/Tip/37795, which is what finally got me moving.', 'questionId': '10586', 'answerId': '10660'}
{'answer': "StAX works pretty well and is very fast. I used it in a project to parse XML files which are up to 20MB. I don't have a thorough analysis, but it was definitely faster than SAX.  As for your question: The difference between streaming and event-handling, AFAIK is control. With the streaming API you can walk through your document step by step and get the contents you want. Whereas the event-based API you can only handle what you are interested in.", 'questionId': '10586', 'answerId': '10713'}
{'answer': 'I know this is rather old question, but if anyone else is looking for something like this, there is another alternative: Woodstox Stax2 extension API has method: which copies the currently pointed-to event from stream reader using stream writer. This is not only simple but very efficient. I have used it for similar modifications with success. (how to get XMLStreamWriter2 etc? All Woodstox-provided instances implement these extended versions -- plus there are wrappers in case someone wants to use "basic" Stax variants, as well)', 'questionId': '10586', 'answerId': '3453006'}
{'answer': "I'm not a lawyer but all licenses mentioned are okay to be used in commercial products as long as you don't make any changes and claim the code is yours.  I think if you don't wanna risk anything you should consult a lawyer.", 'questionId': '10980', 'answerId': '12098'}
{'answer': "There are multiple issues here as ikvm is currently being transitioned away from the GNU classpath system to Sun's OpenJDK.  Both are licensed as GPL+Exceptions to state explicitly that applications which merely use the OpenJDK libraries will not be considered derived works. Generally speaking, applications which rely upon components with defined specs such as this do not fall under the GPL anyway.  For example, linking against public POSIX APIs does not trigger GPL reliance in a Linux application, despite the kernel being GPL.  A similar principal will usually (the details can be tricky) apply to replacing Sun's Java with a FOSS/GPL implementation.", 'questionId': '10980', 'answerId': '16662'}
{'answer': 'Just a quick update on this after noticing the question, for anyone browsing by. IKVM seem to have updated to use the OpenJDK and not the GNU Classpath; infact IKVM.net have removed the comment from their license page.', 'questionId': '10980', 'answerId': '2255133'}
{'answer': 'I guess you could just use a short to store them.  Not very efficient, but really the only option besides some herculean effort that I have seen.', 'questionId': '11088', 'answerId': '11092'}
{'answer': 'Probably your best bet is to use an integer rather than a byte.  It has the room to allow for numbers greater than 128 without the overhead of having to create a special object to replace byte.   This is also suggested by people smarter than me (everybody) http://www.darksleep.com/player/JavaAndUnsignedTypes.html http://www.jguru.com/faq/view.jsp?EID=13647', 'questionId': '11088', 'answerId': '11098'}
{'answer': 'When reading any single value from the array copy it into something like a short or an int and manually convert the negative number into the positive value it should be. You can do a similar conversion when writing into the array.', 'questionId': '11088', 'answerId': '11101'}
{'answer': 'The best way to do bit manipulation/unsigned bytes is through using ints. Even though they are signed they have plenty of spare bits (32 total) to treat as an unsigned byte. Also, all of the mathematical operators will convert smaller fixed precision numbers to int. Example: Because of this it is best to just stick with integer and mask it to get the bits that you are interested in. Example: Here is some more info on Java primitive types http://mindprod.com/jgloss/primitive.html One last trivial note, there is one unsigned fixed precision number in Java. That is the char primitive.', 'questionId': '11088', 'answerId': '15657'}
{'answer': 'Using ints is generally better than using shorts because java uses 32-bit values internally anyway (Even for bytes, unless in an array) so using ints will avoid unnecessary conversion to/from short values in the bytecode.', 'questionId': '11088', 'answerId': '15874'}
{'answer': "@pauldoo It is actually possible to get rid of the if statement and the addition if you do it like this. This way Java doesn't interpret the byte as a negative number and flip the sign bit on the integer also.", 'questionId': '11088', 'answerId': '19186'}
{'answer': 'I know this is a very late response, but I came across this thread when trying to do the exact same thing.  The issue is simply trying to determine if a Java byte is >127. The simple solution is: If the real issue is >128 instead, just adding another condition to that if-statement will do the trick.', 'questionId': '11088', 'answerId': '5047679'}
{'answer': 'hm. I might have some homebrew available for it somewhere I could check, but for now: At our company, we basically gave up on this issue and implemented an (unfortunately win only) ActiveX solution: http://www.chestysoft.com/ximage/default.asp. /mp', 'questionId': '11338', 'answerId': '14631'}
{'answer': "Calling the TWAIN API from anything except C/C++ is going to be a major pain, it relies entirely on complicated C structures that you have to replicate exactly in memory. If you need only fairly basic scanning, you could use something like https://github.com/twall/jna/ to call my old free 'EZTwain Classic' DLL (google for eztw32.dll)", 'questionId': '11338', 'answerId': '193237'}
{'answer': "I've actually purchased the chestysoft activeX control.  Been using it for about 3 years.  Works great but as with all ActiveX you are restricted to IE.  And this one is 32-bit only. I'm looking into a flash approach now.  Since flash can capture from a camera why not from a scanner.  If I remember I'll report back what I find.", 'questionId': '11338', 'answerId': '9483688'}
{'answer': "I'm not familiar with WebObjects, but I see you have java listed in there. iText is a java api for building pdfs. If you can access a java api from WebObjects you should be able to build pdfs that way.", 'questionId': '11341', 'answerId': '11399'}
{'answer': 'ScArcher2>> I have looked into different routes for creating PDFs on the fly including FOP and a few Java libraries. I think what I am really asking is if anyone has already done this in the WebObjects framework. My hope is that someone familiar with WebObjects might have done this already and have some insight that would save me some time.', 'questionId': '11341', 'answerId': '13423'}
{'answer': "The canonical response when asked about PDFs from WebObjects has generally been ReportMill.    It's a PDF document generating framework that works a lot like WebObjects, and includes its own graphical PDF builder tool similar to WebObjects Builder and Interface Builder.  You can bind elements in your generated PDFs to dynamic data in your application just as you would for a WOComponent. They have couple of tutorial videos on the ReportMill product page that should give you an idea of how the tool works.  It'll probably be a lot easier than trying to work with FOP programmatically.", 'questionId': '11341', 'answerId': '13431'}
{'answer': 'You can use ReportMill or Jasper Reports. Compared with ReportMill Jasper Reports is Free but requires learning huge library. You can use IReport or Jasper Assistant eclipse plugin(If you are using WOLips) for building report templates. My experiance both are good.', 'questionId': '11341', 'answerId': '1289373'}
{'answer': 'ERPDFWrapper component in Project Wonder: http://webobjects.mdimension.com/hudson/job/Wonder/javadoc/er/pdf/ERPDFWrapper.html', 'questionId': '11341', 'answerId': '2867327'}
{'answer': 'Jasper Reports support have been added to Project Wonder a week ago : http://www.wocommunity.org/podcasts/wowodc/2010/IntegratingJasperReports.mov A talk about that new framework was done at WOWODC 2010, and it was recorded. Check wocommunity.org and the mailing list about that in October.', 'questionId': '11341', 'answerId': '3705685'}
{'answer': 'As you already mentioned, those terms mean different things in different stacks - there is no one right generic answer for web services.', 'questionId': '11561', 'answerId': '11567'}
{'answer': "I'd hop over to http://www.w3.org/TR/wsdl.html which I think explains Port, Service and Endpoint reasonably well. A locator is an implementation specific mechanism that some WS stacks use to provide access to service endpoints.", 'questionId': '11561', 'answerId': '11619'}
{'answer': "I found the information based on Kevin Kenny's answer, but I figured I'd post it here for others. A WSDL document defines services as collections of network endpoints, or ports. In WSDL, the abstract definition of endpoints and messages is separated from their concrete network deployment or data format bindings. This allows the reuse of abstract definitions: messages, which are abstract descriptions of the data being exchanged, and port types which are abstract collections of operations. The concrete protocol and data format specifications for a particular port type constitutes a reusable binding. A port is defined by associating a network address with a reusable binding, and a collection of ports define a service. Hence, a WSDL document uses the following elements in the definition of network services: Types a container for data type definitions using some type system (such as XSD). Message an abstract, typed definition of the data being communicated. Operation an abstract description of an action supported by the service. Port Typean abstract set of operations supported by one or more endpoints. Binding a concrete protocol and data format specification for a particular port type. Port a single endpoint defined as a combination of a binding and a network address. Service a collection of related endpoints.", 'questionId': '11561', 'answerId': '11639'}
{'answer': 'I would like to add that <port> and <endpoint> serve the same purpose, but port is used by WSDL 1.1 and endpoint by WSDL 2.0. It confused me at first.', 'questionId': '11561', 'answerId': '23066361'}
{'answer': "That is not as easy as it sounds.  Java is platform independent, so I am not sure how to do it in Java.  I am guessing that .NET contacts some web site which reports it back.  There are a couple ways to go.  First, a deeper look into the ICMP protocol may give you the information you need.  You can also trace the IP you go through (your route).  When you encounter an IP that is not in the following ranges: 10.0.0.0  10.255.255.255 172.16.0.0  172.31.255.255 192.168.0.0  192.168.255.255 it is the IP one hop away from yours, and probably shares a few octets of information with your IP. Best of luck.  I'll be curious to hear a definitive answer to this question.", 'questionId': '11930', 'answerId': '11943'}
{'answer': "Try shelling out to traceroute if you have it. 'traceroute -m 1 www.amazon.com' will emit something like this: Parse the second line.  Yes, it's ugly, but it'll get you going until someone posts something nicer.", 'questionId': '11930', 'answerId': '11960'}
{'answer': 'You may be better off using something like checkmyip.org, which will determine your public IP address - not necessarily your first hop router: at Uni I have a "real" IP address, whereas at home it is my local router\'s public IP address. You can parse the page that returns, or find another site that allows you to just get the IP address back as the only string. (I\'m meaning load this URL in Java/whatever, and then get the info you need). This should be totally platform independent.', 'questionId': '11930', 'answerId': '12013'}
{'answer': 'Matthew: Yes, that is what I meant by "I can get my internet IP using a service on a website." Sorry about being glib. Brian/Nick: Traceroute would be fine except for the fact that lots of these routers have ICMP disabled and thus it always stalls. I think a combination of traceroute and uPnP will work out. That is what I was planning on doing, I as just hoping I was missing something obvious. Thank you everyone for your comments, so it sounds like I\'m not missing anything obvious. I have begun implementing some bits of uPnP in order to discover the gateway.', 'questionId': '11930', 'answerId': '12027'}
{'answer': "Java doesn't make this as pleasant as other languages, unfortunately. Here's what I did: This presumes that the gateway is the second token and not the third. If it is, you need to add an extra st.nextToken(); to advance the tokenizer one more spot.", 'questionId': '11930', 'answerId': '12030'}
{'answer': "Regarding UPnP: be aware that not all routers support UPnP. And if they do it could be switched off (for security reasons). So your solution might not always work. You should also have a look at NatPMP. A simple library for UPnP can be found  at http://miniupnp.free.fr/, though it's in C...", 'questionId': '11930', 'answerId': '46957'}
{'answer': 'To overcome the issues mentioned with traceroute (ICMP-based, wide area hit) you could consider: traceroute to your public IP (avoids wide-area hit, but still ICMP) Use a non-ICMP utility like ifconfig/ipconfig (portability issues with this though). What seems the best and most portable solution for now is to shell & parse netstat (see the code example here)', 'questionId': '11930', 'answerId': '61288'}
{'answer': 'On windows parsing the output of IPConfig will get you the default gateway, without waiting for a trace.', 'questionId': '11930', 'answerId': '61308'}
{'answer': "On Windows, OSX, Linux, etc then Chris Bunch's answer can be much improved by using  in place of a traceroute command. Your gateway's IP address will appear in the second field of the line that starts either default or 0.0.0.0. This gets around a number of problems with trying to use traceroute: on Windows traceroute is actually tracert.exe, so there's no need for O/S dependencies in the code it's a quick command to run - it gets information from the O/S, not from the network traceroute is sometimes blocked by the network The only downside is that it will be necessary to keep reading lines from the netstat output until the right line is found, since there'll be more than one line of output. EDIT: The Default Gateway's IP Address is in the second field of the line that starts with 'default' if you are on a MAC (tested on Lion), or in the third field of the line that starts with '0.0.0.0' (tested on Windows 7) Windows: Network Destination        Netmask          Gateway       Interface  Metric 0.0.0.0              0.0.0.0    192.168.2.254     192.168.2.46     10 Mac: Destination        Gateway            Flags        Refs      Use   Netif Expire default            192.168.2.254      UGSc          104        4     en1", 'questionId': '11930', 'answerId': '247216'}
{'answer': '', 'questionId': '11930', 'answerId': '248179'}
{'answer': 'You can query the URL "http://whatismyip.com/automation/n09230945.asp". For example:', 'questionId': '11930', 'answerId': '274999'}
{'answer': "output of netstat -rn is locale specific. on my system (locale=de) the output looks like: ... Standardgateway:         10.22.0.1 so there is no line starting with 'default'. so using netstat might be no good idea.", 'questionId': '11930', 'answerId': '781223'}
{'answer': 'This Version connects to www.whatismyip.com, reads the content of the site and searches via regular expressions the ip adress and prints it to the cmd. Its a little improvement of MosheElishas Code', 'questionId': '11930', 'answerId': '9005568'}
{'answer': "In windows you can just use the following command: Which will give you output like: However I can't run this command with Java, gonna post when I figure this out.", 'questionId': '11930', 'answerId': '20806279'}
{'answer': 'You can use netstat -rn command which is available on Windows, OSX, Linux, etc platform. Here is my code:', 'questionId': '11930', 'answerId': '36679773'}
{'answer': "I guess it really comes down to what your Java code is for, how it's distributed and who your clients are. We don't obfuscate anything, as we've never found one that was particularly good and it tends to be more trouble than it's worth. If someone has access to our JAR files and has the knowledge to be able to sniff around inside them, then there's far more worrying things that they can do than rip off our source code.", 'questionId': '12088', 'answerId': '12096'}
{'answer': "I use proguard for JavaME development. It's not only very very good at making jar files smaller (Essential for mobile) but it is useful as a nicer way of doing device-specific code without resorting to IDE-unfriendly preprocessing tools such as antenna. E.g. This gets compiled, obfuscated, and the class file ends up as though you had written: So you can have variants of code to work around manufacturer bugs in JVM/library implementations without bulking out the final executable class files. I believe that some commercial obfuscators can also merge class files together in certain cases. This is useful because the more classes you have, the larger the size overhead you have in the zip (jar) file.", 'questionId': '12088', 'answerId': '12100'}
{'answer': 'If you do obfuscate, stay away from obfuscators that modify the code by changing code flow and/or adding exception blocks and such to make it hard to disassemble it. To make the code unreadable it is usually enough to just change all names of methods, fields and classes. The reason to stay away from changing code flow is that some of those changes makes it impossible for the JVM to efficiently optimize the code. In effect it will actually degrade the performance of your application.', 'questionId': '12088', 'answerId': '12133'}
{'answer': "I spent some time this year trying out various Java obfuscators, and I found one to be miles ahead of the rest: JBCO. It's unfortunately a bit cumbersome to set up, and has no GUI, but in terms of the level of obfuscation it produces, it is unparalleled. You try feeding it a simple loop, and if your decompiler doesn't crash trying to load it, you will see something like this: You didn't know Java had goto's? Well, the JVM supports them =)", 'questionId': '12088', 'answerId': '110472'}
{'answer': "I use ProGuard and highly recommend it.  While obfuscation does protect your code from casual attackers, it's main benefit is the minimizing effect of removing unused classes and methods and shortening all identifiers to 1 or 2 characters.", 'questionId': '12088', 'answerId': '814349'}
{'answer': "I think that for the most part obfuscation is pointless: even with full source code it's generally hard enough to figure out what the heck intention was (assuming there are no comments, and no meaningful names for local variables -- which is the case when re-generating sources from byte code). Obfuscation just decorates the cake. I think developers and especially their managers tend to greatly over-exaggerate risk of someone seeing the source code. While good decompilers can produce nice looking source code, it's not trivial to work with it, and costs associated (not to mention legal risks) are high enough to make this approach seldom useful. I have only decompiled to debug problems with closed-source vendors' products (deadlocks in DB abstraction layer, ugh). Bytecode was actually obfuscated, I think, but we nonetheless found the underlying problem -- it was an actual design problem.", 'questionId': '12088', 'answerId': '871848'}
{'answer': 'I think that the old (classical) way of the obfuscation is gradually losing its relevance. Because in most cases a classical obfuscators breaking a stack trace (it is not good for support your clients) Nowadays the main point to not protect some algorithms, but to protect a sensitive data: API logins/passwords/keys, code which responsible for licensing (piracy still here, especially Western Europe, Russia, Asia, IMHO), advertisement account IDs, etc.  Interesting fact: we have all this sensitive data in Strings. Actually Strings is about 50-80% of logic of our applications. It seems to me that future of obfuscation is "String encryption tools". But now "String encryption" feature is available only in commercial obfuscators, such as: Allatori, Zelix KlassMaster, Smokescreen, Stringer Java Obfuscation Toolkit, DashO. N.B. I\'m CEO at Licel LLC. Developer of Stringer Java Obfuscator.', 'questionId': '12088', 'answerId': '10137205'}
{'answer': "What platform are you working on? I'd recommend trying to use the preferred/common method for it. MacOSX - plists Win32 - Registry (or are there a new one here, long since I developed on it) Linux/Unix - ~/.apprc (name-value perhaps)", 'questionId': '12144', 'answerId': '12147'}
{'answer': "As far as I know, the Windows registry is no longer the preferred way of storing configuration if you are using .NET - most applications now make use of System.Configuration [1, 2]. Since this is also XML based it seems to be that everything is moving in the direction of using XML for configuration. If you want to stay cross-platform I would say that using some sort of a text file would be the best route to go. As for the formatting of said file, you might want to take into account if a human is going to be manipulating it or not. XML seems to be a bit more friendly to manual manipulation than INI files due to the visible structure of the file. As for the angle bracket tax - I don't worry about it too often as the XML libraries take care of abstracting it. The only time it might be a consideration is if you have very little storage space to work with and every byte counts. [1] System.Configuration Namespace - http://msdn.microsoft.com/en-us/library/system.configuration.aspx [2] Using Application Configuration Files in .NET - http://www.developer.com/net/net/article.php/3396111", 'questionId': '12144', 'answerId': '12169'}
{'answer': 'Without starting a new holy war, the sentiments of the \'angle bracket tax\' post is one area where I majorly disagree with Jeff. There\'s nothing wrong with XML, it\'s reasonably human readable (as much as YAML or JSON or INI files are) but remember its intent is to be read by machines. Most language/framework combos come with an XML parser of some sort for free which makes XML a pretty good choice.  Also, if you\'re using a good IDE like Visual Studio, and if the XML comes with a schema, you can give the schema to VS and magically you get intellisense (you can get one for NHibernate for example). Ulimately you need to think about how often you\'re going to be touching these files once in production, probably not that often. This still says it all for me about XML and why it\'s still a valid choice for config files (from Tim Bray): "If you want to provide general-purpose data that the receiver might want to do unforeseen weird and crazy things with, or if you want to be really paranoid and picky about i18n, or if what youre sending is more like a document than a struct, or if the order of the data matters, or if the data is potentially long-lived (as in, more than seconds) XML is the way to go.  It also seems to me that the combination of XML and XPath hits a sweet spot for data formats that need to be extensible; that is to say, its pretty easy to write XML-processing code that wont fail in the presence of changes to the message format that dont touch the piece you care about."', 'questionId': '12144', 'answerId': '12184'}
{'answer': 'We are using properties files, simply because Java supports them natively. A couple of months ago I saw that SpringSource Application Platform uses JSON to configure their server and it looks very interesting. I compared various configuration notations and came to the conclusion that XML seems to be the best fit at the moment. It has nice tools support and is rather platform independent.', 'questionId': '12144', 'answerId': '12192'}
{'answer': 'We are using ini style config files. We use the Nini library to manage them. Nini makes it very easy to use. Nini was orignally for .NET but it has been ported to other platforms using Mono.', 'questionId': '12144', 'answerId': '12194'}
{'answer': 'Re: epatel\'s comment I think the original question was asking about application configuration that an admin would be doing, not just storing user preferences.  The suggestions you gave seem more for user prefs than application config, and aren\'t usually something that the user would ever deal with directly (the app should provide the configuration options in the UI, and then update the files).  I really hope you\'d never make the user have to view/edit the Registry. :) As for the actual question, I\'d say XML is probably OK, as plenty of people will be used to using that for configuration.  As long as you organize the configuration values in an easy to use manner then the "angle bracket tax" shouldn\'t be too bad.', 'questionId': '12144', 'answerId': '12229'}
{'answer': 'XML XML XML XML.  We\'re talking config files here.  There is no "angle bracket tax" if you\'re not serializing objects in a performance-intense situation.   Config files must be human readable and human understandable, in addition to machine readable.  XML is a good compromise between the two. If your shop has people that are afraid of that new-fangled XML technology, I feel bad for you.', 'questionId': '12144', 'answerId': '12256'}
{'answer': '@Herms What I really meant was to stick to the recommended way software should store configuration values for any given platform.  What you often get then is also the recommended ways these should/can be modified. Like a configuration menu in a program or a configuration panel in a "system prefs" application (for system services softwares ie). Not letting the end users modify them directly via RegEdit or NotePad... Why? The end users (=customers) are used to their platforms System for backups can better save "safe setups" etc @ninesided About " choice of library ", try to link in (static link) any selected library to lower the risk of getting into a version-conflict-war on end users machines.', 'questionId': '12144', 'answerId': '12264'}
{'answer': 'YAML, for the simple reason that it makes for very readable configuration files compared to XML. XML: YAML: The examples were taken from this page: http://www.kuro5hin.org/story/2004/10/29/14225/062', 'questionId': '12144', 'answerId': '12277'}
{'answer': "XML, JSON, INI. They all have their strengths and weaknesses. In an application context, I feel that the abstraction layer is the important thing. If you can choose a way to structure the data that is a good middle ground between human readability and how you want to access/abstract the data in code, you're golden.   We mostly use XML where I work, and I cant really believe that a configuration file loaded into a cache as objects when first read or after it has been written to, and then abstracted away from the rest of the program, really is that much of a hit on neither CPU nor disk space. And it is pretty readable too, as long as you structure the file right. And all languages on all platforms supports XML through some pretty common libraries.", 'questionId': '12144', 'answerId': '12287'}
{'answer': 'First: This is a really big debate issue, not a quick Q+A. My favourite right now is to simply include Lua, because I can permit things like width=height*(1+1/3) I can make custom functions available I can forbid anything else. (impossible in, for instance, Python (including pickles.)) I\'ll probably want a scripting language somewhere else in the project anyway. Another option, if there\'s a lot of data is to use sqlite3, because they\'re right to claim Small. Fast. Reliable. Choose any three. To which I would like to add: backups are a snap. (just copy the db file.) easier to switch to another db, ODBC, whatever. (than it is from fugly-file) But again, this is a bigger issue. A "big" answer to this probably involves some kind of feature matrix or list of situations like: Amount of data, or short runtime For large amounts of data, you might want efficient storage, like a db. For short runs (often), you might want something that you don\'t need to do a lot of parsing for, consider something that can be mmap:ed in directly. What does the configuration relate to? Host: I like YAML in /etc. Is that reimplemented in windows? User: Do you permit users to edit config with text editor? Should it be centrally manageable? Registry / gconf / remote db? May the user have several different profiles? Project: File(s) in project directory? (Version control usually follows this model...) Complexity Are there only a few flat values? Consider YAML. Is the data nested, or dependent in some way? (This is where it gets interesting.) Might it be a desirable feature to permit some form of scripting? Templates can be viewed as a kind of configuration files..', 'questionId': '12144', 'answerId': '12351'}
{'answer': 'Maybe a bit of a tangent here but my opinion is that the config file should be read into a key value dictionary/hash table when the app first starts up and always accessed via this object from then on for speed. Typically the key/value table starts off as string to string but helper functions in the object do things such DateTime GetConfigDate(string key) etc...', 'questionId': '12144', 'answerId': '12358'}
{'answer': "@Guy But application config isn't always just key/value pairs.  Look at something like the tomcat configuration for what ports it listens on.  Here's an example: You can have any number of connectors.  Define more in the file and more connectors exist.  Don't define any more and no more exist.  There's no good way (imho) to do that with plain old key/value pairs. If your app's config is simple, then something simple like an INI file that's read into a dictionary is probably fine.  But for something more complex like server configuration, an INI file would be a huge pain to maintain, and something more structural like XML or YAML would be better.  It all depends on the problem set.", 'questionId': '12144', 'answerId': '12703'}
{'answer': 'If your configuration file is write-once, read-only-at-bootup, and your data is a bunch of name value pairs, your best choice is the one your developer can get working first.  If your data is a bit more complicated, with nesting etc, you are probably better off with YAML, XML, or SQLite.  If you need nested data and/or the ability to query the configuration data after bootup, use XML or SQLite. Both have pretty good query languages (XPATH and SQL) for structured/nested data.  If your configuration data is highly normalized (e.g. 5th normal form) you are better off with SQLite because SQL is better for dealing with highly normalized data.  If you are planning to write to the configuration data set during program operation, then you are better off going with SQLite. For example, if you are downloading configuration data from another computer, or if you are basing future program execution decisions on data collected in previous program execution.  SQLite implements a very robust data storage engine that is extremely difficult to corrupt when you have power outages or programs that are hung in an inconsistent state due to errors. Corruptible data leads to high field support costs, and SQLite will do much better than any home-grown solution or even popular libraries around XML or  YAML.  Check out my page for more information on SQLite.', 'questionId': '12144', 'answerId': '883847'}
{'answer': "I think the only important thing is to choose a format that you prefer and can navigate quickly. XML and JSON are both fine formats for configs and are widely supported--technical implementation isn't at the crux of the issue, methinks. It's 100% about what makes the task of config files easier for you.  I have started using JSON, because I work quite a bit with it as a data transport format, and the serializers make it easy to load into any development framework. I find JSON easier to read than XML, which makes handling multiple services, each using a config file  that is modified quite frequently, that much easer for me!", 'questionId': '12144', 'answerId': '13366011'}
{'answer': "This may be too basic or limited of a solution, but couldn't you do a String.split() on each line of the file, remembering the result array of the first line to generate the XML, and just spit each line's array data out with the proper XML elements padding each iteration of a loop?", 'questionId': '123', 'answerId': '133'}
{'answer': 'Maybe this might help: JSefa You can read CSV file with this tool and serialize it to XML.', 'questionId': '123', 'answerId': '183'}
{'answer': "I don't understand why you would want to do this. It sounds almost like cargo cult coding. Converting a CSV file to XML doesn't add any value. Your program is already reading the CSV file, so arguing that you need XML doesn't work. On the other hand, reading the CSV file, doing something with the values, and then serializing to XML does make sense (well, as much as using XML can make sense... ;)) but you would supposedly already have a means of serializing to XML.", 'questionId': '123', 'answerId': '190'}
{'answer': "As far as I know, there's no ready-made library to do this for you, but producing a tool capable of translating from CSV to XML should only require you to write a crude CSV parser and hook up JDOM (or your XML Java library of choice) with some glue code.", 'questionId': '123', 'answerId': '540'}
{'answer': 'There is nothing I know of that can do this without you at least writing a little bit of code... You will need 2 separate library: A CSV Parser Framework  An XML Serialization Framework The CSV parser I would recommend (unless you want to have a little bit of fun to write your own CSV Parser) is OpenCSV (A SourceForge Project for parsing CSV Data) The XML Serialization Framework should be something that can scale in case you want to transform large (or huge) CSV file to XML: My recommendation is the Sun Java Streaming XML Parser Framework (See here) which allows pull-parsing AND serialization.', 'questionId': '123', 'answerId': '939'}
{'answer': 'I know you asked for Java, but this strikes me as a task well suited to a scripting language. Here is a quick (very simple) solution written in Groovy. test.csv csvtoxml.groovy Writes the following XML to stdout: However, the code does very simple parsing (not taking into account quoted or escaped commas) and it does not account for possible absent data.', 'questionId': '123', 'answerId': '6726'}
{'answer': "This solution does not need any CSV or XML libraries and, I know, it does not handle any illegal characters and encoding issues, but you might be interested in it as well, provided your CSV input does not break the above mentioned rules. Attention: You should not use this code unless you know what you do or don't have the chance to use a further library (possible in some bureaucratic projects)... Use a StringBuffer for older Runtime Environments... So here we go: The input test.csv (stolen from another answer on this page): The resulting output:", 'questionId': '123', 'answerId': '21413'}
{'answer': "As the others above, I don't know any one-step way to do that, but if you are ready to use very simple external libraries, I would suggest: OpenCsv for parsing CSV (small, simple, reliable and easy to use) Xstream to parse/serialize XML (very very easy to use, and creating fully human readable xml) Using the same sample data as above, code would look like: Producing the following result: (Xstream allows very fine tuning of the result...)", 'questionId': '123', 'answerId': '53547'}
{'answer': 'For the CSV Part, you may use my little open source library', 'questionId': '123', 'answerId': '74018'}
{'answer': "I have an opensource framework for working with CSV and flat files in general. Maybe it's worth looking: JFileHelpers. With that toolkit you can write code using beans, like: and then just parse your text files using: And you'll have a collection of parsed objects. Hope that helps!", 'questionId': '123', 'answerId': '144768'}
{'answer': 'There is also good library ServingXML by Daniel Parker, which is able to convert almost any plain text format to XML and back. The example for your case can be found here: It uses heading of field in CSV file as the XML element name.', 'questionId': '123', 'answerId': '155146'}
{'answer': 'You can do this exceptionally easily using Groovy, and the code is very readable.  Basically, the text variable will be written to contacts.xml for each line in the contactData.csv, and the fields array contains each column.', 'questionId': '123', 'answerId': '161058'}
{'answer': 'You could use XSLT.  Google it and you will find a few examples e.g. CSV to XML If you use XSLT you can then convert the XML to whatever format you want.', 'questionId': '123', 'answerId': '208799'}
{'answer': "The big difference is that JSefa brings in is that it can serialize your java objects to  CSV/XML/etc files and can deserialize back to java objects. And it's driven by annotations which gives you lot of control over the output.  JFileHelpers also looks interesting.", 'questionId': '123', 'answerId': '3455575'}
{'answer': "I had the same problem and needed an application to convert a CSV file to a XML file for one of my projects, but didn't find anything free and good enough on the net, so I coded my own Java Swing CSVtoXML application. It's available from my website HERE. Hope it will help you.  If not, you can easily code your own like I did; The source code is inside the jar file so modify it as you need if it doesn't fill your requirement.", 'questionId': '123', 'answerId': '23096745'}
{'answer': 'Jackson processor family has backends for multiple data formats, not just JSON. This includes both XML (https://github.com/FasterXML/jackson-dataformat-xml) and CSV (https://github.com/FasterXML/jackson-dataformat-csv/) backends. Conversion would rely on reading input with CSV backend, write using XML backend. This is easiest to do if you have (or can define) a POJO for per-row (CSV) entries. This is not a strict requirement, as content from CSV may be read "untyped" as well (a sequence of String arrays), but requires bit more work on XML output. For XML side, you would need a wrapper root object to contain array or List of objects to serialize.', 'questionId': '123', 'answerId': '29953381'}
{'answer': "This has religious war potential, but it seems to me that if you're using a getter/setter, you should use it internally as well - using both will lead to maintenance problems down the road (e.g. somebody adds code to a setter that needs to run every time that property is set, and the property is being set internally w/o that setter being called).", 'questionId': '126', 'answerId': '127'}
{'answer': "It depends on how the property is used. For example, say you have a student object that has a name property. You could use your Get method to pull the name from the database, if it hasn't been retrieved already. This way you are reducing unnecessary calls to the database. Now let's say you have a private integer counter in your object that counts the number of times the name has been called. You may want to not use the Get method from inside the object because it would produce an invalid count.", 'questionId': '126', 'answerId': '128'}
{'answer': ' Am I just going overboard here? Perhaps ;) Another approach would be to utilize a private/protected method to actually do the getting (caching/db/etc), and a public wrapper for it that increments the count: PHP: and then from within the object itself: PHP: This way you can still use that first argument for something else (like sending a flag for whether or not to used cached data here perhaps).', 'questionId': '126', 'answerId': '139'}
{'answer': "Well, it seems with C# 3.0 properties' default implementation, the decision is taken for you; you HAVE to set the property using the (possibly private) property setter. I personally only use the private member-behind when not doing so would cause the object to fall in an less than desirable state, such as when initializing or when caching/lazy loading is involved.", 'questionId': '126', 'answerId': '142'}
{'answer': "As stated in some of the comments: Sometimes you should, sometimes you shouldn't. The great part about private variables is that you are able to see all the places they are used when you change something. If your getter/setter does something you need, use it. If it doesn't matter you decide. The opposite case could be made that if you use the getter/setter and somebody changes the getter/setter they have to analyze all the places the getter and setter is used internally to see if it messes something up.", 'questionId': '126', 'answerId': '143'}
{'answer': "Personally, I feel like it's important to remain consistent.  If you have getters and setters, use them.  The only time I would access a field directly is when the accessor has a lot of overhead.  It may feel like you're bloating your code unnecessarily, but it can certainly save a whole lot of headache in the future.  The classic example: Later on, you may desire to change the way that field works.  Maybe it should be calculated on-the-fly or maybe you would like to use a different type for the backing store.  If you are accessing properties directly, a change like that can break an awful lot of code in one swell foop.", 'questionId': '126', 'answerId': '169'}
{'answer': "i can be wrong because i'm autodidact, but i NEVER user public properties in my Java clases, they are allways private or protected, so that outside code must access by getters/setters. it's better for mainteance / modification purposes. And for inside class code... if getter method is trivial i use the property directly, but i allways use the setter methods because i could easily add code to fire events if i wish", 'questionId': '126', 'answerId': '3485'}
{'answer': "i've found using setters/getters made my code easier to read. I also like the control it gives when other classes use the methods and if i change the data the property will store.", 'questionId': '126', 'answerId': '14968'}
{'answer': "Private fields with public or protected properties.  Access to the values should go through the properties, and be copied to a local variable if they will be used more than once in a method.  If and ONLY if you have the rest of your application so totally tweaked, rocked out, and otherwise optimized to where accessing values by going through their assosciated properties has become a bottleneck (And that will never EVER happen, I guarantee) should you even begin to consider letting anything other than the properties touch their backing variables directly. .NET developers can use automatic properties to enforce this since you can't even see the backing variables at design time.", 'questionId': '126', 'answerId': '14980'}
{'answer': 'If by "purist" you mean "most encapsulation", then I typically declare all my fields as private and then use this.field from within the class itself, but all other classes, including subclasses, access instance state using the getters.', 'questionId': '126', 'answerId': '22083'}
{'answer': "If I won't edit the property I'll use a get_property() public method unless it's a special occasion such as a MySQLi object inside another object in which case I'll just public the property and refer to it as $obj->object_property. Inside the object it's always $this->property for me.", 'questionId': '126', 'answerId': '22111'}
{'answer': 'I like the answer by cmcculloh, but it seems like the most correct is the answer by Greg Hurlman. Use getter/setters all the time if you started using them from the getgo and/or are used to working with them. As an aside, I personally find that using getter/setters makes the code easier to read and to debug later on.', 'questionId': '126', 'answerId': '62045'}
{'answer': 'I\'m fairly surprised at how unanimous the sentiment is that getters and setters are fine and good. I suggest the incendiary article by Allen Holub "Getters And Setters Are Evil". Granted, the title is for shock value, but the author makes valid points. Essentially, if you have getters and setters for each and every private field, you are making those fields as good as public. You\'d be very hard-pressed to change the type of a private field without ripple effects to every class that calls that getter. Moreover, from a strictly OO point of view, objects should be responding to messages (methods) that correspond to their (hopefully) single responsibility. The vast majority of getters and setters don\'t make sense for their constituent objects;Pen.dispenseInkOnto(Surface) makes more sense to me than Pen.getColor(). Getters and setters also encourage users of the class to ask the object for some data, perform a calculation, and then set some other value in the object, better known as procedural programming. You\'d be better served to simply tell the object to do what you were going to in the first place; also known as the Information Expert idiom. Getters and setters, however, are necessary evils at the boundary of layers -- UI, persistence, and so forth. Restricted access to a class\'s internals, such as C++\'s friend keyword, Java\'s package protected access, .NET\'s internal access, and the Friend Class Pattern can help you reduce the visibility of getters and setters to only those who need them.', 'questionId': '126', 'answerId': '98244'}
{'answer': "The purist OO way is to avoid both and follow the Law of Demeter by using the Tell Don't Ask approach. Instead of getting the value of the object's property, which tightly couples the two class, use the object as a parameter e.g. Where the property was a native type, e.g. int, use an access method,  name it for problem domain not the programming domain. These will allow you to maintain encapsulation and any post-conditions or dependent invariants. You can also use the setter method to maintain any pre-conditions or dependent invariants, however don't fall into the trap of naming them setters, go back to the Hollywood Principle for naming when using the idiom.", 'questionId': '126', 'answerId': '128396'}
{'answer': "PHP offers a myriad of ways to handle this, including magic methods __get and __set, but I prefer explicit getters and setters. Here's why: Validation can be placed in setters (and getters for that matter) Intellisense works with explicit methods No question whether a property is read only, write only or read-write Retrieving virtual properties (ie, calculated values) looks the same as regular properties  You can easily set an object property that is never actually defined anywhere, which then goes undocumented", 'questionId': '126', 'answerId': '128488'}
{'answer': "It depends. It's more a style issue than anything else, and there is no hard rule.", 'questionId': '126', 'answerId': '157081'}
{'answer': 'i would say its better to use the accessor methods even within the object. Here are the points that come to my mind immediately: 1) It should be done in the interest of maintaining consistency with accesses made outside the object. 2) In some cases, these accessor methods could be doing more than just accessing the field; they could be doing some additional processing (its rare though). If this is the case, by accessing the field directly you would missing out that additional processing and your program could go awry if this processing is always to be done during those accesses', 'questionId': '126', 'answerId': '2099971'}
{'answer': "I must be missing the point here, why would you use a getter inside an object to access a property of that object? Taking this to its conclusion the getter should call a getter, which should call a getter. So I'd say inside an object method access a property directly, especially seeing as calling another method in that object (which will just access the property directly anyway then return it) is just a pointless, wasteful exercise (or have I misunderstood the question).", 'questionId': '126', 'answerId': '6237699'}
{'answer': "You could do essentially the same code with Hashtables (or some other Map): Not as elegant, but then again, Java isn't a dynamic language, and it doesn't have hashes on the language level. Note: You might be able to do a better solution, this just popped in my head as I read your question.", 'questionId': '12870', 'answerId': '12878'}
{'answer': "There is no pretty solution.  Java just doesn't do things like this well.  Mike's solution is pretty much the way to do it if you want strings as the indices (keys).  Another option if the hash-of-hashes setup is too ugly is to append the strings together (shamelessly stolen from Mike and modified): and then lookup: If you're unhappy with the general ugliness (and I don't blame you), put it all behind a method call:", 'questionId': '12870', 'answerId': '12885'}
{'answer': '@Brian Warshaw FYI, with Java 1.5, primitives are now autoboxed to the wrapped version, so you can call it with just the primitive:', 'questionId': '12870', 'answerId': '12887'}
{'answer': "I'm not a Java programmer, but getting away from Java and just thinking in terms that are more language agnostic - a cleaner way to do it might be to use either constants or enumerated types.  This should work in any langauge that supports multi-dimensional arrays. If using named constants, where, for example:  Then the constants serve as more readable array subscripts: Using enumerated types:", 'questionId': '12870', 'answerId': '12899'}
{'answer': "Don't try to be as dynamic as PHP is. You could try to first define what you need. And please, read the documentation of Hashtable before using it. This class is synchronized which means that each call is protected against multithreading which really slows the access when you don't need the extra protection. Please use any Map implementation instead like HashMap or TreeMap.", 'questionId': '12870', 'answerId': '12918'}
{'answer': "It seems like everyone is trying to find the Java way to do it like you're doing it in PHP, instead of the way it ought to be done in Java. Just consider each piece of your array an object, or, at the very least, the first level of the array as an object and each sub level as variables inside the object. The build a data structure that you populate with said objects and access the objects through the data structure's given accessors. Something like: Of course that probably isn't right either. I'd make each season an object, and maybe each weekday list as an object too. Anyway, its more easily reused, understood, and extensible than a hobbled-together Hashtable that tries to imitate your PHP code. Of course, PHP has objects too, and you should use them in a similar fashion instead of your uber-arrays, wherever possible. I do understand the temptation to cheat, though. PHP makes it so easy, and so fun!", 'questionId': '12870', 'answerId': '12923'}
{'answer': 'I agree that you should definitely put this logic behind the clean interface of: but maybe you should stick the data in a properties file.  I\'m not against hardcoding this data in your source files but, as you noticed, Java can be pretty wordy when it comes to nested Collections.  Your file might looks like: A.Summer=M   A.Spring=tTS   B.Summer=T Usually I don\'t like to move static data like this to an external file because it increases the "distance" between the data and the code that uses it.  However, whenever you\'re dealing with nested Collections, especially maps, things can get real ugly, real fast. If you don\'t like this idea, maybe you can do something like this: You lose some readability but at least the data is closer to where it\'s going to be used.', 'questionId': '12870', 'answerId': '12932'}
{'answer': "I'm totally at a loss as to why some of you seem to think that throwing gobs of objects at the code is the way to go.  For example, there are exactly four seasons, and they don't do or store anything.  How does it simplify anything to make them objects?  Wing is quite right that these should probably be constants (or maybe enums). What Bruce needs, at it's heart, is simply a lookup table.  He doesn't need a hierarchy of objects and interfaces; he needs a way to look up a schedule based on a season and a group identifier.  Turning things into objects only makes sense if they have responsibilities or state.  If they have neither, then they are simply identifiers, and building special objects for them just makes the codebase larger. You could build, e.g., Group objects that each contain a set of schedule strings (one for each season), but if all the Group object does is provide lookup functionality, then you've reinvented the lookup table in a much less intuitive fashion.  If he has to look up the group, and then lookup the schedule, all he has is a two-step lookup table that took longer to code, is more likely to be buggy, and will be harder to maintain.", 'questionId': '12870', 'answerId': '12941'}
{'answer': 'I think Ian is absolutely right: stop trying to implement your PHP code in Java.  Instead, take a step back and think about how you might design this from scratch.  In particular, why not put all that data into a database, instead of hard-coding it in your sources or using properties files?  Using a database will be much easier to maintain, and there are a variety of free database engines to choose from.', 'questionId': '12870', 'answerId': '12953'}
{'answer': '@Jason In particular, why not put all that data into a database, instead of hard-coding it in your sources or using properties files? Using a database will be much easier to maintain, and there are a variety of free database engines to choose from. Adding a database is an incredibly heavyweight way to solve a problem that fits easily into a text file (or even directly into the source).  There are 5 groups and 4 seasons.  That means there are going to be a total of 20 records in the database.', 'questionId': '12870', 'answerId': '12957'}
{'answer': "@Derek Adding a database is an incredibly heavyweight way to solve a problem that fits easily into a text file (or even directly into the source). There are 5 groups and 4 seasons. That means there are going to be a total of 20 records in the database. Two of the database engines I linked to are implemented entirely in Java and can be embedded in an application just by including a jar file.  It's a little heavyweight, sure, but it's a lot more scalable and easier to maintain.  Just because there are 20 records today doesn't mean there won't be more later due to changing requirements or feature creep. If in a few weeks or months you decide you want to add, say, time of day watering restrictions, it will be much easier to add that functionality if you're already using a database.  Even if that never happens, then you've spent a few hours learning how to embed a database in an application.", 'questionId': '12870', 'answerId': '12970'}
{'answer': "@Jason Two of the database engines I linked to are implemented entirely in Java and can be embedded in an application just by including a jar file. It's a little heavyweight, sure, but it's a lot more scalable and easier to maintain. Just because there are 20 records today doesn't mean there won't be more later due to changing requirements or feature creep. If in a few weeks or months you decide you want to add, say, time of day watering restrictions, it will be much easier to add that functionality if you're already using a database. Even if that never happens, then you've spent a few hours learning how to embed a database in an application. Embedding a DB in Java doesn't make it easier to maintain.  There's now an additional code dependency that did not previously exist.  Updating the set of schedules is now more difficult, as either a custom tool must be coded or a DB-specific interface must be used, whereas previous notepad.exe was sufficient.  Scalability is not a concern here, either.  The needs of this system could increase by a million and the flat file would still work just fine. Certainly, it's possible that in the future needs will evolve to the point that it's worth moving to a database.  That's when you make the change.  Trying to future-proof an application never works, because we always assume incorrectly about future needs.  We can't say it'll only take a few hours to embed the database either, because we suck at estimating schedules, too.  If there even comes a time when the database is appropriate, then refactor the code to use a database.  In the meantime, do the simplest thing that could possibly work.", 'questionId': '12870', 'answerId': '12974'}
{'answer': 'Does the "date" have to be a parameter? If you\'re just showing the current watering schedule the WateringSchedule class itself can figure out what day it is, and therefore what season it is. Then just have a method which returns a map where the Key is the group letter. Something like: Then in the JSP page If you need to show the schedules for more than one season, you should have a method in the WateringSchedule class that returns a map where Seasons are the keys, and then Maps of groupToScheduledDays are the values.', 'questionId': '12870', 'answerId': '12992'}
{'answer': "Here's one way it could look like, you can figure the rest out:", 'questionId': '12870', 'answerId': '13037'}
{'answer': "I'm with those that suggest encapsulating function in objects. EDIT: Also, your date ranges don't take leap years into account: Our seasons look like this: Summer   (5-1 to 8-31) Spring (3-1 to 4-30)   Fall (9-1 to 10-31) Winter (11-1 to   2-28)", 'questionId': '12870', 'answerId': '13099'}
{'answer': "The company Navicat has released an Oracle client for Mac (and they do a Windows version too). It's not free, but I think you can get a 30 day demo.", 'questionId': '12877', 'answerId': '12943'}
{'answer': "I get the same problem after there's been an active connection sitting idle for a while. I solve it by restarting sql developer every once in a while. I also have Toad for Oracle running on a vmware XP session, and it works great.  If you don't mind the money, try that.", 'questionId': '12877', 'answerId': '12959'}
{'answer': 'Squirrel is a nice database agonstic application development client.  No Oracle specific features, but runs well on the mac', 'questionId': '12877', 'answerId': '17714'}
{'answer': 'The latest version of SQL Developer is very good and I have experienced no problems with it on my Mac Pro.  DB Solo 3 is also quite good.', 'questionId': '12877', 'answerId': '27692'}
{'answer': "I use SQLDeveloper on the Mac and have had problems where it becomes unresponsive.  Usually, I can fix this by going into the Activity Monitor and killing the process.  However, this doesn't always work to end the process.  When that happens, I go to the Terminal and find the process id and send it a SIGKILL and then the next time it will work correctly. However, more importantly I evaluated SQLGrinder at one point.  I didn't end up buying the software, largely because I have a Mac laptop and a windows desktop.  Therefore, I more often use Toad on the windows desktop and it wasn't worth purchasing SQLGrinder for me.", 'questionId': '12877', 'answerId': '215760'}
{'answer': "Have you looked at http://www.aquafold.com/? They have a very JDBC/java Mac-friendly utility, Aqua Data Studio (ADS) that you can try for I think 30 days. It's not free, but...  Excellent support via Yahoo groups. VERY responsive re bugs or enhancement requests. No affiliation with them - just a fan.", 'questionId': '12877', 'answerId': '1395000'}
{'answer': 'Use RazorSQL. Do yourself a favor and spend the 60 bucks.  It will pay for itself in the first hour or two of use.  You may even be able to get 60 days for free out of it.', 'questionId': '12877', 'answerId': '1885890'}
{'answer': "If you are using Java 5 or later, you can connect to your application using jconsole to view all running threads. jstack also will do a stack dump. I think this should still work even inside a container like Tomcat. Both of these tools are included with JDK5 and later (I assume the process needs to be at least Java 5, though I could be wrong) Update: It's also worth noting that starting with JDK 1.6 update 7 there is now a bundled profiler called VisualVM which can be launched with 'jvisualvm'. It looks like it is a java.net project, so additional info may be available at that page. I haven't used this yet but it looks useful for more serious analysis. Hope that helps", 'questionId': '12927', 'answerId': '12961'}
{'answer': "If it's for professional purpose and you have some money to spend, try to get your hands on JProfiler. If you just want to get some insights, try out the Eclipse Profiler Plugin. I used it several times, but I don't know the current state. A new(?) project from the eclipse project itself is available too: http://www.eclipse.org/tptp/ (See this article). Never used it, so I can't tell if it is worth the effort. There's also a very good list of open source profilers available at http://www.manageability.org/blog/stuff/open-source-profilers-for-java", 'questionId': '12927', 'answerId': '13016'}
{'answer': 'Facing the same problem I used YourKit profiler. It\'s loader doesn\'t activate unless you actually connect to it (though it does open a port to listen for connections). The profiler itself has a nice "get amount of time spent in each method" while working in it\'s less obtrusive mode. Another way is to detect CPU load (via JNI, so you\'d need an external library for this) in a "watchdog" thread with highest priority and start logging all threads when the CPU is high enough for a long enough time. You might find this article enlightining.', 'questionId': '12927', 'answerId': '13271'}
{'answer': 'For completeness sake: even though my company more or less standardizes on Eclipse we use Netbeans (6 and up) with its included, free profiler on a daily basis. It works better than the Eclipse TPTP plugin (last checked 3 months ago) and for us it removes any need for a commercial profiler such as JProfiler, which is excellent, but fast becoming unnecessary.', 'questionId': '12927', 'answerId': '16733'}
{'answer': 'VisualVM should be the profiler from netbeans as standalone. I tried the TPTP for eclipse but visualVm seems as a much nicer option!', 'questionId': '12927', 'answerId': '19660'}
{'answer': "Use a profiler. Yes they cost money, and using them can occasionally be a bit awkward, but they do provide you with a great deal more real evidence rather than guesswork. Human beings are universally bad at guessing where performance bottlenecks are. It just seems to be something our brains aren't build to do very well. It may seem obvious, you may have great ideas about what the problem is, but the real world often turns out to be doing something different. And optimising the wrong part of code means, at best, lots of work for minimal benefit. More often it makes things slower, and sometimes it breaks things entirely. So before you make any changes for the sake of optimisation, you should always have real evidence from a profiler or other accurate tool. As mentioned, both JProfiler and YourKit are both fairly good and not prohibitively expensive. Last time I looked, they both had free demos too.", 'questionId': '12927', 'answerId': '19767'}
{'answer': "If JConsole can't be used you can press CTRL+BREAK under Windows send kill -3 <process id> under Linux to get a full Thread Dump. This doesn't affect performance and can always be run in production.", 'questionId': '12927', 'answerId': '24082'}
{'answer': 'JRockit Mission Control Latency Analyzer. The Latency Analyzer that comes with JRockit shows you what the JVM is "doing" when it\'s not doing anything. In the latest version you can see latencies for: Java wait/blocked/sleep/parked. File I/O Network I/O Memory allocation GC pauses JVM latencies, e.g code generation and class loading  Thread suspension  The tool will give you the stack trace when the latency occurred. You can view the latency data in many different ways (aggregated traces, as a histogram, in a thread graph etc.). The tool also allows you to see transitions between threads, for instance when one thread notifies another. latency analyzer http://blogs.oracle.com/hirt/WindowsLiveWriter/The.0LatencyAnalyserMigratedfromtheoldBE_7246/latency_graph_2.png The overhead is negligible and unlike many other tools it can be used in a production environment.  This blog post gives you a brief introduction and the program can be downloaded here. It\'s free to use for development!', 'questionId': '12927', 'answerId': '150636'}
{'answer': 'Perhaps:', 'questionId': '13225', 'answerId': '13239'}
{'answer': 'One approach that comes to mind is that you could store the translated replacement parameters i.e. "address" and "contact information" in a separate properties file, one per locale. Then have your Action class (or probably some helper class) look up the values from the correct ResourceBundle for the current locale and pass them to the message tag.', 'questionId': '13225', 'answerId': '13250'}
{'answer': ' The message message tag API allows   only 5 parametric arguments Ah! I blame my complete ignorance of the Struts API. To quote the manual:  Some of the features in this taglib   are also available in the JavaServer   Pages Standard Tag Library (JSTL). The   Struts team encourages the use of the   standard tags over the Struts specific   tags when possible. You could probably do this with the http://java.sun.com/jsp/jstl/fmt taglib. The downside is that this isn\'t valid XML and yanking the values to variables involves more indirection, lookups and verbosity. This is not a good solution. I don\'t know Struts, but if it is anything like JavaServer Faces (same architect), then there is probably support for configuring a replacement control. I would either replace the existing control with a more flexible one or add a new one. Anytime I receive newly-translated   text, I must decide what to surround   with the <a>...</a> markup. There is no way you should be doing this and I see this as a fault in your translation process (I am an ex-localization engineer and ex-developer of localization tools). The {0} characters should be included in the files that are sent to the translators. The localization guidelines should explain the string\'s context and the meaning of any variables. You can programmatically validate the property bundles on return. String-specific regex\'s might do the trick. It isn\'t outside the realms of possibility that "address" and "contact information" would swap order during translation. The simplest solution is to redesign the messages to render: I accept that this might not be a solution in all cases and may have your UI designer spitting teeth.', 'questionId': '13225', 'answerId': '13359'}
{'answer': " Avoid creating links within long   blocks of text. Prefer shorter text   that can act as a logically complete   and independent link. Generally, it will lead to fewer problems. Sometimes you have to compromise your UI design to accommodate localization; sometimes you need to compromise your localization process to accommodate the UI. Any time a developer manually manipulates post-translation strings is a source of potentially expensive bugs. Cutting/pasting or string editing can result in character corruption, misplaced strings, etc. A translation defect needs the participation of outside parties to fix which involves cost and takes time. Thinking on it, something like this might be less ugly: ...but I'm no UI designer.", 'questionId': '13225', 'answerId': '13381'}
{'answer': "IntelliJ 14.X Onwards From version 14.0 onwards, the path to the setting dialog is slightly different, a General submenu has been added between Editor and Appearance as shown below IntelliJ 8.1.2 - 13.X From IntelliJ 8.1.2 onwards, this option is in File | Settings1. Within the IDE Settings section of that dialog, you'll find it under Editor | Appearance. On a Mac, these are named IntelliJ IDEA | Preferences...", 'questionId': '13751', 'answerId': '912112'}
{'answer': 'Hello this is Tim from the FUTURE!!! 2011... For 9.0.4  File > Settings In the tree view group ------------IDE Settings --------- Click the Editor [+] Select Appearance... Its there.', 'questionId': '13751', 'answerId': '7270304'}
{'answer': 'There\'s another way, and even quicker (works for me in version 10.5) Simply right click on the place where the line-numbers should be, and there you\'ll see a small menu. then, mark the "Show Line Numbers" option. Please note that this only works on a per-file basis, however.  Enjoy.', 'questionId': '13751', 'answerId': '8266632'}
{'answer': 'For InteliJ IDEA 11.0 and above Goto File --> Settings in the Settings window Editor --> Appearance and tick Show line numbers check box.', 'questionId': '13751', 'answerId': '8654454'}
{'answer': 'On Mac Intellij 12.1.2 there is no File-Settings: There is an application-name menu item to the left of "File" with a "preferences" menu item: and within that is the "Settings" dialog shown by the Windows Intellij.', 'questionId': '13751', 'answerId': '16366066'}
{'answer': "On IntelliJ 12 on MAC OSX, I had a hard time finding it. The search wouldn't show me the way for some reason. Go to Preferences and under IDE Settings, Editor, Appearance and select 'Show line numbers'", 'questionId': '13751', 'answerId': '18110549'}
{'answer': 'In Intellij 13 the layout has changed, the Settings button can only be found in File -> Settings and not in the toolbars, and from there you follow the same steps: Editor -> Appearance -> Show line numbers, or search for Line numbers in the Settings search input.', 'questionId': '13751', 'answerId': '19304456'}
{'answer': 'IntelliJ 14 (Ubuntu):  See: how-do-i-turn-on-line-numbers-permanently-in-intellij-14 Permanently: File > Settings > Editor > General > Appearance > show line numbers For current Editor: View > Active Editor > Show Line Numbers', 'questionId': '13751', 'answerId': '27032572'}
{'answer': 'In IntelliJ 14 it has moved again somewhat down the menu.  Now we have it unter Editor -> General -> Appearance', 'questionId': '13751', 'answerId': '27353549'}
{'answer': 'Ok in intelliJ 14 Ultimate using the Mac version this is it. IntelliJ Idea > Preferences > Editor > General > Appearance > Show Line Numbers', 'questionId': '13751', 'answerId': '27502240'}
{'answer': '1st way: Go to View => Active Editor => show line numbers 2nd way Go to Android Studio => Preferences => Editor=> Appearance => set Checked "Show Line Numbers"', 'questionId': '13751', 'answerId': '28667333'}
{'answer': 'The question is obviously well answered already, but since IJ 13 you can enable line numbers in 2 seconds flat:  Press shift+shift  Type "line number" The option shows in the menu and press enter to enable/disable.  Et voila ;)', 'questionId': '13751', 'answerId': '29621176'}
{'answer': 'Android Studio Go to Android Studio => Preferences => Editor => General => Appearance => set Checked "Show line numbers"', 'questionId': '13751', 'answerId': '31368252'}
{'answer': "Android Studio 1.3.2 and on, IntelliJ 15 and on Global configuration File -> Settings -> Editor -> General -> Appearance -> Show line numbers Current editor configuration First way: View -> Active Editor -> Show Line Numbers (this option will only be available if you previously have clicked into a file of the active editor) Second way: Right click on the small area between the project's structure and the active editor (that is, the one that you can set breakpoints) -> Show Line Numbers.", 'questionId': '13751', 'answerId': '32667309'}
{'answer': 'I just hit this with IdeaVim plugin installed, where even if I set Show Line Numbers, it continued to revert to hiding them. The (forehead-slapping-worthy) solution was:', 'questionId': '13751', 'answerId': '34649002'}
{'answer': 'IntelliJ IDEA 15 5 approaches Global change File > Settings... > Editor > General > Appearance > Show line numbers Hit Shift twice > write "line numbers" > Show Line Numbers (that one that has the toggle) > change the toggle to ON Change for the Active Editor Right click on the left side bar > Show Line Numbers Hit Shift twice > write "line" > Show Line Numbers (the line doesn\'t have the toggle) Ctrl + Shift + A > write "Show line" > Active Editor: Show Line Numbers > change the toggle to ON', 'questionId': '13751', 'answerId': '34712075'}
{'answer': 'Just an update for Android Studio 1.5.1 on Windows: Go to File -> Settings -> follow picture', 'questionId': '13751', 'answerId': '35310569'}
{'answer': 'On IntelliJ IDEA 2016.1.2 Go to Settings > Editor > General > Appearance  then check the Show Line number option', 'questionId': '13751', 'answerId': '37281299'}
{'answer': "Depends a lot on the kind of queries you've got to parse and somewhat on the structure of the data in your database. I'm going to assume that you're not trying to do full text search in a DB (i.e. a search engine across your entire DB) because, as most Information Retrieval people will tell you, the performance for that is terrible. Inverted indexes are most certainly the best way of doing that. Tell us a bit more about the actual problem: what are the users going to input, what are they expecting as output, and what's the data model like. Design a search solution without those pieces of information, and you'll get a far from optimal result.", 'questionId': '13863', 'answerId': '13871'}
{'answer': "What exactly do you have in mind?  I've used Lucene for text-searching, but where it excels is building an index and searching that instead of hitting the database at all. I recently set up an system where I index a table in Lucene by concatenating all the columns (separated by spaces) into one field, and popping that into Lucene, and then also adding the primary key in a separate column.  Lucene does all the searching and returned a list of primary keys, which I used to pull up a populated set of results and display to the user. Converting a search query into a SQL statement would seem to me to be a little messy. Also, here's a great beginning tutorial explaining the basic structure of Lucene.", 'questionId': '13863', 'answerId': '13873'}
{'answer': 'You are correct to assume that I am not looking for full text search. The information looks something like this schema for book info: Name: string, publisher:string, num_pages int, publish_date:date... The search queries are of the sort: Harry Potter (search any books whos name has both Harry and Potter) publisher:Nature* pages>100 (books from a publisher starting with Nature with more than 100 books) ("New years" or Christmas) and present (you get the picture...) physics and publish>1/1/2008 (new physics books)', 'questionId': '13863', 'answerId': '13877'}
{'answer': 'You could try using something like javacc (Java Compiler Compiler) to implement a parser or else just manually parse the string by brute force.  Every time you come across an expression you represent it as an object.  Then you just have to translate your expression tree into a where clause. For example:  "Harry Potter" becomes  And "publisher:Nature* pages > 100" becomes Then, once you have these, it\'s pretty easy to turn them into SQL: You can imagine the rest.  You can nest And expressions as deeply as you want.', 'questionId': '13863', 'answerId': '154639'}
{'answer': 'SQL-ORM is a very lightweight Java library which includes the ability to construct a (dynamic) SQL query in Java as a graph of objects IMHO, this is a far better technique for building dynamic SQL queries than the usual String concatentation method. Disclaimer: I have made some very minor contributions to this project', 'questionId': '13863', 'answerId': '154774'}
{'answer': 'Try to combine an ORM tool (like openJPA) and Compass (framework for OSEM). It automatically indexes the updates done through the ORM tools and gives you the Lucene power for search. After that you can of-course retrieve the object from the DB. It out-performs any SQL-based searching solution.', 'questionId': '13863', 'answerId': '1295474'}
{'answer': 'String [] array;', 'questionId': '13863', 'answerId': '19051117'}
{'answer': "This is very much up to personal preference, but I find the following structure suitable for large projects consisting of many modules: I have also often used the structure in large repositories containing many projects, because keeping all projects in the same repository makes cross-referencing projects and sharing code between themwith historyeasier. I like to use the structure with root trunk, tags and branches folders from the start because in my experience (with large repositories containing many projects), many sub-projects and modules will never have separate tags or branches, so there is no need to create the folder structure for them. It also makes it easier for the developers to check out the entire trunk of the repository and not get all the tags and branches (which they don't need most of the time). I guess this is a matter of project or company policy though. If you have one repository for each project or a given developer is only likely to work on a single project in the repository at a time the rooted trunk may not make as much sense.", 'questionId': '14397', 'answerId': '14427'}
{'answer': 'The Subversion book contains two sections on this: Repository Layout Planning Your Repository Organization A blog entry on the subject: "Subversion Repository Layout" The short answer, though: while your mileage will vary (every situation is individual), your /bundle/<project>/(trunk|tags|branches) scheme is rather common and will likely work well for you.', 'questionId': '14397', 'answerId': '14441'}
{'answer': "I've answered a similar question in a StackOverflow Version Control Structure question. It actually fits even better here since we do heavy OSGi development and have lots of bundles. I must echo Anders Sandvig comments: keep trunk/tags/branches on the root level since you will only branch a limited set of modules. It also does not interfere with modules building individually. I won't copy the answer I made before but it is entirely relevant to this question.", 'questionId': '14397', 'answerId': '17574'}
{'answer': 'Just my two cents... I just want to emphasize the comment in the SVN documentation (already quoted in another answer, same thread) http://svnbook.red-bean.com/en/1.4/svn.reposadmin.planning.html#svn.reposadmin.projects.chooselayout The excerpt references the following structure : /    trunk/       calc/       calendar/       spreadsheet/           tags/       calc/       calendar/       spreadsheet/           branches/       calc/       calendar/       spreadsheet/ "There\'s nothing particularly incorrect about such a layout, but it may or may not seem as intuitive for your users. Especially in large, multi-project situations with many users, those users may tend to be familiar with only one or two of the projects in the repository. But the projects-as-branch-siblings tends to de-emphasize project individuality and focus on the entire set of projects as a single entity. That\'s a social issue though. We like our originally suggested arrangement for purely practical reasonsit\'s easier to ask about (or modify, or migrate elsewhere) the entire history of a single project when there\'s a single repository path that holds the entire historypast, present, tagged, and branchedfor that project and that project alone." For my own, I tend to agree quite strongly with this and prefer the following layout: /    utils/       calc/          trunk/          tags/          branches/       calendar/          trunk/          tags/          branches/           office/       spreadsheet/          trunk/          tags/          branches/ The reason are simply that its impractical to tag a complete project set when one would want to tag only a specific subset. Let\'s use an example: If project-1 depends on moduleA v1.1 and moduleB v2.3, I don\'t want newer moduleA v2.x to appear in the tags. In fact, when coming back some days/weeks/months later to this tagged release, I would be forced to open the bundle descriptor in the tagged version of project-1 to read the version of moduleA actually required. Moreover, if I have to make a specific backup of this release\'s sources onto a CD, I just want to export this tag without downloading hundreds of megabytes of unrelated stuff. It was just my two cents.', 'questionId': '14397', 'answerId': '610268'}
{'answer': 'This was the solution I came up with http://sourceforge.net/projects/sshtools/ (most error handling omitted for clarity). This is an excerpt from my blog', 'questionId': '14617', 'answerId': '14629'}
{'answer': "Another option is to consider looking at the JSch library. JSch seems to be the preferred library for a few large open source projects, including Eclipse, Ant and Apache Commons HttpClient, amongst others. It supports both user/pass and certificate-based logins nicely, as well as all a whole host  of other yummy SSH2 features. Here's a simple remote file retrieve over SFTP. Error handling is left as an exercise for the reader :-)", 'questionId': '14617', 'answerId': '15937'}
{'answer': 'A nice abstraction on top of Jsch is Apache commons-vfs which offers a virtual filesystem API that makes accessing and writing SFTP files almost transparent. Worked well for us.', 'questionId': '14617', 'answerId': '16851'}
{'answer': "The best solution I've found is Paramiko. There's a Java version.", 'questionId': '14617', 'answerId': '433052'}
{'answer': 'You also have JFileUpload with SFTP add-on (Java too): http://www.jfileupload.com/products/sftp/index.html', 'questionId': '14617', 'answerId': '548977'}
{'answer': 'Try edtFTPj/PRO, a mature, robust SFTP client library that supports connection pools and asynchronous operations. Also supports FTP and FTPS so all bases for secure file transfer are covered.', 'questionId': '14617', 'answerId': '915030'}
{'answer': "I use this SFTP API called Zehon, it's great, so easy to use with a lot of sample code. Here is the site http://www.zehon.com", 'questionId': '14617', 'answerId': '1011405'}
{'answer': 'hierynomus/sshj has a complete implementation of SFTP version 3 (what OpenSSH implements) Example code from SFTPUpload.java', 'questionId': '14617', 'answerId': '2404783'}
{'answer': 'Below is an example using Apache Common VFS:', 'questionId': '14617', 'answerId': '2548590'}
{'answer': 'Here is the complete source code of an example using JSch without having to worry about the ssh key checking.', 'questionId': '14617', 'answerId': '2690861'}
{'answer': 'I found complete working example for SFTP in java using JSCH API  http://kodehelp.com/java-program-for-uploading-file-to-sftp-server/', 'questionId': '14617', 'answerId': '4728735'}
{'answer': 'Andy, to delete file on remote system you need to use (channelExec) of JSch and pass unix/linux commands to delete it.', 'questionId': '14617', 'answerId': '5229795'}
{'answer': 'Though answers above were very helpful, I\'ve spent a day to make them work, facing various exceptions like "broken channel", "rsa key unknown" and "packet corrupt". Below is a working reusable class for SFTP FILES UPLOAD/DOWNLOAD using JSch library. Upload usage: Download usage: The class code:', 'questionId': '14617', 'answerId': '18005722'}
{'answer': ' Apache Commons SFTP library Common java properties file for all the examples serverAddress=111.222.333.444 userId=myUserId password=myPassword remoteDirectory=products/    localDirectory=import/ Upload file to remote server using SFTP Download file from remote server using SFTP Delete a file on remote server using SFTP', 'questionId': '14617', 'answerId': '18975867'}
{'answer': "There is a nice comparison of the 3 mature Java libraries for SFTP: Commons VFS, SSHJ and JSch  To sum up SSHJ has the clearest API and it's the best out of them if you don't need other storages support provided by Commons VFS. Here is edited SSHJ example from github:", 'questionId': '14617', 'answerId': '36422906'}
{'answer': "Can you write a unit test against your FooRepository class just using it as a POJO.  If that works as expected then I'm not familiar with any reason why it would function differently inside a container. I suspect there is something else going on and it will probably be easier to debug if you test it as a POJO.", 'questionId': '14801', 'answerId': '14920'}
{'answer': 'I tried it with a pojo and it seems to work. I had to modify your code a bit. I think your interfaces were a bit off, but I\'m not sure. I assumed "Foo" was a concrete type, but if not I can do some more testing for you. I just wrote a main method to test this. I hope this helps!', 'questionId': '14801', 'answerId': '15279'}
{'answer': 'As a simpler alternative to JNI, try JNA: https://jna.dev.java.net/, may solve this hassle for you and be simpler (assuming it can do what you want).', 'questionId': '15305', 'answerId': '15327'}
{'answer': "I strongly dislike make because of its implicit ruleset and treatment of whitespace.  Personally I would use cpp tasks (http://ant-contrib.sourceforge.net/cpptasks/index.html) to do my C compilation.   They are not as flexible as make but they are also far less complex and it will mean you don't have to burden your developers with learning make.", 'questionId': '15305', 'answerId': '15367'}
{'answer': "I'm working on something similar right now. Be aware that using swig from swig.org is often easier as it generates the stubs to the native library for you. The short answer to your question is that the ant file should run the make file after the java library has already been built, as the native library depends on the swig generated header, which is generated from the java class files. If you are super familiar with ant, and don't want to learn a new system, then http://ant-contrib.sourceforge.net/cpptasks/index.html, also linked by another poster, will let you build c++ in ant.", 'questionId': '15305', 'answerId': '80099'}
{'answer': 'I\'d skip JNI entirely, and use an external program which writes notifications on standard-output. Java can then simply read from the programs output stream and generate whatever event is necessary. JNI is way too much work if all you want is to send simple notifications. Also, on Linux you can simply start "inotifywait" (with some suitable parameters, see "man inotifywait").', 'questionId': '15305', 'answerId': '87578'}
{'answer': 'You could also try the terp C++ tasks at Codemesh. They are not free but they offer a high level of abstraction coupled with the ability to discover/specify the C++ compiler and the ability to iterate over more than one compiler/processor architecture/compiler configuration for multiplatform builds.', 'questionId': '15305', 'answerId': '1121295'}
{'answer': "The convention is to avoid labels altogether. There are very, very few valid reasons to use a label for breaking out of a loop. Breaking out is ok, but you can remove the need to break at all by modifying your design a little. In the example you have given, you would extract the 'Lots of code' sections and put them in individual methods with meaningful names.  Edit: having seen the actual code in question (over here), I think the use of labels is probably the best way to make the code readable. In most cases using labels is the wrong approach, in this instance, I think it is fine.", 'questionId': '15481', 'answerId': '15501'}
{'answer': 'The convetion/best practise would still be not to use them at all and to refactor the code so that is more readable using extract as method.', 'questionId': '15481', 'answerId': '15644'}
{'answer': 'If you have to use them use capitals, this draws attention to them and singles them out from being mistakenly interpreted as "Class" names.  Drawing attention to them has the additional benefit of catching someone\'s eye that will come along and refactor your code and remove them. ;)', 'questionId': '15481', 'answerId': '15658'}
{'answer': "They are kind of the goto of Java - not sure if C# has them. I have never used them in practice, I can't think of a case where avoiding them wouldn't result in much more readable code.  But if you have to- I think all caps is ok. Most people won't use labelled breaks, so when they see the code, the caps will jump out at them and will force them to realise what is going on.", 'questionId': '15481', 'answerId': '15663'}
{'answer': " I know, I should not use labels. But just assume, I have some code, that could gain a lot in readability from labeled breaks, how do I format them. Mo, your premise is wrong. The question shouldn't be 'how do I format them?' Your question should be 'I have code that has a large amount of logic inside loops - how do I make it more readable?' The answer to that question is to move the code into individual, well named functions. Then you don't need to label the breaks at all.", 'questionId': '15481', 'answerId': '15665'}
{'answer': "The convention I've most seen is simply camel case, like a method name... but I've also seen labels prefixed with an underscore or with lab... You can probably sense though from the other answers that you'll be hard-pushed to find a coding standard that says anything other than 'Don't use labels'. The answer then I guess is that you should use whatever style makes sense to you, as long as it's consistent.", 'questionId': '15481', 'answerId': '15894'}
{'answer': 'I don\'t understand where this "don\'t use labels" rule comes from. When doing non-trivial looping logic, the test to break or continue isn\'t always neatly at the end of the surrounding block. Yes, cases like this do happen all the time. What are people suggesting I use instead? A boolean condition like this? Yuck!  Refactoring it as a method doesn\'t alleviate that either: Sure it\'s a little prettier, but it\'s still passing around a superfluous boolean. And if the inner loop modified local variables, refactoring it into a method isn\'t always the correct solution. So why are you all against labels? Give me some solid reasons, and practical alternatives for the above case.', 'questionId': '15481', 'answerId': '15939'}
{'answer': "wrt sadie's code example: You gave  As an example. You make a good point. My best guess would be: But there would be examples where that kind of refactoring doesn't sit correctly with whatever logic you're doing.", 'questionId': '15481', 'answerId': '15944'}
{'answer': 'As labels are so rarely useful, it appears, that there is no clear convention. The Java language specification has one example with labels and they are in non_cap. But since they are so rare, in my opinion it is best, to think twice whether they are really the right tool. And if they are the right tool, make them all caps so that other developers (or yourself later on) realize them as something unusual right away. (as Craig already pointed out)', 'questionId': '15481', 'answerId': '17643'}
{'answer': "Sun's Java code style seem to prefer naming labels in the same way as variables, meaning camel case with the first letter in lower case.", 'questionId': '15481', 'answerId': '17756'}
{'answer': 'Language-level assert keyword.', 'questionId': '15496', 'answerId': '15512'}
{'answer': 'I really like the rewritten Threading API from Java 1.6. Callables are great. They are basically threads with a return value.', 'questionId': '15496', 'answerId': '15533'}
{'answer': 'static imports to "enhance" the language, so you can do nice literal things in type safe ways:  (can also do with maps, arrays, sets).  http://gleichmann.wordpress.com/2008/01/13/building-your-own-literals-in-java-lists-and-arrays/ Taking it further:', 'questionId': '15496', 'answerId': '15538'}
{'answer': 'I think another "overlooked" feature of java is the JVM itself. It is probably the best VM available. And it supports lots of interesting and useful languages (Jython, JRuby, Scala, Groovy). All those languages can easily and seamlessly cooperate. If you design a new language (like in the scala-case) you immediately have all the existing libraries available and your language is therefore "useful" from the very beginning. All those languages make use of the HotSpot optimizations. The VM is very well monitor and debuggable.', 'questionId': '15496', 'answerId': '16528'}
{'answer': 'Double Brace Initialization took me by surprise a few months ago when I first discovered it, never heard of it before. ThreadLocals are typically not so widely known as a way to store per-thread state. Since JDK 1.5 Java has had extremely well implemented and robust concurrency tools beyond just locks, they live in java.util.concurrent and a specifically interesting example is the java.util.concurrent.atomic subpackage that contains thread-safe primitives that implement the compare-and-swap operation and can map to actual native hardware-supported versions of these operations.', 'questionId': '15496', 'answerId': '16838'}
{'answer': 'Not really a feature, but it makes me chuckle that goto is a reserved word that does nothing except prompting javac to poke you in the eye.  Just to remind you that you are in OO-land now.', 'questionId': '15496', 'answerId': '17702'}
{'answer': 'As a starter I really appreciate the JConsole monitoring software in Java 6, it has solved a couple of problems for me already and I keep on finding new uses for it. Apparently the JConsole was there already in Java 5 but I reckon it is improved now and at least working much more stable as of now. JConsole in Java 5: JConsole in Java 5 JConsole in Java 6: JConsole in Java 6 And while you are at it, have a good look at the other tools in the series: Java 6 troubleshooting tools', 'questionId': '15496', 'answerId': '17769'}
{'answer': 'It\'s not exactly hidden, but reflection is incredibly useful and powerful.  It is great to use a simple Class.forName("...").newInstance() where the class type is configurable.  It\'s easy to write this sort of factory implementation.', 'questionId': '15496', 'answerId': '35084'}
{'answer': "How about covariant return types which have been in place since JDK 1.5?  It is pretty poorly publicised, as it is an unsexy addition, but as I understand it, is absolutely necessary for generics to work.   Essentially, the compiler now allows a subclass to narrow the return type of an overridden method to be a subclass of the original method's return type.  So this is allowed: You can call the subclass's values method and obtain a sorted thread safe Set of Strings without having to down cast to the ConcurrentSkipListSet.", 'questionId': '15496', 'answerId': '35108'}
{'answer': 'Functors are pretty cool. They are pretty close to a function pointer, which everyone is usually quick to say is impossible in Java. Functors in Java', 'questionId': '15496', 'answerId': '35124'}
{'answer': 'For most people I interview for Java developer positions labeled blocks are very surprising. Here is an example: Who said goto in java is just a keyword? :)', 'questionId': '15496', 'answerId': '39433'}
{'answer': 'I was aware that Java 6 included scripting support, but I just recently discovered jrunscript,  which can interpret and run JavaScript (and, one presumes, other scripting languages such as Groovy) interactively, sort of like the Python shell or irb in Ruby', 'questionId': '15496', 'answerId': '40967'}
{'answer': "Dynamic proxies (added in 1.3) allow you to define a new type at runtime that conforms to an interface.  It's come in handy a surprising number of times.", 'questionId': '15496', 'answerId': '41023'}
{'answer': "Joint union in type parameter variance: For example, if you wanted to take a parameter that's both Comparable and a Collection: This contrived method returns true if the two given collections are equal or if either one of them contains the given element, otherwise false. The point to notice is that you can invoke methods of both Comparable and Collection on the arguments b1 and b2.", 'questionId': '15496', 'answerId': '42686'}
{'answer': 'I know this was added in release 1.5 but the new enum type is a great feature.  Not having to use the old "int enum pattern" has greatly helped a bunch of my code.  Check out JLS 8.9 for the sweet gravy on your potatoes!', 'questionId': '15496', 'answerId': '44054'}
{'answer': "final for instance variables:  Really useful for multi-threading code and it makes it a lot easier to argue about the instance state and correctness. Haven't seen it a lot in industry context and often not thought in java classes. static {something;}:  Used to initialize static members (also I prefer a static method to do it (because it has a name). Not thought.", 'questionId': '15496', 'answerId': '47347'}
{'answer': 'I was surprised by instance initializers the other day.  I was deleting some code-folded methods and ended up creating multiple instance initializers : Executing the main method will display:  I guess these would be useful if you had multiple constructors and needed common code They also provide syntactic sugar for initializing your classes:', 'questionId': '15496', 'answerId': '47493'}
{'answer': "Joshua Bloch's new Effective Java is a good resource.", 'questionId': '15496', 'answerId': '49701'}
{'answer': ' Local classes. Instantiating Java inner-classes from outside of the containing class.', 'questionId': '15496', 'answerId': '50107'}
{'answer': 'Allowing methods and constructors in enums surprised me. For example: You can even have a "constant specific class body" which allows a specific enum value to override methods. More documentation here.', 'questionId': '15496', 'answerId': '52914'}
{'answer': "Not really part of the Java language, but the javap disassembler which comes with Sun's JDK is not widely known or used.", 'questionId': '15496', 'answerId': '54762'}
{'answer': 'Self-bound generics: http://www.artima.com/weblogs/viewpost.jsp?thread=136394', 'questionId': '15496', 'answerId': '55221'}
{'answer': 'JDK 1.6_07+ contains an app called VisualVM (bin/jvisualvm.exe) that is a nice GUI on top of many of the tools.  It seems more comprehensive than JConsole.', 'questionId': '15496', 'answerId': '55616'}
{'answer': 'The type params for generic methods can be specified explicitly like so:', 'questionId': '15496', 'answerId': '55679'}
{'answer': 'It took them long enough to add support for this, System Tray', 'questionId': '15496', 'answerId': '64136'}
{'answer': 'The asList method in java.util.Arrays allows a nice combination of varargs, generic methods and autoboxing:', 'questionId': '15496', 'answerId': '64164'}
{'answer': 'Some control-flow tricks, finally around a return statement: The rules for definite assignment will check that a final variable is always assigned through a simple control-flow analysis:', 'questionId': '15496', 'answerId': '64274'}
{'answer': "JVisualVM from the bin directory in the JDK distribution. Monitoring and even profiling any java application, even one you didn't launch with any special parameters. Only in recent versions of the Java 6SE JDK.", 'questionId': '15496', 'answerId': '64369'}
{'answer': 'Transfer of control in a finally block throws away any exception.  The following code does not throw RuntimeException -- it is lost. From http://jamesjava.blogspot.com/2006/03/dont-return-in-finally-clause.html', 'questionId': '15496', 'answerId': '64618'}
{'answer': 'The addition of the for-each loop construct in 1.5.  I <3 it. And can be used in nested instances: The for-each construct is also applicable to arrays, where it hides the index variable rather than the iterator. The following method returns the sum of the values in an int array:  Link to the Sun documentation', 'questionId': '15496', 'answerId': '75519'}
{'answer': '"const" is a keyword, but you can\'t use it. I guess the compiler writers thought it might be used in the future and they\'d better keep it reserved.', 'questionId': '15496', 'answerId': '76317'}
{'answer': "Not really a feature, but an amusing trick I discovered recently in some Web page: is a valid Java program (although it generates a warning). If you don't see why, see Gregory's answer! ;-) Well, syntax highlighting here also gives a hint!", 'questionId': '15496', 'answerId': '82236'}
{'answer': 'My favorite: dump all thread stack traces to standard out. windows: CTRL-Break in your java cmd/console window unix:  kill -3 PID', 'questionId': '15496', 'answerId': '83113'}
{'answer': "The power you can have over the garbage collector and how it manages object collection is very powerful, especially for long-running and time-sensitive applications. It starts with weak, soft, and phantom references in the java.lang.ref package. Take a look at those, especially for building caches (there is a java.util.WeakHashMap already). Now dig a little deeper into the ReferenceQueue and you'll start having even more control. Finally grab the docs on the garbage collector itself and you'll be able to control how often it runs, sizes of different collection areas, and the types of algorithms used (for Java 5 see http://java.sun.com/docs/hotspot/gc5.0/gc_tuning_5.html).", 'questionId': '15496', 'answerId': '85703'}
{'answer': 'Using this keyword for accessing fields/methods of containing class from an inner class. In below, rather contrived example, we want to use sortAscending field of container class from the anonymous inner class. Using ContainerClass.this.sortAscending instead of this.sortAscending does the trick.', 'questionId': '15496', 'answerId': '101659'}
{'answer': 'This is not exactly "hidden features" and not very useful, but can be extremely interesting in some cases: Class sun.misc.Unsafe - will allow you to implement direct memory management in Java (you can even write self-modifying Java code with this if you try a lot):', 'questionId': '15496', 'answerId': '101851'}
{'answer': 'Since no one else has said it yet (I Think) my favorite feature is Auto boxing!', 'questionId': '15496', 'answerId': '107067'}
{'answer': "How about Properties files in your choice of encodings?  Used to be, when you loaded your Properties, you provided an InputStream and the load() method decoded it as ISO-8859-1.  You could actually store the file in some other encoding, but you had to use a disgusting hack like this after loading to properly decode the data:  But, as of JDK 1.6, there's a load() method that takes a Reader instead of an InputStream, which means you can use the correct encoding from the beginning (there's also a store() method that takes a Writer).  This seems like a pretty big deal to me, but it appears to have been snuck into the JDK with no fanfare at all.  I only stumbled upon it a few weeks ago, and a quick Google search turned up just one passing mention of it.", 'questionId': '15496', 'answerId': '129378'}
{'answer': 'If you do a lot of JavaBean development and work with property change support, you generally wind up writing a lot of setters like this: I recently stumbled across a blog that suggested a more terse implementation of this that makes the code a lot easier to write: It actually simplified things to the point where I was able to adjust the setter template in Eclipse so the method gets created automatically.', 'questionId': '15496', 'answerId': '137600'}
{'answer': 'String Parameterised Class Factory. Load a resource (property file, xml, xslt, image etc) from deployment jar file.', 'questionId': '15496', 'answerId': '139379'}
{'answer': 'Something that really surprised me was the custom serialization mechanism. While these methods are private!!, they are "mysteriously" called by the JVM during object serialization. This way you can create your own custom serialization to make it more "whatever" (safe, fast, rare, easy etc. )  This is something that really should be considering if a lot of information has to be passed through nodes. The serialization mechanism may be changed to send the half of data.  There are many times when the bottlenecks are not in the platform, but in the amount of that sent trough the wire, may save you thousands of dlls in hardware. Here is an article. http://java.sun.com/developer/technicalArticles/Programming/serialization/', 'questionId': '15496', 'answerId': '142676'}
{'answer': 'You can declare a class in a method:', 'questionId': '15496', 'answerId': '146121'}
{'answer': 'Annotation Processing API from Java 6 looks very perspective for code generation and static code verification.', 'questionId': '15496', 'answerId': '148282'}
{'answer': "final initialization can be postponed. It makes sure that even with a complex flow of logic return values are always set.  It's too easy to miss a case and return null by accident.  It doesn't make returning null impossible, just obvious that it's on purpose:", 'questionId': '15496', 'answerId': '169064'}
{'answer': 'Some years ago when I had to do Java (1.4.x) I wanted an eval() method and Suns javac is (was?) written in Java so it was just to link tools.jar and use that with some glue-code around it.', 'questionId': '15496', 'answerId': '170999'}
{'answer': "Java processing does a neat trick on variable definition if you do not use a default initializer. This will give you an error at compile time that you have a path where X isn't properly defined.  This has helped me a few times, and I've taken to considering default initialization like these: to be a bad pattern since it blocks this helpful checking. That said, sometimes it's difficult to get around--I have had to go back and edit in the =null when it made sense as a default, but I never put it in on the first pass any more.", 'questionId': '15496', 'answerId': '175511'}
{'answer': "You can access final local variables and parameters in initialization blocks and methods of local classes. Consider this: A bit like a closure, isn't it?", 'questionId': '15496', 'answerId': '229899'}
{'answer': 'The value of: is true. (From Java Puzzlers)', 'questionId': '15496', 'answerId': '238827'}
{'answer': "A couple of people have posted about instance initializers, here's a good use for it: Is a quick way to initialize maps if you're just doing something quick and simple. Or using it to  create a   quick swing frame prototype: Of course it can be abused:", 'questionId': '15496', 'answerId': '238837'}
{'answer': 'As of Java 1.5, Java now has a much cleaner syntax for writing functions of variable arity. So, instead of just passing an array, now you can do the following bars is automatically converted to array of the specified type. Not a huge win, but a win nonetheless.', 'questionId': '15496', 'answerId': '259287'}
{'answer': 'Javadoc - when written properly (not always the case with some developers unfortunately), it gives you a clear, coherent description of what code is supposed to do, as opposed to what it actually does. It can then be turned into a nice browsable set of HTML documentation. If you use continuous integration etc it can be generated regularly so all developers can see the latest updates.', 'questionId': '15496', 'answerId': '284614'}
{'answer': 'SwingWorker for easily managing user interface callbacks from background threads.', 'questionId': '15496', 'answerId': '306721'}
{'answer': 'Instances of the same class can access private members of other instances:', 'questionId': '15496', 'answerId': '321782'}
{'answer': "Apparently with some debug builds there is an option which dumps the native (JIT) assembly code from HotSpot: http://weblogs.java.net/blog/kohsuke/archive/2008/03/deep_dive_into.html Unfortunately I wasn't able to find the build via the link in that post, if anyone can find a more precise URL, I'd love to play with it.", 'questionId': '15496', 'answerId': '336346'}
{'answer': 'My vote goes to java.util.concurrent with its concurrent collections and flexible executors allowing among others thread pools, scheduled tasks and coordinated tasks. The DelayQueue is my personal favorite, where elements are made available after a specified delay. java.util.Timer and TimerTask may safely be put to rest. Also, not exactly hidden but in a different package from the other classes related to date and time. java.util.concurrent.TimeUnit is useful when converting between nanoseconds, microseconds, milliseconds and seconds. It reads a lot better than the usual someValue * 1000 or someValue / 1000.', 'questionId': '15496', 'answerId': '341823'}
{'answer': 'The strictfp keyword. (I never saw it used in a real application though :) You can get the class for primitive types by using the following notation: int.class,  float.class, etc. Very useful when doing reflection. Final arrays can be used to "return" values from anonymous inner classes (warning, useless example below):', 'questionId': '15496', 'answerId': '404567'}
{'answer': "Haven't seen anyone mention instanceof being implemented in such a way that checking for null is not necessary. Instead of: just use:", 'questionId': '15496', 'answerId': '457863'}
{'answer': "I enjoyed javadoc's taglet and doclet that enable us to customize javadoc output. JDK tools: jstat, jstack etc.", 'questionId': '15496', 'answerId': '492663'}
{'answer': "The next-generation Java plugin found in Java 1.6 Update 10 and later has some very neat features: Pass java_arguments parameter to pass arguments to the JVM that is created. This allows you to control the amount of memory given to the applet. Create separate class loaders or even separate JVM's for each applet. Specify the JVM version to use. Install partial Java kernels in cases where you only need a subset of the full Java libraries' functionality. Better Vista support. Support (experimental) to drag an applet out of the browser and have it keep running when you navigate away. Many other things that are documented here: http://jdk6.dev.java.net/plugin2/ More from this release here: http://jdk6.dev.java.net/6u10ea.html", 'questionId': '15496', 'answerId': '511975'}
{'answer': 'You can build a string sprintf-style using String.format(). You can of course also use special specifiers to modify the output. More here: http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax', 'questionId': '15496', 'answerId': '512216'}
{'answer': 'with static imports you can do cool stuff like:', 'questionId': '15496', 'answerId': '512368'}
{'answer': 'I like the static import of methods. For example create the following util class: Then use it like this. Static Imports works with any class, even Math...', 'questionId': '15496', 'answerId': '556664'}
{'answer': 'List.subList returns a view on the original list A documented but little known feature of lists. This allows you to work with parts of a list with changes mirrored in the original list. List subList(int fromIndex, int toIndex)  "This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList."', 'questionId': '15496', 'answerId': '556756'}
{'answer': 'i personally discovered java.lang.Void very late -- improves code readability in conjunction with generics, e.g. Callable<Void>', 'questionId': '15496', 'answerId': '556772'}
{'answer': 'You can use enums to implement an interface. EDIT: Years later.... I use this feature here https://github.com/peter-lawrey/Java-Thread-Affinity/blob/master/src/main/java/vanilla/java/affinity/AffinityStrategies.java By using an interface, developers can define their own strategies. Using an enum means I can define a collection (of five) built in ones.', 'questionId': '15496', 'answerId': '562852'}
{'answer': 'Intersection types allow you to (kinda sorta) do enums that have an inheritance hierarchy. You can\'t inherit implementation, but you can delegate it to a helper class. This is useful when you have a number of different enums that implement some sort of pattern. For instance, a number of pairs of enums that have a parent-child relationship. You can write generic methods that say "Ok, given an enum value thats a parent of some other enum values, what percentage of all the possible child enums of the child type have this particular parent value as their parent?", and have it all typesafe and done without casting. (eg: that "Sea" is 33% of all possible vehicles, and "Green" 20% of all possible Pastels). The code look like this. It\'s pretty nasty, but there are ways to make it better. Note in particuar that the "leaf" classes themselves are quite neat - the generic classes have declarations that are horribly ugly, but you only write them onece. Once the generic classes are there, then using them is easy.', 'questionId': '15496', 'answerId': '574522'}
{'answer': 'Read "Java Puzzlers" by Joshua Bloch and you will be both enlightened and horrified.', 'questionId': '15496', 'answerId': '766774'}
{'answer': 'Source code URLs. E.g. here is some legal java source code: (Yes, it was in Java Puzzlers. I laughed...)', 'questionId': '15496', 'answerId': '851055'}
{'answer': "People are sometimes a bit surprised when they realize that it's possible to call private methods and access/change private fields using reflection... Consider the following class: Executing this program... ...will yield the following output:", 'questionId': '15496', 'answerId': '945115'}
{'answer': "Part feature, part bother: Java's String handling to make it 'appear' a native Type (use of operators on them, +, +=) Being able to write: is very convenient, but is simply syntactic sugar for (ie gets compiled to): ergo an Object instantiation and 2 method invocations for a simple concatenation. Imagine Building a long String inside a loop in this manner!? AND all of StringBuffer's methods are declared synchronized. Thankfully in (I think) Java 5 they introduced StringBuilder which is identical to StringBuffer without the syncronization. A loop such as: can (should) be rewritten in your code as: and will run approximately 80+% faster than the original loop! (up to 180% on some benchmarks I have run)", 'questionId': '15496', 'answerId': '949397'}
{'answer': "Perhaps the most surprising hidden feature is the sun.misc.Unsafe class. http://www.docjar.com/html/api/ClassLib/Common/sun/misc/Unsafe.java.html You can; Create an object without calling a constructor. Throw any exception even Exception without worrying about throws clauses on methods. (There are other way to do this I know) Get/set randomly accessed fields in an object without using reflection. allocate/free/copy/resize a block of memory which can be long (64-bit) in size. Obtain the location of fields in an object or static fields in a class. independently lock and unlock an object lock. (like synchronize without a block) define a class from provided byte codes. Rather than the classloader determining what the byte code should be. (You can do this with reflection as well) BTW: Incorrect use of this class will kill the JVM. I don't know which JVMs support this class so its not portable.", 'questionId': '15496', 'answerId': '983366'}
{'answer': 'You can define an anonymous subclass and directly call a method on it even if it implements no interfaces.', 'questionId': '15496', 'answerId': '1025199'}
{'answer': 'An optimization trick that makes your code easier to maintain and less susceptible to a concurrency bug. $ time java Slow real    0m15.397s $ time java Slow real    0m20.012s $ time java Slow real    0m18.645s Average: 18.018s $ time java Fast real    0m12.003s $ time java Fast real    0m9.840s $ time java Fast real    0m9.686s Average: 10.509s It requires more bytecodes to reference a class-scope variable than a method-scope variable. The addition of a method call prior to the critical loop adds little overhead (and the call might be inlined by the compiler anyway). Another advantage to this technique (always using accessors) is that it eliminates a potential bug in the Slow class. If a second thread were to continually reset the value of i to 0 (by calling slow.setI( 0 ), for example), the Slow class could never end its loop. Calling the accessor and using a local variable eliminates that possibility. Tested using J2SE 1.6.0_13 on Linux 2.6.27-14.', 'questionId': '15496', 'answerId': '1025306'}
{'answer': 'Java Bean property accessor methods do not have to start with "get" and "set".   Even Josh Bloch gets this wrong in Effective Java.', 'questionId': '15496', 'answerId': '1027744'}
{'answer': 'I just (re)learned today that $ is a legal name for a method or variable in Java.  Combined with static imports it can make for some slightly more readable code, depending on your view of readable: http://garbagecollected.org/2008/04/06/dollarmaps/', 'questionId': '15496', 'answerId': '1191782'}
{'answer': "It has already been mentioned that a final array can be used to pass a variable out of the anonymous inner classes. Another, arguably better and less ugly approach though is to use AtomicReference (or AtomicBoolean/AtomicInteger/) class from java.util.concurrent.atomic package. One of the benefits in doing so is that these classes also provide such methods as compareAndSet, which may be useful if you're creating several threads which can modify the same variable. Another useful related pattern: In this particular example we could have simply waited on message for it to become non-null, however null may often be a valid value and then you need to use a separate flag to finish the wait. waitMessageHandler() above is yet another useful pattern: it sets up a handler somewhere, then starts executing the Interruptible which may throw an exception, and then removes the handler in the finally block, like so: Here I assume that the messageHandler's (if it's not null) handleMessage() method is called by another thread when a message is received. messageHandler must not be simply of MessageHandler type: that way you will synchronize on a changing variable, which is clearly a bug. Of course, it doesn't need to be InterruptedException, it could be something like IOException, or whatever makes sense in a particular piece of code.", 'questionId': '15496', 'answerId': '1276933'}
{'answer': 'Comma & array. It is legal syntax: String s[] = {  "123" ,   "234" , };', 'questionId': '15496', 'answerId': '1305163'}
{'answer': 'Most people does not know they can clone an array.', 'questionId': '15496', 'answerId': '1305616'}
{'answer': "Use StringBuilder instead of StringBuffer when you don't need synchronized management included in StringBuilder. It will increase the performance of your application. Improvements for Java 7 would be even better than any hidden Java features: Diamond syntax: Link Don't use those infinite <> syntax at instanciation: Strings in switch: Link Use String in switch, instead of old-C int: Automatic Resource Management Link This old code: can now be replaced by this much simpler code:", 'questionId': '15496', 'answerId': '1674342'}
{'answer': 'You can switch(this) inside method definitions of enum classes.  Made me shout "whut!" loudly when I discovered that this actually works.', 'questionId': '15496', 'answerId': '1804983'}
{'answer': "Actually, what I love about Java is how few hidden tricks there are. It's a very obvious language. So much so that after 15 years, almost every one I can think of is already listed on these few pages. Perhaps most people know that Collections.synchronizedList() adds synchronization to a list. What you can't know unless you read the documentation is that you can safely iterate on the elements of that list by synchronizing on the list object itself. CopyOnWriteArrayList might be unknown to some, and Future represents an interesting way to abstract multithreaded result access. You can attach to VMs (local or remote), get information on GC activity, memory use, file descriptors and even object sizes through the various management, agent and attach APIs. Although TimeUnit is perhaps better than long, I prefer Wicket's Duration class.", 'questionId': '15496', 'answerId': '1805139'}
{'answer': 'Oh, I almost forgot this little gem. Try this on any running java process: jmap -histo:live PID You will get a histogram of live heap objects in the given VM. Invaluable as a quick way to figure certain kinds of memory leaks. Another technique I use to prevent them is to create and use size-bounded subclasses of all the collections classes. This causes quick failures in out-of-control collections that are easy to identify.', 'questionId': '15496', 'answerId': '1805211'}
{'answer': 'A feature with which you can display splash screens for your Java Console Based Applications. Use the command line tool java or javaw with the option -splash eg: the content of C:\\myfolder\\myimage.png will be displayed at the center of your screen, whenever you execute the class "com.my.package.MyClass"', 'questionId': '15496', 'answerId': '1807455'}
{'answer': 'When working in Swing I like the hidden Ctrl - Shift - F1 feature. It dumps the component tree of the current window. (Assuming you have not bound that keystroke to something else.)', 'questionId': '15496', 'answerId': '1834084'}
{'answer': 'Surprises me that an interface can extend multiple interfaces but class can extend only one class.', 'questionId': '15496', 'answerId': '1838200'}
{'answer': 'Classpath wild cards since Java 6. Instead of See http://java.sun.com/javase/6/docs/technotes/tools/windows/classpath.html', 'questionId': '15496', 'answerId': '1859579'}
{'answer': 'Shutdown Hooks. This allows to register a thread that will be created immediatly but started only when the JVM ends ! So it is some kind of "global jvm finalizer", and you can make useful stuff in this thread (for example shutting down java ressources like an embedded hsqldb server). This works with System.exit(), or with CTRL-C / kill -15 (but not with kill -9 on unix, of course). Moreover it\'s pretty easy to set up.', 'questionId': '15496', 'answerId': '1918613'}
{'answer': 'Identifiers can contain foreign language chars like umlauts: instead of writing: someone could write:', 'questionId': '15496', 'answerId': '2034744'}
{'answer': 'Java 6 (from Sun) comes with an embedded JavaScrip interpreter. http://java.sun.com/javase/6/docs/technotes/guides/scripting/programmer_guide/index.html#jsengine', 'questionId': '15496', 'answerId': '2063863'}
{'answer': "Didn't read about this read more about this by searching java's pool of integer (internal 'cache' from -128 to 127 for autoboxing) or look into Integer.valueOf", 'questionId': '15496', 'answerId': '2121023'}
{'answer': 'You can override a method and have the superclass constructor call it (this may come as a surprise to C++ programmers.) Example', 'questionId': '15496', 'answerId': '2130784'}
{'answer': "Here's my list. My favourite (and scariest) hidden feature is that you can throw checked exceptions from methods that are not declaring to throw anything. Also you may like to know you can throw 'null'... Guess what this prints: And, guess what this returns:  the above should not surprise good developers. In Java you can declare an array in following valid ways: So following Java code is perfectly valid: Is there any valid reason why, instead, the following code shouldn't be valid? I think, that the above syntax would have been a valid substitute to the varargs introduced in Java 5. And, more coherent with the previously allowed array declarations.", 'questionId': '15496', 'answerId': '2131355'}
{'answer': 'Every class file starts with the hex value 0xCAFEBABE to identify it as valid JVM bytecode. (Explanation)', 'questionId': '15496', 'answerId': '2294266'}
{'answer': 'You can add runtime checks of generic types using a Class<T> object, this comes in handy when a class is being created in a configuration file somewhere and there is no way to add a compile time check for the generic type of the class.  You dont want the class to blow up at runtime if the app happens to be configured wrong and you dont want all you classes riddled with instance of checks.', 'questionId': '15496', 'answerId': '2372429'}
{'answer': 'I was surprised when I first noticed the Ternary-Operator which equals a simple if-then-else statement:', 'questionId': '15496', 'answerId': '2607251'}
{'answer': 'I can add Scanner object. It is the best for parsing.', 'questionId': '15496', 'answerId': '3004405'}
{'answer': "You can define and invoke methods on anonymous inner classes. Well they're not that hidden, but very few people know they can be used to define a new method in a class and invoke it  like this: Probably is not very common because it not very useful either, you can call the method it only when you define it ( or via reflection )", 'questionId': '15496', 'answerId': '3089101'}
{'answer': 'This is not really a hidden feature but it did give me a big surprise when I saw this compiled fine: the reason why it compiles is that the line http://www.google.com the "http:" part is treated by the compiler as a label and the rest of the line is a comment. So, if you want to write some bizzare code  (or obfuscated code), just put alot of http addresses there. ;-)', 'questionId': '15496', 'answerId': '3130075'}
{'answer': 'The C-Style printf() :) Output: 3 2.718282 2.7183 Binary Search (and it\'s return value) Similar to C#, if \'2\' is not found in the array, it returns a negative value but if you take the 1\'s Complement of the returned value you actually get the position where \'2\' can be inserted. In the above example, position = -2, ~position = 1 which is the position where 2 should be inserted...it also lets you find the "closest" match in the array. I thinks its pretty nifty... :)', 'questionId': '15496', 'answerId': '3147440'}
{'answer': 'Not so hidden, but interesting. You can have a "Hello, world" without main method ( it throws NoSuchMethodError thought )  Originally posted by  RusselW on Strangest language feature', 'questionId': '15496', 'answerId': '3181454'}
{'answer': "This question actually seems to be about Java vs. C++ performance, and that's not the object orientation so much as running on a virtual machine with garbage collection and such. This whitepaper on Java vs. C++ performance might be worth a read.", 'questionId': '15649', 'answerId': '15653'}
{'answer': "Well, flyweight is a ridiculous pattern to use in a word processor.  IIRC, they had each character being referenced as a object [note: it was for each glyph, which is still crazy because your OS will happily draw that for you].  With a pointer being wider than a character and all the processing associated with indirection, you'd be mad to use that particular pattern that way in a word processor. If you're interested in the design of word processors, I found an article that doesn't address patterns but does look at some of the data structures underlying word processor design and design considerations. Try to remember that design patterns are there to make your life easier, not for you to be pure.  There has to be a reason to use a pattern, it has to offer some benefit.", 'questionId': '15649', 'answerId': '15660'}
{'answer': "Flyweight really is just a way of conserving resources in situations where there are thousands of objects with intrinsic shared state, so it could be useful in higher level languages than C/C++. Maybe the GoF's example using glyphs in a document was not the best choice to illustrate this pattern. I think there's a lot more to building a high performance word processor than just these basic patterns though - not sure whether there is anything in GoF that rules out being able to successfully do this. Generally, Visual Studio (VS) is more advanced and performs significantly better than Eclipse - at least, the versions of VS that I have seen. Eclipse is one of the most impressive Java applications out there though, it runs quite well on more recent machines with lots of RAM.", 'questionId': '15649', 'answerId': '15667'}
{'answer': ' One of the things you have to remember was that the GoF book was written in the early 90s, when the prevalent OSes did not have extensive graphic libraries. Even Windows was not yet an OS at that time. IIRC GoF was released in 1994. Even in 1994 Windows 95 Beta was available (and running on my 486DX33) and Windows 3.x had been around since roughly 1990.', 'questionId': '15649', 'answerId': '15750'}
{'answer': "Eclipse + netbeans + IntelliJ all are written pretty much all in java or something that runs on the JVM (not C++). In at least 2 of those IDEs I have spent some time with the editor code, so I can assure you its all java (and its not easy either).  VS 2005 was my last experience of visual studio, and even then I thought eclipse was much more responsive (intelliJ doubly so given time to warm up and index).  Not sure how thats relevant but thats my experience. But I am surprised visual studio is still today written in C++ - I would think that it would be in Microsoft's interest to use C# - if nothing else it would really push its performance hard, nothing like eating your own dog food !", 'questionId': '15649', 'answerId': '15796'}
{'answer': 'The point of GoF and patterns in general is to talk about how to do things "right" as in correct, not necessarily "right" as in right for the circumstances. Where performance is an issue, and you find that no named pattern gives adequate performance, then perhaps you can justify going your own way. But a good knowledge of patterns gives you a "sensible default" and will probably mean that you sacrifice clarity / SoC / etc only so much as is necessary to give adequate performance. Feeling that you are "deviating" from the norm encourages you to a) think twice, and b) comment the non-idiomatic code well. Patterns are vital knowledge, but nothing is gospel and you must always apply judgement. Having said all that - I can\'t think of any reason why you couldn\'t write a decent text editor using patterns and a modern JDK', 'questionId': '15649', 'answerId': '193441'}
{'answer': 'Yes, current machines are fast enough and have enough memory that that is possible. If you take a look at Squeak, you see a Smalltalk IDE written in Smalltalk, significantly slower than Java, but still fast enough. HD video editing on the other hand is something that currently has a need for some lower-level support.', 'questionId': '15649', 'answerId': '359765'}
{'answer': 'Before you start coding, plan out your database schema - everything else will flow from that. Getting the database reasonably correct early on will save you time and headaches later.', 'questionId': '15690', 'answerId': '15698'}
{'answer': 'Do you know much about OOP?  If so, look into Spring and Hibernate to keep your implementation clean and orthogonal.  If you get that, you should find TDD a good way to keep your design compact and lean, especially since you have "automated testing" up and running. UPDATE: Looking at the first slew of answers, I couldn\'t disagree more.  Particularly in the Java space, you should find plenty of mentors/resources on working out your application with Objects, not a database-centric approach.  Database design is typically the first step for Microsoft folks (which I do daily, but am in a recovery program, er, Alt.Net).  If you keep the focus on what you need to deliver to a customer and let your ORM figure out how to persist your objects, your design should be better.', 'questionId': '15690', 'answerId': '15702'}
{'answer': "I do it the other way around. I find that doing it database-schema-first gets the system stuck in a data-driven-design that is difficult to abstract from persistence. We try to do domain model designs first and then base the database schema on those. And then there's the infrastructure design: the team should settle on conventions on how to structure the program first and foremost. And then we work together to agree first on a design for the common functionality of the system (e.g., things everyone needs like persistence, logging, etc.). This becomes the framework of the system. We all work on that together first before we split the rest of the functionalities amongst ourselves.", 'questionId': '15690', 'answerId': '15710'}
{'answer': "The main thing is being able to abstract the complexity of the system so that you don't get bogged down by it as soon as you start off. First read the spec like a story (skimming through it). Don't stop at every requirement to analyze it right there and then. This will allow you to get an overall picture of the system without too many details. At this point you would start identifying the major functional components of the system. Start putting these down (use a mindmap tool if you like). Then take each component and start exploding it (and tying each detail with requirements in the spec document). Do this for all components, till you have covered all requirements. Now, you should start looking at relationships between the components, and whether there are repetitions of features or functions across the various components (which you can then pull out to create utility components, or such). Around now, you would have a good detailed map of your requirements in your mind. NOW, you should think of designing the database, ER diagrams, Class Design, DFDs, deployment, etc. The problem with doing the last step first is that you can get bogged down in the complexity of your system without really gaining an overall understanding in the first place.", 'questionId': '15690', 'answerId': '15783'}
{'answer': 'I also disagree about starting with the database.  The DB is simply an artifact of how your business objects are persisted.  I don\'t know of an equivalent in Java, but .Net has stellar tools such as SubSonic that allow your DB design to stay fluid as you iterate through your business objects design.  I\'d say first and foremost (even before deciding on what technologies to introduce) focus on the process and identify your nouns and verbs ... then build out from those abstractions.  Hey, it really does work in the "real world", just like OOP 101 taught you!', 'questionId': '15690', 'answerId': '15785'}
{'answer': "This sounds very much like my first job. Straight out of university, I was asked to design the database and business logic layer, while other people would take care of the UI. Meanwhile the boss was looking over my shoulder, unwilling to let go of what used to be his baby and was now mine, and poking his finger in it. Three years later, developers were fleeing the company and we were still X months away from actually selling anything. The big mistake was in being too ambitious. If this is your first job, you will make mistakes and you will need to change how things work long after you've written them. We had all sorts of features that made the system more complicated than it needed to be, both on the database level and in the API that it presented to other developers. In the end, the whole thing was just far too complicated to support all at once and just died. So my advice: If you're not sure about taking on such a big job single-handed, don't. Tell your employers, and get them to find or hire somebody for you to work with who can help you out. If people need to be added to the project, then it should be done near the start rather than after stuff starts going wrong. Think very carefully about what the product is for, and to boil it down to the simplest set of requirements you can think of. If the people giving you the spec aren't technical, try to see past what they've written to what will actually work and make money. Talk to customers and salespeople, and understand the market. There's no shame in admitting you're wrong. If it turns out that the entire system needs to be rewritten, because you made some mistake in your first version, then it's better to admit this as soon as possible so you can get to it. Correspondingly, don't try to make an architecture that can anticipate every possible contingency in your first version, because you don't know what every contingency is and will just get it wrong. Write once with an eye to throwing away and starting again - you may not have to, the first version may be fine, but admit it if you do.", 'questionId': '15690', 'answerId': '15956'}
{'answer': "Split the big system to smaller pieces. And don't think that it's so complex, because it usually isn't. By thinking too complex it just ruins your thoughts and eventually the design. Some point you just realize that you could do the same thing easier, and then you redesign it. Atleast this has been my major mistake in designing. Keep it simple!", 'questionId': '15690', 'answerId': '15969'}
{'answer': "It has been my experience that Java applications (.NET also) that consider the database last are highly likely to perform poorly when placed into a corporate environment.  You need to really think about your audience.  You didn't say if it was a web app or not.  Either way the infrastructure that you are implementing on is important when considering how you handle your data. No matter what methodology you consider, how you get and save your data and it's impact on performance should be right up there as one of your #1 priorities.", 'questionId': '15690', 'answerId': '16002'}
{'answer': 'I found very insightful ideas about starting a new large project, based on common good practices Test Driven Development and pragmatic approach   in the book Growing Object-Oriented Software, Guided by Tests. It is still under development, but first 3 chapters may be what You are looking for and IMHO worth reading.', 'questionId': '15690', 'answerId': '17004'}
{'answer': 'I\'d suggest thinking about how this application will be used. How will future users work with it? I\'m sure you know at least a few things about what this application needs to handle, but my first advice is "think of the user and what he or she needs". Draw it up on plain paper, thinking of where to section off the code. Remeber not to mix logic with GUI code (common error). This way you will be set to extend your applications reach in the future to servlets and/or applets or whatever platform comes along. Section in layers so that you can respond to large changes faster without rebuilding everything. Layers should not see any other layers than their closest neighbouring layers. Begin with true core functionallity. All that time consuming fluff (that will make your project 4 weeks late), wont matter much to the wast majority of users. It can be added later once you are sure you can deliver on time. Btw. Even though this has nothing to do with design I\'d just like to say that you won\'t deliver on time. Make a realistic estimate on time consumption and then double it :-) I assume here that you will not be alone in this project and that people will come and go as the project progresses. You may need to train people midway through the project, people go on holiday / need surgery etc.', 'questionId': '15690', 'answerId': '226198'}
{'answer': "I've never used (or even heard of) Stripes. Regardless, there's a book from The Pragmatic Bookshelf called Stripes: ...and Java web development is fun again that may be worth checking out. You could also check out the Stripes mailing list archive.", 'questionId': '15695', 'answerId': '16385'}
{'answer': "We considered it when we were looking at open source frameworks.  But we saw the same thing your did that there really just isn't much support or information for it.  You should always weight the community support factor surrounding open source projects before picking one. (which is what you are doing here)  :)", 'questionId': '15695', 'answerId': '16433'}
{'answer': "I recommend checking out the book referenced by jko: a book from The Pragmatic Bookshelf called Stripes: ...and Java web development is fun again Whilst still in 'beta' the book covers everything very well. Another good place to start is this ONJava article.  I have used Stripes on a few projects now and have liked it a lot.  It may sound crazy but the Stripes quickstart and sample application documentation on the website does a pretty good job of covering the bases.  This is helped by the fact there is little to Stripes, probably because it is relatively new and not trying to be all things to all people. I would say give the quick-start a try and if by the end of it you are unsatisfied look elsewhere. At the end of the day you and your company have to be happy (and productive) with what you are using irrespective of how many people are using it.", 'questionId': '15695', 'answerId': '29606'}
{'answer': "Stripes is a great framework. We converted a major project from a home grown framework to stripes and it took less than one week. The book referenced above is a great resources, as is the mailing list. There's also an active irc channel #stripes on freenode. It's a very powerful framework that doesn't get in your way.", 'questionId': '15695', 'answerId': '30233'}
{'answer': 'It\'s a shame that some people perceive Stripes as a framework for which "there really just isn\'t much support or information for it." In reality, the Stripes community is very supportive - have a look at the mailing list and you\'ll see how friendly and responsive people are. In fact, some have said on the #stripes IRC channel that they have had better response for Hibernate-related questions than on #hibernate itself! Give Stripes a good, serious look instead of dismissing it because of misconceptions.', 'questionId': '15695', 'answerId': '47991'}
{'answer': "Here's how to do it using Xerces2. A tutorial for this, here (req. signup). Original attribution: blatantly copied from here:", 'questionId': '15732', 'answerId': '15739'}
{'answer': "Are you looking for a tool or a library? As far as libraries goes, pretty much the de-facto standard is Xerces2 which has both C++ and Java versions. Be fore warned though, it is a heavy weight solution. But then again, validating XML against XSD files is a rather heavy weight problem. As for a tool to do this for you, XMLFox seems to be a decent freeware solution, but not having used it personally I can't say for sure.", 'questionId': '15732', 'answerId': '15741'}
{'answer': "The Java runtime library supports validation. Last time I checked this was the Apache Xerces parser under the covers. You should probably use a javax.xml.validation.Validator. The schema factory constant is the string http://www.w3.org/2001/XMLSchema which defines XSDs. The above code validates a WAR deployment descriptor against the URL http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd but you could just as easily validate against a local file. You should not use the DOMParser to validate a document (unless your goal is to create a document object model anyway). This will start creating DOM objects as it parses the document - wasteful if you aren't going to use them.", 'questionId': '15732', 'answerId': '16054'}
{'answer': "I had to validate an XML against XSD just one time, so I tried XMLFox. I found it to be very confusing and weird. The help instructions didn't seem to match the interface. I ended up using LiquidXML Studio 2008 (v6) which was much easier to use and more immediately familiar (the UI is very similar to Visual Basic 2008 Express, which I use frequently). The drawback: the validation capability is not in the free version, so I had to use the 30 day trial.", 'questionId': '15732', 'answerId': '158781'}
{'answer': 'If you are generating XML files programatically, you may want to look at the XMLBeans library. Using a command line tool, XMLBeans will automatically generate and package up a set of Java objects based on an XSD.  You can then use these objects to build an XML document based on this schema. It has built-in support for schema validation, and can convert Java objects to an XML document and vice-versa. Castor and JAXB are other Java libraries that serve a similar purpose to XMLBeans.', 'questionId': '15732', 'answerId': '488685'}
{'answer': "One more answer: since you said you need to validate files you are generating (writing), you might want to validate content while you are writing, instead of first writing, then reading back for validation. You can probably do that with JDK API for Xml validation, if you use SAX-based writer: if so, just link in validator by calling 'Validator.validate(source, result)', where source comes from your writer, and result is where output needs to go. Alternatively if you use Stax for writing content (or a library that uses or can use stax), Woodstox http://woodstox.codehaus.org can also directly support validation when using XMLStreamWriter. Here's a blog entry showing how that is done:", 'questionId': '15732', 'answerId': '690450'}
{'answer': "I found this site to be helpful, too. http://www.ibm.com/developerworks/xml/library/x-javaxmlvalidapi.html It's the one that actually worked for me with a minimum of fuss.", 'questionId': '15732', 'answerId': '841587'}
{'answer': 'We build our project using ant, so we can use the schemavalidate task to check our config files: Now naughty config files will fail our build! http://ant.apache.org/manual/Tasks/schemavalidate.html', 'questionId': '15732', 'answerId': '6690151'}
{'answer': 'If you have a Linux-Machine you could use the free command-line tool SAXCount. I found this very usefull. It validates against dtd and xsd. 5s for a 50MB file. In debian squeeze it is located in the package "libxerces-c-samples". The definition of the dtd and xsd has to be in the xml! You can\'t config them separately.', 'questionId': '15732', 'answerId': '9826988'}
{'answer': 'Using Java 7 you can follow the documentation provided in package description.', 'questionId': '15732', 'answerId': '16518985'}
{'answer': 'Since this is a popular question, I would also like to point out that java can validate against a "referred to" xsd, for instance if the .xml file itself specifies an XSD, using xsi:SchemaLocation or xsi:noNamespaceSchemaLocation (or xsi for particular namespaces) as stated here: or SchemaLocation (always a list of namespace to xsd mappings) "If you create a schema without specifying a URL, file, or source, then the Java language creates one that looks in the document being validated to find the schema it should use. For example:" and this works for multiple namespaces, etc. The problem with this approach is that the xmlsns:xsi is probably a network location, so it\'ll go out and hit the network with each and every validation, not always optimal. Here\'s an example that validates an XML file against any XSD\'s it references (even if it has to pull them from the network): You can avoid pulling referenced XSD\'s from the network, even though the xml files reference url\'s, by specifying the xsd manually (see some other answers here) or by using an "XML catalog" style resolver.  Spring apparently also can intercept the URL requests to serve local files for validations.  Or you can set your own via setResourceResolver, ex: See also here for another tutorial.', 'questionId': '15732', 'answerId': '41225329'}
{'answer': "Easily, my good man. EDIT: Quite correct you are Anders. I've edited my solution to take that into account as well.", 'questionId': '15851', 'answerId': '15855'}
{'answer': '@Patrick you are assuming calling setValueInVector( v, idx ); at the end of the second loop is OK. If the code is to be identical, logically, it must be rewritten to somethng like this:', 'questionId': '15851', 'answerId': '15869'}
{'answer': 'Does this work for you? I extracted the inner loop into a method CheckedEntireMatrix (you can name it better than me) - Also my java is a bit rusty.. but I think it gets the message across', 'questionId': '15851', 'answerId': '15870'}
{'answer': 'Gishu has the right idea :', 'questionId': '15851', 'answerId': '15901'}
{'answer': "I'm not too sure to understand the first continue. I would copy Gishu and write something like ( sorry if there are some mistakes ) :", 'questionId': '15851', 'answerId': '15903'}
{'answer': 'From reading your code.  I noticed your eliminating the invalid vector positions at conditionAtVectorPosition then you remove the invalid rows at anotherConditionAtVector.  It seems that checking rows at anotherConditionAtVector is redundant since whatever the value of idx is, anotherConditionAtVector only depends on the row index (assuming anotherConditionAtVector has no side effects).  So you can do this: Get the valid positions first using conditionAtVectorPosition (these are the valid columns). Then get the valid rows using anotherConditionAtVector. Finally, use conditionAtMatrixRowCol using the valid columns and rows. I hope this helps.', 'questionId': '15851', 'answerId': '15908'}
{'answer': "Looking at the solutions presented so far: They all look less readable than the original, in that they involve spending more code on the mechanism of the code rather than on the algorithm itself Some of them are broken, or were before they were edited. Most damning is the fact that people are having to think quite hard about how to write the code without labels and not break anything. Some come with a performance penalty of running the same test twice, which may not always be trivial. The alternative to that is storing and passing round booleans, which gets ugly. Refactoring the relevant part of the code into a method is effectively a no-op: it rearranges how the code is laid out in the file, but has no effect on how it's executed. All of which makes me believe that, at least in the case of this question as phrased, the label is the correct solution and doesn't need to be refactored away. Certainly there are cases where labels are used incorrectly and should be refactored away. I just don't think it should be treated as some unbreakable rule.", 'questionId': '15851', 'answerId': '15946'}
{'answer': "@Sadie: They all look less readable than the original, in that they involve spending more code on the mechanism of the code rather than on the algorithm itself Externalizing the second loop outside the algorithm is not necessarily less readable. If the method name is well chosen, it can improve readability. Some of them are broken, or were before they were edited. Most damning is the fact that people are having to think quite hard about how to write the code without labels and not break anything. I have a different point of view: some of them are broken because it is hard to figure out the behavior of the original algorithm. Some come with a performance penalty of running the same test twice, which may not always be trivial. The alternative to that is storing and passing round booleans, which gets ugly. The performance penalty is minor. However I agree that running a test twice is not a nice solution. Refactoring the relevant part of the code into a method is effectively a no-op: it rearranges how the code is laid out in the file, but has no effect on how it's executed. I don't see the point. Yep, it doesn't change the behavior, like... refactoring? Certainly there are cases where labels are used incorrectly and should be refactored away. I just don't think it should be treated as some unbreakable rule. I totally agree. But as you have pointed out, some of us have difficulties while refactoring this example. Even if the initial example is readable, it is hard to maintain.", 'questionId': '15851', 'answerId': '15981'}
{'answer': "@Nicolas Some of them are broken, or were before they were edited. Most damning is the fact that      people are having to think quite hard about how to write the code without labels and not      break anything. I have a different point of view: some of them are broken because it is hard to figure out    the behavior of the original algorithm. I realise that it's subjective, but I don't have any trouble reading the original algorithm. It's shorter and clearer than the proposed replacements. What all the refactorings in this thread do is emulate the behaviour of a label using other language features - as if you were porting the code to a language that didn't have labels.", 'questionId': '15851', 'answerId': '16014'}
{'answer': 'Some come with a performance penalty of running the same test twice, which may not always be trivial. The alternative to that is storing and passing round booleans, which gets ugly. The performance penalty is minor. However I agree that running a test twice is not a nice solution. I believe the question was how to remove the labels, not how to optimize the algorithm. It appeared to me that the original poster was unaware of how to use \'continue\' and \'break\' keywords without labels, but of course, my assumptions may be wrong.  When it comes to performance, the post does not give any information about the implementation of the other functions, so for all I know they might as well be downloading the results via FTP as consisting of simple calculations inlined by the compiler. That being said, doing the same test twice is not optimalin theory. EDIT: On a second thought, the example is actually not a horrible use of labels. I agree that "goto is a no-no", but not because of code like this. The use of labels here does not actually affect the readability of the code in a significant way. Of course, they are not required and can easily be omitted, but not using them simply because "using labels is bad" is not a good argument in this case. After all, removing the labels does not make the code much easier to read, as others have already commented.', 'questionId': '15851', 'answerId': '16048'}
{'answer': 'This question was not about optimizing the algorithm - but thanks anyway ;-)  At the time I wrote it, I considered the labeled continue as a readable solution. I asked SO a question about the convention (having the label in all caps or not) for labels in Java. Basically every answer told me "do not use them - there is always a better way! refactor!". So I posted this question to ask for a more readable (and therefore better?) solution. Until now, I am not completely convinced by the alternatives presented so far. Please don\'t get me wrong. Labels are evil most of the time.  But in my case, the conditional tests are pretty simple and the algorithm is taken from a mathematical paper and therefore very likely to not change in the near future. So I prefer having all the relevant parts visible at once instead of having to scroll to another method named something like checkMatrixAtRow(x). Especially at more complex mathematical algorithms, I find it pretty hard to find "good" function-names - but I guess that is yet another question', 'questionId': '15851', 'answerId': '16512'}
{'answer': "I think that labelled loops are so uncommon that you can pick whatever method of labelling works for you - what you have there makes your intentions with the continues perfectly clear. After leading the charge to suggest refactoring the loops in the original question and now seeing the code in question, I think you've got a very readable loop there. What I had imagined was a very different chunk of code - putting the actual example up, I can see it is much cleaner than I had thought. My apologies for the misunderstanding.", 'questionId': '15851', 'answerId': '17408'}
{'answer': 'You should be able to do this with query try  I am new to xquery myself and I have found it to be a painful query language to work with, but it does work quiet well once you get over the initial learning curve.  I do still wish there was an easier way which was as efficient?', 'questionId': '15899', 'answerId': '15961'}
{'answer': "How about an object oriented approach?  You could deserialise the XML to an object, set the location value on the object, then serialise back to XML. XStream makes this really easy. For example, you would define the main object, which in your case is CustomData (I'm using public fields to keep the example simple): Then you initialize XStream: Now you can construct an object from XML, set the location field on the object and regenerate the XML: How does that sound?", 'questionId': '15899', 'answerId': '15967'}
{'answer': "How about an XPath based approach? I like this approach as the logic is super-easy to understand. The code is pretty much self-documenting. If your xml document is available to you as an org.w3c.dom.Document object (as most parsers return), then you could do something like the following: And here's the helper method findNodes that does the XPath search.", 'questionId': '15899', 'answerId': '16019'}
{'answer': "If you don't know the schema the XStream solution probably isn't the way to go. At least XStream is on your radar now, might come in handy in the future!", 'questionId': '15899', 'answerId': '16375'}
{'answer': "Tomcat Documentation DBCP uses the Jakarta-Commons Database Connection Pool. It relies on number of Jakarta-Commons components: This attribute may help you out. I'm using the same connection pooling stuff and I'm setting these properties to prevent the same thing it's just not configured through tomcat. But if the first thing doesn't work try these.", 'questionId': '15949', 'answerId': '16168'}
{'answer': "I do not know whether the above answer does basically the same thing, but some of our systems use the DB connection about once a week and I've seen that we provide a -Otimeout flag or something of that sort to mysql to set the connection timeout.", 'questionId': '15949', 'answerId': '16751'}
{'answer': 'Just to clarify what is actually causing this. MySQL by default terminates open connections after 8 hours of inactivity.  However the database connection pool will retain connections for longer than that. So by setting timeBetweenEvictionRunsMillis=300000 you are instructing the connection pool to run through connections and evict and close idle ones every 5 minutes.', 'questionId': '15949', 'answerId': '74086'}
{'answer': "The removeAbandoned option is deprecated as of DBCP 1.2 (though still present in the 1.3 branch). Here's a non-official explanation.", 'questionId': '15949', 'answerId': '528106'}
{'answer': 'I really like the Apache Felix tutorials. However, I think in general leveraging OSGi in your application isn\'t one of those "let\'s use this framework, because it\'s hype" decision. It\'s more of a design question, but then everything that OSGi gives you in terms of design, you can have with vanilla Java as well. As for the runtime, you cannot just add an existing application and make it OSGi enabled. It needs to be design to be dynamic. Spring DM makes it easy to hide that from you, but it\'s still there and you need to be aware of it.', 'questionId': '16140', 'answerId': '16411'}
{'answer': 'Well, since you can not have one part OSGi and one part non-OSGi you\'ll need to make your entire app OSGi. In its simplest form you make a single OSGi bundle out of your entire application. Clearly this is not a best practice but it can be useful to get a feel for deploying a bundle in an OSGi container (Equinox, Felix, Knoplerfish, etc). To take it to the next level you\'ll want to start splitting your app into components, components should typically have a set of responsibilities that can be isolated from the rest of your application through a set of interfaces and class dependencies. Identifying these purely by hand can range from rather straightforward for a well designed highly cohesive but loosely coupled application to a nightmare for interlocked source code that you are not familiar with. Some help can come from tools like JDepend which can show you the coupling of Java packages against other packages/classes in your system. A package with low efferent coupling should be easier to extract into an OSGi bundle than one with high efferent coupling. Even more architectural insight can be had with pro tools like Structure 101. Purely on a technical level, working daily with an application that consists of 160 OSGi bundles and using Spring DM I can confirm that the transition from "normal" Spring to Spring DM is largely pain free. The extra namespace and the fact that you can (and should) isolate your OSGi specific Spring configuration in separate files makes it even easier to have both with and without OSGi deployment scenarios. OSGi is a deep and wide component model, documentation I recommend: OSGi R4 Specification: Get the PDFs of the Core and Compendium specification, they are canonical, authoritative and very readable. Have a shortcut to them handy at all times, you will consult them. Read up on OSGi best practices, there is a large set of things you can do but a somewhat smaller set of things you should do and there are some things you should never do (DynamicImport: * for example).  Some links:  OSGi best practices and using Apache Felix Peter Kriens and BJ Hargrave in a Sun presentation on OSGi best practices  one key OSGi concept are Services, learn why and how they supplant the Listener pattern with the Whiteboard pattern The Spring DM Google Group is very responsive and friendly in my experience The Spring DM Google Group is no longer active and has moved to Eclipse.org as the Gemini Blueprint project which has a forum here.', 'questionId': '16140', 'answerId': '16817'}
{'answer': 'Is your existing application monolithic or tiered in seperate processes/layers? If tiered, you can convert the middle/app-tier to run in an OSGi container. In my team\'s experience, we\'ve found trying to do web-stuff in OSGi painful.  Other pain points are Hibernate and Jakarta Commons Logging. I find the OSGi specs pretty readable and I recommend you print out the flowchart that shows the algorithm for class loading.  I\'ll guarantee you\'ll have moments of, "why am I getting a NoClassDefFoundError?": the flowchart will tell you why.', 'questionId': '16140', 'answerId': '17037'}
{'answer': 'There are a couple of thinks to keep in mind if you are starting with OSGi. As mentioned elsewhere in this thread, knowing about classloading is really important. In my experience everybody sooner or later runs into problems with it. Another important thing to remember is: never hold references! Have a look at the whiteboard pattern on which the services concept of OSGi is build (see the link in one of the other answers). In my experience you should not try to convert a monolitic application into an OSGi-based one. This usually leads to a badly and unmanageable mess. Start anew. Download one of the freely available stand-alone oSGi implementations. I found Knopflerfish rather good and stable (I use it in many projects). It also comes with lots of source code. You can find it here: http://www.knopflerfish.org Another good tutorial can be found here. https://pro40.abac.com/deanhiller/cgi-bin/moin.cgi/OsgiTutorial Peter Kriens of the OSGi Alliance gave a nice interview: http://www.infoq.com/interviews/osgi-peter-kriens. His homepage and blog (which is always a good read can be found here: http://www.aqute.biz', 'questionId': '16140', 'answerId': '46888'}
{'answer': 'Try http://neilbartlett.name/blog/osgibook/. The book has hands on examples with OSGi best practices.', 'questionId': '16140', 'answerId': '144273'}
{'answer': 'When learning a new technology rich tooling gets you into things without big headaches. At this point the community at ops4j.org provides a rich toolset called "PAX" which includes: Pax Runner: Run and switch between Felix, Equinox, Knopflerfish and Concierge easily Pax Construct: Construct, Organize & Build OSGi projects with maven easily Pax Drone: Test your OSGi bundles with Junit while being framework independent (uses PaxRunner) Then there are many implementations of OSGi compendium services:  Pax Logging (logging),  Pax Web (http service),  Pax Web Extender (war support),  Pax Coin (configuration),  Pax Shell (shell implementation, part of the next osgi release)  and much more. .. and there is a helpful, framework independend community, - but thats now advertisement ;-)', 'questionId': '16140', 'answerId': '152412'}
{'answer': 'This answer comes nearly 3 years after the question was asked, but the link I just found is really good, especially for starters using maven. A step-by-step explanation.', 'questionId': '16140', 'answerId': '5767828'}
{'answer': "Try http://njbartlett.name/files/osgibook_preview_20091217.pdf  OR  http://www.manning.com/hall/ The second is not a book i have read myself but I have heard good things about it.  The first was very useful for me. He takes you through the architecture initially and then it's hands on OSGi.", 'questionId': '16140', 'answerId': '17801701'}
{'answer': "CXF - I'd look into CXF. I've used it to create a web service and client in java using ws-secuirty. I also connected a .net web service to it. They have pretty good documentation too. I had more luck with it than axis.", 'questionId': '16451', 'answerId': '16478'}
{'answer': ' Apache Axis can generate proxy code from WSDL http://ws.apache.org/axis/java/user-guide.html#UsingWSDLWithAxis NetBeans with the RESTful Web Services plug-in can generate code for you.  Instructions for an example client for the eBay shopping web service are at http://ebay.custhelp.com/cgi-bin/ebay.cfg/php/enduser/std_adp.php?p_faqid=1230.', 'questionId': '16451', 'answerId': '16499'}
{'answer': 'I guess I should be more clear - I have used the wsdl2java code generators to generate client code for the service.  However the generated code does not include the necessary WS-Security SOAP headers so that the service will accept the requests.', 'questionId': '16451', 'answerId': '16683'}
{'answer': "@Mike I recently did a test and this is the code I used. I'm not using policy stuff, but I used WS-Security with plain text authentication. CXF has really good documentation on how to accomplish this stuff. I used wsdl2java and then added this code to use the web service with ws-security. I hope this helps you out.", 'questionId': '16451', 'answerId': '16979'}
{'answer': 'WS-Security specifications are not typically contained in a WSDL (never in a WSE WSDL). So wsdl2java does not know that WS-Security is even required for this service. The fact that security constraints are not present in a WSE WSDL is a big disappointment to me (WCF will include WS-Trust information in a WSDL). On the client end, you\'ll need to use Rampart to add the necessary WS-Security headers to your outgoing client message. Since the WSDL does not report what WS-Security settings are necessary, you\'re best off by asking the service provider what is required. WS-Security requirements may be simple plaintext password, or might be X509 certificates, or might be encrypted message..... Rampart should be able to handle most of these scenarios. Apache Rampart is "turned on" by engaging the module in your axis2.xml file. You\'ll need to download the Rampart module and put it in a specific place in your axis2 directory, then modify the xml file. You can also engage Rampart programatically (please edit your original question if this is a requirement and I\'ll edit this response). Depending on how you configure rampart (through other XML files or programatically), it will intercept any outgoing messages and add the necessary WS-Security information to it. I\'ve personally used axis2 with rampart to call a WSE3 service that is secured with UsernameToken in plaintext and it worked great. Similar, but more advanced scenarios should also work.  There are more details on how to set up and get started with Rampart on the site linked above. If you have problems about the specifics of Rampart or how to use Rampart with your particular WSE setup, then edit your question and I\'ll try my best to answer.', 'questionId': '16451', 'answerId': '83764'}
{'answer': "This seems to be a popular question so I'll provide an overview of what we did in our situation. It seems that services built in .NET are following an older ws-addressing standard (http://schemas.xmlsoap.org/ws/2004/03/addressing/) and axis2 only understands the newer standard (http://schemas.xmlsoap.org/ws/2004/08/addressing/). In addition, the policyCache.config file provided is in a form that the axis2 rampart module can't understand. So the steps we had to do, in a nutshell: Read the policyCache.config and try to understand it.  Then rewrite it into a policy that rampart could understand.  (Some updated docs helped.) Configure rampart with this policy. Take the keys that were provided in the .pfx file and convert them to a java key store.  There is a utility that comes with Jetty that can do that. Configure rampart with that key store. Write a custom axis2 handler that backward-converts the newer ws-addressing stuff that comes out of axis2 into the older stuff expected by the service. Configure axis2 to use the handler on outgoing messages. In the end it was a lot of configuration and code for something that is supposed to be an open standard supported by the vendors. Although I'm not sure what the alternative is...can you wait for the vendors (or in this case, the one vendor) to make sure that everything will inter-op? As a postscript I'll add that I didn't end up doing the work, it was someone else on my team, but I think I got the salient details correct.  The other option that I was considering (before my teammate took over) was to call the WSS4J API directly to construct the SOAP envelope as the .NET service expected it.  I think that would have worked too.", 'questionId': '16451', 'answerId': '711398'}
{'answer': 'The Maven SourceForge plug-in does not work with Maven 2. Also I believe this plug-in uses FTP which is no longer supported.', 'questionId': '16487', 'answerId': '17779'}
{'answer': 'It looks like I am going to have to write this myself. https://sourceforge.net/projects/wagon-sf/', 'questionId': '16487', 'answerId': '47220'}
{'answer': 'I found that CruiseControl can upload releases to SFEE and also works with Maven and Maven2', 'questionId': '16487', 'answerId': '187030'}
{'answer': 'I\'m not able to test this to confirm, but I believe it is possible without writing any plugins. You can deploy to SourceForge using SCP, and the maven-deploy-plugin can be configured to use SCP so it should work. You can also deploy your site to SourceForge via SCP. You would configure the SourceForge server in your settings.xml to use a "combined" username with a comma separator. With these credentials: The server element would look like this: And the distributionManagement section in your POM would look like this: Finally declare that ssh-external is to be used: If this doesn\'t work, you may be able to use the recommended approach in the site reference above, i.e. create a shell on shell.sourceforge.net with your username and project group: Then use shell.sourceforge.net (instead of web.sourceforge.net) in your site URL in the diestributionManagement section:', 'questionId': '16487', 'answerId': '1449595'}
{'answer': "After trying this a number of times, I finally got it to work -- with sftp not scp.  This should work from a unix box (or Mac) -- I'm not sure about sftp clients for Windoze.  I am using mvn version 2.2.0 and I don't think I have any special plugins installed.  This deploys the various mvn packages to the Files section of my project page. You'll need to change the following in your settings to get it to work: user -- replace with your sourceforce username secret -- replace with your password ormlite -- replace with your project name /o/or/ -- replace with the first char and first 2 chars of your project name In my $HOME/.m2/settings.xml file I have the following for the SF server: I don't specify the username in the settings.xml file because it needs to be username,project and I want to deploy multiple packages to SF.  Then, in my pom.xml file for the ormlite package I have the following: Obviously the /releases and /snapshots directory suffixes can be changed depending on your file hierarchy.", 'questionId': '16487', 'answerId': '2187533'}
{'answer': 'Where timp = user and webmacro = project scp url does not work: sftp url works:  or for project release artifacts:  scp will work to shell.sourceforge.net, but you have to create the shell before use with', 'questionId': '16487', 'answerId': '2330852'}
{'answer': 'I have uploaded an example to sourceforge.net at: http://sf-mvn-plugins.sourceforge.net/example-1jar-thinlet/ You can check out it via svn - so you can see how to use plugins for upload and download of and to sourceforge.net file system area and web site. The main points to upload are to use sftp: Add this similar code to your pom.xml Add similar code to settings.xml The main point for download is to use the wagon-http-sourceforge maven plugin - please see at: sf-mvn-plugins.sourceforge.net/wagon-http-sourceforge/FAQ.html Please add the following code to your pom.xml', 'questionId': '16487', 'answerId': '2337482'}
{'answer': 'This really did not turn out to be that hard. First up I had the mvn site:deploy working following the instructions at this sourceforge site. Basically you start the sourceforge shell with  That will create the shell at their end with a folder mounted to your project on a path such as (depending on your projects name): In that shell I on the sourceforge server I created a folder for my repo under the project apache folder "htdocs" with  In my settings.xml I set the username and password to that shell server so that maven can login:  In the pom.xml you just need your distibutionManagement section setup to name the server by ID that you set the password for in your settings file:  There the repository entry is the one for the mvn deploy command and the site entry is for the mvn site:deploy command. Then all I have to do is start the shell connection to bring up the server side then on my local side just run:  which uploads the jar, pom and sources and the like onto my sourceforge projects website. If you try to hit the /maven2 folder on your project website sourceforge kindly tell you that directory listing is off by default and how to fix it. To do this on the server shell you create a .htaccess file in your htdocs/maven2 folder containing the following apache options  Then bingo, you have a maven repo which looks like:  http://chex4j.sourceforge.net/maven2/net/sf/chex4j/chex4j-core/1.0.0/ Your sf.net shell it shuts down after a number of hours to not hog resources; so you run the "ssh -t ... create" when you want to deploy the site or your build artifacts.  You can browse all my maven project code under sourceforge to see my working settings:  http://chex4j.svn.sourceforge.net/viewvc/chex4j/branches/1.0.x/chex4j-core/', 'questionId': '16487', 'answerId': '4110138'}
{'answer': 'SCP URL does work. But do not use ":" after server name. MVN tries to read the following test as integer (port number). You do not need to establish tunnels as simbo1905 did.', 'questionId': '16487', 'answerId': '4402466'}
{'answer': 'The Equals method is intended to compare references. So it should not be overriden to change its behaviour. You should create a new method to test for equivalence in different instances if you need to (or use the CompareTo method in some .NET classes)', 'questionId': '16557', 'answerId': '16562'}
{'answer': "Overriding the equals method is necessary if you want to test equivalence in standard library classes (for example, ensuring a java.util.Set contains unique elements or using objects as keys in java.util.Map objects). Note, if you override equals, ensure you honour the API contract as described in the documentation. For example, ensure you also override Object.hashCode: If two objects are equal according to   the equals(Object)  method, then   calling the hashCode method on each of   the two objects must produce the same   integer result. EDIT: I didn't post this as a complete answer on the subject, so I'll echo Fredrik Kalseth's statement that overriding equals works best for immutable objects. To quote the API for Map: Note: great care must be exercised if   mutable objects are used as map keys.   The behavior of a map is not specified   if the value of an object is changed   in a manner that affects equals   comparisons while the object is a key   in the map.", 'questionId': '16557', 'answerId': '16573'}
{'answer': 'You should only need to override the equals() method if you want specific behaviour when adding objects to sorted data structures (SortedSet etc.) When you do that you should also override hashCode(). See here for a complete explanation.', 'questionId': '16557', 'answerId': '16574'}
{'answer': 'I would highly recommend picking up a copy of Effective Java and reading through item 7 obeying the equals contract. You need to be careful if you are overriding equals for mutable objects, as many of the collections such as Maps and Sets use equals to determine equivalence, and mutating an object contained in a collection could lead to unexpected results. Brian Goetz also has a pretty good overview of implementing equals and hashCode.', 'questionId': '16557', 'answerId': '16591'}
{'answer': 'You should "never" override equals & getHashCode for mutable objects - this goes for .net and Java both. If you do, and use such an object as the key in f.ex a dictionary and then change that object, you\'ll be in trouble because the dictionary relies on the hashcode to find the object. Here\'s a good article on the topic: http://weblogs.asp.net/bleroy/archive/2004/12/15/316601.aspx', 'questionId': '16557', 'answerId': '16601'}
{'answer': 'To be honest, in Java there is not really an argument against overriding equals.  If you need to compare instances for equality, then that is what you do.   As mentioned above, you need to be aware of the contract with hashCode, and similarly, watch out for the gotchas around the Comparable interface - in almost all situations you want the natural ordering as defined by Comparable to be consistent with equals (see the BigDecimal api doc for the canonical counter example) Creating a new method for deciding equality, quite apart from not working with the existing library classes, flies in the face of Java convention somewhat.', 'questionId': '16557', 'answerId': '16816'}
{'answer': '@David Schlosnagle mentions mentions Josh Bloch\'s Effective Java -- this is a must-read for any Java developer. There is a related issue: for immutable value objects, you should also consider overriding compare_to.  The standard wording for if they differ is in the Comparable API: It is generally the case, but not strictly required that (compare(x, y)==0) == (x.equals(y)). Generally speaking, any comparator that violates this condition should clearly indicate this fact. The recommended language is "Note: this comparator imposes orderings that are inconsistent with equals."', 'questionId': '16557', 'answerId': '16922'}
{'answer': 'I am a big fan of Thrift an interoperability stack from Facebook. You said they code will probably run on the same machine so it could be overkill but you can still use it.', 'questionId': '16689', 'answerId': '16697'}
{'answer': "I used JNBridge (http://www.jnbridge.com/jnbpro.htm) on a relatively simple project where we had a .NET client app using a relatively significant jar file full of business object logic that we didn't want to port.  It worked quite nicely, but I wouldn't say we fully exercised the capabilities of JNBridge.", 'questionId': '16689', 'answerId': '16700'}
{'answer': "I've heard good things about IKVM, the JVM that's made with .NET.", 'questionId': '16689', 'answerId': '16712'}
{'answer': 'Ice from ZeroC is a really high performance "enterprisey" interop layer that supports Java and .net amongst others.  I think of it as an updated Corba - it even has its own object oriented interface definition language called Slice (like Corba\'s IDL, but actually quite readable). The feature set is extensive, with far more on offer than web services, but clearly it isn\'t an open standard, so not a decision to make lightly.  The generated code it spits out is somewhat ugly too...', 'questionId': '16689', 'answerId': '16790'}
{'answer': 'Kyle has the right approach in asking about the interaction. There is no "correct" answer without knowing what the usage patterns are likely to be. Any architectural decision -- especially at this level --  is a trade-off. You must ask yourself: What kind of messages need to be passed between the systems? What types of data need to be shared? Is there an important requirement to support complex model objects or will primitives + arrays do? what is the volume of the data? How frequently will the interactions occur? What is the acceptable communication latency? Until you have an understanding of the answers, or potential answers, to those questions, it will be difficult to choose an implementation architecture. Once we know which factors are important, it will be far easier to choose the more suitable implementation candidates that reflect the requirements of the running system.', 'questionId': '16689', 'answerId': '16857'}
{'answer': "I realize you're talking about programs on the same machine, but I've always liked the idea of passing messages in XML over HTTP. Your server could be a web server that's ready to accept an XML payload.  Your client can send HTTP messages with XML in the body, and receive an HTTP response with XML in it. One reason I like this is that HTTP is such a widely used protocol that it's easy to accept or create HTTP POST or GET requests in any language (in the event that you decide to change either the client or server language in the future). HTTP and XML have been around for a while, so I think they're here to stay. Another reason I like it is that your server could be used by other clients, too, as long as they know HTTP and XML.", 'questionId': '16689', 'answerId': '17344'}
{'answer': "If they are separate programs and running as independent applications,you may use sockets. I know it's bit complex to define communication protocol but it'll be quite straight-forward. However if you have just two separate programs but want to run them as single application, then I guess IKVM is a better approach as suggested by marxidad.", 'questionId': '16689', 'answerId': '27537'}
{'answer': "I am author of jni4net, open source interprocess bridge between JVM and CLR. It's build on top of JNI and PInvoke. No C/C++ code needed. I hope it will help you.", 'questionId': '16689', 'answerId': '1655210'}
{'answer': 'It appears a very similar question has been asked before here on stack overflow (I was searching Google for java windows shared memory): Efficient data transfer from Java to C++ on windows From the answer I would suggest you to investigate: "Your fastest solution will be memory   mapping a shared segment of memory,   and them implementing a ring-buffer or   other message passing mechanism. In   C++ this is straight forward, and in   Java you have the FileChannel.map   method which makes it possible."', 'questionId': '16689', 'answerId': '1739906'}
{'answer': 'Does this happen when you run the javac command from the command line? You might want to try the fork attribute.', 'questionId': '16935', 'answerId': '16953'}
{'answer': 'Try adding some variation of these attributes to the Ant javac task line: You can also try fork="true", not sure if this allows you to set values for stack and heap (aka -Xm1024), but it may help (if it would work from the command line, but not in Ant). [Edit]: Added link -- the javac task page would seem to suggest that the parameters above require that you do also set fork="true".', 'questionId': '16935', 'answerId': '16955'}
{'answer': 'That\'s quite odd, 100 classes really isn\'t that many. What is the compiler doing when the stack overflows? Is there a useful stack trace generated? What happens if you run javac directly on the command line instead of thorugh ant? One possible workaround is to simply increase the size of the stack using the -Xss argument to the JVM; either to the JVM running ant or by setting fork="true" and a <compilerarg> on the <javac> task. Actually now that I think of it, does the problem go away just putting in the fork="true"?', 'questionId': '16935', 'answerId': '16982'}
{'answer': 'Here is what I found. After posting my question I went on and modified the compile task with the attributes fork="true", memoryinitialsize="256m" and memorymaximumsize="1024m" (a found today that this was suggested by Kieron and jmanning2k, thanks for your time). This didn\'t solve the problem nonetheless. I decided to start removing classes from the source tree to see if a could pinpoint the problem. Turns out we had a Web Service client class for Axis 1.4 that was auto-generated from a WSDL file. Now, this class is a monster (as in Frankenstein), it has 167 field members (all of them of type String), 167 getter/setter pairs (1 for each field), a constructor that receives all 167 fields as parameters, an equals method that compares all 167 fields in a strange way. For each field the comparison goes like this: The result of this comparison is "anded" (&&) with the result of the comparison of the next field, and so on. The class goes on with a hashCode method that also uses all fields, some custom XML serialization methods and a method that returns a Axis-specific metadata object that describes the class and that also uses all field members. This class is never modified, so I just put a compiled version in the application classpath and the project compiled without issues.  Now, I know that removing this single source file solved the problem. However, I have absolutely no idea as to why this particular class caused the problem. It will be nice to know; what can cause or causes a StackOverflowError during compilation of Java code? I think I\'ll post that question. For those interested: Windows XP SP2 SUN\'s JDK 1.4.2_17 Ant 1.7.0', 'questionId': '16935', 'answerId': '18086'}
{'answer': " It will be nice to know; what can   cause or causes a StackOverflowError   during compilation of Java code? It is probable that evaluating the long expression in your java file consumes lots of memory and because this is being done in conjunction with the compilation of other classes, the VM just runs out of stack space. Your generated class is perhaps pushing the legal limits for its contents. See chapter 4.10 Limitations of the Java Virtual Machine in The Java Virtual Machine Specification, Second Edition. Fix 1: refactor the class Since your class is being generated, this might not be an option. Still, it is worth looking at the options your class generation tool offers to see if it can produce something less troublesome. Fix 2: increase the stack size I think Kieron has one solution when he mentions the -Xss argument. javac takes a number of non-standard arguments that will vary between versions and compiler vendors. My compiler: To list all the options for it, I'd use these commands: I think the stack limit for javac is 512Kb by default. You can increase the stack size for this compiler to 10Mb with this command: You might be able to pass this in an Ant file with a compilerarg element nested in your javac task.", 'questionId': '16935', 'answerId': '19782'}
{'answer': ' from the comment above is incorrect. You need a space between the -J and -X, like so: to avoid the following error: ...     [javac] javac: invalid flag: -J-Xss1m     [javac] Usage: javac', 'questionId': '16935', 'answerId': '1042236'}
{'answer': "Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly.  The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces. Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See  http://support.microsoft.com/kb/208427, note the maximum URL length of 2083 characters. This is confirmed for mailto as well  in this article: http://support.microsoft.com/kb/279460/en-us. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives. BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).", 'questionId': '17373', 'answerId': '17379'}
{'answer': "1. Add a Subject Line  You can prefill the subject line in the email by adding the subject preceded by '?subject=' after the email address.  So the link now becomes:  2. Send to Multiple Recipients  Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc).  This is done in a similar way, by placing '?cc=someoneelse@theirsite.com' after the initial address.  So the link looks like this: cc can simply be replaced by bcc if you wish to send blind carbon copies.  This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also.  You can of course specify more than one additional recipient, just separate your list of recipients with a comma.  Sourced from Getting More From 'mailto' which now 404s.  I retrieved the content from waybackmachine.     3. Combining Code  You can combine the various bits of code above by the addition of an '&' between each. Thus adding  would send an email with the subject 'Hello' to me, you and her.  4. Write the Email  You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '?body=' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '%20' between each word, and to create new lines will mean adding '%0D'. Similarly symbols such as $ signs will need to be written in hex code. If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code.  It will send a message to three people, with the subject and the message filled in, all you need to do is add your name.  Just look at the code!  Note: Original source URL where I found this is now 404ing so I grabbed to content from waybackmachine and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.", 'questionId': '17373', 'answerId': '17389'}
{'answer': "I have implemented this, and it works well on OS X. (Ryan's mention of the max URL length has not been codified.) I had to re-implement URLencode because Java's would use + for space and Mail took those literally. Haven't tested on Windows yet.", 'questionId': '17373', 'answerId': '17394'}
{'answer': " I had to re-implement URLencode   because Java's would use + for space   and Mail took those literally. I don't know if Java has some built-in method for urlencoding the string, but this link http://www.permadi.com/tutorial/urlEncoding/ shows some of the most common chars to encode:", 'questionId': '17373', 'answerId': '17398'}
{'answer': "start works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.", 'questionId': '17373', 'answerId': '17426'}
{'answer': ' I don\'t know if Java has some built-in method for urlencoding the string, but this link http://www.permadi.com/tutorial/urlEncoding/ shows some of the most common chars to encode: For percent-encoding mailto URI hnames and hvalues, I use the rules at http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding. Under http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations, there\'s a Java example that may help. Basically, I use: The string that\'s passed in should be a string with \\r\\n, and stray \\r already normalized to \\n. Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you\'re passing on the command-line is properly escaped and quoted. On windows that means: Quote the argument. Escape any " inside the quotes with \\. Escape any \\ that precede a " or the end of the string with \\. Also, on windows, if you\'re dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don\'t and return s on an exception (where some hvalue isn\'t completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute. Like \'start\', ShellExecute with "open" should open the mailto URI in the default client. Not sure about other OS\'s.', 'questionId': '17373', 'answerId': '17535'}
{'answer': "Never use Runtime.exec(String) on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone. Instead, use Runtime.exec(String[]) which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.", 'questionId': '17373', 'answerId': '27353'}
{'answer': 'In Java 1.6 you have a stardard way to open the default mailer of the platform: the Desktop.mail(URI) method.The URI can be used to set all the fields of the mail (sender, recipients, body, subject). You can check a full example of desktop integration in Java 1.6 on Using the Desktop API in Java SE 6', 'questionId': '17373', 'answerId': '27791'}
{'answer': 'You may use this... Also for formatting read A simple way of sending emails in Java: mail-to links', 'questionId': '17373', 'answerId': '12107210'}
{'answer': 'This is only a difference in text files, where UNIX uses a single Line Feed (LF) to signify a new line, Windows uses a Carriage Return/Line Feed (CRLF) and Mac uses just a CR. Binary files there should be no difference (i.e. a JPEG on a windows machine will be byte for byte the same as the same JPEG on a unix box.)', 'questionId': '17645', 'answerId': '17649'}
{'answer': 'There could also be a difference in character encoding for national characters. There is no "unix-encoding" but many linux-variants use UTF-8 as the default encoding. Mac OS (which is also a unix) uses its own encoding (macroman). I am not sure, what windows default encoding is. But this could be another source of trouble (apart from the different linebreaks). What are your problems? The linebreak-related problems can be easily corrected with the programs dos2unix or unix2dos on the unix-machine', 'questionId': '17645', 'answerId': '17650'}
{'answer': "If you are just interested in the content of text files, then yes the line endings are different.  Take a look at something like dos2unix, it may be of help here. (Of course there are many other things that make unix and windows files different, but I don't think you're interested in those other differences right now.)", 'questionId': '17645', 'answerId': '17654'}
{'answer': 'In addition to the new-line differences, the byte-order mark can cause problems if files are treated as Unicode on Windows.', 'questionId': '17645', 'answerId': '17659'}
{'answer': 'As pauldoo suggests, tools like dos2unix can be very useful. Note that these may be on your linux/unix system as fromdos or tofrodos, or perhaps even as the general purpose toolbox recode. However, another set of problems that you may come across can be related to single/multi-byte character encodings. If you see strange unexpected chars (not at end-of-line) then this could be the reason. Especially if you see square boxes, question marks, upside-down question marks, extra characters or unexpected accented characters. Running the command locale on your *nix box will tell you what the system locale is. If this is different to the encoding used in the text files that have been transferred over from the windows machine, then this can sometimes cause issues, depending on the usage of those files. You can use the very powerful recode command to try and convert between the different charsets as well as any line ending issues. recode -l will show you all of the formats and encodings that the tool can convert between. It is likely to be a VERY long list. When writing to files or reading from files (that you are in control of), it is often worth specifying the encoding to use, as most Java methods allow this. However, also ensuring that the system locale matches can save a lot of pain.', 'questionId': '17645', 'answerId': '17675'}
{'answer': "In addition to the answers given, you may find issues with the different file systems: On unix, files that start with a . are hidden. On windows, it's a filesystem flag that you probably don't have easy access to. This may result in files that are supposed to be hidden now becoming visible on the client machines. File permissions vary between the two. You will probably find, when you copy files onto a unix system, that the files now belong to the user that did the copying and have limited rights. You'll need to use chown/chmod to make sure the correct users have access to them.", 'questionId': '17645', 'answerId': '17678'}
{'answer': "You'll want to do floating point division, and then use the ceiling function, to round up the value to the next integer.", 'questionId': '17944', 'answerId': '17949'}
{'answer': "Another alternative is to use the mod() function (or '%'). If there is a non-zero remainder then increment the integer result of the division.", 'questionId': '17944', 'answerId': '17953'}
{'answer': 'This should give you what you want.  You will definitely want x items divided by y items per page, the problem is when uneven numbers come up, so if there is a partial page we also want to add one page.', 'questionId': '17944', 'answerId': '17954'}
{'answer': 'For C# the solution is to cast the values to a double (as Math.Ceiling takes a double): In java you should do the same with Math.ceil().', 'questionId': '17944', 'answerId': '17957'}
{'answer': 'Found an elegant solution: Source: Number Conversion, Roland Backhouse, 2001', 'questionId': '17944', 'answerId': '17974'}
{'answer': 'The integer math solution that Ian provided is nice, but suffers from an integer overflow bug. Assuming the variables are all int, the solution could be rewritten to use long math and avoid the bug: int pageCount = (-1L + records + recordsPerPage) / recordsPerPage; If records is a long, the bug remains. The modulus solution does not have the bug.', 'questionId': '17944', 'answerId': '96921'}
{'answer': "Converting to floating point and back seems like a huge waste of time at the CPU level. Ian Nelson's solution: Can be simplified to: AFAICS, this doesn't have the overflow bug that Brandon DuRette pointed out, and because it only uses it once, you don't need to store the recordsPerPage specially if it comes from  an expensive function to fetch the value from a config file or something. I.e. this might be inefficient, if config.fetch_value used a database lookup or something: This creates a variable you don't really need, which probably has (minor) memory implications and is just too much typing: This is all one line, and only fetches the data once:", 'questionId': '17944', 'answerId': '503201'}
{'answer': "For records == 0, rjmunro's solution gives 1.  The correct solution is 0.  That said, if you know that records > 0 (and I'm sure we've all assumed recordsPerPage > 0), then rjmunro solution gives correct results and does not have any of the overflow issues. All the integer math solutions are going to be more efficient than any of the floating point solutions.", 'questionId': '17944', 'answerId': '536219'}
{'answer': 'Alternative to remove branching in testing for zero: Not sure if this will work in C#, should do in C/C++.', 'questionId': '17944', 'answerId': '3473687'}
{'answer': 'A generic method, whose result you can iterate over may be of interest:', 'questionId': '17944', 'answerId': '4043686'}
{'answer': "A variant of Nick Berardi's answer that avoids a branch: Note: (-r >> (Integer.SIZE - 1)) consists of the sign bit of r, repeated 32 times (thanks to sign extension of the >> operator.)  This evaluates to 0 if r is zero or negative, -1 if r is positive.  So subtracting it from q has the effect of adding 1 if records % recordsPerPage > 0.", 'questionId': '17944', 'answerId': '5883806'}
{'answer': 'I had a similar need where I needed to convert Minutes to hours & minutes. What I used was:', 'questionId': '17944', 'answerId': '9771364'}
{'answer': 'The following should do rounding better than the above solutions, but at the expense of performance (due to floating point calculation of 0.5*rctDenominator):', 'questionId': '17944', 'answerId': '14754238'}
{'answer': "I do the following, handles any overflows: And use this extension for if there's 0 results: Also, for the current page number (wasn't asked but could be useful):", 'questionId': '17944', 'answerId': '21548669'}
{'answer': "In need of an extension method:  No checks here (overflow, DivideByZero, etc), feel free to add if you like. By the way, for those worried about method invocation overhead, simple functions like this might be inlined by the compiler anyways, so I don't think that's where to be concerned. Cheers. P.S. you might find it useful to be aware of this as well (it gets the remainder):", 'questionId': '17944', 'answerId': '39519292'}
{'answer': "You might be able to backport the additional libraries from Java 6 to Java 5, but I imagine it would be rather more trouble that it's worth.  Intel Macs with 64-bit processors (so not the original Intel Mac Mini) running Leopard have Java 6, so perhaps you could just target them?", 'questionId': '17993', 'answerId': '18013'}
{'answer': "Apple released Java 6 on the latest version of OS X. What features are you using specifically from Java6 that aren't in java5?", 'questionId': '17993', 'answerId': '18019'}
{'answer': "Do you know how much you would have to rewrite if you just went back to Java 5?  If you changes the JDK setting in your IDE and try to recompile it should give you a pretty good idea on how big the changes would actually be.  For most developers, Java 6 didn't really offer too much in the way of new features/APIs but I guess it's possible your project depends heavily on something that was added.", 'questionId': '17993', 'answerId': '18029'}
{'answer': "There are a couple of libraries out there which can help you. Unfortunately I haven't tried them myself, because I've never run into such a situation.  Retroweaver Retrotransaltor backport-jsr166", 'questionId': '17993', 'answerId': '19382'}
{'answer': "In my experience this is so easy that the whining takes more time than the doing.  There are very few things in 1.6 that can't be backported with a minute or so (literally) worth of work.  How many compile errors are you seeing when you try it with 1.5, and what for? Keep in mind that there are readily available, API compatible, low-footprint backports for the few things that are useful in 1.6 (SwingWorker).", 'questionId': '17993', 'answerId': '20275'}
{'answer': 'See here: http://en.wikipedia.org/wiki/Comparison_of_backporting_tools I tried retrotranslator from 1.6 to 1.4.2 and it works pretty well!', 'questionId': '17993', 'answerId': '230338'}
{'answer': 'There is also Java 8 for Mac OS X. New versions of Java would be compatible, like Java 8 is compatible with Java 5 Code, so Java 6 code is compatible too.', 'questionId': '17993', 'answerId': '34261965'}
{'answer': "As far as I know, iterate and instantiate is the only way to do this.  Something like (for others potential help, since I'm sure you know how to do this):", 'questionId': '18524', 'answerId': '18529'}
{'answer': '@Jonathan: I could be mistaken, but I believe that String.valueOf() in this case will call the String.valueOf(Object) function rather than getting boxed to String.valueOf(int).  String.valueOf(Object) just returns "null" if it is null or calls Object.toString() if non-null, which shouldn\'t involve boxing (although obviously instantiating new string objects is involved).', 'questionId': '18524', 'answerId': '18547'}
{'answer': "Instead of using String.valueOf I'd use .toString(); it avoids some of the auto boxing described by @johnathan.holland The javadoc says that valueOf returns the same thing as Integer.toString().", 'questionId': '18524', 'answerId': '18558'}
{'answer': "I think using Object.toString() for any purpose other than debugging is probably a really bad idea, even though in this case the two are functionally equivalent (assuming the list has no nulls).  Developers are free to change the behavior of any toString() method without any warning, including the toString() methods of any classes in the standard library. Don't even worry about the performance problems caused by the boxing/unboxing process.  If performance is critical, just use an array.  If it's really critical, don't use Java.  Trying to outsmart the JVM will only lead to heartache.", 'questionId': '18524', 'answerId': '18579'}
{'answer': 'The source for String.valueOf shows this: Not that it matters much, but I would use toString.', 'questionId': '18524', 'answerId': '18595'}
{'answer': 'You can\'t avoid the "boxing overhead"; Java\'s faux generic containers can only store Objects, so your ints must be boxed into Integers.  In principle it could avoid the downcast from Object to Integer (since it\'s pointless, because Object is good enough for both String.valueOf and Object.toString) but I don\'t know if the compiler is smart enough to do that.  The conversion from String to Object should be more or less a no-op, so I would be disinclined to worry about that one.', 'questionId': '18524', 'answerId': '18733'}
{'answer': 'Not core Java, and not generic-ified, but the popular Jakarta commons collections library has some useful abstractions for this sort of task.  Specifically, have a look at the collect methods on CollectionUtils Something to consider if you are already using commons collections in your project.', 'questionId': '18524', 'answerId': '18734'}
{'answer': "What you're doing is fine, but if you feel the need to 'Java-it-up' you could use a Transformer and the collect method from Apache Commons, e.g.: ..and then..", 'questionId': '18524', 'answerId': '19191'}
{'answer': 'To the people concerned about "boxing" in jsight\'s answer: there is none. String.valueOf(Object) is used here, and no unboxing to int is ever performed. Whether you use Integer.toString() or String.valueOf(Object) depends on how you want to handle possible nulls. Do you want to throw an exception (probably), or have "null" Strings in your list (maybe). If the former, do you want to throw a NullPointerException or some other type? Also, one small flaw in jsight\'s response: List is an interface, you can\'t use the new operator on it. I would probably use a java.util.ArrayList in this case, especially since we know up front how long the list is likely to be.', 'questionId': '18524', 'answerId': '33028'}
{'answer': 'An answer for experts only:', 'questionId': '18524', 'answerId': '57566'}
{'answer': 'Just for fun, a solution using the jsr166y fork-join framework that should in JDK7. (Disclaimer: Not compiled. Spec is not finalised. Etc.) Unlikely to be in JDK7 is a bit of type inference and syntactical sugar to make that withMapping call less verbose:', 'questionId': '18524', 'answerId': '61663'}
{'answer': "This is such a basic thing to do I wouldn't use an external library (it will cause a dependency in your project that you probably don't need). We have a class of static methods specifically crafted to do these sort of jobs. Because the code for this is so simple we let Hotspot do the optimization for us. This seems to be a theme in my code recently: write very simple (straightforward) code and let Hotspot do its magic. We rarely have performance issues around code like this - when a new VM version comes along you get all the extra speed benefits etc. As much as I love Jakarta collections, they don't support Generics and use 1.4 as the LCD. I am wary of Google Collections because they are listed as Alpha support level!", 'questionId': '18524', 'answerId': '125829'}
{'answer': 'Using Google Collections, you could use the transform method in the Lists class The List returned by transform is a view on the backing list - the transformation will be applied on each access to the transformed list. Be aware that Functions.toStringFunction() will throw a NullPointerException when applied to null, so only use it if you are sure your list will not contain null.', 'questionId': '18524', 'answerId': '1227099'}
{'answer': "Lambdaj allows to do that in a very simple and readable way. For example, supposing you have a list of Integer and you want to convert them in the corresponding String representation you could write something like that; Lambdaj applies the conversion function only while you're iterating on the result.", 'questionId': '18524', 'answerId': '2396243'}
{'answer': "Here's a one-liner solution without cheating with a non-JDK library.", 'questionId': '18524', 'answerId': '5781802'}
{'answer': 'I just wanted to chime in with an object oriented solution to the problem. If you model domain objects, then the solution is in the domain objects.  The domain here is a List of integers for which we want string values. The easiest way would be to not convert the list at all. That being said, in order to convert without converting, change the original list of Integer to List of Value, where Value looks something like this... This will be faster and take up less memory than copying the List. Good Luck!', 'questionId': '18524', 'answerId': '12322903'}
{'answer': "Solution for Java 8. A bit longer than the Guava one, but at least you don't have to install a library.", 'questionId': '18524', 'answerId': '23024375'}
{'answer': 'Another Solution using Guava and Java 8', 'questionId': '18524', 'answerId': '23293398'}
{'answer': "I can't find anything built in... but using the ExpandoMetaClass I can do this:  this adds the collectMap method to all ArrayLists... I'm not sure why adding it to List or Collection didn't work.. I guess that's for another question... but now I can do this... from List to calculated Map with one closure... exactly what I was looking for.  Edit: the reason I couldn't add the method to the interfaces List and Collection was because I did not do this: after that method call, you can add methods to interfaces.. which in this case means my collectMap method will work on ranges like this: which yields the map: [0:0, 1:2, 2:4]", 'questionId': '18538', 'answerId': '18981'}
{'answer': "Also, if you're use google collections (http://code.google.com/p/google-collections/), you can do something like this:", 'questionId': '18538', 'answerId': '18996'}
{'answer': "ok... I've played with this a little more and I think this is a pretty cool method... now any subclass of Map or Collection have this method... here I use it to reverse the key/value in a Map and here I use it to create a map from a list now I just pop this into a class that gets called as my app is starting and this method is available throughout my code. EDIT: to add the method to all arrays...", 'questionId': '18538', 'answerId': '19077'}
{'answer': 'What about something like this?', 'questionId': '18538', 'answerId': '149818'}
{'answer': 'Check out "inject".  Real functional programming wonks call it "fold". And, while you\'re at it, you probably want to define methods as Categories instead of right on the metaClass.  That way, you can define it once for all Collections: Example usage:', 'questionId': '18538', 'answerId': '198614'}
{'answer': 'Was the groupBy method not available when this question was asked?', 'questionId': '18538', 'answerId': '4484958'}
{'answer': "I've recently came across the need to do exactly that: converting a list into a map. This question was posted before Groovy version 1.7.9 came out, so the method collectEntries didn't exist yet. It works exactly as the collectMap method that was proposed: If for some reason you are stuck with an older Groovy version, the inject method can also be used (as proposed here). This is a slightly modified version that takes only one expression inside the closure (just for the sake of character saving!): The + operator can also be used instead of the <<.", 'questionId': '18538', 'answerId': '5645413'}
{'answer': "If what you need is a simple key-value pair, then the method collectEntries should suffice. For example But if you want a structure similar to a Multimap, in which there are multiple values per key, then you'd want to use the groupBy method", 'questionId': '18538', 'answerId': '42689859'}
{'answer': "I think the most flexible approach would be to implement your own file system on top of the RMS. You can handle the RMS records in a similar way as blocks on a hard drive and use a inode structure or similar to spread logical files over multiple blocks. I would recommend implementing a byte or stream-oriented interface on top of the blocks, and then possibly making another API layer on top of that for writing special data structures (or simply make your objects serializable to the data stream). Tanenbaum's classical book on operating systems covers how to implement a simple file system, but I am sure you can find other resources online if you don't like paper.", 'questionId': '19011', 'answerId': '19504'}
{'answer': 'RMS performance and implementation varies wildly between devices, so if platform portability is a problem, you may find that your code works well on some devices and not others. RMS is designed to store small amounts of data (High score tables, or whatever) not large amounts. You might find that some platforms are faster with files stored in multiple record stores. Some are faster with multiple records within one store. Many are ok for storage, but become unusably slow when deleting large amounts of data from the store. Your best bet is to use JSR-75 instead where available, and create your own file store interface that falls back to RMS if nothing better is supported. Unfortunately when it comes to JavaME, you are often drawn into writing device-specific variants of your code.', 'questionId': '19011', 'answerId': '25956'}
{'answer': 'For anything past a few kilobytes you need to use either JSR 75 or a remote server. RMS records are extremely limited in size and speed, even in some higher end handsets. If you need to juggle 1MB of data in J2ME the only reliable, portable way is to store it on the network. The HttpConnection class and the GET and POST methods are always supported. On the handsets that support JSR 75 FileConnection it may be valid alternative but without code signing it is an user experience nightmare. Almost every single API call will invoke a security prompt with no blanket permission choice. Companies that deploy apps with JSR 75 usually need half a dozen binaries for every port just to cover a small part of the possible certificates. And this is just for the manufacturer certificates; some handsets only have carrier-locked certificates.', 'questionId': '19011', 'answerId': '62837'}
{'answer': "I'm just starting to code for JavaME, but have experience with old versions of PalmOS, where all data chunks are limited in size, requiring the design of data structures using record indexes and offsets.", 'questionId': '19011', 'answerId': '81258'}
{'answer': "Under Blackberry OS 4.6 the RMS store size limit has been increased to 512Kb but this isn't much help as many devices will likely not have support for 4.6. The other option on Blackberry is the Persistent Store which has a record size limit of 64kb but no limit on the size of the store (other than the physical limits of the device).  I think Carlos and izb are right.", 'questionId': '19011', 'answerId': '83187'}
{'answer': 'It is quite simple, use JSR75 (FileConnection) and remember to sign your midlet with a valid (trusted) certificate.', 'questionId': '19011', 'answerId': '86314'}
{'answer': "Thanks everyone for useful commments. In the end the simplest solution was to limit the amount of data being stored, implementing code that adjusts the data according to how large the store is, and fetching data from the server on demand if its not stored locally. Thats interesting that the limit is increased in OS 4.6, with any luck my code will simply adjust on its own and store more data :) Developing a J2ME application for Blackberry without using the .cod compiler limits the use of JSR 75 some what since we can't sign the archive. As pointed out by Carlos this is a problem on any platform and I've had similar issues using the PIM part of it. The RMS seems to be incredibly slow on the Blackberry platform so I'm not sure how useful a inode/b-tree file system on top would be, unless data was cached in memory and written to RMS in a low priority background thread.", 'questionId': '19011', 'answerId': '96542'}
{'answer': "For read only I'm arriving at acceptable times (within 10s), by indexing a resource file. I've got two ~800KB CSV price list exports. Program classes and both those files compress to a 300KB JAR. On searching I display a List and run a two Threads in the background to fill it, so the first results come pretty quickly and are viewable immediately. I first implemented a simple linear search, but that was too slow (~2min).  Then I indexed the file (which is alphabetically sorted) to find the beginnings of each letter. Now before parsing line by line, I first InputStreamReader.skip() to the desired position, based on first letter. I suspect the delay comes mostly from decompressing the resource, so splitting resources would speed it up further. I don't want to do that, not to loose the advantage of easy upgrade. CSV are exported without any preprocessing.", 'questionId': '19011', 'answerId': '1660340'}
{'answer': 'Are you just asking how to store UTF-8/16 characters in a DB? in mysql it\'s just a matter of making sure you build with UTF8 support and setting that as the default, or specifying it at the column or table level. I\'ve done this in oracle and mysql before. Create a table and cut and paste some i18n data into it and see what happens... you might be set already.. or am I completely missing your point?  edit:  to be more explicit... I usually implement a three column table... language, key, value... where "value" contains potentially foreign language words or phrases... "language" contains some language key and "key" is an english key (i.e. login.error.password.dup)... language and key are indexed...   I\'ve then built interfaces on a structure like this that shows each key with all its translations (values)... it can get fancy and include audit trails and "dirty" markers and all the other stuff you need to enable translators and data entry folk to make use of it.. Edit 2: Now that you added the info about the JSTL tags, I understand a bit more... I\'ve never done that myself.. but I found this old info on theserverside...', 'questionId': '19295', 'answerId': '19308'}
{'answer': 'We have a database table with key/language/term where key is a n integer and is a combined primary key together with language. We are using Struts, so we ended up writing our own PropertyMessageResources implementation which allows us to do something like <bean:message key="impressum.text" />. It works very well and gives us the flexibility to do dynamically switch languages in the front-end as well as updating the translations on the fly.', 'questionId': '19295', 'answerId': '19377'}
{'answer': "I finally got this working with danb's help above. This is my resource bundle class and resource bundle control class. I used this code from @[danb]'s. and wrote this class.", 'questionId': '19295', 'answerId': '32325'}
{'answer': "Actuly what ScArcher2 needed is davids response which is not marked a correct or helpfull. The solution ScArcher2 chose to use is imo terrible mestake:) Loading ALL the translations at one time... in any bigger application its gonna kill it. Loading thousends of translations each request... david's method is more commonly used in real production environments.  Sometimes to limit db calls, which is with every message translated, you can create groups of translations by topic, functionality etc. to preload them. But this is little bit more complex and can be substituted with good cache system.", 'questionId': '19295', 'answerId': '12210837'}
{'answer': 'If you already know Java/C# I\'d recommend going directly to C instead of C++. According to the website, GLUT has the same bindings for C as C++ so you should be all set. Anyways, the best way to learn C is to purchase and read a copy of "The C Programming Language" and sit down with your C compiler and get your stuff to run.', 'questionId': '19347', 'answerId': '19351'}
{'answer': 'Effective C++ by Scott Meyers is a great book to help you learn C++.  Gives you an overview of the language and introduces a lot of key concepts that you will use throughout the development of basically any C++ program.', 'questionId': '19347', 'answerId': '19356'}
{'answer': "Yeah, I got bit by the same bug.  The university tended to lean on Java, and then allowed you to choose the language you wanted to work with during projects. The best way is to just jump in. Start small, take baby steps, and just Google things that confuse you when you get there. Also find projects that have released their source code. See how they structure their programs. Basically, just tinker with concepts.  There is plenty of information around the web. Make it fun and grab a C++ game development book so it doesn't become mind numbing too quickly.  Here's some places that I found useful while learning http://www.cprogramming.com/ http://www.wikipedia.com http://www.cplusplus.com/", 'questionId': '19347', 'answerId': '19372'}
{'answer': " Effective C++ by Scott Meyers is a great book to help you learn C++. Gives you an overview of the language and introduces a lot of key concepts that you will use throughout the development of basically any C++ program. I love this book in all 3 editions, and it was one of the books in a class I had as a Senior at UT, but it's just not a starting book.  You can become comfortable in C++ with a lot less, though you certainly won't be one with the compiler until you have read Meyer's work.   I don't know if it's still in print but I found Navigating C++ usefull, but I was also very comfortable with pointers from Pascal.  Err of course I am forgetting that 15 years ago you had to learn what OOP was, now it's a little more assumed.  So perhaps Meyer's is not out of line.  Thoughts?", 'questionId': '19347', 'answerId': '19384'}
{'answer': "Wikipedia has an article on comparisons between Java and C++. You don't have to worry about checked exceptions in C++, but you do need to know about const correctness.", 'questionId': '19347', 'answerId': '19399'}
{'answer': "There are two main differences: the syntax, and memory management. In C++ you have pointers, which are more powerful (or less powerful depending on your interpretation of power) object references, which you already know about from Java. In Java you might do this: In C++ you would do this: The syntactical difference is obvious: '->' instead of '.' when calling an object method from a pointer to an object. In C++, you have to free the memory explicitly when you are done with an object. At the end of the day you are doing the same thing in C++ and Java, instantiating objects and calling methods, putting useless semicolons at the end of every line, etc. Is it any wonder that Python is becoming so popular?: Skimming through any half decent C++ text will help you fill in the rest of the details.", 'questionId': '19347', 'answerId': '19439'}
{'answer': "I also thoroughly recommend Bruce Eckel's Thinking in C++. A fantastic book for already experienced programmers that want to get into the C++ mindset.  He is kind enough to make electronic versions of his books available for free.", 'questionId': '19347', 'answerId': '19522'}
{'answer': 'I strongly recommend that anyone learning C++ reads Stroustrups "The C++ Programming Language."  Meyers and Eckel have great stuff, but nothing beats learning from the guy who decided what the language should be and how he intended for it to be used.', 'questionId': '19347', 'answerId': '20733'}
{'answer': 'I had the exact same issue.  The only book I was able to find was "Pro Visual C++ 2005 for C# Developers" by Dean C. Wills.  It\'s a good read with excellent examples, and I think the angle from which the book comes is probably what you\'re looking for.', 'questionId': '19347', 'answerId': '21153'}
{'answer': "You will need a completely differnt feeling for memory handling. Also think about freeing everything you don't need anymore. In Java and C# you just let go of your objects and the memory gets tidy up for you - you can't do that in CPP", 'questionId': '19347', 'answerId': '9797533'}
{'answer': "I'd probably be looking to use a JTable rather than a JList and since the default rendering of a checkbox is rather ugly, I'd probably be looking to drop in a custom TableModel, CellRenderer and CellEditor to represent a boolean value. Of course, I would imagine this has been done a bajillion times already. Sun has good examples.", 'questionId': '19766', 'answerId': '19796'}
{'answer': "Create a custom ListCellRenderer and asign it to the JList. This custom ListCellRenderer must return a JCheckbox in the implementantion of getListCellRendererComponent(...) method. But this JCheckbox will not be editable, is a simple paint in the screen is up to you to choose when this JCheckbox must be 'ticked' or not,  For example, show it ticked when the row is selected (parameter isSelected), but this way the check status will no be mantained if the selection changes. Its better to show it checked consulting the data below the ListModel, but then is up to you to implement the method who changes the check status of the data, and notify the change to the JList to be repainted. I Will post sample code later if you need it ListCellRenderer", 'questionId': '19766', 'answerId': '19804'}
{'answer': "Odds are good w/ Java that someone has already implemented the widget or utility you need. Part of the benefits of a large OSS community. No need to reinvent the wheel unless you really want to do it yourself. In this case it would be a good learning exercise in CellRenderers and Editors. My project has had great success with JIDE. The component you want, a Check Box List, is in the JIDE Common Layer (which is OSS and hosted on java.net). The commercial stuff is good too, but you don't need it. http://www.jidesoft.com/products/oss.htm https://jide-oss.dev.java.net/", 'questionId': '19766', 'answerId': '19840'}
{'answer': "A wonderful answer is this CheckBoxList. It implements Telcontar's answer (though 3 years before :)... I'm using it in Java 1.6 with no problems. I've also added an addCheckbox method like this (surely could be shorter, haven't used Java in a while): I tried out the demo for the Jidesoft stuff, playing with the CheckBoxList I encountered some problems (behaviors that didn't work). I'll modify this answer if I find problems with the CheckBoxList I linked to.", 'questionId': '19766', 'answerId': '1966151'}
{'answer': 'I recommend you use a JPanel with a GridLayout of 1 column. Add the checkBoxes to the JPanel, and set the JPanel as the data source of a JScrollPane. And to get the selected CheckBoxes, just call the getComponents() of the JPanel to get the CheckBoxes.', 'questionId': '19766', 'answerId': '18803557'}
{'answer': 'Better solution for Java 7 and newer I stumbled upon this question and realized that some of the answers are pretty old and outdated. Nowadays, JList is generic and thus there are better solutions. My solution of the generic JCheckBoxList: For dynamically adding JCheckBox lists you need to create your own ListModel or add the DefaultListModel. The DefaultListModel are generic and thus you can use methods specified by JAVA 7 API here like this:', 'questionId': '19766', 'answerId': '24777687'}
{'answer': 'Here is just a little addition to the JCheckBoxList by Rawa. This will add the ability to select using space bar. If multiple items are selected, all will be set to inverted value of the first item.', 'questionId': '19766', 'answerId': '25521015'}
{'answer': 'Just implement a ListCellRenderer and set the renderer this will result in Details at Custom swing component renderers. PS: If you want radio elements just replace extends JCheckbox with extends JRadioButton.', 'questionId': '19766', 'answerId': '27215934'}
{'answer': 'All of the aggregate components in Swing--that is, components made up other components, such as JTable, JTree, or JComboBox--can be highly customized. For example, a JTable component normally displays a grid of JLabel components, but it can also display JButtons, JTextFields, or even other JTables. Getting these aggregate components to display non-default objects is the easy part, however. Making them respond properly to keyboard and mouse events is a much harder task, due to Swing\'s separation of components into "renderers" and "editors." This separation was (in my opinion) a poor design choice and only serves to complicate matters when trying to extend Swing components. To see what I mean, try enhancing Swing\'s JList component so that it displays checkboxes instead of labels. According to Swing philosophy, this task requires implementing two interfaces: ListCellRenderer (for drawing the checkboxes) and CellEditor (for handling keyboard and mouse events on the checkboxes). Implementing the ListCellRenderer interface is easy enough, but the CellEditor interface can be rather clumsy and hard to understand. In this particular case, I would suggest forgetting CellEditor entirely and to handle input events directly, as shown in the following code. Here, I intercept mouse clicks from the listbox and simulate a click on the appropriate checkbox. The result is a "CheckBoxList" component that is both simpler and smaller than an equivalent component using the CellEditor interface. To use the class, simply instantiate it, then pass it an array of JCheckBox objects (or subclasses of JCheckBox objects) by calling setListData. Note that the checkboxes in this component will not respond to keypresses (i.e. the spacebar), but you could always add your own key listener if needed. Source: DevX.com', 'questionId': '19766', 'answerId': '32712019'}
{'answer': "The concept of closures requires the concept of contexts. C's context is based on the stack and the registers of the CPU, so to create a block/closure, you need to be able to manipulate the stack pointer in a correct (and reentrant) way, and store/restore registers as needed. The way this is done by interpreters or virtual machines is to have a context structure or something similar, and not use the stack and registers directly. This structure keeps track of a stack and optionally some registers, if you're designing a register based VM. At least, that's the simplest way to do it (though slightly less performant than actually mapping things correctly).", 'questionId': '19838', 'answerId': '20154'}
{'answer': 'There\'s a good set of slides on Ruby Blocks as part of the "Rails with Passion" course: Ruby_Blocks.pdf This covers representing a block, how they get passed arguments and executed, and even further into things like Proc objects.  It\'s very clearly explained. It might then be of interest to look at how the JRuby guys handled these in their parsing to Java.  Take a look at the source at codehaus.', 'questionId': '19838', 'answerId': '22164'}
{'answer': "I haven't actually implemented any of this, so take it with a sack of salt. There are two parts to a closure: the data environment and the code environment. Like you said, you can probably pass a void* to handle references to data. You could probably use setjmp and longjmp to implement the non-linear control flow jumps that the Ruby break requires.  If you want closures you should probably be programming in a language that actually supports them. :-) UPDATE: Interesting things are happening in Clang. They've prototyped a closure for C. http://lists.cs.uiuc.edu/pipermail/cfe-dev/2008-August/002670.html might prove to be interesting reading.", 'questionId': '19838', 'answerId': '38105'}
{'answer': 'Maybe encode them into a known set - something like base 64 is a popular choice.', 'questionId': '19893', 'answerId': '19898'}
{'answer': 'Try Base64 encoding/decoding your binary data. Also look into CDATA sections', 'questionId': '19893', 'answerId': '19903'}
{'answer': 'You could encode the binary data using base64 and put it into a Base64 element; the below article is a pretty good one on the subject. Handling Binary Data in XML Documents', 'questionId': '19893', 'answerId': '19904'}
{'answer': 'I usually encode the binary data with MIME Base64 or URL encoding.', 'questionId': '19893', 'answerId': '19909'}
{'answer': "XML is so versatile... XML is like violence - If it doesn't solve your problem, you're not using enough of it. EDIT: BTW: Base64 + CDATA is probably the best solution (EDIT2: Whoever upmods me, please also upmod the real answer. We don't want any poor soul to come here and actually implement my method because it was the highest ranked on SO, right?)", 'questionId': '19893', 'answerId': '19939'}
{'answer': 'Base64 is indeed the right answer but CDATA is not, that\'s basically saying: "this could be anything", however it must not be just anything, it has to be Base64 encoded binary data. XML Schema defines Base 64 binary as a primitive datatype which you can use in your xsd.', 'questionId': '19893', 'answerId': '20646'}
{'answer': 'You can also Uuencode you original binary data. This format is a bit older but it does the same thing as base63 encoding.', 'questionId': '19893', 'answerId': '36955'}
{'answer': 'Any binary-to-text encoding will do the trick. I use something like that', 'questionId': '19893', 'answerId': '3156135'}
{'answer': "I had this problem just last week. I had to serialize a PDF file and send it, inside an XML file, to a server. If you're using .NET, you can convert a binary file directly to a base64 string and stick it inside an XML element. Or, there is a method built right into the XmlWriter object. In my particular case, I had to include Microsoft's datatype namespace: The string abc looks something that looks like this:", 'questionId': '19893', 'answerId': '3400927'}
{'answer': "Here's a good example of how to proceed XEP-0239 PS: don't forget to read Mo's answer. PS2: read the NOTICE section on the XEP.", 'questionId': '19893', 'answerId': '3401803'}
{'answer': 'Do not use base64 encoding as it increases the amount of data you need to store by at least 40%. Rather use other encoding methods like yEnc.', 'questionId': '19893', 'answerId': '9326197'}
{'answer': "Base64 overhead is 33%. BaseXML for XML1.0 overhead is only 20%. But it's not a standard and only have a C implementation yet. Check it out if you're concerned with data size. Note that however browsers tends to implement compression so that it is less needed. I developed it after the discussion in this thread: Encoding binary data within XML : alternatives to base64.", 'questionId': '19893', 'answerId': '17478845'}
{'answer': "If you have control over the XML format, you should turn the problem inside out. Rather than attaching the binary XML you should think about how to enclose a document that has multiple parts, one of which contains XML. The traditional solution to this is an archive (e.g. tar). But if you want to keep your enclosing document in a text-based format or if you don't have access to an file archiving library, there is also a standardized scheme that is used heavily in email and HTTP which is multipart/* MIME with Content-Transfer-Encoding: binary.  For example if your servers communicate through HTTP and you want to send a multipart document, the primary being an XML document which refers to a binary data, the HTTP communication might look something like this: As in above example, the XML refer to the binary data in the enclosing multipart by using a cid URI scheme which is an identifier to the Content-Id header. The overhead of this scheme would be just the MIME header. A similar scheme can also be used for HTTP response. Of course in HTTP protocol, you also have the option of sending a multipart document into separate request/response. If you want to avoid wrapping your data in a multipart is to use data URI: But this has the base64 overhead.", 'questionId': '19893', 'answerId': '27396540'}
{'answer': 'You should find your answer in the Java language specification. You have forgot static method call, method call inside parameters...', 'questionId': '19952', 'answerId': '19967'}
{'answer': 'Calling a method using reflection (the name of the method is in a string).', 'questionId': '19952', 'answerId': '19973'}
{'answer': "You could use the Byte Code Engineering Library with binaries. You can use a DescendingVisitor to visit a class' members and references. I've used it to find class dependencies. Alternatively, you could reuse some model of the source files. I'm pretty sure the Java editor in the Eclipse JDT is backed by some form of model.", 'questionId': '19952', 'answerId': '19983'}
{'answer': "Does M include calls to its own methods?  Or calls to inner classes? For instance: What would the M value of this be?  There's only three function calls to a method not defined in this class (the calls in the d() and g() functions).  Do you want to include calls to inner classes, or calls to the main class made in the inner class?  Do you want to include calls to other methods on the same class? If you're looking at any method calls, regardless of the source, then a regex could probably work, but would be tricky to get right (does your regex properly ignore strings that contain method-call like contents?  Does it handle constructor calls properly?).  If you care about the source of the method call then regexes probably won't get you what you want.  You'd need to use reflection (though unfortunately I don't know enough about reflection to be helpful there).", 'questionId': '19952', 'answerId': '19998'}
{'answer': "I think you're better off flattening your directory structure.  Perhaps you want to come up with a naming convention for the directories such that they sort nicely when viewing all of the projects, but ultimately I don't think all of that extra hierarchy is necessary. Assuming you're using Eclipse as your IDE all of the projects are going to end up in a flat list once you import them anyway so you don't really gain anything from the additional sub directories.  That in addition to the fact that the configuration is so much simpler without all the extra hierarchy makes the choice pretty clear in my mind. You might also want to consider combining some of the modules.  I know nothing about your app or domain, but it seems like a lot of those leaf level modules might be better suited as just packages or sets of packages inside another top level module.  I'm all for keeping jars cohesive, but it can be taken too far sometimes.", 'questionId': '20003', 'answerId': '20681'}
{'answer': 'We have a largish application (160+ OSGi bundles where each bundle is a Maven module) and the lesson we learned, and continue to learn, is that flat is better. The problem with encoding semantics in your hierarchy is that you lose flexibility. A module that is 100% say "communication" today may be partly "service" tomorrow and then you\'ll need to be moving things around in your repository and that will break all sorts of scripts, documentation, references, etc. So I would recommend a flat structure and to encode the semantics in another place (say for example an IDE workspace or documentation). I\'ve answered a question about version control layout in some detail with examples at another question, it may be relevant to your situation.', 'questionId': '20003', 'answerId': '20682'}
{'answer': "I don't work in the games industry, but it sounds to me like this will do the same thing for video games as the Quake and Half-Life engines did. That is they will promote getting young developers interested in the industry and promote development of indie games.  From what I can tell, video game companies do not reuse most of their code, because if they do it implies that their new game is just a rehash of an old one. Everyone wants a cool new physics engine, better graphics, new ways to play the game. Most video game engines and frameworks are made for a specific scenario and thus are not very bendable to other situations.  Maybe Darkstar will get it right though, but I kinda doubt it, since generalizing only works for so much.", 'questionId': '20034', 'answerId': '21240'}
{'answer': " From what I can tell, video game companies do not reuse most of their code, because if they do it implies that their new game is just a rehash of an old one. Um... if you're referring to the long tail of video game companies, maybe. Within a company that has had a series of successful games, there is usually some modicum of reuse. Major hardware changes can result in ditching a lot of work, but it really depends on the company.", 'questionId': '20034', 'answerId': '21263'}
{'answer': 'Sounds like useless tech to me. The MMO world is controlled by a few big game companies that already have their own tech in place. Indie game developers love trying to build MMO\'s and sometimes they do, but those games rarely gain traction. Larger companies breaking into the MMO world would probably license "proven" technology, or extend their own. Game companies reuse vast quantities of code from game to game. Most/many game companies have developed their own tech internally, and use it on every game they produce. Occasionally, they will do something like replace their physics code with a 3rd party physics engine. If their internal code base (game engine, design tools, internal pipeline) starts to age too much, or become unwieldy, they might switch to one of the big game engines like Unreal. Even then, major chunks of code will continue to be re-used from game to game.', 'questionId': '20034', 'answerId': '151218'}
{'answer': 'It sounds like fun to design and code, but I think it ultimately comes down to useless abstractions (to steal from Joel).', 'questionId': '20034', 'answerId': '159845'}
{'answer': 'It\'s very common for games to reuse "game engines," even those from third-parties. This sounds like another step in that direction.', 'questionId': '20034', 'answerId': '160228'}
{'answer': 'Edit: This was written before Oracle bought Sun and started a rampage to kill everything that does not make them a billion $ per day. See the comments for an OSS Fork. I still stand by my opinion that stuff like that (MMO Middleware) is realistic, you just need a company that doesn\'t suck behind it. The Market may be dominated by few large games, but that does not mean that there is not a lot of room for more niche games. Lets face it: If you want to reach 100.000+ players, you\'re ending up building your own technology stack, at least for the critical core. That\'s what CCP did for EVE Online (StacklessIO), that\'s what Blizzard did for World of Warcraft (although they do use many third-party libraries), that\'s what Mythic did for Warhammer Online (although they are based on Gamebryo). However, if you aim to be a small, niche MMO (like the dozens of Free-to-Play/Itemshop MMOs), then getting the Network stuff right is just insanely hard, data consistency is even harder and scalability is the biggest b*tch. But game technology is not your only problem - you also need to tackle Billing. Credit Card only? Have fun selling in Germany then, people there want ELV. That\'s where you need a reliable billing provider, but you still need to wire in the billing application with your accounts to make sure that accounts are blocked/reactivated when the billing fails. There are some companies already offering "MMO Infratructure Services" (i.e. Arvato\'s EEIS), but the bottom line is: Stuff like Project Darkstar IS realistic, but assuming that you can build a Multi-Billion-MMO entirely on a Third Party Stack is optimistic, possibly idealistic. But then again, entirely inventing all of the technology is even more stupid - use the Third Party stuff that you need (i.e. Billing, Font Rendering, Audio Output...), but write the stuff that really makes or breaks your business (i.e. Network stack, User interface etc.) on your own. (Note: Jeff\'s posting may be a bit flawed, but the overall direction is correct IMHO.) Addendum: Also, the game industry does license and reuse engines a lot. The most prominent game Engines are the Unreal Engine, Source Engine and id Tech, which fuel dozens, if not hundreds of games. But there are some lesser-known (outside of the industry) engines. There is Gamebryo, the Middleware behind games like Civilization 4 and Fallout 3, there was RenderWare that is now only EA-in-House, but used in games like Battlefield 2 or The Sims 3. There is the open source Ogre3d, which was used in some commercial titles. If you\'re just looking for Sound, there\'s stuff like FMOD or if you want to do font-rendering, why not give FreeType a spin? What I\'m saying is: Third-Party Engines/Middleware do exist, and they ARE being successfully used since more than a decade (I know for sure that id\'s Wolfenstein Engine was licensed to other companies, and that was 1992), even by big companies in multi-million-dollar titles. The important thing is the support, because a good engine with no help in case of an issue is pretty much worthless or at least very expensive if the developer has to spend their game-development-time with unneccessary debugging of the Engine. If the Darkstar folks manage to get the support side right and 2 or 3 higher profile titles out, I do believe it could succeed in opening the MMO market to a lot more smaller developers and indies.', 'questionId': '20034', 'answerId': '485304'}
{'answer': "I think it's a great thing to do. Developers not having to worry about all these things that project darkstar takes care of, and it's very easy to use. But it's not all about just getting it to work and not having to learn everything about internet-communication, It's also about performance. Project darkstar has been under development for over 2 years and it keeps getting better,faster and more robust. I think it will be hard and probably not worth the time to write these things when aiming at a specific game, when technologies like this can be used instead. And you also get nice information during runtime telling you where in an application there's a cause of slowdown or deadlocks so you can improve that.", 'questionId': '20034', 'answerId': '1148375'}
{'answer': 'Optimising bytecode is probably an oxymoron in most cases. Unless you control the VM, you have no idea what it does to speed up code execution, if anything. The compiler would need to know the details of the VM in order to generate optimised code.', 'questionId': '20127', 'answerId': '20141'}
{'answer': " Optimising bytecode is probably an oxymoron in most cases I don't think that's true. Optimizations like hoisting loop invariants and propagating constants can never hurt, even if the JVM is smart enough to do them on its own, by simple virtue of making the code do less work.", 'questionId': '20127', 'answerId': '20151'}
{'answer': "I'm just gonna add two links which explain Java's bytecode pretty well and some of the various optimization of the JVM during runtime.", 'questionId': '20127', 'answerId': '20870'}
{'answer': "Optimisation is what makes JVMs viable as environments for long running applications, you can bet that SUN, IBM and friends are doing their best to ensure they can optimise your bytecode and JIT-compiled code in an efficient a manner as possible. With that being said, if you think you can pre-optimise your bytecode then it probably won't do much harm. It is worth being aware, however, that JVMs can tend towards performing better (and not crashing) when presented with just the sort of bytecode the Java compiler tends to construct.  It is not unknown for optimisations to be missed or even for the JVM to crash when permutations of bytecode occur that are correct but unlike what would be produced by javac.  Hopefully that sort of thing is more in the past now, but may be something to be aware of.", 'questionId': '20127', 'answerId': '78690'}
{'answer': 'Obfuscators such as ProGuard will perform many static optimisations on your bytecode for you.', 'questionId': '20127', 'answerId': '374308'}
{'answer': 'The HotSpot compiler will optimize your code at runtime better than is possible at compile-time - it has more information to work with, after all.  The only time you should be optimizing the bytecode instead of just your algorithm is when you are targeting mobile devices, such as the Blackberry, where the JVM for that platform is not powerful enough to optimize code at runtime and just executes the bytecode.', 'questionId': '20127', 'answerId': '377671'}
{'answer': "Note to Aseraphim: It can also be useful to optimise bytecode for non-embedded applications in some limited cases: When delivering code over the wire, eg for WebStart apps, to minimise deliverable/cache size and because you don't necessarily know the capability/speed of the client. For code that you know is performance critical and used at start-up before (say) HotSpot has had time to gather any stats. Again, the transformations that a good optimiser/obfuscator performs can be very helpful.", 'questionId': '20127', 'answerId': '402571'}
{'answer': 'Your code was fine except for the Base 64 encoding bit (which you mentioned was a test), the reason the output may not have made sense is that you were displaying a raw byte array (doing toString() on a byte array returns its internal Java reference, not the String representation of the contents). Here\'s a version that\'s just a teeny bit cleaned up and which prints "kyle boon" as the decoded string:', 'questionId': '20227', 'answerId': '20670'}
{'answer': 'I had hard times figuring it out myself and this post helped me to find the right answer for my case. When working with financial messaging as ISO-8583 the 3DES requirements are quite specific, so for my especial case the "DESede/CBC/PKCS5Padding" combinations wasn\'t solving the problem. After some comparative testing of my results against some 3DES calculators designed for the financial world I found the the value "DESede/ECB/Nopadding" is more suited for the the specific task. Here is a demo implementation of my TripleDes class (using the Bouncy Castle provider)', 'questionId': '20227', 'answerId': '10164989'}
{'answer': 'Here\'s a very simply static encrypt/decrypt class biased on the Bouncy Castle no padding example by Jose Luis Montes de Oca.  This one is using "DESede/ECB/PKCS7Padding" so I don\'t have to bother manually padding.', 'questionId': '20227', 'answerId': '11367849'}
{'answer': 'Here is a solution using the javax.crypto library and the apache commons codec library for encoding and decoding in Base64:  Running the above program results with the following output:', 'questionId': '20227', 'answerId': '13612902'}
{'answer': '', 'questionId': '20227', 'answerId': '25397364'}
{'answer': 'If you encode it in base64, this will turn any data into ascii safe text, but base64 encoded data is larger than the orignal data', 'questionId': '20778', 'answerId': '20779'}
{'answer': "How are you building your XML document?  If you use java's built in XML classes then the string encoding should be handled for you. Take a look at the javax.xml and org.xml packages.  That's what we use for generating XML docs, and it handles all the string encoding and decoding quite nicely. ---EDIT: Hmm, I think I misunderstood the problem.  You're not trying to encode a regular string, but some set of arbitrary binary data?  In that case the Base64 encoding suggested in an earlier comment is probably the way to go.  I believe that's a fairly standard way of encoding binary data in XML.", 'questionId': '20778', 'answerId': '20831'}
{'answer': 'See this question, How do you embed binary data in XML? Instead of converting the byte[] into String then pushing into XML somewhere, convert the byte[] to a String via BASE64 encoding (some XML libraries have a type to do this for you). The BASE64 decode once you get the String back from XML. Use http://commons.apache.org/codec/ You data may be getting messed up due to all sorts of weird character set restrictions and the presence of non-priting characters. Stick w/ BASE64.', 'questionId': '20778', 'answerId': '20844'}
{'answer': 'String(byte[]) treats the data as the default character encoding. So, how bytes get converted from 8-bit values to 16-bit Java Unicode chars will vary not only between operating systems, but can even vary between different users using different codepages on the same machine! This constructor is only good for decoding one of your own text files. Do not try to convert arbitrary bytes to chars in Java! Encoding as base64 is a good solution. This is how files are sent over SMTP (e-mail). The (free) Apache Commons Codec project will do the job. Alternatively, you can use the Java 6 DatatypeConverter:', 'questionId': '20778', 'answerId': '20860'}
{'answer': "Can you give us some more information on how you add the combo boxes to the JPanel?  This is a pretty common thing to do in Swing so I doubt that it's a JVM issue but I guess anything is possible. Specifically, I would double check to make sure you're not accessing the GUI from any background threads.  In this case, maybe you're reading the choices from a DB or something and updating the JComboBox from a background thread, which is a big no-no in Swing.  See SwingUtils.invokeLater().", 'questionId': '20880', 'answerId': '20901'}
{'answer': 'Thxm, Mc! http://asm.objectweb.org/ is another one. Excellent documentation on byte code instrumentation, but nothing "directly" aimed at writing a coverage tool - just some hints or ideas.', 'questionId': '2092', 'answerId': '2216'}
{'answer': 'Is your scripting language bytecode generating? Does it generate debug metadata? If so, bytecode instrumentation is probably the way to go. In fact existing tools like will probably work; perhaps with minimal modification (the typical problem is the tools are written to work with Java and assume com.foo.Bar.class corresponds to com/foo/Bar.java. Unwinding that assumption can be tedious.) EMMA is a ClassLoader that does byte-code re-writing for code-coverage collection in Java. The coding style is a little funky, but I recommend reading the source for some ideas. If your scripting language is interpreted then you will need something higher-level (source level) that hooks into the interpreter.', 'questionId': '2092', 'answerId': '7076'}
{'answer': 'You can also get the source from a Open Source code coverage tool and learn from it.', 'questionId': '2092', 'answerId': '9086'}
{'answer': "You might also want to use something like BCEL to analyse which lines of source actually exist in the byte-code.  You don't want to report that things like blank lines and comments haven't been covered.", 'questionId': '2092', 'answerId': '65482'}
{'answer': "If you're talking about ColdFusion (which I assume you are from the tags) then I'm not sure this is doable but I may be very wrong here... IIRC, When CF compiles it essentially compiles into a interpreted form of the CFML as a plain old java source file, this is then compiled into the class.  Therefore, any instrumentation that you may have will apply to the intermediary version rather than the CFML itself. Saying that though, Adobe have got the CF debugger now which can step though code, so please prove me wrong - I'd love code coverage in CFML.", 'questionId': '2092', 'answerId': '267182'}
{'answer': 'We run DB40 .NET version in a large client/server project. Our experiences is that you can potentially get much better performance than typical relational databases. However, you really have to tweak your objects to get this kind of performance. For example, if you\'ve got a list containing a lot of objects, DB4O activation of these lists is slow. There are a number of ways to get around this problem, for example, by inverting the relationship. Another pain is activation. When you retrieve or delete an object from DB4O, by default it will activate the whole object tree. For example, loading a Foo will load Foo.Bar.Baz.Bat, etc until there\'s nothing left to load. While this is nice from a programming standpoint, performance will slow down the more nesting in your objects. To improve performance, you can tell DB4O how many levels deep to activate. This is time-consuming to do if you\'ve got a lot of objects. Another area of pain was text searching. DB4O\'s text searching is far, far slower than SQL full text indexing. (They\'ll tell you this outright on their site.) The good news is, it\'s easy to setup a text searching engine on top of DB4O. On our project, we\'ve hooked up Lucene.NET to index the text fields we want. Some APIs don\'t seem to work, such as the GetField APIs useful in applying database upgrades. (For example, you\'ve renamed a property and you want to upgrade your existing objects in the database, you need to use these "reflection" APIs to find objects in the database. Other APIs, such as the [Index] attribute don\'t work in the stable 6.4 version, and you must instead specify indexes using the Configure().Index("someField"), which is not strongly typed. We\'ve witnessed performance degrade the larger your database. We have a 1GB database right now and things are still fast, but not nearly as fast as when we started with a tiny database. We\'ve found another issue where Db4O.GetByID will close the database if the ID doesn\'t exist anymore in the database. We\'ve found the Native Query syntax (the most natural, language-integrated syntax for queries) is far, far slower than the less-friendly SODA queries. So instead of typing: Instead of that nice query code, you have to an ugly SODA query which is string-based and not strongly-typed. For .NET folks, they\'ve recently introduced a LINQ-to-DB4O provider, which provides for the best syntax yet. However, it\'s yet to be seen whether performance will be up-to-par with the ugly SODA queries. DB4O support has been decent: we\'ve talked to them on the phone a number of times and have received helpful info. Their user forums are next to worthless, however, almost all questions go unanswered. Their JIRA bug tracker receives a lot of attention, so if you\'ve got a nagging bug, file it on JIRA on it often will get fixed. (We\'ve had 2 bugs that have been fixed, and another one that got patched in a half-assed way.) If all this hasn\'t scared you off, let me say that we\'re very happy with DB4O, despite the problems we\'ve encountered. The performance we\'ve got has blown away some O/RM frameworks we tried. I recommend it. update July 2015 Keep in mind, this answer was written back in 2008. While I appreciate the upvotes, the world has changed since then, and this information may not be as reliable as it was when it was written.', 'questionId': '21207', 'answerId': '24499'}
{'answer': "Main problem I've encountered with it is reporting. There just doesn't seem to be any way to run efficient reports against a db4o data source.", 'questionId': '21207', 'answerId': '89120'}
{'answer': "Most native queries can and are efficiently converted into SODA queries behind the scenes so that should not make a difference. Using NQ is of course preferred as you remain in the realms of strong typed language. If you have problems getting NQ to use indexes please feel free to post your problem to the db4o forums and we'll try to help you out. Goran", 'questionId': '21207', 'answerId': '145605'}
{'answer': 'Judah, it sounds like you are not using transparent activation, which is a feature of the latest production version (7.4)? Perhaps if you specified the version you are using as there may be other issues which are now resolved in the latest version?', 'questionId': '21207', 'answerId': '171901'}
{'answer': 'That depends on the clipboard format. If it is plain-text, then no. Unless you want to install global hooks on the clipboard. Which you cannot do from Java.', 'questionId': '21211', 'answerId': '21214'}
{'answer': 'The API function GetClipboardOwner returns the clipboard owner  (http://msdn.microsoft.com/en-us/library/ms649041(VS.85).aspx), -sorry cannot mark as link because the "()" in the URL- Don\'t know Java, I suppose you can call native API functions from inside the Java VM. A "quick and dirty" approach could be using an AutoHotKey script to intercept the CTRL+C / CTRL+INS hotkeys, grab the id of the active process (in a file or any place that can be accessed by the Java app) and proceed with the clipboard copy. The AutoHotKey part shouldn\'t be difficult, don\'t know about the Java part.', 'questionId': '21211', 'answerId': '21443'}
{'answer': "I haven't done SWING development since my early CS classes but if it wasn't built in you could just inherit javax.swing.AbstractButton and create your own. Should be pretty simple to wire something together with their existing framework.", 'questionId': '2158', 'answerId': '2181'}
{'answer': 'You could always try the Synth look & feel. You provide an xml file that acts as a sort of stylesheet, along with any images you want to use. The code might look like this: From there, go on and add your JButton like you normally would. The only change is that you use the setName(string) method to identify what the button should map to in the xml file. The xml file might look like this: The bind element there specifies what to map to (in this example, it will apply that styling to any buttons whose name property has been set to "dirt"). And a couple of useful links: http://javadesktop.org/articles/synth/ http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html', 'questionId': '2158', 'answerId': '2210'}
{'answer': 'Yes, this is possible. One of the main pros for using Swing is the ease with which the abstract controls can be created and manipulates. Here is a quick and dirty way to extend the existing JButton class to draw a circle to the right of the text. Note that by overriding paintComponent that the contents of the button can be changed, but that the border is painted by the paintBorder method. The getPreferredSize method also needs to be managed in order to dynamically support changes to the content. Care needs to be taken when measuring font metrics and image dimensions. For creating a control that you can rely on, the above code is not the correct approach. Dimensions and colours are dynamic in Swing and are dependent on the look and feel being used. Even the default Metal look has changed across JRE versions. It would be better to implement AbstractButton and conform to the guidelines set out by the Swing API. A good starting point is to look at the javax.swing.LookAndFeel and javax.swing.UIManager classes. http://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html http://docs.oracle.com/javase/8/docs/api/javax/swing/UIManager.html Understanding the anatomy of LookAndFeel is useful for writing controls: Creating a Custom Look and Feel', 'questionId': '2158', 'answerId': '2225'}
{'answer': "When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one JPanel.  The benefit of extending Swing components, of course, is to have the ability to add support for keyboard shortcuts and other accessibility features that you can't do just by having a paint() method print a pretty picture.  It may not be done the best way however, but it may be a good starting point for you. Edit 8/6 - If it wasn't apparent from the images, each Die is a button you can click. This will move it to the DiceContainer below.  Looking at the source code you can see that each Die button is drawn dynamically, based on its value. Here are the basic steps: Create a class that extends JComponent Call parent constructor super() in your constructors Make sure you class implements MouseListener Put this in the constructor: Override these methods: Override this method: The amount of space you have to work with when drawing your button is defined by getPreferredSize(), assuming getMinimumSize() and getMaximumSize() return the same value.  I haven't experimented too much with this but, depending on the layout you use for your GUI your button could look completely different. And finally, the source code.  In case I missed anything.", 'questionId': '2158', 'answerId': '2245'}
{'answer': "I'm probably going a million miles in the wrong direct (but i'm only young :P ). but couldn't you add the graphic to a panel and then a mouselistener to the graphic object so that when the user on the graphic your action is preformed.", 'questionId': '2158', 'answerId': '18261'}
{'answer': "It depends on what your application is doing.  You might want to throw individual exceptions in cases like  The application is high availability  Sending e-mail is particularly important  The scope of the application is small and sending e-mail is a large part of it The application will be deployed to a site which is remote and you will only get logs for debugging You can recover from some subset of the exceptions encapsulated in the mailException but not others In most cases I would say just log the text of the exception and don't waste your time granularizing already pretty granular exceptions.", 'questionId': '21652', 'answerId': '21667'}
{'answer': "In my code, I find that MOST exceptions percolate up to a UI layer where they are caught by my exception handlers which simply display a message to the user (and write to the log). It's an unexpected exception, after all. Sometimes, I do want to catch a specific exception (as you seem to want to do). You'll probably find, however, that this is somewhat rare and that it is indicative of using exceptions to control logic -- which is inefficient (slow) and often frowned upon. So using your example, if you want to run some special logic when the email server is not configured, you may want to add a method to the emailUtil object like: public bool isEmailConfigured() ... call that first, instead of looking for a specific exception. When an exception does happen, it really means that the situation was completely unexpected and the code can't handle it -- so the best you can do is report it to the user (or write it to a log or restart ) As for having an exception hierarchy vs exceptions-with-error-codes-in-them, I typically do the latter. It's easier to add new exceptions, if you just need to define a new error constant instead of a whole new class. But, it doesn't matter much as long as you try to be consistent throughout your project.", 'questionId': '21652', 'answerId': '21678'}
{'answer': 'Instead of using exceptions, I tend to return a list of status objects from methods that may have problems executing.  The status objects contain a severity enum (information, warning, error, ...) a status object name like "Email Address" and a user readable message like "Badly formatted Email Address" The calling code would then decide which to filter up to the UI and which to handle itself. Personally, I think exceptions are strictly for when you can\'t implement a normal code solution.  The performance hit and handling restrictions are just a bit too much for me. Another reason for using a list of status objects is that identifying multiple errors (such as during validation) is MUCH easier.  After all, you can only throw one exception which must be handled before moving on.   Imagine a user submitting an email that had a malformed destination address and contained language that you are blocking.  Do you throw the malformed email exception, then, after they fix that and resubmit, throw a bad language exception?  From a user experience perspective dealing with all of them at once is a better way to go. UPDATE: combining answers @Jonathan: My point was that I can evaluate the action, in this case sending an email, and send back multiple failure reasons. For example, "bad email address", "blank message title", etc.. With an exception, you\'re limited to just percolating the one problem then asking the user to resubmit at which point they find out about a second problem. This is really bad UI design. Reinventing the wheel.. possibly. However, most applications should analyze the whole transaction in order to give the best possible information to the user. Imagine if your compiler stopped dead at the first error. You then fix the error and hit compile again only to have it stop again for a different error. What a pain in the butt. To me, that\'s exactly the problem with throwing exceptions and hence the reason I said to use a different mechanism.', 'questionId': '21652', 'answerId': '21777'}
{'answer': '@Chris.Lively You know you can pass a message in your exception, or even the "status codes". You are reinventing the wheel here.', 'questionId': '21652', 'answerId': '21784'}
{'answer': "I tend to have less Exception types, although it's not really the OO way to do it. Instead I put an enum to my custom Exceptions, which classifies the Exception. Most of the time I have a custom base Exception, which holds on to a couple of members, which can be overridden or customized in derived Exception types.  A couple of months ago I blogged about the idea of how to internationalize Exceptions. It includes some of the ideas mentioned above.", 'questionId': '21652', 'answerId': '21851'}
{'answer': 'I would just go by if you want to handle your exceptions, you could pass a code instead of "WhatCausedIt" an then react to the different answers with a switch statement.', 'questionId': '21652', 'answerId': '21858'}
{'answer': 'While you can differenciate the code execution looking the exception don\'t matter if it\'s done by the "catch exceptionType hierarchy mode" or by "if(...) else...exception code mode" but if you are developing software wich is going to be used by other people, like a library i think it\'s usefull create your own exception types to notice the other people that your sofware can throw other exceptions than the normal ones, and they better catch and resolve them. When i use a library and their methods simply launch an \'Exception\' i allways wonder: What can cause this exception?, how must my program react?, if there is a javadoc maybe the cause will be explained, but mustly of times there is not a javadoc or the exception is not explained. Too much overhead witch can be avoided with a WellChossenExceptionTypeName', 'questionId': '21652', 'answerId': '22633'}
{'answer': 'It depends on whether the code that catches the exception needs to differentiate between exceptions or whether you are just using exceptions to fail out to an error page.  If you need to differentiate between a NullReference exception and your custom MailException higher up in the call stack, then spend the time and write it.  But most of the time programmers just use exceptions as a catch all to throw up an error on the web page.  In this case you are just wasting effort on writing a new exception.', 'questionId': '21652', 'answerId': '27239'}
{'answer': "I think a combination of the above is going to give you the best result.  You can throw different exceptions depending on the problem. e.g. Missing email address = ArgumentException.  But then in the UI layer you can check the exception type and, if need be, the message and then display a appropriate message to the user. I personally tend to only show a informational message to the user if a certain type of exception is thrown (UserException in my app). Of course you should scrub and verify user input as much as possible further up the stack to make sure any exceptions are generated by truly unlikely scenarios, not as a filter for malformed emails which can easily be checked with a regex. I also wouldn't worry about the performance implications of catching an exception from user input. The only time you are going to see performance problems from exceptions is when they are being thrown and caught in a loop or similar.", 'questionId': '21652', 'answerId': '27249'}
{'answer': "I usually start with a general exception and subclass it as needed. I always can catch the general exception (and with it all subclassed exceptions) if needed, but also the specific. An example from the Java-API is IOException, that has subclasses like FileNotFoundException or EOFException (and much more). This way you get the advantages of both, you don't have throw-clauses like: a general is enough. But if you want to have a special reaction to special circumstances you can always catch the specific exception.", 'questionId': '21652', 'answerId': '138532'}
{'answer': 'I have found that if you need to have CODE deciding what to do based on the exception returned, create a well named exception subclassing a common base type.  The message passed should be considered "human eyes only" and too fragile to make decisions upon.  Let the compiler do the work!   If you need to pass this up to a higher layer through a mechanism not aware of checked exceptions, you can wrap it in a suitable named subclass of RuntimeException (MailDomainException) which can be caught up high, and the original cause acted upon.', 'questionId': '21652', 'answerId': '433482'}
{'answer': 'IDEA 8 Milestone 1 is a beta(ish) "based on a new platform". This may have changed the way that swing is handled. Also you are running a beta JDK. You will probably get more help/submit a bug at the Jetbrain forums unless they are on SO also. Here is the bug tracker link', 'questionId': '21738', 'answerId': '29631'}
{'answer': 'Ask your question directly on the IDEA website. They always react fast and the problem you have is probably either fixed or documented.', 'questionId': '21738', 'answerId': '190318'}
{'answer': 'I have actually experienced problems from using the JDK 6u10 beta myself and had to downgrade to JDK 6u7 for the time being. This solved some of my problems with among other things swing. Also, i have been running IJ8M1 since the \'release\' and I am very satisfied with it, especially if you regard the "beta" tag. It feels snappier and also supports multiple cores which makes my development machine rejoice. ;p Anyway, i use WinXP32 and IJ8M1 with JDK 6u7 and that is afaik very stable indeed.', 'questionId': '21738', 'answerId': '201513'}
{'answer': "Static methods are not instance methods. There's no instance context, therefore to implement it from the interface makes little sense.", 'questionId': '21817', 'answerId': '21819'}
{'answer': "I'll answer your question with an example. Suppose we had a Math class with a static method add. You would call this method like so: If Math were an interface instead of a class, it could not have any defined functions. As such, saying something like Math.add(2, 3) makes no sense.", 'questionId': '21817', 'answerId': '21823'}
{'answer': "The reason why you can't have a static method in an interface lies in the way Java resolves static references. Java will not bother looking for an instance of a class when attempting to execute a static method. This is because static methods are not instance dependent and hence can be executed straight from the class file. Given that all methods in an interface are abstract, the VM would have to look for a particular implementation of the interface in order to find the code behind the static method so that it could be executed. This then contradicts how static method resolution works and would introduce an inconsistency into the language.", 'questionId': '21817', 'answerId': '21826'}
{'answer': 'An interface is used for polymorphism, which applies to Objects, not types. Therefore (as already noted) it makes no sense to have an static interface member.', 'questionId': '21817', 'answerId': '21837'}
{'answer': "Perhaps a code example would help, I'm going to use C#, but you should be able to follow along. Lets pretend we have an interface called IPayable Now, we have two concrete classes that implement this interface: Now, lets pretend we have a collection of various accounts, to do this we will use a generic list of the type IPayable Now, we want to pay $50.00 to all those accounts: So now you see how interfaces are incredibly useful.  They are used on instantiated objects only. Not on static classes.  If you had made pay static, when looping through the IPayable's in accountsToPay there would be no way to figure out if it should call pay on BusinessAcount or CustomerAccount.", 'questionId': '21817', 'answerId': '21845'}
{'answer': "There are a few issues at play here.  The first is the issue of declaring a static method without defining it.  This is the difference between and The first is impossible for the reasons that Espo mentions: you don't know which implementing class is the correct definition. Java could allow the latter; and in fact, starting in Java 8, it does!", 'questionId': '21817', 'answerId': '22497'}
{'answer': 'The reason lies in the design-principle, that java does not allow multiple inheritance. The problem with multiple inheritance can be illustrated by the following example: Now what happens if you call C.x()? Will be A.x() or B.x() executed? Every language with multiple inheritance has to solve this problem. Interfaces allow in Java some sort of restricted multiple inheritance. To avoid the problem above, they are not allowed to have methods. If we look at the same problem with interfaces and static methods: Same problem here, what happen if you call C.x()?', 'questionId': '21817', 'answerId': '138340'}
{'answer': "There's a very nice and concise answer to your question here. (It struck me as such a nicely straightforward way of explaining it that I want to link it from here.)", 'questionId': '21817', 'answerId': '520094'}
{'answer': 'It seems the static method in the interface might be supported in Java 8, well, my solution is just define them in the inner class. The same technique can also be used in annotations: The inner class should always be accessed in the form of Interface.fn... instead of Class.fn..., then, you can get rid of ambiguous problem.', 'questionId': '21817', 'answerId': '18841163'}
{'answer': 'Illegal combination of modifiers : static and abstract If a member of a class is declared as static, it can be used with its class name which is confined to that class, without creating an object. If a member of a class is declared as abstract, you need to declare the class as abstract and you need to provide the implementation of the abstract member in its inherited class (Sub-Class). You need to provide an implementation to the abstract member of a class in sub-class where you are going to change the behaviour of static method, also declared as abstract which is a confined to the base class, which is not correct', 'questionId': '21817', 'answerId': '19134923'}
{'answer': 'Since static methods can not be inherited . So no use placing it in the interface. Interface is basically a contract which all its subscribers have to follow . Placing a static method in interface will force the subscribers to implement it . which now becomes contradictory to the fact that static methods can not be inherited .', 'questionId': '21817', 'answerId': '20591367'}
{'answer': "Now Java8 allows us to define even Static Methods in Interface. Note: Methods in Interface are still public abstract by default if we don't explicitly use the keywords default/static to make them Defender methods and Static methods resp.", 'questionId': '21817', 'answerId': '22711415'}
{'answer': 'Java 8 Had changed the world you can have static methods in interface but it forces you to provide implementation for that. }', 'questionId': '21817', 'answerId': '35220948'}
{'answer': 'I think the article "Java theory and practice: A brief history of garbage collection" from IBM should help explain some of the questions you have.', 'questionId': '21934', 'answerId': '21937'}
{'answer': "There are drawbacks of using reference counting. One of the most mentioned is circular references: Suppose A references B, B references C and C references B. If A were to drop its reference to B, both B and C will still have a reference count of 1 and won't be deleted with traditional reference counting. CPython (reference counting is not part of python itself, but part of the C implementation thereof) catches circular references with a separate garbage collection routine that it runs periodically... Another drawback: Reference counting can make execution slower. Each time an object is referenced and dereferenced, the interpreter/VM must check to see if the count has gone down to 0 (and then deallocate if it did). Garbage Collection does not need to do this. Also, Garbage Collection can be done in a separate thread (though it can be a bit tricky). On machines with lots of RAM and for processes that use memory only slowly, you might not want to be doing GC at all! Reference counting would be a bit of a drawback there in terms of performance...", 'questionId': '21934', 'answerId': '21964'}
{'answer': "Darren Thomas gives a good answer.  However, one big difference between the Java and Python approaches is that with reference counting in the common case (no circular references) objects are cleaned up immediately rather than at some indeterminate later date. For example, I can write sloppy, non-portable code in CPython such as and the file descriptor for that file I opened will be cleaned up immediately because as soon as the reference to the open file goes away, the file is garbage collected and the file descriptor is freed.  Of course, if I run Jython or IronPython or possibly PyPy, then the garbage collector won't necessarily run until much later; possibly I'll run out of file descriptors first and my program will crash. So you SHOULD be writing code that looks like but sometimes people like to rely on reference counting to always free up their resources because it can sometimes make your code a little shorter. I'd say that the best garbage collector is the one with the best performance, which currently seems to be the Java-style generational garbage collectors that can run in a separate thread and has all these crazy optimizations, etc.  The differences to how you write your code should be negligible and ideally non-existent.", 'questionId': '21934', 'answerId': '22219'}
{'answer': 'The latest Sun Java VM actually have multiple GC algorithms which you can tweak.  The Java VM specifications intentionally omitted specifying actual GC behaviour to allow different (and multiple) GC algorithms for different VMs. For example, for all the people who dislike the "stop-the-world" approach of the default Sun Java VM GC behaviour, there are VM such as IBM\'s WebSphere Real Time which allows real-time application to run on Java. Since the Java VM spec is publicly available, there is (theoretically) nothing stopping anyone from implementing a Java VM that uses CPython\'s GC algorithm.', 'questionId': '21934', 'answerId': '23703'}
{'answer': "Reference counting is particularly difficult to do efficiently in a multi-threaded environment. I don't know how you'd even start to do it without getting into hardware assisted transactions or similar (currently) unusual atomic instructions. Reference counting is easy to implement. JVMs have had a lot of money sunk into competing implementations, so it shouldn't be surprising that they implement very good solutions to very difficult problems. However, it's becoming increasingly easy to target your favourite language at the JVM.", 'questionId': '21934', 'answerId': '46780'}
{'answer': 'Garbage collection is faster (more time efficient) than reference counting, if you have enough memory. For example, a copying gc traverses the "live" objects and copies them to a new space, and can reclaim all the "dead" objects in one step by marking a whole memory region. This is very efficient, if you have enough memory. Generational collections use the knowledge that "most objects die young"; often only a few percent of objects have to be copied. [This is also the reason why gc can be faster than malloc/free] Reference counting is much more space efficient than garbage collection, since it reclaims memory the very moment it gets unreachable. This is nice when you want to attach finalizers to objects (e.g. to close a file once the File object gets unreachable). A reference counting system can work even when only a few percent of the memory is free. But the management cost of having to increment and decrement counters upon each pointer assignment cost a lot of time, and some kind of garbage collection is still needed to reclaim cycles. So the trade-off is clear: if you have to work in a memory-constrained environment, or if you need precise finalizers, use reference counting. If you have enough memory and need the speed, use garbage collection.', 'questionId': '21934', 'answerId': '74327'}
{'answer': 'Actually reference counting and the strategies used by the Sun JVM are all different types of garbage collection algorithms. There are two broad approaches for tracking down dead objects: tracing and reference counting. In tracing the GC starts from the "roots" - things like stack references, and traces all reachable (live) objects. Anything that can\'t be reached is considered dead. In reference counting each time a reference is modified the object\'s involved have their count updated. Any object whose reference count gets set to zero is considered dead. With basically all GC implementations there are trade offs but tracing is usually good for high through put (i.e. fast) operation but has longer pause times (larger gaps where the UI or program may freeze up). Reference counting can operate in smaller chunks but will be slower overall. It may mean less freezes but poorer performance overall. Additionally a reference counting GC requires a cycle detector to clean up any objects in a cycle that won\'t be caught by their reference count alone. Perl 5 didn\'t have a cycle detector in its GC implementation and could leak memory that was cyclic. Research has also been done to get the best of both worlds (low pause times, high throughput): http://cs.anu.edu.au/~Steve.Blackburn/pubs/papers/urc-oopsla-2003.pdf', 'questionId': '21934', 'answerId': '196487'}
{'answer': 'Late in the game, but I think one significant rationale for RC in python is its simplicity. See this email by Alex Martelli, for example. (I could not find a link outside google cache, the email date from 13th october 2005 on python list).', 'questionId': '21934', 'answerId': '1604520'}
{'answer': 'One big disadvantage of Java\'s tracing GC is that from time to time it will  "stop the world" and freeze the application for a relatively long time to do a full GC. If the heap is big and the the object tree complex, it will freeze for a few seconds. Also each full GC visits the whole object tree over and over again, something that is probably quite inefficient. Another drawback of the way Java does GC is that you have to tell the jvm what heap size you want (if the default is not good enough); the JVM derives from that value several thresholds that will trigger the GC process when there is too much garbage stacking up in the heap. I presume that this is actually the main cause of the jerky feeling of Android (based on Java), even on the most expensive cellphones, in comparison with the smoothness of iOS (based on ObjectiveC, and using RC).  I\'d love to see a jvm option to enable RC memory management, and maybe keeping GC only to run as a last resort when there is no more memory left.', 'questionId': '21934', 'answerId': '7826363'}
{'answer': "You'll have to write your own parser, like the author of String::Random (Perl) did. In fact, he doesn't use regexes anywhere in that module, it's just what perl-coders are used to. On the other hand, maybe you can have a look at the source, to get some pointers. EDIT: Damn, blair beat me to the punch by 15 seconds.", 'questionId': '22115', 'answerId': '22132'}
{'answer': "Edit:  As mentioned in the comments, there is a library available at Google Code to acheive this: http://code.google.com/p/xeger See also https://github.com/mifmif/Generex as suggested by Mifmif Original message: Firstly, with a complex enough regexp, i believe this can be impossible. But you should be able to put something together for simple regexps. If you take a look at the source code of the class java.util.regex.Pattern, you'll see that it uses an internal representation of Node instances. Each of the different pattern components have their own implementation of a Node subclass. These Nodes are organised into a tree. By producing a visitor that traverses this tree, you should be able to call an overloaded generator method or some kind of Builder that cobbles something together.", 'questionId': '22115', 'answerId': '22133'}
{'answer': 'Visual Studio Team System does include something like this. Check it out Not much help for Java though, so sorry.', 'questionId': '22115', 'answerId': '22142'}
{'answer': "On stackoverflow podcast 11: Spolsky:  Yep.  There's a new product also, if you don't want to use the Team System there our friends at Redgate have a product called SQL Data Generator [http://www.red-gate.com/products/sql_data_generator/index.htm].  It's $295, and it just generates some realistic test data.  And it does things like actually generate real cities in the city column that actually exist, and then when it generates those it'll get the state right, instead of getting the state wrong, or putting states into German cities and stuff like... you know, it generates pretty realistic looking data.  I'm not really sure what all the features are. This is probably not what you are looking for, but it might be a good starting off point, instead of creating your own. I can't seem to find anything in google, so I would suggest tackling the problem by parsing a given regular expression into the smallest units of work (\\w, [x-x], \\d, etc) and writing some basic methods to support those regular expression phrases. So for \\w you would have a method getRandomLetter() which returns any random letter, and you would also have getRandomLetter(char startLetter, char endLetter) which gives you a random letter between the two values.", 'questionId': '22115', 'answerId': '22163'}
{'answer': "I know there's already an accepted answer, but I've been using RedGate's Data Generator (the one mentioned in Craig's answer) and it works REALLY well for everything I've thrown at it. It's quick and that leaves me wanting to use the same regex to generate the real data for things like registration codes that this thing spits out. It takes a regex like: and it generates tons of unique codes like: Is this some big secret algorithm that RedGate figured out and we're all out of luck or is it something that us mere mortals actually could do?", 'questionId': '22115', 'answerId': '245381'}
{'answer': "It's far from supporting a full PCRE regexp, but I wrote the following Ruby method to take a regexp-like string and produce a variation on it. (For language-based CAPTCHA.)", 'questionId': '22115', 'answerId': '280105'}
{'answer': "I've gone the root of rolling my own library for that (In c# but should be easy to understand for a Java developer). Rxrdg started as a solution to a problem of creating test data for a real life project. The basic idea is to leverage the existing (regular expression) validation patterns to create random data that conforms to such patterns. This way valid random data is created.  It is not that difficult to write a parser for simple regex patterns. Using an abstract syntax tree to generate strings should be even easier.", 'questionId': '22115', 'answerId': '412989'}
{'answer': 'Xeger (Java) is capable of doing it as well:', 'questionId': '22115', 'answerId': '1590630'}
{'answer': 'I am on flight and just saw the question: I have written easiest but inefficient and incomplete solution. I hope it may help you to start writing your own parser:', 'questionId': '22115', 'answerId': '12151715'}
{'answer': "It's too late to help the original poster, but it could help a newcomer. Generex is a useful java library that provides many features for using regexes to generate strings (random generation, generating a string based on its index, generating all strings...). Example :", 'questionId': '22115', 'answerId': '24659605'}
{'answer': 'Adding another tool I did not see listed here, that worked for me. (I tried the C# solution from Goran - Rxrdg - but with me the solution does not build). The link below is pretty simple and easy, and did the job for me: http://uttool.com/text/regexstr/default.aspx', 'questionId': '22115', 'answerId': '31557299'}
{'answer': 'If you want to generate "critical" strings, you may want to consider: EGRET http://elarson.pythonanywhere.com/ that generates "evil" strings covering your regular expressions MUTREX http://cs.unibg.it/mutrex/ that generates fault-detecting strings by regex mutation Both are academic tools (I am one of the authors of the latter) and work reasonably well.', 'questionId': '22115', 'answerId': '42824600'}
{'answer': 'This question is very old, but I stumbled across it on my own search, so I will include a couple links for others who might be searching for the same functionality in other languages. There is a Node.js library here: https://github.com/fent/randexp.js There is a PHP library here: https://github.com/icomefromthenet/ReverseRegex The PHP faker package includes a "regexify" method that accomplishes this: https://packagist.org/packages/fzaninotto/faker', 'questionId': '22115', 'answerId': '45135063'}
{'answer': "A very simple formula for converting from CMYK to RGB ignoring all color profiles is: This code requires CMYK values to be in rage of 0-255. If you have 0 to 100 or 0.0 to 1.0 you'll have to convert the values. Hope this will get you started. As for the java and ColdFusion interfacing, I'm sorry, but I have no idea how to do that.", 'questionId': '22409', 'answerId': '23577'}
{'answer': "The tag cfx_image may be of use to you.  I haven't used it in a while but I remember it had a ton of features. Alternatively, you might be able to script a windows app such as Irfanview (via commandline using cfexecute) to process images. Hope that helps", 'questionId': '22409', 'answerId': '275661'}
{'answer': "I use the Java ImageIO libraries (https://jai-imageio.dev.java.net).  They aren't perfect, but can be simple and get the job done.  As far as converting from CMYK to RGB, here is the best I have been able to come up with. Download and install the ImageIO JARs and native libraries for your platform.  The native libraries are essential.  Without them the ImageIO JAR files will not be able to detect the CMYK images.  Originally, I was under the impression that the native libraries would improve performance but was not required for any functionality. I was wrong. The only other thing that I noticed is that the converted RGB images are sometimes much lighter than the CMYK images. If anyone knows how to solve that problem, I would be appreciative. Below is some code to convert a CMYK image into an RGB image of any supported format. Thank you, Randy Stegbauer", 'questionId': '22409', 'answerId': '848533'}
{'answer': "I know that this question is old, but I still encounter problems with CMYK images & ColdFusion.  However, I just read a CMYK JPEG image using ColdFusion 10 and resaved it.  The saved image was able to to be read using ColdFusion 9 (which is only capable of reading RGB JPEGs.)  I'm not sure if this conversion is intentional or not and I don't currently have any way of identifying whether the source image's color profile is CMYK or not as the saved color profile still appears to be the same.", 'questionId': '22409', 'answerId': '17498325'}
{'answer': "I've had good success using Mockito. When I tried learning about JMock and EasyMock, I found the learning curve to be a bit steep (though maybe that's just me). I like Mockito because of its simple and clean syntax that I was able to grasp pretty quickly. The minimal syntax is designed to support the common cases very well, although the few times I needed to do something more complicated I found what I wanted was supported and easy to grasp. Here's an (abridged) example from the Mockito homepage: It doesn't get much simpler than that. The only major downside I can think of is that it won't mock static methods.", 'questionId': '22697', 'answerId': '23048'}
{'answer': "We are heavily using EasyMock and EasyMock Class Extension at work and are pretty happy with it. It basically gives you everything you need. Take a look at the documentation, there's a very nice example which shows you all the features of EasyMock.", 'questionId': '22697', 'answerId': '23295'}
{'answer': "I started using mocks through JMock, but eventually transitioned to use EasyMock. EasyMock was just that, --easier-- and provided a syntax that felt more natural. I haven't switched since.", 'questionId': '22697', 'answerId': '27786'}
{'answer': "Mockito also provides the option of stubbing methods, matching arguments (like anyInt() and anyString()), verifying the number of invocations (times(3), atLeastOnce(), never()), and more. I've also found that Mockito is simple and clean. One thing I don't like about Mockito is that you can't stub static methods.", 'questionId': '22697', 'answerId': '28015'}
{'answer': 'Yes, Mockito is a great framework. I use it together with hamcrest and Google guice to setup my tests.', 'questionId': '22697', 'answerId': '37028'}
{'answer': "You could also have a look at testing using Groovy. In Groovy you can easily mock Java interfaces using the 'as' operator: Apart from this basic functionality Groovy offers a lot more on the mocking front, including the powerful MockFor and StubFor classes. http://docs.codehaus.org/display/GROOVY/Groovy+Mocks", 'questionId': '22697', 'answerId': '92998'}
{'answer': "I've been having success with JMockit. It's pretty new, and so it's a bit raw and under-documented.  It uses ASM to dynamically redefine the class bytecode, so it can mock out all methods including static, private, constructors, and static initializers.  For example: It has an Expectations interface allowing record/playback scenarios as well: The downside is that it requires Java 5/6.", 'questionId': '22697', 'answerId': '93675'}
{'answer': 'I like JMock because you are able to set up expectations. This is totally different from checking if a method was called found in some mock libraries. Using JMock you can write very sophisticated expectations. See the jmock cheat-sheat.', 'questionId': '22697', 'answerId': '382692'}
{'answer': "I am the creator of PowerMock so obviously I must recommend that! :-) PowerMock extends both EasyMock and Mockito with the ability to mock static methods, final and even private methods. The EasyMock support is complete, but the Mockito plugin needs some more work. We are planning to add JMock support as well.  PowerMock is not intended to replace other frameworks, rather it can be used in the tricky situations when other frameworks does't allow mocking. PowerMock also contains other useful features such as suppressing static initializers and constructors.", 'questionId': '22697', 'answerId': '488978'}
{'answer': "The best solution to mocking is to have the machine do all the work with automated specification-based testing. For Java, see ScalaCheck and the Reductio framework included in the Functional Java library. With automated specification-based testing frameworks, you supply a specification of the method under test (a property about it that should be true) and the framework generates tests as well as mock objects, automatically. For example, the following property tests the Math.sqrt method to see if the square root of any positive number n squared is equal to n. When you call propSqrt.check(), ScalaCheck generates hundreds of integers and checks your property for each, also automatically making sure that the edge cases are covered well. Even though ScalaCheck is written in Scala, and requires the Scala Compiler, it's easy to test Java code with it. The Reductio framework in Functional Java is a pure Java implementation of the same concepts.", 'questionId': '22697', 'answerId': '489089'}
{'answer': 'For something a little different, you could use JRuby and Mocha which are combined in JtestR to write tests for your Java code in expressive and succinct Ruby. There are some useful mocking examples with JtestR here. One advantage of this approach is that mocking concrete classes is very straightforward.', 'questionId': '22697', 'answerId': '508379'}
{'answer': 'The JMockit project site contains plenty of comparative information for current mocking toolkits. In particular, check out the feature comparison matrix, which covers EasyMock, jMock, Mockito, Unitils Mock, PowerMock, and of course JMockit. I try to keep it accurate and up-to-date, as much as possible.', 'questionId': '22697', 'answerId': '1024869'}
{'answer': "I used JMock early. I've tried Mockito at my last project and liked it. More concise, more cleaner. PowerMock covers all needs which are absent in Mockito, such as mocking a static code, mocking an instance creation, mocking final classes and methods. So I have all I need to perform my work.", 'questionId': '22697', 'answerId': '2032739'}
{'answer': "I started using mocks with EasyMock. Easy enough to understand, but the replay step was kinda annoying. Mockito removes this, also has a cleaner syntax as it looks like readability was one of its primary goals. I cannot stress enough how important this is, since most of developers will spend their time reading and maintaining existing code, not creating it.  Another nice thing is that interfaces and implementation classes are handled in the same way, unlike in EasyMock where still you need to remember (and check) to use an EasyMock Class Extension. I've taken a quick look at JMockit recently, and while the laundry list of features is pretty comprehensive, I think the price of this is legibility of resulting code, and having to write more.  For me, Mockito hits the sweet spot, being easy to write and read, and dealing with majority of the situations most code will require. Using Mockito with PowerMock would be my choice. One thing to consider is that the tool you would choose if you were developing by yourself, or in a small tight-knit team, might not be the best to get for a large company with developers of varying skill levels. Readability, ease of use and simplicity would need more consideration in the latter case. No sense in getting the ultimate mocking framework if a lot of people end up not using it or not maintaining the tests.", 'questionId': '22697', 'answerId': '6393609'}
{'answer': 'Set a short timeout? Does isOutputShutdown() not get you what you want? You could always build a SocketWatcher class that spins up in its own Thread and repeatedly tries to write empty strings to the Socket until that raises a SocketClosedException.', 'questionId': '22720', 'answerId': '22803'}
{'answer': 'Set a different thread to reading from the socket.  It will block until the socket is closed, and then an exception will be thrown.  Catch that exception to detect the close immediately.', 'questionId': '22720', 'answerId': '147160'}
{'answer': "The only reliable way to detect a broken connection in TCP is to write to it, which will eventually cause a 'connection reset' IOException. However due to buffering it won't happen on the first write after the disconnection,p but on a subsequent write. You can't do anything about this.", 'questionId': '22720', 'answerId': '21961672'}
{'answer': "I did make some headway on this sort of thing a few years back using Apache POI to extract the contents of an email from .msg files.  I'm pretty sure they have a simple swing explorer / viewer that you can use to examine the structure within the compound document format, but I can't find it right now.   I was able to extract most information that I was interested in but was ultimately wanting to create a mime format version of the message and couldn't extract all the information I needed in a format I could use.", 'questionId': '22798', 'answerId': '47151'}
{'answer': 'I assume that you\'ve already ruled out the tools in "org.eclipse.swt.dnd" for some reason?  There are some examples here on how to go about using them, in case you haven\'t.  If what you really want to do is drag&drop, you\'re going to have to do some work with those tools.  At that point, really the question becomes, what format is it in on the clipboard, vs in a file, and which is easier to integrate into your app.', 'questionId': '22798', 'answerId': '78288'}
{'answer': 'Maybe this is a solution for your problem:  http://sourceforge.net/projects/javaoutlookdd/ It allows to handle outlook items like File objects during drag&drop.', 'questionId': '22798', 'answerId': '4788050'}
{'answer': "There's also JGraph, but I'm not sure if that's only for graphs (i.e. nodes and edges), or if it does charts also.", 'questionId': '22816', 'answerId': '22830'}
{'answer': "Here's something different: it's very to embed web pages in SWT views. I recently tried it and it works very well. You can see where this is going: there are plenty of beautiful charting components for HTML, it could be an option. Just make sure the component is client-side only (unless you want to start a server). I haven't tested Flash, but I'm pretty sure you can get it to work (naturally, this means your software will require Flash plug-in installed).", 'questionId': '22816', 'answerId': '25920'}
{'answer': 'I have not used BIRT or JGraph, however I use JFreeChart in my SWT application. I have found the best way to use JFreeChart in SWT is by making a composite an AWT frame and using the AWT functionality for JFreeChart. The way to do this is by creating a composite  There are several problems in regards to implementations across different platforms as well as the SWT code in it is very poor (in its defense Mr. Gilbert does not know SWT well and it is made for AWT). My two biggest problems are as AWT events bubble up through SWT there are some erroneous events fired and due to wrapping the AWT frame JFreeChart becomes substantially slower. @zvikico The idea of putting the chart into a web page is probably not a great way to go. There are a few problems first being how Eclipse handles integrating the web browser on different platforms is inconsistent. Also from my understanding of a few graphing packages for the web they are server side requiring that setup, also many companies including mine use proxy servers and sometimes this creates issues with the Eclipse web browsing.', 'questionId': '22816', 'answerId': '43112'}
{'answer': 'Theres also ILOG JViews Charts which looks pretty feature-complete if you can afford it. Here is some additional infos on using it with eclipse.', 'questionId': '22816', 'answerId': '45872'}
{'answer': 'JCharts is another option. It is similar to JFreeChart but the documentation is free. It does not have direct support for SWT but you can always generate an image and embed it in an SWT frame.', 'questionId': '22816', 'answerId': '48724'}
{'answer': 'SWTChart gives good results for line, scatter, bar, and area charts.  The API is straight forward and there are numerous examples on the website.  I went from finding it on google to viewing my data in less than an hour. SWTChart', 'questionId': '22816', 'answerId': '2102436'}
{'answer': "The one I've used are JChart2D and JFreeChart. I did a live plotter application over the summer and used JFreeChart for that. The guy who had started the project had used JChart2D but I found that it doesn't have enough options for tweaking the chart look and feel. JChart2D is supposed to be very fast so if you need to do live plotting have a look at it, although JFreeChart didn't have any problems doing a plot a few times per second. There also quite a list of charting libraries on java2s.com", 'questionId': '22816', 'answerId': '2102528'}
{'answer': "I suggest you try jzy3d, a simple java library for plotting 3d data. It's for java, on AWT, Swing or SWT.", 'questionId': '22816', 'answerId': '3206363'}
{'answer': 'You might like this one too It has the ability to plot real time data with your own data provider.', 'questionId': '22816', 'answerId': '8771380'}
{'answer': "I was also looking for a charting library for an Eclipse RCP app, stumbled on Caleb's post here and can definitely recommend SWTChart now myself. It is a lot faster than JFreeChart for me, plus easily extensible. If I would really have to complain about something, I'd say the javadoc could be a bit more verbose, but this is just to say everything else is great.", 'questionId': '22816', 'answerId': '9120988'}
{'answer': 'After evaluationg several options I decided to use a JavaScript library for showing plots in my Eclipse Plugin. As zvikico already suggested it is possible to show a html page in a browser. In the html page you can utilize one of the JavaScript libraries to do the actual plotting. If you use Chartist you can save the image as SVG file from the context menu.  Some JavaScript charting libraries: Chartist: http://gionkunz.github.io/chartist-js D3js: http://d3js.org Flot: http://www.flotcharts.org/ Further JavaScript charting frameworks: https://en.wikipedia.org/wiki/Comparison_of_JavaScript_charting_frameworks Chartist Example image: Example java code: Example html page: In order to get this working, chartist.js and chartist.min.css need to be downloaded and put at the same location as the html file. You could also include them from the web. See here for another example: https://www.snip2code.com/Snippet/233633/Chartist-js-example', 'questionId': '22816', 'answerId': '32049679'}
{'answer': 'You will want to use org.xml.sax.XMLReader (http://docs.oracle.com/javase/7/docs/api/org/xml/sax/XMLReader.html).', 'questionId': '23106', 'answerId': '23121'}
{'answer': "I would use Stax to parse XML, it's fast and easy to use. I've been using it on my last project to parse XML files up to 24MB. There's a nice introduction on java.net, which tells you everything you need to know to get started.", 'questionId': '23106', 'answerId': '23300'}
{'answer': 'Basically, you have two main XML parsing methods in Java : SAX, where you use an handler to only grab what you want in your XML and ditch the rest DOM, which parses your file all along, and allows you to grab all elements in a more tree-like fashion. Another very useful XML parsing method, albeit a little more recent than these ones, and included in the JRE only since Java6, is StAX. StAX was conceived as a medial method between the tree-based of DOM and event-based approach of SAX. It is quite similar to SAX in the fact that parsing very large documents is easy, but in this case the application "pulls" info from the parser, instead of the parsing "pushing" events to the application. You can find more explanation on this subject here. So, depending on what you want to achieve, you can use one of these approaches.', 'questionId': '23106', 'answerId': '4377373'}
{'answer': 'If you only need to parse then I would recommend using XPath library. Here is a nice reference: http://www.ibm.com/developerworks/library/x-javaxpathapi.html But you may want to consider turning XMLs to objects and then the sky is the limit.  For that you may use XStream, this is a great library which i use alot', 'questionId': '23106', 'answerId': '5299126'}
{'answer': 'Use the dom4j library First read the document Then use XPATH to get to the values you need', 'questionId': '23106', 'answerId': '5299265'}
{'answer': 'Below is the code of extracting some value value using vtd-xml.', 'questionId': '23106', 'answerId': '36190454'}
{'answer': "Based on the javadoc for LWUIT and J2ME and guessing that the custom J2ME class is a Canvas it looks like you would have to: Subclass LWUIT's Component class wrapping the custom J2ME component Override the paint() method of the LWUIT Component Subclass the J2ME Graphics class wrapping the LWUIT Graphics class and pass all the method calls through Pass in the wrapped J2ME Graphics implementation to the custom J2ME component's paint method That third step is an ugly one.  Check on the LWUIT mailing list to see if anyone has dome this before.  From the published APIs I don't see another way to do it.    Edit: The hack added in the question looks better than my hack for an Image.  What I have may be better for a general case, but I don't know either LWUIT or J2ME well enough to really say that.", 'questionId': '23372', 'answerId': '48945'}
{'answer': 'I do not think any hacking is necessary. You can subclass the LWTUI Component class and then you can pain whatever you want on to the graphic context of the component. You do not get the native lcdui.Graphics object but an object with a same interface that is easy to use. If you really need to pass a lcdui.Graphics to some underlying library to display its output then I would suggest this: Somewhere in your component code (do only when the component contents really need to be changed): In the component paint(g) method: By doing the hack you did you are losing portablity and also sice you are exposing implementation private object you might also break other things. Hope this helps.', 'questionId': '23372', 'answerId': '86279'}
{'answer': 'Gigaspaces is top notch as far as a Javaspaces implementation goes for scalability and performance. Are you restricted to a Javaspaces implementation? Blitz Javaspaces is top notch for a free product.', 'questionId': '23402', 'answerId': '23417'}
{'answer': "As the first answer says, what are your criteria?  There's a number of commercial and open-source tools in the same space (but not Javaspaces-based): Oracle Coherence Gemstone's Gemfire Terracotta (a degree of overlap, but not quite in the same space) GridGain (does the grid bit, but not the distributed cache bit)", 'questionId': '23402', 'answerId': '31880'}
{'answer': 'Hazelcast Some comparisons: Comparison1 Comparison2  Cheers! P.S.: I am also interested in people opinions regarding this matter.', 'questionId': '23402', 'answerId': '6441003'}
{'answer': 'I\'d suggest taking a look at Gartner\'s "Competitive Landscape: In-Memory Data Grids" at http://www.gartner.com/technology/reprints.do?id=1-1HCCIMJ&ct=130718&st=sb', 'questionId': '23402', 'answerId': '18168199'}
{'answer': "For a set that small is generally not worth it to convert from an Array to a HashMap/set.  In fact, you're probably best off keeping them in an array and then sorting them by key and iterating over both lists simultaneously to do the comparison.", 'questionId': '23445', 'answerId': '23469'}
{'answer': "I have created an approximation of what I think you are looking for just using the Collections Framework in Java. Frankly, I think it is probably overkill as @Mike Deck points out. For such a small set of items to compare and process I think arrays would be a better choice from a procedural standpoint but here is my pseudo-coded (because I'm lazy) solution. I have an assumption that the Foo class is comparable based on it's unique id and not all of the data in it's contents: As far as your questions: If I convert oldSet and newSet into HashMap (order is not of concern here), with the IDs as keys, would it made the code easier to read and easier to compare? How much of time & memory performance is loss on the conversion? I think that you would probably make the code more readable by using a Map BUT...you would probably use more memory and time during the conversion. Would iterating the two sets and perform the appropriate operation be more efficient and concise? Yes, this would be the best of both worlds especially if you followed @Mike Sharek 's advice of Rolling your own List with the specialized methods or following something like the Visitor Design pattern to run through your collection and process each item.", 'questionId': '23445', 'answerId': '23944'}
{'answer': "I'd move to lists and solve it this way: Sort both lists by id ascending using custom Comparator if objects in lists aren't Comparable Iterate over elements in both lists like in merge phase in merge sort algorithm, but instead of merging lists, you check your logic. The code would be more or less like this:", 'questionId': '23445', 'answerId': '36997'}
{'answer': "Apache's commons.collections library has a CollectionUtils class that provides easy-to-use methods for Collection manipulation/checking, such as intersection, difference, and union. The org.apache.commons.collections.CollectionUtils API docs are here.", 'questionId': '23445', 'answerId': '1167234'}
{'answer': 'I think the easiest way to do that is by using apache collections api - CollectionUtils.subtract(list1,list2) as long the lists are of the same type.', 'questionId': '23445', 'answerId': '3104434'}
{'answer': 'For comaparing a list or set we can use Arrays.equals(object[], object[]). It will check for the values only. To get the Object[] we can use Collection.toArray() method.', 'questionId': '23445', 'answerId': '4469413'}
{'answer': 'You can use Java 8 streams, for example or  Sets class from Guava:', 'questionId': '23445', 'answerId': '8638140'}
{'answer': '', 'questionId': '23445', 'answerId': '35296176'}
{'answer': 'Let Y = 0.3*R + 0.59*G + 0.11*B for each pixel in the image, then set them to be ((R1+Y)/2,(G1+Y)/2,(B1+Y)/2) if (R1,G1,B1) is what you are colorizing with.', 'questionId': '23763', 'answerId': '23795'}
{'answer': "I have never used GIMP's colorize command. However, if your getting the RGB value of each pixel and adding RGB value to it you should really use a LookupOp. Here is some code that I wrote to apply a BufferedImageOp to a BufferedImage. Using Nicks example from above heres how I would do it. Let Y = 0.3*R + 0.59*G + 0.11*B for   each pixel (R1,G1,B1) is what you are colorizing   with It creates a BufferedImageOp that will mask out each color if the mask boolean is true. Its simple to call too. If this is not what your looking for I suggest you look more into BufferedImageOp's. This is would also be more efficient since you would not need to do the calculations multiple times on different images. Or do the calculations over again on different BufferedImages as long as the R1,G1,B1 values don't change.", 'questionId': '23763', 'answerId': '27185'}
{'answer': "I wanted to do the exact same thing as the question poster wanted to do but the above conversion did not remove colors like the GIMP does (ie green with a red overlay made an unpleasant brown color etc). So I downloaded the source code for GIMP and converted the c code over to Java. Posting it in this thread just in case anyone else wants to do the same (since it is the first thread that comes up in Google). The conversion still changes the white color when it should not, it's probably a casting issue from double to int. The class converts a BufferedImage in-place.", 'questionId': '23763', 'answerId': '4720882'}
{'answer': "This works exactly like the Colorize function in GIMP and it preserves the transparency. I've also added a few things like Contrast and Brightness, Hue, Sat, and Luminosity - 0circle0 Google Me --> ' Sprite Creator 3'", 'questionId': '23763', 'answerId': '20411373'}
{'answer': 'You can mark variables as "silent" like this: If $variable is null, nothing will be rendered. If it is not null, its value will render as it normally would.', 'questionId': '23853', 'answerId': '23879'}
{'answer': 'You will also need to be sure and use the proper syntax.  Your example is missing the dollar before the variable.  It should be $!{person.age}, not just {person.age}.', 'questionId': '23853', 'answerId': '63970'}
{'answer': " This example was taken from the JDK 1.6 docs of BlockingQueue. So You can see that you are doing it the right way. Here's the quote which tells you that it have to work: Memory consistency effects: As with   other concurrent collections, actions   in a thread prior to placing an object   into a BlockingQueue happen-before   actions subsequent to the access or   removal of that element from the   BlockingQueue in another thread.", 'questionId': '23950', 'answerId': '24023'}
{'answer': " Also, are they unique to Java, is there a C++ equivalent? No, but VB and C# have attributes which are the same thing. Their use is quite diverse. One typical Java example, @Override has no effect on the code but it can be used by the compiler to generate a warning (or error) if the decorated method doesn't actually override another method. Similarly, methods can be marked obsolete. Then there's reflection. When you reflect a type of a class in your code, you can access the attributes and act according to the information found there. I don't know any examples in Java but in .NET this is used by the compiler to generate (de)serialization information for classes, determine the memory layout of structures and declare function imports from legacy libraries (among others). They also control how the IDE form designer works. /EDIT: Attributes on classes are comparable to tag interfaces (like Serializable in Java). However, the .NET coding guidelines say not to use tag interfaces. Also, they only work on class level, not on method level.", 'questionId': '24221', 'answerId': '24227'}
{'answer': 'Annotations are primarily used by code that is inspecting other code. They are often used for modifying (i.e. decorating or wrapping) existing classes at run-time to change their behavior. Frameworks such as JUnit and Hibernate use annotations to minimize the amount of code you need to write yourself to use the frameworks. Oracle has a good explanation of the concept and its meaning in Java on their site.', 'questionId': '24221', 'answerId': '24231'}
{'answer': "Anders gives a good summary, and here's an example of a JUnit annotation Here the @Test annotation is telling JUnit that the flatfileMissing method is a test that should be executed and that the expected result is a thrown IOException.  Thus, when you run your tests, this method will be called and the test will pass or fail based on whether an IOException is thrown.", 'questionId': '24221', 'answerId': '24335'}
{'answer': 'Java also has the Annotation Processing Tool (apt) where not only you create annotations, but decide also how do these annotations work on the source code. Here is an introduction.', 'questionId': '24221', 'answerId': '26408'}
{'answer': "To see some cool stuff you can do with Annotations, check out my JavaBean annotations and annotation processor. They're great for generating code, adding extra validations during your build, and I've also been using them for an error message framework (not yet published -- need to clear with the bosses...).", 'questionId': '24221', 'answerId': '73591'}
{'answer': 'By literal definition an annotation adds notes to an element. Likewise, Java annotations are tags that we insert into source code for providing more information about the code. Java annotations associate information with the annotated program element. Beside Java annotations Java programs have copious amounts of informal documentation that typically is contained within comments in the source code file. But, Java annotations are different from comments they annotate the program elements directly using annotation types to describe the form of the annotations. Java Annotations present the information in a standard and structured way so that it could be used amenably by processing tools. To read in detail, there is a nice tutorial on Java Annotations', 'questionId': '24221', 'answerId': '20297975'}
{'answer': "When do you use Java's @Override annotation and why? The link refers to a question on when one should use the override annotation(@override).. This might help understand the concept of annotation better.Check out.", 'questionId': '24221', 'answerId': '22934370'}
{'answer': "Annotations when it comes to EJB is known as choosing Implicit middle-ware approach over an explicit middle-ware approach , when you use annotation you're customizing what you exactly need from the API for example you need to call transaction method for a bank transfer :  without using annotation : the code will be    while using Annotation your code contains no cumbersome API calls to use the middle- ware services. The code is clean and focused on business logic", 'questionId': '24221', 'answerId': '34927561'}
{'answer': 'You should change the #if line to:', 'questionId': '24495', 'answerId': '24510'}
{'answer': "In the upcoming Velocity 1.6 release, you will be able to do #if( $car == $null ) without error messages.  This will allow you to distinguish easily between when $car is null and when it is false.  To do that now requires #if( $car && $car != false ), which just isn't as friendly.", 'questionId': '24495', 'answerId': '64065'}
{'answer': "My rules: Don't initialize with the default values in declaration (null, false, 0, 0.0). Prefer initialization in declaration if you don't have a constructor parameter that changes the value of the field. If the value of the field changes because of a constructor parameter put the initialization in the constructors. Be consistent in your practice (the most important rule).", 'questionId': '24551', 'answerId': '24558'}
{'answer': 'Assuming the type in your example, definitely prefer to initialize fields in the constructor. The exceptional cases are: Fields in static classes/methods Fields typed as static/final/et al I always think of the field listing at the top of a class as the table of contents (what is contained herein, not how it is used), and the constructor as the introduction. Methods of course are chapters.', 'questionId': '24551', 'answerId': '24643'}
{'answer': "What if I told you, it depends? I in general initialize everything and do it in a consistent way. Yes it's overly explicit but it's also a little easier to maintain.  If we are worried about performance, well then I initialize only what has to be done and place it in the areas it gives the most bang for the buck. In a real time system, I question if I even need the variable or constant at all. And in C++ I often do next to no initialization in either place and move it into an Init() function. Why? Well, in C++ if you're initializing something that can throw an exception during object construction you open yourself to memory leaks.", 'questionId': '24551', 'answerId': '24659'}
{'answer': 'I normally try the constructor to do nothing but getting the dependencies and initializing the related instance members with them. This will make you life easier if you want to unit test your classes. If the value you are going to assign to an instance variable does not get influenced by any of the parameters you are going to pass to you constructor then assign it at declaration time.', 'questionId': '24551', 'answerId': '25126'}
{'answer': 'In C# it doesn\'t matter. The two code samples you give are utterly equivalent. In the first example the C# compiler (or is it the CLR?) will construct an empty constructor and initialise the variables as if they were in the constructor. If there is already a constructor then any initialisation "above" will be moved into the top of it. In terms of best practice the former is less error prone than the latter as someone could easily add another constructor and forget to chain it.', 'questionId': '24551', 'answerId': '25130'}
{'answer': 'There is a slight performance benefit to setting the value in the declaration.  If you set it in the constructor it is actually being set twice (first to the default value, then reset in the ctor).', 'questionId': '24551', 'answerId': '34484'}
{'answer': "The semantics of C# differs slightly from Java here. In C# assignment in declaration is performed before calling the superclass constructor. In Java it is done immediately after which allows 'this' to be used (particularly useful for anonymous inner classes), and means that the semantics of the two forms really do match. If you can, make the fields final.", 'questionId': '24551', 'answerId': '46818'}
{'answer': 'I think there is one caveat. I once committed such an error: Inside of a derived class, I tried to "initialize at declaration" the fields inherited from an abstract base class. The result was that there existed two sets of fields, one is "base" and another is the newly declared ones, and it cost me quite some time to debug. The lesson: to initialize inherited fields, you\'d do it inside of the constructor.', 'questionId': '24551', 'answerId': '19896333'}
{'answer': 'There are many and various situations. I just need an empty list The situation is clear. I just need to prepare my list and prevent an exception from being thrown when someone adds an item to the list. I know the values I exactly know what values I want to have by default or I need to use some other logic. or Empty list with possible values Sometimes I expect an empty list by default with a possibility of adding values through another constructor.', 'questionId': '24551', 'answerId': '32011236'}
{'answer': 'In Java, an initializer with the declaration means the field is always initialized the same way, regardless of which constructor is used (if you have more than one) or the parameters of your constructors (if they have arguments), although a constructor might subsequently change the value (if it is not final). So using an initializer with a declaration suggests to a reader that the initialized value is the value that the field has in all cases, regardless of which constructor is used and regardless of the parameters passed to any constructor. Therefore use an initializer with the declaration only if, and always if, the value for all constructed objects is the same.', 'questionId': '24551', 'answerId': '34842991'}
{'answer': 'The design of C# suggests that inline initialization is preferred, or it wouldn\'t be in the language. Any time you can avoid a cross-reference between different places in the code, you\'re generally better off. There is also the matter of consistency with static field initialization, which needs to be inline for best performance. The Framework Design Guidelines for Constructor Design say this:  CONSIDER initializing static fields inline rather than explicitly using static constructors, because the runtime is able to optimize the performance of types that dont have an explicitly defined static constructor. "Consider" in this context means to do so unless there\'s a good reason not to. In the case of static initializer fields, a good reason would be if initialization is too complex to be coded inline.', 'questionId': '24551', 'answerId': '43960765'}
{'answer': 'Being consistent is important, but this is the question to ask yourself: "Do I have a constructor for anything else?" Typically, I am creating models for data transfers that the class itself does nothing except work as housing for variables. In these scenarios, I usually don\'t have any methods or constructors. It would feel silly to me to create a constructor for the exclusive purpose of initializing my lists, especially since I can initialize them in-line with the declaration. So as many others have said, it depends on your usage. Keep it simple, and don\'t make anything extra that you don\'t have to.', 'questionId': '24551', 'answerId': '44167904'}
{'answer': "Disclamer: I work at Vaadin (previously IT Mill)  If you are doing something RIAish, you might want to take look at Vaadin. It's an open source UI-oriented AJAX framework that, to me, is nice to use (I come from a PHP background myself). There's a case study that compares doing the same application (i.e. two applications with the same set of features) in Icefaces and Vaadin. In a nutshell, it states that the UI development was considerably faster.  Even though the study is hosted at the company's wiki, I can assure that it's objective, genuine and truthful, although I can't force you in believing me.", 'questionId': '24596', 'answerId': '24611'}
{'answer': 'I think for your modest requirements, you just need to code up servlets or simple jsp pages that you can serve from Tomcat server. I dont think you need any kind of web-framework (like struts) for personal web-site data', 'questionId': '24596', 'answerId': '24625'}
{'answer': "My favorite is the Spring Framework. With 2.5 Spring MVC is soooo kick ass, with new annotations, convention over configuration features, etc. If you're just doing something super simple you could also just try using the regular Servlet API and not bother with a framework.", 'questionId': '24596', 'answerId': '24640'}
{'answer': 'I\'ve heard good things about the Spring Framework too.  In general, though, I\'ve been underwhelmed by most Java web frameworks I\'ve looked at (esp Struts).   For a simple app I\'d definitely consider using "raw" servlets and JSPs and not worry about adopting a framework.  If the servlets are well written, it should be straightforward in the future to port to a framework if necessary when the app grows in complexity.', 'questionId': '24596', 'answerId': '24694'}
{'answer': "I've used Tapestry 3, Wicket, Echo, and JSF fairly extensively.  I'd really recommend you look those over and pick the one that appears the easiest for you, and to most closely fit the way you prefer to work. Of them, the most comfortable for me to work with was Wicket, due to the lightweight nature of component building and simplicity of page templating.  That goes doubly so if you are using your own db code instead of Hibernate or some other framework (I was never completely happy with Wicket Hibernate or Spring Integration). Echo is great if you don't mind writing all of your layout in Java.  I know that is different now, but I still think that product serves a fairly narrow niche.  They change the development model with every major release as well it seems. Tapestry is a great product, but it is obviously very different from the others in terms of development model as it is led mainly by one dude.  Howard Lewis Ship is no doubt quite smart, but I am disappointed with their decision to basically forget backwards compatibility with each release.  Again, though, for your needs this may not matter, and I've always found the Tapestry products pleasurable to work against. JSF has been out for years, and still feels like something that a Struts guy built to fix all of the problems of Struts.  Without really understanding all of the problems with Struts.  It still has an unfinished feel to it, although the product is obviously very flexible.  I use it and have some fondness for it, with great hopes for its future.  I think the next release (2.0) to be delivered in JEE6 will really bring it into its own, with a new template syntax (similar to Facelets) and a simplified component model (custom components in only 1 file... finally). And, of course, there are a million smaller frameworks and tools that get their own following (Velocity for basic needs, raw JSPs, Struts, etc).  I generally prefer component oriented frameworks myself, though.   In the end, I'd recommend just taking a look at Tapestry, Wicket, and JSF and just picking the one that feels the best to you.  You'll probably find one that just fits the way you like to work very quickly.", 'questionId': '24596', 'answerId': '24707'}
{'answer': "I've recently started using the Stripes Framework. If you're looking for a request based framework that's really easy to use, but doesn't impose any limits on what you are doing I'd highly recommend it. It's similar to struts, but it goes way beyond it. There are even some plugin projects that enable you to do use hibernate or jpa with very little configuration. There are a lot of good frameworks out there though I've heard wicket is a good one as well, but I haven't used it.", 'questionId': '24596', 'answerId': '26071'}
{'answer': "I recommend the component oriented Wicket framework. It allows you to write your web application in plain old Java code, you can use POJOs as the model for all components and don't need to mess around with huge XML configuration files.  I had successfully developed an online banking application with Struts when I discovered Wicket and saw how easy web application development can be!", 'questionId': '24596', 'answerId': '26920'}
{'answer': 'UPDATE: Tapestry 5.2 is out, so it\'s not abandoned, as it previously appeared to be. My experience is with Tapestry 4, not 5, so your mileage may vary. My opinion of Tapestry has changed over the years; I have modified this post to reflect it. I can no longer recommend Tapestry as I did previously. Tapestry 5 appears to be a significant improvement, but my main issue with Tapestry is not with platform itself; it\'s with the people behind it. Historically, every major version update of Tapestry has broken backwards compatibility with extreme prejudice, far more than one might expect. This seems to be due to the incorporation of new coding techniques or technologies that require significant rewrites. Howard Lewis Ship (the principal author of Tapestry) is certainly a brilliant developer, but I can\'t say I care for his management of the Tapestry project. Development of Tapestry 5 began almost immediately after Tapestry 4 shipped. From what I can tell, Ship pretty much devoted himself to that, leaving Tapestry 4 in the hands of other contributors, who I feel are not nearly as capable as Ship. After having made the painful switch from Tapestry 3 to Tapestry 4, I felt that I had been abandoned almost immediately. Of course, with the release of Tapestry 5, Tapestry 4 became a legacy product. I wouldn\'t have a problem with this if the upgrade path wasn\'t so brutal again. So now our development team is in the rather unenviable position: We could continue to use an essentially abandoned web platform (Tapestry 4), make the heinous upgrade to Tapestry 5, or give up on Tapestry entirely and rewrite our application using another platform. None of these options is very attractive. Tapestry 5 is supposedly written so as to reduce the likelihood of update breakage from this point forward. A good example is in the page classes: in previous incarnations, page classes descended from a base class provided by Tapestry; incompatible API changes in this class were the cause of a large number of backward compatibility problems. In Tapestry 5, pages are POJOs which are enhanced at runtime with the "magic Tapestry fairy dust" via annotations. So as long as the contract for the annotations is maintained, changes to Tapestry won\'t affect your page classes. If this is right, then writing a new application using Tapestry 5 could turn out well. But personally, I don\'t feel like putting my hand on the burner again.', 'questionId': '24596', 'answerId': '40194'}
{'answer': "Can't believe no one has mentioned GWT", 'questionId': '24596', 'answerId': '55818'}
{'answer': 'My favorite way to go for really simple apps is Apache VelocityTools (VelocityLayoutServlet) with Velosurf (http://velosurf.sourceforge.net). For more complex apps, Spring MVC or Struts 2.', 'questionId': '24596', 'answerId': '64232'}
{'answer': "All of them - that's the problem ;-)", 'questionId': '24596', 'answerId': '138903'}
{'answer': 'My pick is Wicket!!', 'questionId': '24596', 'answerId': '581117'}
{'answer': 'Saying "use JSF" is a little to simple. When you decide to use JSF, you have to choose a component library on top of it. Will you use MyFaces Tomahawk, Trinidad, Tobago (http://myfaces.apache.org/)? Or maybe ICEfaces (http://www.icefaces.org/)? Oh, and if you use ICEfaces, will you use JSPs or Facelets for your views? In my opinion it is to hard to tell. Nobody has the time to evaluate all the promising alternatives, at least in the projects I work on, because they are not big enough to do three month evaluation phases. However, you should look around for some that has a big and active community and isn\'t gone in a year. JSF is around for some time, and since it gets pushed by sun, it will be around for some more. I can\'t say if it\'s the best choice, but it will be a good one.', 'questionId': '24596', 'answerId': '581229'}
{'answer': 'http://zkoss.org - the good one', 'questionId': '24596', 'answerId': '1399740'}
{'answer': "Haven't tried it myself, but I think http://www.playframework.org/ has a lot of potential... coming from php and classic asp, it's the first java web framework that sound promising to me....", 'questionId': '24596', 'answerId': '1621746'}
{'answer': 'Another one to consider would be Grails. Although it isn\'t strictly a Java framework, it depends on Groovy (if you haven\'t seen this before, this is a dynamic language that runs on the JVM). Most valid Java is also valid Groovy, so it is pretty easy to learn. My last project used Grails, and whilst I\'d never used Groovy before, I discovered: Groovy is a joy to use, so much more fun than Java There is very little configuration to do, no XML and you\'re up and running with a full database application in less than an hour There is a downside: it is a very "clever" framework that hides a lot from you, so when things go wrong it can be very time consuming to find the problem. The project I mentioned would simply not have shipped on time or on budget if we\'d gone for a more traditional framework (even one that we\'re familar and skilled with such as SpringMVC), so Grails is definitely one that we\'ll continue to pick in the future. (but +1 for Wicket and Stripes, two excellent frameworks).', 'questionId': '24596', 'answerId': '1717240'}
{'answer': "For high traffic sites I'd use a framework that doesn't manage client state on the server - Wicket, JSF and Tapestry are managing client state on the server. I'd only use those frameworks (Wicket is my favourite) if the application should be more like a desktop application. But I'd try to use a more scalable and simple REST+AJAX approach though. Spring MVC would be a candidate, but since Spring MVC 3 it has a strange annotation overloaded programming model which doesn't use the benefits of static typing. There ore other ugly things like output parameters in methods combined with a usual return, so there are two output channels of one method. Spring MVC also tends to reeinvent the wheel and you'll have more to configure compared to other frameworks. I cannot really recommend Spring MVC though it has some nice ideas. Grails is a convenient way to use Spring MVC and other established frameworks like Hibernate. Coding is fun and you'll quickly see results. And don't forget that the Servlet API with a few little helpers like FreeMarker for templating is very powerful.", 'questionId': '24596', 'answerId': '1979389'}
{'answer': 'My pick would be Wicket (for large projects and a predictable user base), GWT (for large projects that are mostly public facing) or just a service framework (like Jersey/ JAXRS) together with a JavaScript toolkit (for small to medium projects).', 'questionId': '24596', 'answerId': '2173874'}
{'answer': 'I recommend Seam, especially if you need persistence.', 'questionId': '24596', 'answerId': '2393474'}
{'answer': 'I have evaluated quite a few frameworks and Vaadin (http://vaadin.com/home) has percolated all the way to the top.  You should at least give it a short evaluation.  Cheers!', 'questionId': '24596', 'answerId': '3345667'}
{'answer': 'Try HybridJava - that is much simpler than anything else.', 'questionId': '24596', 'answerId': '3350167'}
{'answer': 'See a few comments on some Java application Frameworks (second paragraph): http://swiss-knife.blogspot.com/2009/11/some-java-application-servers.html', 'questionId': '24596', 'answerId': '3390351'}
{'answer': "After a long while of testing various solutions, for me it turned out to be: Spring MVC for the presentation and controller layer (NO Spring Webflow though, because my flows are based on ajax) jQuery for all the client side stuff Spring Security for the, well, security aspect Hibernate / JPA2 Jetty for the sake of continuations (comet) One month of an extraordinarily steep learning curve, but now I am happy. I would also like to mention that I was just a little step away from skipping all that Java stuff and learing Scala/LIFT instead. As far as I am concerned, everything in Java that is related with cutting edge web development (comet, async communication, security (yes, even with Spring Security!)) still is a bit of a hack (proove me wrong by evidence, pleeease!). To me, Scala/LIFT seems to be a more out-of-the-box and all-in-one solution. The reason why I finally decided not to go with Scala is as a project leader I must consider human resources and Java developers are much easier to find than Scala developers for most developers in my team, Scala's funcional concept, as excellent as it is, is hard to understand Cheers Er", 'questionId': '24596', 'answerId': '3394371'}
{'answer': 'I would say vaadin or wicket', 'questionId': '24596', 'answerId': '4932284'}
{'answer': 'For quick and fancy GUI you can use JSF with Richfaces library. Richfaces UI components are easy to use and handy references available with code demonstration in the demo site. Probably later when your site has more data to handle and lot of information has to be transacted in database you can plug any database access framework (ORM) with it.', 'questionId': '24596', 'answerId': '5677149'}
{'answer': 'I would strongly recommend not using that many layers unless they are really layered physically. eg if you have something like a rich client where you need to send detached objects to update the GUI, otherwise, its a world of pain.', 'questionId': '24623', 'answerId': '24630'}
{'answer': "Try the Spring Framework. DAOs are initialized via Dependency Injection and are just plain 'ole Java objects. Then, the methods on the DAO should just use Domain Objects that are used at all layers of the Application.", 'questionId': '24623', 'answerId': '24647'}
{'answer': 'How to download DAO Factory to create Database Connectivity?', 'questionId': '24623', 'answerId': '397595'}
{'answer': 'With regards to testability, I\'d advise against the second approach. Static methods prevent you from adjusting the class\'s behaviour by overriding collaborators with mocks and such. As Miko Hevery puts it: "Static Methods are Death to Testability".', 'questionId': '24623', 'answerId': '397633'}
{'answer': 'The regex shown in your example, should work regardless of language. So is it the regex you want, or the java code to put this logic around the regex?', 'questionId': '24723', 'answerId': '24741'}
{'answer': 'The Open Web Application Security Project (OWASP) have a few suggestion for sanitizing your input. See for instance: Java Table of Contents How to perform HTML entity encoding in Java How to add validation logic to HttpServletRequest', 'questionId': '24723', 'answerId': '27649'}
{'answer': 'The biggest problem by using jeffs code is the @ which currently isnt available.  I would probably just take the "raw" regexp from jeffs code if i needed it and paste it into  http://www.cis.upenn.edu/~matuszek/General/RegexTester/regex-tester.html  and see the things needing escape get escaped and then use it. Taking the usage of this regex in mind I would personally make sure I understood exactly what I was doing, why and what consequences would be if I didnt succeed, before copy/pasting anything, like the other answers try to help you with. (Thats propbably pretty sound advice for any copy/paste)', 'questionId': '24723', 'answerId': '27705'}
{'answer': 'I\'m not to convinced that using a regular expression is the best way for finding all suspect code. Regular expressions are quite easy to trick specially when dealing with broken HTML. For example, the regular expression listed in the Sanitize HTML link will fail to remove all \'a\' elements that have an attribute between the element name and the attribute \'href\': < a alt="xss injection" href="http://www.malicous.com/bad.php" > A more robust way of removing malicious code is to rely on a XML Parser that can handle all kind of HTML documents (Tidy, TagSoup, etc) and to select the elements to remove with an XPath expression. Once the HTML document is parsed into a DOM document the elements to revome can be found easily and safely. This is even easy to do with XSLT.', 'questionId': '24723', 'answerId': '533695'}
{'answer': "Don't do this with regular expressions. Remember, you're not protecting just against valid HTML; you're protecting against the DOM that web browsers create. Browsers can be tricked into producing valid DOM from invalid HTML quite easily.  For example, see this list of obfuscated XSS attacks. Are you prepared to tailor a regex to prevent this real world attack on Yahoo and Hotmail on IE6/7/8? How about this attack that works on IE6?  How about attacks that are not listed on this site? The problem with Jeff's approach is that it's not a whitelist, as claimed. As someone on that page adeptly notes: The problem with it, is that the html   must be clean. There are cases where   you can pass in hacked html, and it   won't match it, in which case it'll   return the hacked html string as it   won't match anything to replace. This   isn't strictly whitelisting. I would suggest a purpose built tool like AntiSamy. It works by actually parsing the HTML, and then traversing the DOM and removing anything that's not in the configurable whitelist. The major difference is the ability to gracefully handle malformed HTML.  The best part is that it actually unit tests for all the XSS attacks on the above site. Besides, what could be easier than this API call:", 'questionId': '24723', 'answerId': '535022'}
{'answer': "[\\s\\w\\.]*.  If it doesn't match, you've got XSS.  Maybe.  Take note that this expression only allows letters, numbers,  and periods.  It avoids all symbols, even useful ones, out of fear of XSS.  Once you allow &, you've got worries.  And merely replacing all instances of & with &amp; is not sufficient.  Too complicated to trust :P.  Obviously this will disallow a lot of legitimate text (You can just replace all nonmatching characters with a ! or something), but I think it will kill XSS. The idea to just parse it as html and generate new html is probably better.", 'questionId': '24723', 'answerId': '538379'}
{'answer': ' This  will validate characters, digits, whitespaces and also the <br>  tag.  If you want more risk you can add more tags like', 'questionId': '24723', 'answerId': '937158'}
{'answer': 'I extracted from NoScript best Anti-XSS addon, here is its Regex: Work flawless: Test: http://regex101.com/r/rV7zK8 I think it block 99% XSS because it is a part of NoScript, a addon that get updated regularly', 'questionId': '24723', 'answerId': '24094764'}
{'answer': 'An old thread but maybe this will be useful for other users. There is a maintained security layer tool for php: https://github.com/PHPIDS/ It is based on a set of regex which you can find here: https://github.com/PHPIDS/PHPIDS/blob/master/lib/IDS/default_filter.xml', 'questionId': '24723', 'answerId': '25745835'}
{'answer': 'No - If you can parse it yourself (as you are doing), and it will scale for your needs, you do not need any library. Just ensure that your future needs are going to be met - complex xml creation is better done using libraries - some of which come in very simple flavors too.', 'questionId': '24866', 'answerId': '24867'}
{'answer': "I think that custom string manipulation is fine, but you have to keep two things in mind: Your code isn't as mature as the library. Allocate time in your plan to handle the bugs that pop-up. Your approach will probably not scale as well as a 3rd party library when the xml starts to grow (both in terms of performance and ease of use). I know a code base that uses custom string manipulation for xml output (and a 3rd party library for input). It was fine to begin with but became a real hassle after a while.", 'questionId': '24866', 'answerId': '24869'}
{'answer': 'Yes, use the library. Somebody took the time and effort to create something that is usually better than what you could come up with. String manipulation is for sending back a single node, but once you start needing to manipulate the DOM, or use an XPath query, the library will save you.', 'questionId': '24866', 'answerId': '24872'}
{'answer': 'No - especially for generating (parsing I would be less inclined to as input text can always surprise you). I think its fine - but be prepared to shift to a library should you find yourself spending more then a few minutes maintaining your own code.', 'questionId': '24866', 'answerId': '24894'}
{'answer': "I don't think that using the DOM XML API wich comes with the JDK is difficult, it's easy to create Element nodes, attributes, etc... and later is easy convert strings to a DOM document sor DOM documents into a String In the first page google finds from Spain (spanish XML example):", 'questionId': '24866', 'answerId': '24897'}
{'answer': 'It\'s not essential, but advisable. However, if string manipulation works for you, then go for it! There are plenty of cases where small or simple XML text can be safely built by hand. Just be aware that creating XML text is harder than it looks. Here\'s some criteria I would consider: First: how much control do you have on the information that goes into the xml? The less control you have on the source data, the more likely you will have trouble, and the more advantageous the library becomes. For example: (a) Can you guarantee that the element names will never have a character that is illegal in a name? (b) How about quotes in an attribute\'s content? Can they happen, and are you handling them? (c) Does the data ever contain anything that might need to be encoded as an entity (like the less-than which often needs to be output as &lt;); are you doing it correctly? Second, maintainability: is the code that builds the XML easy to understand by someone else? You probably don\'t want to be stuck with the code for life. I\'ve worked with second-hand C++ code that hand-builds XML and it can be surprisingly obscure. Of course, if this is a personal project of yours, then you don\'t need to worry about "others": substitute "in a year" for "others" above. I wouldn\'t worry about performance. If your XML is simple enough that you can hand-write it, any overhead from the library is probably meaningless. Of course, your case might be different, but you should measure to prove it first. Finally, Yes; you can hand build XML text by hand if it\'s simple enough; but not knowing the libraries available is probably not the right reason. A modern XML library is a quite powerful tool, but it can also be daunting. However, learning the essentials of your XML library is not that hard, and it can be quite handy; among other things, it\'s almost a requisite in today\'s job marketplace. Just don\'t get bogged down by namespaces, schemas and other fancier features until you get the essentials. Good luck.', 'questionId': '24866', 'answerId': '24902'}
{'answer': "Xml is hard. Parsing yourself is a bad idea, it's even a worse idea to generate content yourself. Have a look at the Xml 1.1 spec. You have to deal with such things as proper encoding, attribute encoding (e.g.,  produces invalid xml), proper CDATA escaping, UTF encoding, custom DTD entities, and that's without throwing in the mix xml namespaces with the default / empty namespace, namespace attributes, etc. Learn a toolkit, there's plenty available.", 'questionId': '24866', 'answerId': '24955'}
{'answer': "By not using a library, you risk generating or parsing data that isn't well-formed, which sooner or later will happen. For the same reason document.write isn't allowed in XHTML, you shouldn't write your XML markup as a string.", 'questionId': '24866', 'answerId': '25187'}
{'answer': "You don't have to use library to parse XML, but check out this question What considerations should be made before reinventing the wheel? before you start writing your own code for parsing/generating xml.", 'questionId': '24866', 'answerId': '25191'}
{'answer': "The only time I've done something like this in production code was when a collegue and I built a pre-processor so that we could embed XML fragments from other files into a larger XML. On load we would first parse these embed (file references in XML comment strings) and replace them with the actual fragment they referenced. Then we would pass on the combined result to the XML Parser.", 'questionId': '24866', 'answerId': '27706'}
{'answer': 'Yes. It makes no sense to skip essential tool: even writing xml is non-trivial with having to escape those ampersands and lts, not to mention namespace bindings (if needed). And in the end libs can generally read and write xml not only more reliably but more efficiently (esp. so for Java). But you may have been looking at wrong tools, if they seem overcomplicated. Data binding using JAXB or XStream is simple; but for simple straight-forward XML output, I go with StaxMate. It can actually simplify the task in many ways (automatically closes start tags, writes namespace declarations if needde etc).', 'questionId': '24866', 'answerId': '733048'}
{'answer': "It was quite some time since I dug into those parts of Java, but... Why you can't do it was probably a design choice by the language developers. Still, due to the type erasure employed by Java, the generics information gets dropped at compile time anyway, so in your example it would create exactly the same byte code whether you had the type parameter or not.", 'questionId': '24991', 'answerId': '24996'}
{'answer': "You can, if you pass in the type as a method parameter. Methods cannot be genericised in the same way that a type can, so the only option for a method with a dynamically-typed generic return type -- phew that's a mouthful :-) -- is to pass in the type as an argument. For a truly excellent FAQ on Java generics, see Angelika Langer's generics FAQ. . .    Follow-up: It wouldn't make sense in this context to use the array argument as in Collection.toArray( T[] ). The only reason an array is used there is because the same (pre-allocated) array is used to contain the results (if the array is large enough to fit them all in). This saves on allocating a new array at run-time all the time. However, for the purposes of education, if you did want to use the array typing, the syntax is very similar:", 'questionId': '24991', 'answerId': '24997'}
{'answer': "@pauldoo Yes, you are quite right. It is one of the weaknesses with the java generics imho. I response to Cheekysoft I'd like to propose to also look at how it is done by the Java people themselves, such as T[] AbstractCollection#toArray(T[] a). I think Cheekysofts version is superior, but the Java one has the advantage of familiarity. Edit: Added link. Re-edit: Found a bug on SO :) Follow-up on Cheekysoft: Well, as it is a list of some type that should be returned the corresponding example should look something like: But yes, passing the class object is clearly the better one. My only argument is that of familiarity, and in this exact instance it isn't worth much (in fact it is bad).", 'questionId': '24991', 'answerId': '25010'}
{'answer': 'When the java compiler cannot infer the parameter type by itself for a static method, you can always pass it using the full qualified method name: Class . < Type > method();', 'questionId': '24991', 'answerId': '25877'}
{'answer': 'No input is not the same as the end of the stream. You can usually simulate the end of the stream in a console by pressing Ctrl+D (AFAIK some systems use Ctrl+Z instead). But I guess this is not what you want so better test for empty strings additionally to null strings.', 'questionId': '25033', 'answerId': '25036'}
{'answer': " From my understanding of this, readLine should return null the first time no input is entered other than a line termination, like '\\r'. That is not correct. readLine will return null if the end of the stream is reached. That is, for example, if you are reading a file, and the file ends, or if you're reading from a socket and the socket closses. But if you're simply reading the console input, hitting the return key on your keyboard does not constitute an end of stream. It's simply a character that is returned (\\n or \\r\\n depending on your OS). So, if you want to break on both the empty string and the end of line, you should do: Also, your current program should work as expected if you pipe some file directly into it, like so:", 'questionId': '25033', 'answerId': '25043'}
{'answer': "There's a nice apache commons lang library which has a good api for common :) actions. You could use statically import StringUtils and use its method isNotEmpty(String ) to get: It might be useful someday:) There are also other useful classes in this lib.", 'questionId': '25033', 'answerId': '36438'}
{'answer': 'I can not really help you out with a Java implementation. Microsoft of course, have their own Biztalk adapter for ISO15022 and 20022. And they will actually do the validation fairly well. But as you say you are actually looking for a java solution.   You might find, as I did when I researched this 6 years ago, that mapping FIN messages to XML and then to into objects, a standard library will only get you partly to your goal. You will have to integrate this with your backend application and whatever market practices you face in the particular messages you need to support.   I finally ended up writing a generic FIN parser /150022 class library  in c++. Anyway, good luck. An idea is to be more specific in your question. What types of messages do you need to support?', 'questionId': '25192', 'answerId': '25230'}
{'answer': "Have you looked at WIFE?  We use that in our application which translates SWIFT messages to an internal XML format and back again.  We haven't had any problems with it.  Also, it's licensed under the LGPL, so you can hack it up if you need to.  Check it out.", 'questionId': '25192', 'answerId': '40002'}
{'answer': 'If your company is not comfortable with the LGPL license, You might want to check Progress Sonic ESB,  or ArtixDS (recently acquired), TIBCO ActiveWhatever or Oracle/BEA Aqualogic. Chances are you are already using something from these companies and you can get decent discount.', 'questionId': '25192', 'answerId': '178394'}
{'answer': "There is a product call Volant that make a great job. Their solution is certified by SWIFT and the integration is easy ( I sound like I'm working for them ... I'm not). I've been using it since a couple of month .  IBM is also offering a solution (cannot remember to name right now) but then you are committed to the big blue.", 'questionId': '25192', 'answerId': '289190'}
{'answer': "Along with jodonnell, we also use WIFE. It works very well.  I'm not sure if it does the network validation rules (#2 on your list) though.", 'questionId': '25192', 'answerId': '433976'}
{'answer': 'SWIFT is releasing a "Standards Developer Kit" which includes an "MT/XML Schema Library". From the doc: "The MT/XML Schema Library is a complete set of XML schema definitions for MT messages, and software which shows how to convert messages from an MT format to an MT XML representation and back. This approach allows XML integration between applications while the MT (FIN) format will continue to be transported over the SWIFT network." Java source code will also be made available, again from the doc: "Working sample Java source code that converts a message in MT format to an XML instance and from an XML instance to a message in MT format." See: http://www.swift.com/support/drc/develop/standards.page This can be a great aid in dealing with FIN messages in XML syntax.', 'questionId': '25192', 'answerId': '1067648'}
{'answer': "paymentcomponents (http://www.paymentcomponents.com/) parser was easy to use and found all errors. Their site definitely needs work but if u look there, u'll find what u r looking for", 'questionId': '25192', 'answerId': '2912070'}
{'answer': 'You can combine the open source implementation WIFE with the commercial validation component from http://www.prowidesoftware.com. It validates that the messages you create with the model or XML representation are good through SWIFT network validation rules.', 'questionId': '25192', 'answerId': '9796002'}
{'answer': "Have you considered building on top of Eclipse's Rich Client Platform, and then exposing the Eclipse extension framework? Also, depending on your needs, the Spring Framework might help with that and other things you might want to do:  http://www.springframework.org/", 'questionId': '25449', 'answerId': '25454'}
{'answer': "I've done this for software I've written in the past, it's very handy. I did it by first creating an Interface that all my 'plugin' classes needed to implement. I then used the Java ClassLoader to load those classes and create instances of them. One way you can go about it is this: That has loaded the class, now you need to create an instance of it, assuming the interface name is MyModule:", 'questionId': '25449', 'answerId': '25492'}
{'answer': "I recommend that you take a close look at the Java Service Provider (SPI) API.  It provides a simple system for finding all of the classes in all Jars on the classpath that expose themselves as implementing a particular service.  I've used it in the past with plugin systems with great success.", 'questionId': '25449', 'answerId': '25607'}
{'answer': 'Look into OSGi.   On one hand, OSGi provides all sorts of infrastructure for managing, starting, and doing lots of other things with modular software components.  On the other hand, it could me too heavy-weight for your needs. Incidentally, Eclipse uses OSGi to manage its plugins.', 'questionId': '25449', 'answerId': '26078'}
{'answer': 'At the home-grown classloader approach:  While its definitely a good way to learn about classloaders there is something called "classloader hell", mostly known by people who wrestled with it when it comes to use in bigger projects. Conflicting classes are easy to introduce and hard to solve. And there is a good reason why eclipse made the move to OSGi years ago. So, if its more then a pet project, take a serious look into OSGi. Its worth looking at. You\'ll learn about classloaders PLUS an emerging technolgy standard.', 'questionId': '25449', 'answerId': '152460'}
{'answer': "Although I'll second the accepted solution, if a basic plugin support is needed (which is the case most of the time), there is also the Java Plugin Framework (JPF) which, though lacking proper documentation, is a very neat plugin framework implementation.  It's easily deployable and - when you get through the classloading idiosynchrasies - very easy to develop with. A comment to the above is to be aware that plugin loadpaths below the plugin directory must be named after the full classpath in addition to having its class files deployed in a normal package path named path. E.g.", 'questionId': '25449', 'answerId': '383779'}
{'answer': 'Are there any special attributes that you need to apply (like OS guided resource management) that you need to support? Otherwise, for Unix you should be able to daemonize your application by writing an appropriate init.d script and setting your app to start automatically.', 'questionId': '25530', 'answerId': '25539'}
{'answer': 'I\'ve had great success with Java Service Wrapper myself.  I haven\'t looked at the others, but the major strengths of ServiceWrapper are: Great x-platform support - I\'ve used it on Windows and Linux, and found it easy on both Solid Documentation - The docs are clear and to the point, with great examples Deep per-platform support - There are some unique features in the window service management system that are supported perfectly by service wrapper (w/o restarting).  And on Windows, you will even see your app name in the process list instead of just "java.exe". Standards Compliant - Unlike many ad-hoc Java init scripts, the scripts for service wrapper tend to be compliant with LSB standards.  This can end up being very important if you ever want high availability management from something like Linux Heartbeat/HA. Anyway, just my 2 cents... :)', 'questionId': '25530', 'answerId': '25543'}
{'answer': 'Another option is WinRun4J. This is windows only but has some useful features: 32 bit and 64 bit support API to access the event log and registry Can register service to be dependent on other services (i.e serviceA and serviceB must startup before serviceC) Its also open source friendly (CPL) so no restrictions on use. (full disclosure: I work on this project).', 'questionId': '25530', 'answerId': '847143'}
{'answer': "First, the equivalent of ASP.Net in Java is going to be a web framework, such as the ones you mention (Tiles, Tapestry and Velocity). Master pages give the ability to define pages in terms of content slotted into a master template. Master pages are a feature of ASP.Net (the .Net web framework), so you are looking for a feature similar to master pages in a Java web framework.   http://tiles.apache.org/framework/tutorial/basic/pages.html gives some basic examples using Tiles and JSP to implement something similar with Struts, a Java web framework.  In this case, the Master Pages functionality is a plugin on top of Struts. Velocity is a generic templating engine, not specialized for web pages and definitely more complicated than you need.  (I've seen it used for code generation.) Tapestry is more of a full featured web stack than Tile, and is probably good for your purposes.  Its templating functionality involves creating a component and putting all common markup in that.  An example is at http://www.infoq.com/articles/tapestry5-intro. The specifics of this differ based on which Java web framework you choose.", 'questionId': '25532', 'answerId': '25540'}
{'answer': 'You should also check out Facelets; there is a good introductory article on DeveloperWorks. The Facelets <ui:insert/> tag is comparable to the ASP.NET <asp:ContentPlaceHolder/> tag used in master pages; it lets you provide default content for that area of the page, but this can be overridden. To fill the Facelets template in another page, you start with a <ui:composition/> element that points to the template file.  This is roughly equivalent to declaring the MasterPageFile attribute in an ASP.NET page. Inside the <ui:composition/> element, you use <ui:define/> elements to override the template defaults, similar to the way an <asp:Content/> tag is used.  These elements can contain any kind of content - from simple strings to JSF elements. So, to bring it all together... In master.xhtml: In page.xhtml: And this will render as: You also get some other benefits with Facelets, such as the ability to reuse page components with different data. (Edited to provide more information.)', 'questionId': '25532', 'answerId': '33270'}
{'answer': "I've used sitemesh in previous projects and it's pretty easy to set up. Essentially, you create decorators which are equivalents of master pages. You then define which child pages use which decorators. See introduction to sitemesh for more information.", 'questionId': '25532', 'answerId': '5192319'}
{'answer': 'I think the best method out there is to implement the SIGAR API by Hyperic.  It works for most of the major operating systems ( darn near anything modern ) and is very easy to work with.  The developer(s) are very responsive on their forum and mailing lists.  I also like that it is GPL2 Apache licensed.  They provide a ton of examples in Java too! SIGAR == System Information, Gathering And Reporting tool.', 'questionId': '25552', 'answerId': '25583'}
{'answer': "You can get some limited memory information from the Runtime class. It really isn't exactly what you are looking for, but I thought I would provide it for the sake of completeness. Here is a small example. Edit: You can also get disk usage information from the java.io.File class. The disk space usage stuff requires Java 1.6 or higher.", 'questionId': '25552', 'answerId': '25596'}
{'answer': 'Have a look at the APIs available in the java.lang.management package. For example:  OperatingSystemMXBean.getSystemLoadAverage() ThreadMXBean.getCurrentThreadCpuTime() ThreadMXBean.getCurrentThreadUserTime() There are loads of other useful things in there as well.', 'questionId': '25552', 'answerId': '27502'}
{'answer': "The java.lang.management package does give you a whole lot more info than Runtime - for example it will give you heap memory (ManagementFactory.getMemoryMXBean().getHeapMemoryUsage()) separate from non-heap memory (ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage()). You can also get process CPU usage (without writing your own JNI code), but you need to cast the java.lang.management.OperatingSystemMXBean to a com.sun.management.OperatingSystemMXBean. This works on Windows and Linux, I haven't tested it elsewhere. For example ... call the get getCpuUsage() method more frequently to get more accurate readings.", 'questionId': '25552', 'answerId': '61727'}
{'answer': 'Hey you can do this with java/com integration.  By accessing WMI features you can get all the information.', 'questionId': '25552', 'answerId': '677173'}
{'answer': 'Usually, to get low level OS information you can call OS specific commands which give you the information you want with Runtime.exec() or read files such as /proc/* in Linux.', 'questionId': '25552', 'answerId': '678954'}
{'answer': 'CPU usage isn\'t straightforward -- java.lang.management via com.sun.management.OperatingSystemMXBean.getProcessCpuTime comes close (see Patrick\'s excellent code snippet above) but note that it only gives access to time the CPU spent in your process.  it won\'t tell you about CPU time spent in other processes, or even CPU time spent doing system activities related to your process. for instance i have a network-intensive java process -- it\'s the only thing running and the CPU is at 99% but only 55% of that is reported as "processor CPU". don\'t even get me started on "load average" as it\'s next to useless, despite being the only cpu-related item on the MX bean.  if only sun in their occasional wisdom exposed something like "getTotalCpuTime"... for serious CPU monitoring SIGAR mentioned by Matt seems the best bet.', 'questionId': '25552', 'answerId': '937635'}
{'answer': "There's a Java project that uses JNA (so no native libraries to install) and is in active development. It currently supports Linux, OSX, Windows, Solaris and FreeBSD and provides RAM, CPU, Battery and file system information. https://github.com/oshi/oshi", 'questionId': '25552', 'answerId': '3098296'}
{'answer': 'If you are using Jrockit VM then here is an other way of getting VM CPU usage. Runtime bean can also give you CPU load per processor. I have used this only on Red Hat Linux to observer Tomcat performance. You have to enable JMX remote in catalina.sh for this to work.', 'questionId': '25552', 'answerId': '8076368'}
{'answer': 'You can get some system-level information by using System.getenv(), passing the relevant environment variable name as a parameter. For example, on Windows: For other operating systems the presence/absence and names of the relevant environment variables will differ.', 'questionId': '25552', 'answerId': '11989443'}
{'answer': 'It is still under development but you can already use jHardware  It is a simple library that scraps system data using Java. It works in both Linux and Windows.', 'questionId': '25552', 'answerId': '35758362'}
{'answer': 'Add OSHI dependency via maven: Get a battery capacity left in percentage:', 'questionId': '25552', 'answerId': '36533445'}
{'answer': 'For windows I went this way. Here is the link with details.', 'questionId': '25552', 'answerId': '38127012'}
{'answer': 'On Windows, you can run the systeminfo command and retrieves its output for instance with the following code:', 'questionId': '25552', 'answerId': '40281599'}
{'answer': "I like XOM, because I like the way Elliotte Rusty Harold thinks. Of the ones you mention I belive it's the one that strays away from the DOM standard API:s the most, but I consider that a benefit. I once implemented a DOM library for Cocoa, and XOM was my inspiration. I've worked with JDOM as well, and there's absolutely nothing wrong with it, although I do prefer XOM.", 'questionId': '25614', 'answerId': '25701'}
{'answer': "It all depends on the feature set. If you want to benefit from an XSL Transformation Engine (Like Xalan) or an XPath Engine (Like Jaxen or Saxon) I would recommend sticking to the more popular framework available like Apache Xerces, JDOM. After that, it's all a matter of taste. I personnally use a W3C compliant ( org.w3c.* ) like Apache Xerces because they are common enough, reasonably fast and well supported by the Java Community. Of course, if you need blinding speed and do not care about XPath, XQuery or XSL, you can surely find yourself something that is much faster and/or resource-hungry. (i.e. A StAX Implementation)", 'questionId': '25614', 'answerId': '25983'}
{'answer': "While dom4j is an old player, we have been using it for a while and haven't regret it yet. Strong features: simplicity, xpath support and others.  Weak sides: yet to support java 5.0, but version 2.0 has been finally announced.", 'questionId': '25614', 'answerId': '575759'}
{'answer': "Create your own function to execute an OS command through the command line? For the sake of an example. But know where and why you'd want to use this as others note.", 'questionId': '25637', 'answerId': '25644'}
{'answer': "The quick answer is no. The only way to do it is by invoking the OS-specific commands that will cause the computer to shutdown, assuming your application has the necessary privileges to do it. This is inherently non-portable, so you'd need either to know where your application will run or have different methods for different OSs and detect which one to use.", 'questionId': '25637', 'answerId': '25648'}
{'answer': "You can use JNI to do it in whatever way you'd do it with C/C++.", 'questionId': '25637', 'answerId': '25650'}
{'answer': "Here's another example that could work cross-platform: The specific shutdown commands may require different paths or administrative privileges.", 'questionId': '25637', 'answerId': '25666'}
{'answer': 'Better use .startsWith than use .equals ...  work fine Ra.', 'questionId': '25637', 'answerId': '2153270'}
{'answer': 'I use this program to shutdown the computer in X minutes.', 'questionId': '25637', 'answerId': '2213729'}
{'answer': 'On Windows Embedded by default there is no shutdown command in cmd. In such case you need add this command manually or use function ExitWindowsEx from win32 (user32.lib) by using JNA (if you want more Java) or JNI (if easier for you will be to set priviliges in C code).', 'questionId': '25637', 'answerId': '10829952'}
{'answer': "Here is an example using Apache Commons Lang's SystemUtils: This method takes into account a whole lot more operating systems than any of the above answers. It also looks a lot nicer and is more reliable then checking the os.name property. Edit: It now has the option for the user to enter a delay if they like!", 'questionId': '25637', 'answerId': '14297352'}
{'answer': 'easy single line but only work on windows', 'questionId': '25637', 'answerId': '26782022'}
{'answer': "If your hardcoded values are just simple key-value pairs, you should look at java.util.Properties.  It's a lot simpler than xml, easier to use, and mind-numbingly trivial to implement. If you are working with Java and the data you are storing or retrieving from disk is modeled as a key value pair (which it sounds like it is in your case), then I really can't imagine a better solution. I have used properties files for simple configuration of small packages in a bigger project, and as a more global configuration for a whole project, and I have never had problems with it. Of course this has the huge benefit of not requiring any 3rd party libraries to utilize.", 'questionId': '25765', 'answerId': '25768'}
{'answer': "I tend to use java.util.Properties (or similar classes in other languages and frameworks) wrapped in an application-specific configuration class most of the time, but I am very interested in alternatives or variations on this. Especially since things can become a bit tricky if graphical configuration dialogs or multiple views on the configuration data is involved. Unfortunately I don't have any experience with specific libraries for Java (except with the ones I have written myself), but any pointers would be appreciated. Update OK. That wasn't entirely true, three is the Spring Java Configuration Project.", 'questionId': '25765', 'answerId': '25819'}
{'answer': "I wrote about this a couple of weeks ago and came to the conclusion that XML is one of the most widely used notations.  Is it the best? I don't think so, I really like JSON, but the tooling is still not up to XML so I guess we have to wait and see.", 'questionId': '25765', 'answerId': '25844'}
{'answer': "Commons Configuration We're using this. Properties files alone are much easier to handle, but if you need to represent more complex data commons configuration can do this and read your properties files as well. If you aren't doing anything complicated I'd stick to properites files.", 'questionId': '25765', 'answerId': '26077'}
{'answer': 'Apache Commons Configuration works great.  It supports having the configuration stored in a wide range of formats on the backend including properties, XML, JNDI, and more.  It is easy to use and to extend.  To get the most flexibility out of it use a factory to get the configuration and just use the Configuration interface after that. Two feature of Commons Configuration that differentiate it over a straight Properties file is that it support automatic conversion to common types (int, float, String arrays) and it supports property substitution:', 'questionId': '25765', 'answerId': '34397'}
{'answer': 'If you want to do something advanced (and typesafe), you might want to take a look at this: http://www.ibm.com/developerworks/java/library/j-configint/index.html', 'questionId': '25765', 'answerId': '242419'}
{'answer': "Properties files a very simple, if you need something more functional, you could format some of your configuration files as Java classes.  These can be placed in a different package/module and can be pre-compiled or loaded at runtime with a library like BeanShell. Note: In the simplest case (pre-compiled) you don't need any additional libraries.", 'questionId': '25765', 'answerId': '854163'}
{'answer': 'Regarding the suggestions to use java.util.Properties - starting in jdk 1.5, the Preferences API (java.util.prefs) appears to be the preferred alternative to using the Properties API.   Reasons: increased scalability, back-end neutrality, ect.', 'questionId': '25765', 'answerId': '1004245'}
{'answer': "Here are various options: java.util.Properties java.util.prefs.Preferences (since Java 5) Commons Configuration jConfig JFig Carbon's Configuration Service You might want to read Comparison of Commons Configuration With JFig and JConfig and Configuring your Applications using JFig for some feedback from various users. Personally, I've used jConfig and it was a good experience.", 'questionId': '25765', 'answerId': '1622751'}
{'answer': 'You can try YamlBeans. This way you write whatever classes you want to hold your config data, then you can automatically write and read them to and from YAML. YAML is a human readable data format. It has more expressive power than java.util.Properties. You can have lists, maps, anchors, typed data, etc.', 'questionId': '25765', 'answerId': '1949877'}
{'answer': "Please take a look at this URL:      http://issues.apache.org/jira/browse/CONFIGURATION-394 The Configuration framework which we're looking for it is something on top of Apache Commons Configuration and must support Concurrency Issues, JMX issues and most of stores(e.g .properties file, .xml files or PreferencesAPI). What weblogic team provides on 'Administration Console' is intersting which through it you can have transactional(atomic) updates on configurations so that are registered listeners be notified. The Apache guys insist that this project is out of scopes of Commons Configuration, maybe! I've attached a simple configuration framework, take look please.", 'questionId': '25765', 'answerId': '2447375'}
{'answer': 'I just posted a brief bit of code about using Spring\'s ClassPathResource as an alternative to IoC. ClassPathResource permits you to place property files anywhere on the classpath (e.g., all in one place, or as peers to the code they configure. My example just uses java.util.Properties, so you can use the plaintext "name=value" style or its XML format.', 'questionId': '25765', 'answerId': '2629387'}
{'answer': 'You could have a look at newly announced tools4j-config whose mission statement is to allow you to easily handle configuration at runtime.', 'questionId': '25765', 'answerId': '9103711'}
{'answer': 'the Intelligent Parameter Utilization Tool (InPUT, page) allows to externalize almost any (hard coded) decision as a parameter into an XML based configuration file. It has been initiated in early 2012 as a response to the perceived deficiencies in existing configuration tools with respect to generality, and separation of concerns. InPUT is probably more powerful than most use cases require, as it allows for the programming language independent formulation of experimental data (input - output), with features such as the definition of complex descriptor to class mappings, or randomized configuration spawning and validation based on predefined value ranges (for test and research, e.g. Monte Carlo simulations). You can define parameters with sub parameters, relative restrictions on parameter values (numerical param a > param b) etc. . Its still in beta, but rather stable, I use it for my research, for the configuration and documentation of experiments, and for teaching purposes. Once it is available for other languages (C++ adapter in the pipe), other researchers/practitioners can reuse the descriptors running their implementations of the same algorithms in C++ (using the code mapping concept). That way, experimental results can be validated/programs can be migrated more easily. The documentation is still in working process, but a couple of examples are available on the page. InPUT is open source software. For those interested, the Conceptual Research Paper.', 'questionId': '25765', 'answerId': '12216958'}
{'answer': 'A bad example:', 'questionId': '26305', 'answerId': '26311'}
{'answer': 'I wrote the following code that works fine. But I think it only works with .wav format.', 'questionId': '26305', 'answerId': '26318'}
{'answer': 'The Sound Trail of the Java Tutorial is worth being the starting point.', 'questionId': '26305', 'answerId': '575078'}
{'answer': 'There is an alternative to importing the sound files which works in both applets and applications: convert the audio files into .java files and simply use them in your code. I have developed a tool which makes this process a lot easier.  It simplifies the Java Sound API quite a bit. http://stephengware.com/projects/soundtoclass/', 'questionId': '26305', 'answerId': '2084262'}
{'answer': 'I created a game framework sometime ago to work on Android and Desktop, the desktop part that handle sound maybe can be used as inspiration to what you need. https://github.com/hamilton-lima/jaga/blob/master/jaga%20desktop/src-desktop/com/athanazio/jaga/desktop/sound/Sound.java Here is the code for reference.', 'questionId': '26305', 'answerId': '15694770'}
{'answer': 'For playing sound in java, you can refer to the following code.', 'questionId': '26305', 'answerId': '20514020'}
{'answer': "I didn't want to have so many lines of code just to play a simple damn sound. This can work if you have the JavaFX package (already included in my jdk 8). Notice : You need to initialize JavaFX. A quick way to do that, is to call the constructor of JFXPanel() once in your app :", 'questionId': '26305', 'answerId': '35162134'}
{'answer': 'For whatever reason, the top answer by wchargin was giving me a null pointer error when I was calling this.getClass().getResourceAsStream(). What worked for me was the following: And I would play the sound with: sounds/effects/sheep1.wav was located in the base directory of my project in Eclipse (so not inside the src folder).', 'questionId': '26305', 'answerId': '37693420'}
{'answer': 'This thread is rather old but I have determined an option that could prove useful. Instead of using the Java AudioStream library you could use an external program like Windows Media Player or VLC and run it with a console command through Java. This will also create a separate process that can be controlled it the program.  Of course this will take longer to execute than using an internal library but there may be programs that can start up faster and possibly without a GUI given certain console commands.  If time is not of the essence then this is useful.', 'questionId': '26305', 'answerId': '39965540'}
{'answer': "Netbeans has some GUI-building support, and it's one of the most popular Java IDEs on the market. Give it a look.", 'questionId': '26458', 'answerId': '26469'}
{'answer': 'I like the Swing GUI Builder from the NetBeans IDE.', 'questionId': '26458', 'answerId': '26470'}
{'answer': 'I used to use MyEclipse quite a bit.  It had a decent IDE for making Swing forms and such.  I assume it has improved in the past year - they seem to add features in gobs and heaps, quite often. http://www.myeclipseide.com/', 'questionId': '26458', 'answerId': '26474'}
{'answer': 'The latest version of NetBeans include a very nice and simple visual editor for Swing called Matisse Matisse', 'questionId': '26458', 'answerId': '26481'}
{'answer': "I'm a big fan of JetBrains, and when it comes to Java, IntelliJ is the best IDE I have used. For Swing, they have a fully interactive UI builder. And, for actual coding, their intellisense can't be beat.", 'questionId': '26458', 'answerId': '26517'}
{'answer': "Like others have mentioned, Netbeans' visual editor is pretty good, but its based pretty heavily on the Swing Application Framework so you'd need to get an understanding of how it works to properly use it (although you don't need to dig in to just test things). Other than that there's also: the IntelliJ IDEA visual editor (flash demo of the features) and Eclipse's Visual Editor Personally I've used Netbeans' and IDEA's visual editors. Both are nice but I thought Netbeans had a leg up because it doesn't use any proprietary way of saving the GUI structure and instead does something similar to what Visual Studio does - auto-generating the code that you can then add to. IDEA stores the information in a separate file which means you have to use IDEA to edit the layout visually later. I have not used Eclipse's Visual Editor. My vote is for Netbeans' visual editor. I think it satisfies what most people are looking for in a visual editor and leaves it flexible enough to plug the holes manually through code without affecting the visual editor (so you can switch back and forth between code and design views without breaking either).", 'questionId': '26458', 'answerId': '26545'}
{'answer': "Try Instantiations' Windows Builder Pro. It includes Swing Designer, which is a Swing UI builder. It is based on Eclipse.", 'questionId': '26458', 'answerId': '27523'}
{'answer': "For me, the best visual swing editor is JFormDesigner, which you can run standalone or as a plugin for Intellij and Eclipse.  It generates proper (actually readable) source code, it's very ergonomic and intuitive and, above all, very extensible. That last point is really important, because if you want to build a decent swing application, you'll have to extend the base components or use some third-party libraries and it must be easy to integrate those in the visual editor. It's not free but it's a bargain for the power you get (129 EUR / 159 USD). I've been using it for a few years and love it.", 'questionId': '26458', 'answerId': '27586'}
{'answer': "As I'm using eclipse, I use the Visual Editor plugin. It generates clean source code, with good patterns and easy to patch/modify/extend. Unfortunately, it is not very stable. But it's worth trying.", 'questionId': '26458', 'answerId': '27615'}
{'answer': 'I have switched between several IDEs and the one that I believe has the best GUI builder in terms of use and performance would have to be Netbeans.', 'questionId': '26458', 'answerId': '29033'}
{'answer': "I like Eclipse's VisualEditor, sometime ago I've tried to switch to another editor, but found it impossible. Visual editor has this feature that it generates manageable, readable, editable, and easy to understand code. Unlike both mentioned earlier NetBeans editor and WidnowBuilder it uses lazy initialization pattern to separate initialization of components. Also it does not need to lock down parts of code that you cant edit, you may edit code by hand, and VE is still able to work with your changes. Only disadvantage of VE is that it uses eclipse callisto (there is no official build for ganymede, or europa), so effectively you have to use two eclipses one for VE and one for rest of developement.  I took it from recent discussion on comp.lang.java.gui (I was the autor of this post so I could do it rightfully), here is the link to whole discussion.", 'questionId': '26458', 'answerId': '86373'}
{'answer': 'Abeille is very good and is based on the JGoodies FormLayout. Unlike almost every other Java GUI builder, Abeille does not generate code by default. In the project I used it on, it was wonderful to avoid reading or scrolling through the layout code (because that code no longer existed). Most of our hand-written code concerned itself with connecting events to actions, simply asking the layout for the relevant controls. It\'s a crime that code generation is the default way to layout code in Java because better ways of doing GUIs have been around for decades. I have used Matisse, the NetBeans GUI code generator. While Matisse (now known as "Swing GUI Builder") makes it pleasant to layout components, it is similar to all other code generation tools because when you use Matisse you must live in constant fear that someone else edited the "you cannot edit this in NetBeans" GUI sections outside of NetBeans. As soon as you touch the layout builder again it could destroy their work and then you have a broken GUI. There might be some simple task like re-ordering a variable initialization and its use or re-naming a variable (this was especially a problem when using Matisse\'s database feature). You know how to do this by editing the un-editable source code but may waste time trying to figure out how to do the same thing in the GUI builder. Like most code generation tools, it might get you started, but eventually you will have to maintain the generated code yourself.', 'questionId': '26458', 'answerId': '279385'}
{'answer': "Frankly, I've never seen an editor which comes even close to what I can do manually in a text editor. All the visual editors are nice if you only have very simple needs like putting a few buttons in a window. When things become more complex, visual editors quickly loose their competitive edge. I usually use a bunch of high-level classes built from more basic widgets and wire my UI from that. This also allows me to easily test my UI with automated JUnit tests (because I can control what the source looks like). Lastly, changes to the UI won't generate unnecessary noise in the version control system.", 'questionId': '26458', 'answerId': '281446'}
{'answer': 'I have tried a few and the closest I have found that comes close to Visual Studio is Netbeans.  V6.5 is excellent and realy improved over v5.', 'questionId': '26458', 'answerId': '504353'}
{'answer': 'We are doing Swing development since nearly 10 years. There are some nice GUI builders available (e.g. JFormDesigner), but all restrict us too much in different kinds. For example, we have a lot of components without public no-arg constructor (e.g. a JTable subclass which requires the model in the constructor) or we have component factories. Desktop applications usually have to be obfuscated. Obfuscation very easily breaks user interfaces created with a GUI designer or requires much work to avoid obfuscating such classes. Another often happening case is that, for example, a panel should only contain some components depending on some condition. Simply hiding them would make the GUI look bad; they rather should not be added instead. I never found a GUI editor which provides this flexibility and even if there would be one, it would be so hard to use, that I definitely would be faster with good old Java code.', 'questionId': '26458', 'answerId': '1723283'}
{'answer': "I think the best editor that can exist is Visual editor for eclipse. The only drawback is the fact that we can't re-edit the visual part when we modified the source code. I hope one day we will have a tool that rivals Visual Studio on this aspect.", 'questionId': '26458', 'answerId': '1980815'}
{'answer': 'WindowBuilder Pro for Eclipse Free! Works with existing code and doesn\'t lock you in (as opposed to Netbeans) Works with MiGLayout It does have some conventions that your view classes have to follow though Installing in Eclipse (Juno): Goto - Menu > Help > Install New Software... Select - Work With: Juno - http://download.eclipse.org/releases/juno The WindowBuilder items are under "General Purpose Tools" (or use the filter) Older versions and zips are available at http://www.eclipse.org/windowbuilder/download.php.', 'questionId': '26458', 'answerId': '5175073'}
{'answer': 'I not used anything other than NetBeans for Swing, but have been extremely happy with it. I used for 18 months on a $25M app and to develop an prototype application to replace a winforms app. Up and until Microsoft came out with WPF, in my opinion, there was not a better tool kit for traditional desktop apps. (I always found winforms too limiting).', 'questionId': '26458', 'answerId': '5600179'}
{'answer': 'Of course you should use Netbeans for building Java Swing GUI. The drag and drop features and auto-code generation are quite mature.  For Eclipse, I am not sure. But because IBM has its own SWT package for GUI, I am not sure whether it support Swing.', 'questionId': '26458', 'answerId': '9124933'}
{'answer': 'Netbeans is the simplest to use (http://netbeans.org/). However, it does not allow you to edit (fine tune) the generated code. JDeveloper (http://www.oracle.com/technetwork/developer-tools/jdev/overview/index.html) is another solution, and does allow you to edit the code... but I feel netbeans more intuitive.', 'questionId': '26458', 'answerId': '10248992'}
{'answer': "Eclipse Visual Editor is pretty dull in my experience. I had more luck with JBuilder, which is also based on Eclipse, simply adding a few plugins to it as many other commercial products do. It is still not able to parse any Swing code (I doubt any Swing WISIWYG editor does), but if you start with it, it gives you relatively seamless experience. You need to pay for it though. At the end of the day, I have worked with different similar UI tools, Flash Builder, Delphi etc., but unless you do some relatively trivial UI design, not including much business logic and communication with other layers, you'll have to accept that what you are capable of creating in code once you learn to do it properly is much more powerful than what any editor is capable of providing you with.", 'questionId': '26458', 'answerId': '10254476'}
{'answer': "I recommend WindowBuilder plugin for Eclipse IDE 3.7.2 Indigo / 24 February 2012.  Here's for the step-by-step installation:  Create Java GUI as Easy as Visual Basic", 'questionId': '26458', 'answerId': '10274630'}
{'answer': "There are 2 that you can use (I've used them both, and they are both very powerful, and easy to use): Netbeans which has a built in Gui Builder. or you can use: Eclipse with the Windowbuilder plugin (it can be downloaded here and here) Personally, I prefer eclipse with Windowbuilder, but that's just me. You can use either one. Here is a picture of the Windowbuilder plugin: And here is a picture netbeans' built in Gui Builder:", 'questionId': '26458', 'answerId': '10275130'}
{'answer': 'Use NetBeans, I have also successfully developed one application using NetBeans.  It is realy awesome, it helps you while writing the code. Since Swing generates some code on its own so it is really helpful to use Netbeans. Go through it and you can always ask question and problems. It will be good if you go for latest version release.', 'questionId': '26458', 'answerId': '10275157'}
{'answer': 'JFormDesigner. I used NetBeans extensively in the past for GUI design, but I am now using IntelliJ with the JFormDesigner plugin. I have tried several other solutions, and this is the one I am sticking with. JFormDesigner also works with JBuilder and Eclipse, so you are not locking your projects to one particular IDE.', 'questionId': '26458', 'answerId': '10288168'}
{'answer': "I have very good experience with Netbeans. It's so easy if you know every minor parts of this applications. The most complicated part is using, for example, the layouts (If you can not handle complicated parts), but everything is almost plug & play.  And in addition, you can put JFrame into other frames without creating another frame class for this. I think that will be good.", 'questionId': '26458', 'answerId': '10298568'}
{'answer': 'I personally will suggest Netbeans Swing Builder, yet if you want total control and to gain depth understanding of the Swing framework, I have noticed doing it free hand is the ultimate choice.', 'questionId': '26458', 'answerId': '10305800'}
{'answer': 'window builder pro is good option and it is free also.', 'questionId': '26458', 'answerId': '10314688'}
{'answer': 'I have always coded my UIs by hand. The frustration of dealing with screen builders and filling out all those property sheets is too much for me. After a couple of screens and a little research I am just as productive.', 'questionId': '26458', 'answerId': '10314850'}
{'answer': 'As others have mentioned, my best experience with Java SWING applications is with NetBeans. NetBeans has a WYSIWYG editor, and the code is automatically generated for you, which is then protected, however you can add custom code to add listeners and other events that the end user may be interested in using, such as buttons, text forms and areas, and other nice GUI tools.', 'questionId': '26458', 'answerId': '10317964'}
{'answer': 'When I use swing, I usually use the NetBeans. If you prefer the Eclipse IDE, there are the Visual Editor plugin.', 'questionId': '26458', 'answerId': '10321573'}
{'answer': "I will prefer the NETBEANS  . it have following feature  Professional Swing GUI Building Design Swing GUIs by dragging and positioning GUI components from a palette onto a canvas. The GUI builder automatically takes care of the correct spacing and alignment. Click into JLabels, JButtons, ButtonGroups, JTrees, JTextFields, ComboBoxes and edit their properties directly in place. You can use the GUI builder to prototype GUIs right in front of customers. Intuitive and Customizable You can choose whether the GUI code should be generated with fully qualified or simple class names. The helpbar displays context-sensitive hints about what can be done with the selected component and suggests shortcuts that can speed up your work in the future. The NetBeans IDE also comes with built-in support for GUI localization and accessibility. Standard and Custom GUI Components The extensible Component Palette comes with pre-installed Swing and AWT components and includes a visual menu designer. Use the Component Inspector to view a component's tree and properties. Beans Binding technology (JSR 295) Support Take advantage of Beans Binding technology and the Java Persistence API to create Swing applications more easily. Using the Bind dialog box, you can quickly generate bindings for JavaBeans components. Visual Debugger Debug a Swing GUI application without looking into the source code and control the execution flow in terms of high-level structures. Choose Take GUI Snapshot to make a screenshot of the application GUI that serves as a basis of the Visual Debugger functionality.", 'questionId': '26458', 'answerId': '10328205'}
{'answer': "Some blogs provide a Generator meta tag - e.g. Wordpress - you could find out if there's any exceptions to this. You'll have to be careful how you detect it though, Google surprised me with this line: Single quotes are blasphemy.", 'questionId': '26547', 'answerId': '26579'}
{'answer': 'Many (most?) blogs will have a meta tag for "generator" which will list the blog engine. For example a blogger blog will contain the following meta tag:   My Subtext blog shows the following generator meta tag:   This meta tag would be the first place to look. For blogs that don\'t set this meta tag in the source, you\'d have to resort to looking for patterns to determine the blog type.', 'questionId': '26547', 'answerId': '26589'}
{'answer': 'To determine other patterns to look for in determining the blogging engine (for those that don\'t have a generator meta tag), you\'d basically just look through the source to determine something specific to that blog type. You\'d also need to compare this across multiple blogs of that type as you want to make sure that it\'s not something specific to the skin or theme in use on the blog only.   Another thought would be to read the docs of the various common blogging engine to know how to discover the location of it\'s paths to things like MetaWebLog API, etc. IIRC, Live Writer has built-in support for the most common types, the rest are categorized "MetaWebLog API Blog" or something.', 'questionId': '26547', 'answerId': '26634'}
{'answer': "I haven't tried this in a while, but a quick google search shows some possibilities: Java Sketchbook: The HTML Renderer Shootout, Part 1 Cobra: Java HTML Renderer & Parser Are you trying to do this in an applet, or an application?  If it's an application (or signed applet) you could potentially instantiate IE or Firefox within your application.  Webrenderer acts as a Swing wrapper for this.", 'questionId': '26594', 'answerId': '26612'}
{'answer': "Swing has a built-in compontent called BasicHTML. I've never used it, but I think it should be sufficient for the basic stuff.", 'questionId': '26594', 'answerId': '26672'}
{'answer': 'Many of the Swing controls (like JLabel) can render basic HTML content. JEditorPane can be used to display HTML pages. However, these controls are limited to HTML 3.2 support. For a richer experience, I would use the JDesktop Integration Components. JDIC provides Java applications with   access to functionalities and   facilities provided by the native   desktop. It consists of a collection   of Java packages and tools. JDIC   supports a variety of features such as   embedding the native browser,   launching the desktop applications,   creating tray icons on the desktop,   registering file type associations,   creating JNLP installer packages, etc.', 'questionId': '26594', 'answerId': '26710'}
{'answer': 'This has historically been a major weak point for Java, IMO.  There are numerous ways to display limited markup, but very few that offer full featured HTML capabilities.  The previously mentioned JDIC component is one option, however it is considered a "heavyweight" component and therefore does not always integrate well with Swing applications. I am hopeful, however, that the new Webkit based JWebPane project will provide more advanced capabilities without all of the issues that we\'ve had to deal with in the past.  And, of course, there are several commercial options as well (IceBrowser is pretty good as an example).', 'questionId': '26594', 'answerId': '27229'}
{'answer': 'Came across Lobo java web browser the other day. Lobo is being actively developed with the aim to fully support HTML 4, Javascript and CSS2. No experience with it though, but thought it may fit the bill for you.', 'questionId': '26594', 'answerId': '1005469'}
{'answer': 'A good pure Java solution is JWebEngine. It render HTML 4 very good.', 'questionId': '26594', 'answerId': '2245725'}
{'answer': "I've just used SwingBox to display a quite simple HTML page, with good results. The project includes a simple demo application which compares its BrowserPane component to JEditorPane, showing a far better result on complex pages (but still not comparable with a modern web browser). The only issue I had is about unwanted scrollbars from the wrapping JScrollPane. The demo application seems to have the same problem. I can't tell where the issue originates. I'm using version 1.0. Here a code fragment to show how simple is to use the component:", 'questionId': '26594', 'answerId': '24264560'}
{'answer': 'I have tried HTML Parser which is dead simple.', 'questionId': '26638', 'answerId': '26642'}
{'answer': "Do you need to do a full parse of the HTML?  If you're just looking for specific values within the contents (a specific tag/param), then a simple regular expression might be enough, and could very well be faster.", 'questionId': '26638', 'answerId': '26645'}
{'answer': 'NekoHTML, TagSoup, and JTidy will allow you to parse HTML and then process with XML tools, like XPath.', 'questionId': '26638', 'answerId': '26680'}
{'answer': "Basically, each job deserves an own exception. When you catch exceptions, you don't distinguish different instances, like you would normally do with objects, therefore you need different subtypes. Using too many custom exceptions is a case which I see hardly occurring. One advice would be to create exceptions as needed, and if it becomes apparent that one exception type is a duplicate of another, refactor the code by merging the two. Of course it helps if some thought goes into structuring exceptions from the beginning. But generally, use custom exceptions for all cases that have no 1:1 correspondence to existing, situation-specific exceptions. On the other hand, NullPointerExceptions and IndexOutofBoundsExceptions might actually often be appropriate. Don't catch these, though (except for logging) as they're a programming error which means that after throwing them, the program is in an undefined state.", 'questionId': '26984', 'answerId': '27000'}
{'answer': 'My rule of thumb is when the client (the caller) might reasonably want to do something different, depending on the type of exception thrown, the additional exception types are warranted. More often than not, however, the extra exception types are not needed. For instance, if the caller is writing code like then clearly the additional exception types are not needed. All too often I see (or am forced to write) code like this because the code being called was overzealous in its creation of new exception types.', 'questionId': '26984', 'answerId': '27041'}
{'answer': 'The Java Specialists wrote a post about Exceptions in Java, and in it they list a few "best practices" for creating Exceptions, summarized below: Don\'t Write Own Exceptions (there are lots of useful Exceptions that are already part of the Java API) Write Useful Exceptions (if you have to write your own Exceptions, make sure they provide useful information about the problem that occurred)', 'questionId': '26984', 'answerId': '27064'}
{'answer': "If I can't find an exception that has a name describing what type of error was caused then I make my own. That's my rule-o-thumb.", 'questionId': '26984', 'answerId': '27422'}
{'answer': 'My own rule of thumb: I never throw Exception, except in unit tests when what you throw is irrelevant and theres no reason to spend any extra time on it. I create my own custom exception type for errors occuring in my custom business logic.  This exception type is used as much as possible for recasting other exceptions, except in cases where it makes sense for the client to have visibility into what actually occurred.', 'questionId': '26984', 'answerId': '28748'}
{'answer': "Don't do what the developers at my company did. Somebody created an [sic] InvalidArguementException that parallels java.lang.IllegalArgumentException, and we now use it in (literally) hundreds of classes. Both indicate that a method has been passed an illegal or inappropriate argument. Talk about a waste... Joshua Bloch covers this in Effective Java Programming Language Guide [my bible of first resort on Best Practices] Chapter 8. Exceptions Item 42: Favor the use of standard exceptions. Here's a bit of what he says, Reusing preexisting exceptions has several benefits. Chief among these, it makes your API easier to learn and use because it matches established conventions with which programmers are already familiar [my emphasis, not Bloch's]. A close second is that programs using your API are easier to read because they aren't cluttered with unfamiliar exceptions. Finally, fewer exception classes mean a smaller memory footprint and less time spent loading classes. The most commonly reused exception is IllegalArgumentException. This is generally the exception to throw when the caller passes in an argument whose value is inappropriate. For example, this would be the exception to throw if the caller passed a negative number in a parameter representing the number of times some action were to be repeated. That said, you should never throw Exception itself. Java has a well-chosen, diverse and well-targeted bunch of built-in exceptions that cover most situations AND describe the exception that occurred well enough so that you can remedy the cause. Be friendly to the programmers who have to maintain your code in the future.", 'questionId': '26984', 'answerId': '216589'}
{'answer': 'While creating your own exception: All exceptions must be a child of the Throwable Class If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception Class If you want to write a runtime execption, you need to extend the Runtime Exception Class.', 'questionId': '26984', 'answerId': '21803904'}
{'answer': 'Have you looking into using JFreeChart. I have used it on a few Java projects and its very configurable. Its free but I think you can purchase the developers guide for $50. Its good for quick simple charts too. However performance for real-time data is not quite up to par (Check out the FAQ). They also have a port to .NET however I have never used it. Hope that helps.', 'questionId': '27129', 'answerId': '27150'}
{'answer': 'ChartDirector is fantastic and supports more than just Java and .NET.', 'questionId': '27129', 'answerId': '27168'}
{'answer': 'Flash Charts. http://www.fusioncharts.com/free/Gallery.asp', 'questionId': '27129', 'answerId': '27192'}
{'answer': 'Dundas Charts was about the easiest thing ever to get up and producing amazing looking charts.', 'questionId': '27129', 'answerId': '27245'}
{'answer': 'You could also try Open Flash Charts', 'questionId': '27129', 'answerId': '27268'}
{'answer': 'ChartFX (http://www.softwarefx.com) has been a leader in charting for years.  I personally have used several different versions for over 8 years and it is rock solid. I have re-evaluated charting options periodically, and ChartFX has won in my environment based almost purely on feature set.  It is not free or cheap, but it is well worth the price they charge. -Geoffrey', 'questionId': '27129', 'answerId': '44029'}
{'answer': 'Here is a belated answer: Use the Google Chart API. It will allow you to create charts in a programming language and platform agnostic way -- assuming your app will have an Internet connection at all times. Use it in  combination with .Net and Java wrapper APIs that you can find here. I wrote one: charts4j.', 'questionId': '27129', 'answerId': '338771'}
{'answer': "Enumeration hasn't been modified to support Iterable because it's an interface not a concrete class (like Vector, which was modifed to support the Collections interface). If Enumeration was changed to support Iterable it would break a bunch of people's code.", 'questionId': '27240', 'answerId': '27389'}
{'answer': 'AFAIK Enumeration is kinda "deprecated": Iterator takes the place of   Enumeration in the Java collections   framework I hope they\'ll change the Servlet API with JSR 315 to use Iterator instead of Enumeration.', 'questionId': '27240', 'answerId': '27441'}
{'answer': 'It doesn\'t make sense for Enumeration to implement Iterable. Iterable is a factory method for Iterator. Enumeration is analogous to Iterator, and only maintains state for a single enumeration. So, be careful trying to wrap an Enumeration as an Iterable. If someone passes me an Iterable, I will assume that I can call iterator() on it repeatedly, creating as many Iterator instances as I want, and iterating independently on each. A wrapped Enumeration will not fulfill this contract; don\'t let your wrapped Enumeration escape from your own code. (As an aside, I noticed that Java 7\'s DirectoryStream violates expectations in just this way, and shouldn\'t be allowed to "escape" either.) Enumeration is like an Iterator, not an Iterable. A Collection is Iterable. An Iterator is not. You can\'t do this: So it wouldn\'t make sense to do this: There is no Enumerable equivalent to Iterable. It could be added without breaking anything to work in for loops, but what would be the point? If you are able to implement this new Enumerable interface, why not just implement Iterable instead?', 'questionId': '27240', 'answerId': '38518'}
{'answer': 'As an easy and clean way of using an Enumeration with the enhanced for loop, convert to an ArrayList with java.util.Collections.list. (javax.swing.table.TableColumnModel.getColumns returns Enumeration.) Note, this may be very slightly less efficient.', 'questionId': '27240', 'answerId': '46674'}
{'answer': 'If you would just like it to be syntactically a little cleaner, you can use:', 'questionId': '27240', 'answerId': '31172283'}
{'answer': "you want an interpolation between the first and the second colour. Interpolating colours is easy by calculating the same interpolation for each of its components (R, G, B). There are many ways to interpolate. The easiest is to use linear interpolation: just take percentage p of the first colour and percentage 1 - p of the second: There's another question related to this. There are other methods of interpolation that sometimes work better. For example, using a bell-shaped (sigmoidal) interpolation function makes the transition smoother. /EDIT: Oops, you mean using a predefined function. OK, even easier. The blog post you linked now has an example code in Python. In Java, you could use the GradientPaint.", 'questionId': '27532', 'answerId': '27536'}
{'answer': 'Using the basic AWT classes, you could do something like this:', 'questionId': '27532', 'answerId': '27553'}
{'answer': 'You can use the built in GradientPaint class.', 'questionId': '27532', 'answerId': '27561'}
{'answer': "I've been using RMagick for that. If you need to go further the simple gradient, ImageMagick and one of its wrappers (like RMagick or JMagick for Java) could be useful.", 'questionId': '27532', 'answerId': '221413'}
{'answer': 'From http://wrapper.tanukisoftware.org/doc/english/introduction.html : Binary distributions are provided for   the following list of platforms and   are available on the download page.   Only OS versions which are known to   work have been listed.  (snip...) linux - Linux kernels; 2.2.x 2.4.x, 2.6.x. Known to work with Debian and Red Hat, but should work with any   distribution. Currently supported on   both 32 and 64-bit x86, and 64-bit ppc   systems.', 'questionId': '27572', 'answerId': '27587'}
{'answer': "I've had it running in production on 64-bit red hat without any trouble for the last year or so.", 'questionId': '27572', 'answerId': '764188'}
{'answer': "Take a look at http://yajsw.sourceforge.net/.  It's free and rather compatible reimplementation of TanukiSoftware Java Service Wrapper featuring free 64-bit support.", 'questionId': '27572', 'answerId': '8523239'}
{'answer': "From A Java Learner: When an exception occurs, you have to   either catch and handle the exception,   or tell compiler that you can't handle   it by declaring that your method   throws that exception, then the code   that uses your method will have to   handle that exception (even it also   may choose to declare that it throws   the exception if it can't handle it).  Compiler will check that we have done   one of the two things (catch, or   declare).  So these are called Checked   exceptions.   But Errors, and Runtime   Exceptions are not checked for by   compiler (even though you can choose   to catch, or declare, it is not   required).  So, these two are called   Unchecked exceptions. Errors are used to represent those   conditions which occur outside the   application, such as crash of the   system.  Runtime exceptions are   usually occur by fault in the   application logic.  You can't do   anything in these situations.  When   runtime exception occur, you have to   re-write your program code.  So, these   are not  checked by compiler.  These   runtime exceptions will uncover in   development, and testing period.  Then   we have to refactor our code to remove   these errors.", 'questionId': '27578', 'answerId': '27582'}
{'answer': "The rule I use is: never use unchecked exceptions! (or when you don't see any way around it) From the point of view of the developer using your library or the end-user using your library/application it really sucks to be confronted with an application that crashes due to an uncought exception. And counting on a catch-all is no good either. This way the end user can still be presented with an error message, instead of the application completely disappearing.", 'questionId': '27578', 'answerId': '27591'}
{'answer': "Checked exceptions are useful for recoverable cases where you want to provide information to the caller (i.e. insufficient permissions, file not found, etc). Unchecked exceptions are used rarely, if at all, for informing the user or programmer of serious errors or unexpected conditions during run-time. Don't throw them if you're writing code or libraries that will be used by others, as they may not be expecting your software to throw unchecked exceptions since the compiler doesn't force them to be caught or declared.", 'questionId': '27578', 'answerId': '27611'}
{'answer': " The rule I use is: never use unchecked exceptions! (or when you don't see any way around it) There's a very strong case for the opposite: Never use checked exceptions. I'm reluctant to take sides in the debate but there seems to be a broad consensus that introducing checked exceptions was a wrong decision in hindsight. Please don't shoot the messenger and refer to those arguments.", 'questionId': '27578', 'answerId': '27629'}
{'answer': "Here is my 'final rule of thumb'. I use: unchecked exception within the code of my method for a failure due to the caller (that involves an explicit and complete documentation) checked exception for a failure due to the callee that I need to make explicit to anyone wanting to use my code Compare to the previous answer, this is a clear rationale (upon which one can agree or disagree) for the use of one or the other (or both) kind of exceptions. For both of those exceptions, I will create my own unchecked and checked Exception for my application (a good practice, as mentionned here), except for very common unchecked exception (like NullPointerException) So for instance, the goal of this particular function below is to make (or get if already exist) an object, meaning: the container of the object to make/get MUST exist (responsibility of the CALLER => unchecked exception, AND clear javadoc comment for this called function) the other parameters can not be null (choice of the coder to put that on the CALLER: the coder will not check for null parameter but the coder DOES DOCUMENT IT) the result CAN NOT BE NULL (responsibility and choice of the code of the callee, choice which will be of great interest for the caller => checked exception because every callers MUST take a decision if the object can not be created/found, and that decision must be enforced at the compilation time: they can not use this function without having to deal with this possibility, meaning with this checked exception).   Example:", 'questionId': '27578', 'answerId': '73355'}
{'answer': 'On any large enough system, with many layers, checked exception are useless as, anyway, you need an architectural level strategy to handle how the exception will be handled (use a fault barrier) With checked exceptions your error handling stategy is micro-managed and its unbearable on any large system. Most of the time you don\'t know if an error is "recoverable" because you don\'t know in what layer the caller of your API is located. Let\'s say that I create a StringToInt API that converts the string representation of an integer to an Int. Must I throw a checked exception if the API is called with the "foo" string ? Is it recoverable ? I don\'t know because in his layer the caller of my StringToInt API may already have validated the input, and if this exception is thrown it\'s either a bug or a data corruption and it isn\'t recoverable for this layer. In this case the caller of the API does not want to catch the exception. He only wants to let the exception "bubble up". If I chose a checked exception, this caller will have plenty of useless catch block only to artificially rethrow the exception. What is recoverable depends most of the time on the caller of the API, not on the writter of the API. An API should not use checked exceptions as only unchecked exceptions allows to choose to either catch or ignore an exception.', 'questionId': '27578', 'answerId': '87779'}
{'answer': "It's not just a matter of the ability to recover from the exception. What matter most, in my opinion, is whether the caller is interested in catching the exception or not. If you write a library to be used elsewhere, or a lower-level layer in your application, ask yourself if the caller is interested in catching (knowing about) your exception. If he is not, then use an unchecked exception, so you don't burden him unnecessarily. This is the philosophy used by many frameworks. Spring and hibernate, in particularly, come to mind - they convert known checked exception to unchecked exception precisely because checked exceptions are overused in Java. One example that I can think of is the JSONException from json.org, which is a checked exception and is mostly annoying - it should be unchecked, but the developer simply haven't thought it through. By the way, most of the time the caller's interest in the exception is directly correlated to the ability to recover from the exception, but that is not always the case.", 'questionId': '27578', 'answerId': '322801'}
{'answer': 'You\'re correct.  Unchecked exceptions are used to let the system fail fast which is a good thing. You should clearly state what is your method expecting in order to work properly.  This way you can validate the input only once. For instance: Just to put an example. The point is, if the system fails fast, then you\'ll know where and why it did fail.  You\'ll get an stacktrace like: And you\'ll know what happened. The OtherClass in the "delegateTheWork" method ( at line 4569 ) called your class with the "exit" value, even when it shouldn\'t  etc. Otherwise you would have to sprinkle validations all over your code and that\'s error prone. Plus, sometimes it is hard to track what went wrong and you may expect hours of frustrating  debugging  Same thing happens with NullPointerExceptions. If you have a 700 lines class with some 15 methods, that uses 30 attributes and none of them can be null, instead of validating in each of those methods for nullability you could make all those attributes read-only and validate them in the constructor or factory method. Checked exceptions Are useful when the programmer ( you or your co-workers ) did everything right, validated the input, ran tests, and all the code is perfect, but the code connects to a third party webservice that may be down ( or a file you were using  was deleted by another external process etc ) . The webservice may even be validate before the connection is attempted, but during the data transfer something went wrong. In that scenario there is nothing that you or your co-workers can do to help it. But still you have to do something and not let the application just die and disappear in the eyes of the user.  You use a checked exception for that and handle the exception, what can you do when that happens?, most of the time , just to attempt to log the error, probably save your work ( the app work ) and present a message to the user. ( The site blabla is down, please retry later etc. )  If the checked exception are overused ( by  adding the "throw Exception" in the all the methods signatures ) , then your code will become very fragile, because everyone will ignore that exception ( because is too general ) and the quality of code will be seriously compromised. If you overuse unchecked exception something similar will happen. The users of that code don\'t know if something may go wrong an a lot of try{...}catch( Throwable t ) will appear.', 'questionId': '27578', 'answerId': '322889'}
{'answer': "You can call it a checked or unchecked exception; however, both types of exception can be caught by the programmer, so the best answer is: write all of your exceptions as unchecked and document them. That way the developer who uses your API can choose whether he or she wants to catch that exception and do something. Checked exceptions are a complete waste of everyone's time and it makes your code a shocking nightmare to look at. Proper unit testing will then bring up any exceptions that you may have to catch and do something with.", 'questionId': '27578', 'answerId': '6662165'}
{'answer': "Checked Exception:    If client can recover from an exception and would like to continue, use checked exception. Unchecked Exception:    If a client can't do any thing after the exception, then raise unchecked exception. Example: If you are expected to do arithmetic operation in a method A() and based on the output from A(), you have to another operation. If the output is null from method A() which you are not expecting during the run time, then you are expected to throw Null pointer Exception which is Run time exception.  Refer here", 'questionId': '27578', 'answerId': '13944065'}
{'answer': 'I agree with the preference for unchecked exceptions as a rule, especially when designing an API.   The caller can always choose to catch a documented, unchecked exception.  You\'re just not needlessly forcing the caller to. I find checked exceptions useful at the lower-level, as implementation detail.   It often seems like a better flow of control mechanism than having to manage a specified error "return code".  It can sometimes help see the impact of an idea for a low level code change too... declare a checked exception downstream and see who would need to adjust.   This last point doesn\'t apply if there are a lot of generic:   catch(Exception e)  or throws Exception  which is usually not too well-thought out anyway.', 'questionId': '27578', 'answerId': '15602506'}
{'answer': "Checked Exceptions are great, so long as you understand when they should be used. The Java core API fails to follow these rules for SQLException (and sometimes for IOException) which is why they are so terrible. Checked Exceptions should be used for expected, but unpreventable errors that are reasonable to recover from. Unchecked Exceptions should be used for everything else. I'll break this down for you, because most people misunderstand what this means. Expected but unpreventable: The caller did everything within their power to validate the input parameters, but some condition outside their control has caused the operation to fail. For example, you try reading a file but someone deletes it between the time you check if it exists and the time the read operation begins. By declaring a checked exception, you are telling the caller to anticipate this failure. Reasonable to recover from: There is no point telling callers to anticipate exceptions that they cannot recover from. If a user attempts to read from an non-existing file, the caller can prompt them for a new filename. On the other hand, if the method fails due to a programming bug (invalid method arguments or buggy method implementation) there is nothing the application can do to fix the problem in mid-execution. The best it can do is log the problem and wait for the developer to fix it at a later time. Unless the exception you are throwing meets all of the above conditions it should use an Unchecked Exception. Reevaluate at every level: Sometimes the method catching the checked exception isn't the right place to handle the error. In that case, consider what is reasonable for your own callers. If the exception is expected, unpreventable and reasonable for them to recover from then you should throw a checked exception yourself. If not, you should wrap the exception in an unchecked exception. If you follow this rule you will find yourself converting checked exceptions to unchecked exceptions and vice versa depending on what layer you are in. For both checked and unchecked exceptions, use the right abstraction level. For example, a code repository with two different implementations (database and filesystem) should avoid exposing implementation-specific details by throwing SQLException or IOException. Instead, it should wrap the exception in an abstraction that spans all implementations (e.g. RepositoryException).", 'questionId': '27578', 'answerId': '19061110'}
{'answer': "Whnever an exception is less likely expected, and we can proceed even after catching that, and we can not do anything to avoid that exception then we can use checked exception. Whenever we want to do something meaningful when a particular exceptions happens and when that exception is expected but not certain, then we can use checked exception. Whenever exception navigating in different layers, we don't need to catch it in every layer, in that case, we can use runtime exception or wrap exception as unchecked exception. Runtime exception is used when exception most likely to be happened, there is no way of going further and nothing can be recoverable. So in this case we can take precautions with respect to that exception. EX: NUllPointerException, ArrayOutofBoundsException. These are more likely to happen. In this scenario, we can take precautions while coding to avoid such exception. Otherwise we will have to write try catch blocks every where. More general exceptions can be made Unchecked, less general are checked.", 'questionId': '27578', 'answerId': '21598741'}
{'answer': 'Here is a very simple solution to your Checked/Unchecked dilemma. Rule 1: Think of a Unchecked Exception as a testable condition before code executes. for example where x is null... the code should possibly have the following Rule 2: Think of a Checked Exception as an un-testable condition that may occur while the code executes. in the example above, the URL (google.com) may be unavailable to due the DNS server being down. Even at the instant the DNS server was working and resolved the google.com name to an IP address, if the connection is made to google.com, at anytime afterword, the network could go down. You simply can not test the network all the time before reading and writing to streams. There are times where the code simply must execute before we can know if there is a problem. By forcing developers to write their code in such a way to force them to handle these situations via Checked Exception, I have to tip my hat to the creator of Java that invented this concept. In general, almost all the APIs in Java follow the 2 rules above. If you try to write to a file, the disk could fill up before completing the write. It is possible that other processes had caused the disk to become full. There is simply no way to test for this situation. For those who interact with hardware where at any time, using the hardware can fail, Checked Exceptions seem to be an elegant solution to this problem. There is a gray area to this. In the event that many tests are needed (a mind blowing if statement with lots of && and ||), the exception thrown will be a CheckedException simply because its too much of a pain to get right  you simply cant say this problem is a programming error. If there are much less than 10 tests (e.g. if (x == null)), then the programmer error should be a UncheckedException. Things get interesting when dealing with language interpreters. According to the rules above, should a Syntax Error be considered a Checked or Unchecked Exception? I would argue that if the syntax of the language can be tested before it gets executed, it should be an UncheckedException. If the language can not be tested  similar to how assembly code runs on a personal computer, then the Syntax Error should be a Checked Exception. The 2 rules above will probably remove 90% of your concern over which to choose from. To summarize the rules, follow this pattern 1) if the code to be execute can be tested before its executed for it to run correctly and if an Exception occurs  a.k.a. a programmer error, the Exception should be an UncheckedException (a subclass of RuntimeException). 2) if the code to be executed can not be tested before its executed for it to run correctly, the Exception should be a Checked Exception (a subclass of Exception).', 'questionId': '27578', 'answerId': '23439719'}
{'answer': 'I think we can think about exeptions from several questions: why does exeption happen? What can we do when it happens  by mistake, a bug. such as a method of null object is called.  This kind of exception should be fixed during test. Otherwise, it breaks the production, and you got a very high bug which needs to be fixed immediately. This kind of exceptions do not need be checked.  by input from external, you cannot control or trust the output of external service. Here, you may need to check whether the name is null if you want to continue when it is null, otherwise, you can let it alone and it will stop here and give the caller the runtime exception.  This kind of exceptions do not need be checked. by runtime exception from external, you cannot control or trust the external service. Here, you may need to catch all exceptions from ExternalService if you want to continue when it happens, otherwise, you can let it alone and it will  stop here and give the caller the runtime exception.  by checked exception from external, you cannot control or trust the external service. Here, you may need to catch all exceptions from ExternalService if you want to continue when it happens, otherwise, you can let it alone and it will  stop here and give the caller the runtime exception.  In this case, do we need to know what kind of exception happened in ExternalService? It depends: if you can handle some kinds of exceptions, you need to catch them and process. For others, bubble them. if you need log or response to user the specific execption, you can catch them. For others, bubble them.', 'questionId': '27578', 'answerId': '33167087'}
{'answer': 'I think when declaring Application Exception it should be Unchecked Exception i.e., subclass of RuntimeException. The reason is it will not clutter application code with try-catch and throws declaration on method. If your application is using Java Api which throws checked exceptions that anyways need to be handle. For other cases, the application can throw unchecked exception. If the application caller still needs to handle unchecked exception, it can be done.', 'questionId': '27578', 'answerId': '43873791'}
{'answer': 'Here is I want to share my opinion I have after many years of development experience: Checked exception. This is a part of business use case or call flow, this is a part of application logic we expect or not expect. For example connection rejected, condition is not satisfied etc. We need to handle it and show corresponding message to user with instructions what happened and what to do next (try again later etc). I usually call it post-processing exception or "user" exception. Unchecked exception. This is a part of programming exception, some mistake in software code programming (bug, defect) and reflects a way how programmers must use API as per documentation. If an external lib/framework doc says it expects to get data in some range and non null, because NPE or IllegalArgumentException will be thrown, programmer should expect it and use API correctly as per documentation. Otherwise the exception will be thrown. I usually call it pre-processing exception or "validation" exception. By target audience. Now let\'s talk about target audience or group of people the exceptions have been designed (as per my opinion): Checked exception. Target audience is users/clients. Unchecked exception. Target audience is developers. By other words unchecked exception are designed for developers only. By application development lifecycle phase. Checked exception is designed to exist during whole production lifecycle as normal and expected mechanism an application handles exceptional cases. Unchecked exception is designed to exist only during application development/testing lifecycle, all of them should be fixed during that time and should not be thrown when an application is running on production already. The reason why frameworks usually use unchecked exceptions (Spring for example) is that framework cannot determine the business logic of your application, this is up to developers to catch then and design own logic.', 'questionId': '27578', 'answerId': '44850154'}
{'answer': 'The theory (for the language lawyers and the mathematically inclined): equals() (javadoc) must define an equivalence relation (it must be reflexive, symmetric, and transitive). In addition, it must be consistent (if the objects are not modified, then it must keep returning the same value). Furthermore, o.equals(null) must always return false. hashCode() (javadoc) must also be consistent (if the object is not modified in terms of equals(), it must keep returning the same value). The relation between the two methods is: Whenever a.equals(b), then a.hashCode() must be same as b.hashCode(). In practice: If you override one, then you should override the other. Use the same set of fields that you use to compute equals() to compute hashCode(). Use the excellent helper classes EqualsBuilder and HashCodeBuilder from the Apache Commons Lang library. An example: Also remember: When using a hash-based Collection or Map such as HashSet, LinkedHashSet, HashMap, Hashtable, or WeakHashMap, make sure that the hashCode() of the key objects that you put into the collection never changes while the object is in the collection. The bulletproof way to ensure this is to make your keys immutable, which has also other benefits.', 'questionId': '27581', 'answerId': '27609'}
{'answer': 'A clarification about the obj.getClass() != getClass(). This statement is the result of equals() being inheritance unfriendly. The JLS (Java language specification) specifies that if A.equals(B) == true then B.equals(A) must also return true. If you omit that statement inheriting classes that override equals() (and change its behavior) will break this specification. Consider the following example of what happens when the statement is omitted: Doing new A(1).equals(new A(1)) Also, new B(1,1).equals(new B(1,1)) result give out true, as it should. This looks all very good, but look what happens if we try to use both classes: Obviously, this is wrong. If you want to ensure the symmetric condition. a=b if b=a and the Liskov substitution principle call super.equals(other) not only in the case of B instance, but check after for A instance: Which will output: Where, if a is not a reference of B, then it might be a be a reference of class A (because you extend it), in this case you call super.equals() too.', 'questionId': '27581', 'answerId': '32223'}
{'answer': "There are a couple of ways to do your check for class equality before checking member equality, and I think both are useful in the right circumstances. Use the instanceof operator. Use this.getClass().equals(that.getClass()). I use #1 in a final equals implementation, or when implementing an interface that prescribes an algorithm for equals (like the java.util collection interfacesthe right way to check with with (obj instanceof Set) or whatever interface you're implementing). It's generally a bad choice when equals can be overridden because that breaks the symmetry property. Option #2 allows the class to be safely extended without overriding equals or breaking symmetry. If your class is also Comparable, the equals and compareTo methods should be consistent too. Here's a template for the equals method in a Comparable class:", 'questionId': '27581', 'answerId': '33010'}
{'answer': "One gotcha I have found is where two objects contain references to each other (one example being a parent/child relationship with a convenience method on the parent to get all children). These sorts of things are fairly common when doing Hibernate mappings for example. If you include both ends of the relationship in your hashCode or equals tests it's possible to get into a recursive loop which ends in a StackOverflowException. The simplest solution is to not include the getChildren collection in the methods.", 'questionId': '27581', 'answerId': '40669'}
{'answer': 'For an inheritance-friendly implementation, check out Tal Cohen\'s solution, How Do I Correctly Implement the equals() Method? Summary: In his book Effective Java Programming Language Guide (Addison-Wesley, 2001), Joshua Bloch claims that "There is simply no way to extend an instantiable class and add an aspect while preserving the equals contract."  Tal disagrees. His solution is to implement equals() by calling another nonsymmetric blindlyEquals() both ways.  blindlyEquals() is overridden by subclasses, equals() is inherited, and never overridden. Example: Note that equals() must work across inheritance hierarchies if the Liskov Substitution Principle is to be satisfied.', 'questionId': '27581', 'answerId': '55736'}
{'answer': 'There are some issues worth noticing if you\'re dealing with classes that are persisted using an Object-Relationship Mapper (ORM) like Hibernate, if you didn\'t think this was unreasonably complicated already! Lazy loaded objects are subclasses If your objects are persisted using an ORM, in many cases you will be dealing with dynamic proxies to avoid loading object too early from the data store. These proxies are implemented as subclasses of your own class. This means thatthis.getClass() == o.getClass() will return false. For example: If you\'re dealing with an ORM, using o instanceof Person is the only thing that will behave correctly. Lazy loaded objects have null-fields ORMs usually use the getters to force loading of lazy loaded objects. This means that person.name will be null if person is lazy loaded, even if person.getName() forces loading and returns "John Doe". In my experience, this crops up more often in hashCode() and equals(). If you\'re dealing with an ORM, make sure to always use getters, and never field references in hashCode() and equals(). Saving an object will change its state Persistent objects often use a id field to hold the key of the object. This field will be automatically updated when an object is first saved. Don\'t use an id field in hashCode(). But you can use it in equals(). A pattern I often use is But: you cannot include getId() in hashCode(). If you do, when an object is persisted, its hashCode changes. If the object is in a HashSet, you\'ll "never" find it again. In my Person example, I probably would use getName() for hashCode and getId() plus getName() (just for paranoia) for equals(). It\'s okay if there are some risk of "collisions" for hashCode(), but never okay for equals(). hashCode() should use the non-changing subset of properties from equals()', 'questionId': '27581', 'answerId': '256447'}
{'answer': 'For equals, look into Secrets of Equals by Angelika Langer. I love it very much. She\'s also a great FAQ about Generics in Java. View her other articles here (scroll down to "Core Java"), where she also goes on with Part-2 and "mixed type comparison". Have fun reading them!', 'questionId': '27581', 'answerId': '596866'}
{'answer': 'Still amazed that none recommended the guava library for this.', 'questionId': '27581', 'answerId': '14827378'}
{'answer': 'Logically we have: a.getClass().equals(b.getClass()) && a.equals(b)  a.hashCode() == b.hashCode() But not vice-versa!', 'questionId': '27581', 'answerId': '15599729'}
{'answer': 'equals() method is used to determine the equality of two objects. as int value of 10 is always equal to 10. But this equals() method is about equality of two objects. When we say object, it will have properties. To decide about equality those properties are considered. It is not necessary that all properties must be taken into account to determine the equality and with respect to the class definition and context it can be decided. Then the equals() method can be overridden. we should always override hashCode() method whenever we override equals() method. If not, what will happen? If we use hashtables in our application, it will not behave as expected. As the hashCode is used in determining the equality of values stored, it will not return the right corresponding value for a key. Default implementation given is hashCode() method in Object class uses the internal address of the object and converts it into integer and returns it. Example Code Output:', 'questionId': '27581', 'answerId': '19563996'}
{'answer': 'There are two methods in super class as java.lang.Object. We need to override them to custom object. Equal objects must produce the same hash code as long as they are equal, however unequal objects need not produce distinct hash codes. If you want get more, please check this link as http://www.javaranch.com/journal/2002/10/equalhash.html This is another example, http://java67.blogspot.com/2013/04/example-of-overriding-equals-hashcode-compareTo-java-method.html Have Fun! @.@', 'questionId': '27581', 'answerId': '20697433'}
{'answer': "I have successfully connected to ActiveMQ and ServiceMix using the JConsole. Does WAS 6.1 use Java Management Extension (JMX) technology? JMX is required for JConsole. If your path is set correctly it should work fine. On windows you go to System Properties -> Advanced Tab -> Environment Variables. Have your JAVA_HOME System variable set to the path of your JDK or JRE and your Path variable with %JAVA_HOME%/bin added somewhere in there. Then all you need to do is go to Start->Run->JConsole. Select the correct Process Name and your done. Where are you having problems at? I hope this helps. Edit: Here is the Java Doc's on JConsole.", 'questionId': '27598', 'answerId': '28958'}
{'answer': 'Hmm... I know that WebSphere is kind of hard to configure. Thats part of the reason we used ServiceMix for our ESB. Maybe its not enabled by default in WebSphere and you would have to turn it on in the config somewhere.', 'questionId': '27598', 'answerId': '30996'}
{'answer': 'WebSphere\'s support for JMX is crap.  Particularly, if you need to connect to any secured JMX beans.  Here\'s an interesting tidbit, their own implementation of jConsole will not connect to their own JVM.  I have had a PMR open with IBM for over a year to fix this issue, and have gotten nothing but the runaround.  They clearly don\'t want to fix this issue. The only way I have been able to invoke remote secured JMX beans hosted on WebSphere has been to implement a client using the "WebSphere application client".  This is basically a stripped down app server used for stuff like this. Open a PMR with IBM.  Perhaps if more people report this issue, they will actually fix it.  Update: You can run your application as a WebSphere Application Client in RAD.  Open the run menu, then choose "Run...".  In the dialog that opens, towards the bottom on the left hand side, you will see "WebSphere v6.1 Application Client".  I\'m not sure how to start and Application Client outside of RAD.', 'questionId': '27598', 'answerId': '170414'}
{'answer': 'Websphere 6.1 does not support the JConsole for some reason even though it fully implements the JMS specs. Seems to be a week area at the moment. Your best bet is to look at the Admin client to implement you own console.', 'questionId': '27598', 'answerId': '221604'}
{'answer': 'IT WORKS ! http://issues.apache.org/jira/browse/GERONIMO-4534;jsessionid=FB20DD5973F01DD2D470FB9A1B45D209?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel -see here how to change config.xml: http://publib.boulder.ibm.com/wasce/V2.1.0/en/working-with-jconsole.html [or your version of geronimo-kernel jar]', 'questionId': '27598', 'answerId': '922409'}
{'answer': 'If you want the WebSphere MBeans this one works for me: The key is to configure the classpath and the security properly. in one line: jconsole -J-Dwas.install.root=C:/was61 -J-Djava.ext.dirs=C:/was61/plugins;C:/was61/plugins/com.ibm.ws.security.crypto_6.1.0;C:/was61/lib;C:/was61/java/jre/lib/ext -J-Dcom.ibm.SSL.ConfigURL="file:../../properties/ssl.client.props" -J-Dcom.ibm.CORBA.ConfigURL="file:../../properties/sas.client.props" service:jmx:iiop://host:port/jndi/JMXConnector where port = bootstrap port ex: (2809) Be careful when setting the sas and the ssl props. Robert', 'questionId': '27598', 'answerId': '5049177'}
{'answer': 'You all seem to be incorrect.  I am running Websphere 6.1.041 , using JDK 1.5 , and I just started up Jconsole and used the "simple connect" tab to connect to localhost with port=0 and without a username and password and it works fine.', 'questionId': '27598', 'answerId': '10906902'}
{'answer': "I used to do exactly the same thing.... then I switched to maven.  Maven relies on a simple xml file to configure your build and a simple repository to manage your build's dependencies (rather than checking these dependencies into your source control system with your code).   One feature I really like is how easy it is to version your jars - easily keeping previous versions available for legacy users of your library.  This also works to your benefit when you want to upgrade a library you use - like junit.  These dependencies are stored as separate files (with their version info) in your maven repository so old versions of your code always have their specific dependencies available.   It's a better Ant.", 'questionId': '28202', 'answerId': '28304'}
{'answer': "An alternative to making a template is to evolve one by gradually generalising your current project's Ant script so that there are fewer changes to make the next time you copy it for use on a new project. There are several things you can do. Use ${ant.project.name} in file names, so you only have to mention your application name in the project element. For example, if you generate myapp.jar: Structure your source directory structure so that you can package your build by copying whole directories, rather than naming individual files. For example, if you are copying JAR files to a web application archive, do something like: Use properties files for machine-specific and project-specific build file properties. Note that Ant properties cannot be changed once set, so you override a value by defining a new value before the default value.", 'questionId': '28202', 'answerId': '28448'}
{'answer': ' I used to do exactly the same thing.... then I switched to maven. Oh, it\'s Maven 2. I was afraid that someone was still seriously using Maven nowadays. Leaving the jokes aside: if you decide to switch to Maven 2, you have to take care while looking for information, because Maven 2 is a complete reimplementation of Maven, with some fundamental design decisions changed. Unfortunately, they didn\'t change the name, which has been a great source of confusion in the past (and still sometimes is, given the "memory" nature of the web). Another thing you can do if you want to stay in the Ant spirit, is to use Ivy to manage your dependencies.', 'questionId': '28202', 'answerId': '28655'}
{'answer': 'If you are working on several projects with similar directory structures and want to stick with Ant instead of going to Maven use the Import task.  It allows you to have the project build files just import the template and define any variables (classpath, dependencies, ...) and have all the real build script off in the imported template.  It even allows overriding of the tasks in the template which allows you to put in project specific pre or post target hooks.', 'questionId': '28202', 'answerId': '51071'}
{'answer': "One thing to look at -- if you're using Eclipse, check out the ant4eclipse tasks. I use a single build script that asks for the details set up in eclipse (source dirs, build path including dependency projects, build order, etc). This allows you to manage dependencies in one place (eclipse) and still be able to use a command-line build to automation.", 'questionId': '28202', 'answerId': '73631'}
{'answer': "I had the same problem and generalized my templates and grow them into in own project: Antiplate. Maybe it's also useful for you.", 'questionId': '28202', 'answerId': '122219'}
{'answer': 'You can give http://import-ant.sourceforge.net/ a try. It is a set of build file snippets that can be used to create simple custom build files.', 'questionId': '28202', 'answerId': '2371869'}
{'answer': "Does this discussion help?  (I don't know if it's taboo to link to another programming forum, but I'd rather not just quote the whole discussion =) ) Sun Discussion on this subject The verdict seems to be that it doesn't make enough of a difference to matter in most cases, though technically the static methods are more efficient.", 'questionId': '28241', 'answerId': '28251'}
{'answer': 'From a strict runtime performance point of view, the difference is really negligible. The main difference between the two lies down in the fact that the "static" lifecycle is linked to the classloader, whereas for the singleton it\'s a regular instance lifecycle. Usually it\'s better to stay away from the ClassLoader business, you avoid some tricky problems, especially when you try to reload the web application.', 'questionId': '28241', 'answerId': '28255'}
{'answer': "If my original post was the correct understanding and the discussion from Sun that was linked to is accurate (which I think it might be), then I think you have to make a trade off between clarity and performance. Ask yourself these questions: Does the Singleton object make what I'm doing more clear? Do I need an object to do this task or is it more suited to static methods? Do I need the performance that I can gain by not using a Singleton?", 'questionId': '28241', 'answerId': '28260'}
{'answer': "I would use a singleton if it needed to store any state, and static classes otherwise. There's no point in instantiating something, even a single instance, unless it needs to store something.", 'questionId': '28241', 'answerId': '28271'}
{'answer': "From my experience, the only thing that matters is which one is easier to mock in unit tests. I always felt Singleton is easier and natural to mock out. If your organization lets you use JMockit, it doesn't matter since you can overcome these concerns.", 'questionId': '28241', 'answerId': '28312'}
{'answer': "Static is bad for extensibility since static methods and fields cannot be extended or overridden by subclasses.  It's also bad for unit tests. Within a unit test you cannot keep the side effects of different tests from spilling over since you cannot control the classloader. Static fields initialized in one unit test will be visible in another, or worse, running tests concurrently will yield unpredictable results. Singleton is generally an ok pattern when used sparingly. I prefer to use a DI framework and let that manage my instances for me (possibly within different scopes, as in Guice).", 'questionId': '28241', 'answerId': '28721'}
{'answer': "Write some code to measure the performance.  The answer is going to be dependent on the JVM(Sun's JDK might perform differently than JRockit) and the VM flags your application uses.", 'questionId': '28241', 'answerId': '51087'}
{'answer': "You answered in your comment:  equals returned false but identity hash code was same, assume o1 == o2 Unfortunately you cannot assume that. Most of the time that is going to work, but in some exceptionnal cases, it won't. And you cannot know when. When such a case appear, it would lead to lose instances in TreeSets for example.", 'questionId': '28301', 'answerId': '28343'}
{'answer': "I don't think it does since this clause is not met: Finally, the implementer must ensure that x.compareTo(y)==0 implies that sgn(x.compareTo(z)) == sgn(y.compareTo(z)), for all z. Since equal(o1, o2) depends on o1's implementation of equals, two objects that are logically equal (as determined by equals) still have two differrent identityHashCodes. So when comparing them to a third object (z), they might end up yielding different values for compareTo. Make sense?", 'questionId': '28301', 'answerId': '28385'}
{'answer': "I'm not really sure about the System.identityHashCode(Object). That's pretty much what the == is used for. You might rather want to use the Object.hashCode() - it's more in parallel with Object.equals(Object).", 'questionId': '28301', 'answerId': '28394'}
{'answer': "You should probably raise an exception if it gets to that last return 0 line --when a hash collision happens. I do have a question though: you are doing a total ordering on the hash's, which I guess is fine, but shouldn't some function be passed to it to define a Lexicographical order? I can imagine that you have the objects as a tuple of two integers that form a real number. But you wont get the proper ordering since you're only taking a hash of the object. This is all up to you if hashing is what you meant, but to me, it doesn't make much sense.", 'questionId': '28301', 'answerId': '28439'}
{'answer': ' I agree this is not ideal, hence the comment. Any suggestions? I think there is now way you can solve that, because you cannot access the one and only one thing that can distinguish two instances: their address in memory. So I have only one suggestion: reconsider your need of having a general total ordering process in Java :-)', 'questionId': '28301', 'answerId': '28451'}
{'answer': 'Hey, look at what I found! http://gafter.blogspot.com/2007/03/compact-object-comparator.html This is exactly what I was looking for.', 'questionId': '28301', 'answerId': '28477'}
{'answer': ' Hey, look at what I found! http://gafter.blogspot.com/2007/03/compact-object-comparator.html Oh yes, I forgot about the IdentityHashMap (Java 6 and above only). Just have to pay attention at releasing your comparator.', 'questionId': '28301', 'answerId': '28494'}
{'answer': ' gets the directory the Java VM was started from.', 'questionId': '28428', 'answerId': '28454'}
{'answer': " The above method gets the user's working directory when the application was launched. This is fine if the application is launched by a script or shortcut that ensures that this is the case. However, if the app is launched from somewhere else (entirely possible if the command line is used), then the return value will be wherever the user was when they launched the app. A more reliable method is to work out the application install directory using ClassLoaders.", 'questionId': '28428', 'answerId': '28726'}
{'answer': 'I think you can get that information using JDepend', 'questionId': '28538', 'answerId': '28552'}
{'answer': 'You could use the Outbound dependencies feature of DependencyFinder. You can do that entirely in the GUI, or in command line exporting XML.', 'questionId': '28538', 'answerId': '28594'}
{'answer': "There's a tool called JarAnalyzer that will give you the dependencies between the jars in a directory. It'll also give you a list of dependencies that don't exist in the directory.", 'questionId': '28538', 'answerId': '28611'}
{'answer': "If it's a public jar (as in, not yours) then it might be in the Maven Repository.", 'questionId': '28538', 'answerId': '29203'}
{'answer': "I would say don't create a huge ByteBuffer that contains ALL of the data at once.  Create a much smaller ByteBuffer, fill it with data, then write this data to the FileChannel.  Then reset the ByteBuffer and continue until all the data is written.", 'questionId': '28675', 'answerId': '28684'}
{'answer': 'If you access files in a random fashion (read here, skip, write there, move back) then you have a problem ;-) But if you only write big files, you should seriously consider using streams. java.io.FileOutputStream can be used directly to write file byte after byte or wrapped in any other stream (i.e. DataOutputStream, ObjectOutputStream) for convenience of writing floats, ints, Strings or even serializeable objects. Similar classes exist for reading files. Streams offer you convenience of manipulating arbitrarily large files in (almost) arbitrarily small memory. They are preferred way of accessing file system in vast majority of cases.', 'questionId': '28675', 'answerId': '28690'}
{'answer': "Check out Java's Mapped Byte Buffers, also known as 'direct buffers'.  Basically, this mechanism uses the OS's virtual memory paging system to 'map' your buffer directly to disk.  The OS will manage moving the bytes to/from disk and memory auto-magically, very quickly, and you won't have to worry about changing your virtual machine options.  This will also allow you to take advantage of NIO's improved performance over traditional java stream-based i/o, without any weird hacks.   The only two catches that I can think of are:  On 32-bit system, you are limited to  just under 4GB total for all mapped byte buffers.  (That is actually a limit for my application, and I now run on 64-bit architectures.) Implementation is JVM specific and not a requirement.  I use Sun's JVM and there are no problems, but YMMV. Kirk Pepperdine (a somewhat famous Java performance guru) is involved with a website, www.JavaPerformanceTuning.com, that has some more MBB details: NIO Performance Tips", 'questionId': '28675', 'answerId': '28743'}
{'answer': "The previous two responses seem pretty reasonable. As for whether the commandline switch will work, it depends how quickly your memory usage hits the limit. If you don't have enough ram and virtual memory available to at least triple the memory available, then you will need to use one of the alternate suggestions given.", 'questionId': '28675', 'answerId': '28747'}
{'answer': 'Using the transferFrom method should help with this, assuming you write to the channel incrementally and not all at once as previous answers also point out.', 'questionId': '28675', 'answerId': '28829'}
{'answer': "This can depend on the particular JDK vendor and version. There is a bug in GC in some Sun JVMs.  Shortages of direct memory will not trigger a GC in the main heap, but the direct memory is pinned down by garbage direct ByteBuffers in the main heap.  If the main heap is mostly empty they many not be collected for a long time. This can burn you even if you aren't using direct buffers on your own, because the JVM may be creating direct buffers on your behalf.  For instance, writing a non-direct ByteBuffer to a SocketChannel creates a direct buffer under the covers to use for the actual I/O operation. The workaround is to use a small number of direct buffers yourself, and keep them around for reuse.", 'questionId': '28675', 'answerId': '140145'}
{'answer': "The finalize method is never invoked more than once by a JVM for any given object. You shouldn't be relying on finalize anyway because there's no guarantee that it will be invoked. If you're calling finalize because you need to execute clean up code then better to put it into a separate method and make it explicit, e.g:", 'questionId': '28832', 'answerId': '28856'}
{'answer': "According to this simple test program, the JVM will still make its call to finalize() even if you explicitly called it: The output is: start   finalizing!   finalizing!   done Every resource out there says to never call finalize() explicitly, and pretty much never even implement the method because there are no guarantees as to if and when it will be called.  You're better off just closing all of your resources manually.", 'questionId': '28832', 'answerId': '28906'}
{'answer': 'One must understand the Garbage Collector(GC) Workflow to understand the function of finalize. calling .finalize() will not invoke the garbage collector, nor calling system.gc. Actually, What finalize will help the coder is to declare the reference of the object as "unreferenced". GC forces a suspension on the running operation of JVM, which creates a dent on the performance. During operation, GC will traverse all referenced objects, starting from the root object(your main method call). This suspension time can be decreased by declaring the objects as unreferenced manually, because it will cut down the operation costs to declare the object reference obsolete by the automated run. By declaring finalize(), coder sets the reference to the object obsolete, thus on the next run of GC operation, GC run will sweep the objects without using operation time. Quote: "After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. " from Java API Doc on java.Object.finalize(); For detailed explanation, you can also check: javabook.computerware', 'questionId': '28832', 'answerId': '20706792'}
{'answer': "The GC does a lot of optimization on when to properly finalize things. So unless you're familiar with how the GC actually works and how it tags generations, manually calling finalize or start GC'ing will probably hurt performance than help.", 'questionId': '28949', 'answerId': '28960'}
{'answer': "Assuming finalizers are similar to their .NET namesake then you only really need to call these when you have resources such as file handles that can leak. Most of the time your objects don't have these references so they don't need to be called. It's bad to try to collect the garbage because it's not really your garbage. You have told the VM to allocate some memory when you created objects, and the garbage collector is hiding information about those objects. Internally the GC is performing optimisations on the memory allocations it makes. When you manually try to collect the garbage you have no knowledge about what the GC wants to hold onto and get rid of, you are just forcing it's hand. As a result you mess up internal calculations. If you knew more about what the GC was holding internally then you might be able to make more informed decisions, but then you've missed the benefits of GC.", 'questionId': '28949', 'answerId': '28976'}
{'answer': "The short answer: Java garbage collection is a very finely tuned tool. System.gc() is a sledge-hammer. Java's heap is divided into different generations, each of which is collected using a different strategy. If you attach a profiler to a healthy app, you'll see that it very rarely has to run the most expensive kinds of collections because most objects are caught by the faster copying collector in the young generation. Calling System.gc() directly, while technically not guaranteed to do anything, in practice will trigger an expensive, stop-the-world full heap collection. This is almost always the wrong thing to do. You think you're saving resources, but you're actually wasting them for no good reason, forcing Java to recheck all your live objects just in case. If you are having problems with GC pauses during critical moments, you're better off configuring the JVM to use the concurrent mark/sweep collector, which was designed specifically to minimise time spent paused, than trying to take a sledgehammer to the problem and just breaking it further. The Sun document you were thinking of is here: Java SE 6 HotSpot Virtual Machine Garbage Collection Tuning (Another thing you might not know: implementing a finalize() method on your object makes garbage collection slower. Firstly, it will take two GC runs to collect the object: one to run finalize() and the next to ensure that the object wasn't resurrected during finalization. Secondly, objects with finalize() methods have to be treated as special cases by the GC because they have to be collected individually, they can't just be thrown away in bulk.)", 'questionId': '28949', 'answerId': '29038'}
{'answer': "Don't bother with finalizers.   Switch to incremental garbage collection. If you want to help the garbage collector, null off references to objects you no longer need. Less path to follow= more explicitly garbage. Don't forget that (non-static) inner class instances keep references to their parent class instance. So an inner class thread keeps a lot more baggage than you might expect. In a very related vein, if you're using serialization, and you've serialized temporary objects, you're going to need to clear the serialization caches, by calling ObjectOutputStream.reset()  or your process will leak memory and eventually die. Downside is that non-transient objects are going to get re-serialized. Serializing temporary result objects can be a bit more messy than you might think! Consider using soft references. If you don't know what soft references are, have a read of the javadoc for java.lang.ref.SoftReference Steer clear of Phantom references and Weak references unless you really get excitable. Finally, if you really can't tolerate the GC use Realtime Java.  No, I'm not joking. The reference implementation is free to download and Peter Dibbles book from SUN is really good reading.", 'questionId': '28949', 'answerId': '29138'}
{'answer': 'Avoid finalizers.  There is no guarantee that they will be called in a timely fashion.  It could take quite a long time before the Memory Management system (i.e., the garbage collector) decides to collect an object with a finalizer.   Many people use finalizers to do things like close socket connections or delete temporary files.  By doing so you make your application behaviour unpredictable and tied to when the JVM is going to GC your object.  This can lead to "out of memory" scenarios, not due to the Java Heap being exhausted, but rather due to the system running out of handles for a particular resource. One other thing to keep in mind is that introducing the calls to System.gc() or such hammers may show good results in your environment, but they won\'t necessarily translate to other systems.  Not everyone runs the same JVM, there are many, SUN, IBM J9, BEA JRockit, Harmony, OpenJDK, etc... This JVM all conform to the JCK (those that have been officially tested that is), but have a lot of freedom when it comes to making things fast.  GC is one of those areas that everyone invests in heavily.  Using a hammer will often times destroy that effort.', 'questionId': '28949', 'answerId': '30477'}
{'answer': "As far as finalizers go: They are virtually useless.  They aren't guaranteed to be called in a timely fashion, or indeed, at all (if the GC never runs, neither will any finalizers).  This means you generally shouldn't rely on them. Finalizers are not guaranteed to be idempotent.  The garbage collector takes great care to guarantee that it will never call finalize() more than once on the same object.  With well-written objects, it won't matter, but with poorly written objects, calling finalize multiple times can cause problems (e.g. double release of a native resource ... crash). Every object that has a finalize() method should also provide a close() (or similar) method.  This is the function you should be calling.  e.g., FileInputStream.close().  There's no reason to be calling finalize() when you have a more appropriate method that is intended to be called by you.", 'questionId': '28949', 'answerId': '30567'}
{'answer': 'you dont call finalize method at all.', 'questionId': '28949', 'answerId': '1072434'}
{'answer': 'The real problem with closing OS handles in finalize is that the finalize are executed in no guaranteed order. But if you have handles to the things that block (think e.g. sockets) potentially your code can get into deadlock situation (not trivial at all). So I\'m for explicitly closing handles in a predictable orderly manner. Basically code for dealing with resources should follow the pattern: It gets even more complicated if you write your own classes that work via JNI and open handles. You need to make sure handles are closed (released) and that it will happen only once. Frequently overlooked OS handle in Desktop J2SE is Graphics[2D]. Even BufferedImage.getGrpahics() can potentially return you the handle that points into a video driver (actually holding the resource on GPU). If you won\'t release it yourself and leave it  garbage collector to do the work - you may find strange OutOfMemory and alike situation when you ran out of video card mapped bitmaps but still have plenty of memory. In my experience it happens rather frequently in tight loops working with graphics objects (extracting thumbnails, scaling, sharpening you name it). Basically GC does not take care of programmers responsibility of correct resource management. It only takes care of memory and nothing else. The Stream.finalize calling close() IMHO would be better implemented throwing exception new RuntimeError("garbage collecting the stream that is still open"). It will save hours and days of debugging and cleaning code after the sloppy amateurs left the ends lose. Happy coding. Peace.', 'questionId': '28949', 'answerId': '5388006'}
{'answer': "The META-INF.services stuff is known by its class name in the API: ServiceLoader. A Google search for ServiceLoader yields some information. I am not really familiar with it, but sometimes it's all about knowing the right search keywords.", 'questionId': '2931', 'answerId': '8307'}
{'answer': '', 'questionId': '29324', 'answerId': '29334'}
{'answer': ' Both classes can be found from the java.util package. The difference between the 2 is explained in the following jGuru FAQ entry.', 'questionId': '29324', 'answerId': '29336'}
{'answer': "What Edmund said. As for not calling .add all the time, no, not idiomatically. There would be various hacks (storing it in an array and then looping) that you could do if you really wanted to, but I wouldn't recommend it.", 'questionId': '29324', 'answerId': '29342'}
{'answer': "Also don't forget that both Map and Hashtable are generic in Java 5 and up (as in any other class in the Collections framework).", 'questionId': '29324', 'answerId': '29356'}
{'answer': " And is there a way to populate the table with a list of key->value pairs without individually calling an add method on the object for each pair? One problem with your question is that you don't mention what what form your data is in to begin with. If your list of pairs happened to be a list of Map.Entry objects it would be pretty easy. Just to throw this out, there is a (much maligned) class named java.util.Properties that is an extension of Hashtable. It expects only String keys and values and lets you load and store the data using files or streams. The format of the file it reads and writes is as follows: I don't know if this is what you're looking for, but there are situations where this can be useful.", 'questionId': '29324', 'answerId': '30413'}
{'answer': "You can use double-braces to set up the data. You still call add, or put, but it's less ugly:", 'questionId': '29324', 'answerId': '31797'}
{'answer': 'It is important to note that Java\'s hash function is less than optimal. If you want less collisions and almost complete elimination of re-hashing at ~50% capacity, I\'d use a Buz Hash algorithm Buz Hash The reason Java\'s hashing algorithm is weak is most evident in how it hashes Strings. "a".hash() give you the ASCII representation of "a" - 97, so "b" would be 98. The whole point of hashing is to assign an arbitrary and "as random as possible" number. If you need a quick and dirty hash table, by all means, use java.util.  If you are looking for something robust that is more scalable, I\'d look into implementing your own.', 'questionId': '29324', 'answerId': '13080134'}
{'answer': "It really depends on what kind of security you are looking to integrate.  Do you want security to ensure that the user isn't running any debuggers or such to flip bits in your application to change the votes?  Do you want to ensure that the user doesn't install logging software to keep track of who voted for who?  Do you want to ensure that the person who is supposed to be voting is actually voting?  Security is a very broad subject, and it's hard to give an answer without knowing what exactly you are looking for.", 'questionId': '29357', 'answerId': '29362'}
{'answer': 'If you\'re looking for a "higher-level" explanation of this stuff (as in, not code), Applied Cryptography has quite a few relevant examples (and I believe a section on "secure elections" that covers some voting strategies).', 'questionId': '29357', 'answerId': '29369'}
{'answer': "I believe that physical security is more important for voting booth system rather than you know, code security. These machine by their very nature shouldn't be connected to any kind of public networks, especially not the the internet. But having a good physical security to prevent any sort of physical tampering is very important.", 'questionId': '29357', 'answerId': '29403'}
{'answer': "I'm not primarily worried about physical security, we are simply building an application not a whole system. I want to ensure votes are recorded correctly and not able to be changed or read by someone else.", 'questionId': '29357', 'answerId': '29454'}
{'answer': 'Putting to one side questions of protecting against physical tampering (e.g. of the underlying database), since you\'ve stipulated that physical security is not the present concern... I think the primary consideration is how to ensure that a given voter votes only once. At a paper poll, each registered voter is restricted to a particular booth/location and verification is done by name+SSN and a signature. You might need a high resolution digital signature capture and therefore a touchscreen capture peripheral or a touch screen terminal.  A more sophisticated approach would be a biometric scanner, but that would require government records of thumb/finger prints or retinal scan - I can already see the privacy advocates lining up at the lawyer\'s offices. Another approach would be for the voter "registrar office" to issue digital keys to each voter prior to the election - a (relatively) short (cryptographically strong) random alpha/numeric key that is entered with the voter\'s name and/or SSN into the application. Knowledge of that key is required for that particular voter in that particular election.  These keys would be issued by post in tamper-evident envelopes, like those used by banks for postal confirmation of wire transfers and delivery of PIN numbers.  The key must include checksum data so that the user can have the entry of it immediately validated and it should be in groups of 4, so something like XXXX-XXXX-XXXX-CCCC. Any other "secret" knowledge, such as SSN, is likely too easily discovered for a large percentage of the population (though we don\'t seem to be able to make credit-granting organizations understand this), and therefore is unsuitable for authentication. Vote counting can be done by generating a public key encrypted data file which is transferred (by sneaker net?) to the central system.  This must include the "voting booth" identity information and a record for each voter including their SSN and the digital key (or signature, or biometric data).  Votes with invalid keys are eliminated.  Multiple votes with the same key and same votes are treated as a single vote for that candidate.  Multiple votes with the same key and different votes are flagged for fraud investigation (with the constituent contacted by phone, issued a new key, and directed to revote).', 'questionId': '29357', 'answerId': '255594'}
{'answer': "My company did lately app with very strong security. Maybe it helps. Our app It was java EE app.  Architecture is following: Client computer has a cryptography package.   Dirty serwer that stores encrypted user input and output Clean serwer that is not accesible from outside that stores keys and decrypted data.  Users are issued cryptography cards (you may want to use something less safe - eg. pgp), and are required by jsp pages to encrypt with them all input. Page contains component that connects to cryctography app, asks user for key passphrase, encrypts it with server public key and signs it with user private key, then submits.  Data is stored in external server then transferred to internal server, where it is decrypted and signature is verified, then data is processed and reencrypted, then it is sent to dirty server, and then user may get it.  So even if someone cracked the dirty server (even get hold of database) he would get mostly useless data.  Your app I'd send encrypted and signed votes to server. It would assert two things: You know who sent the vote  Noone wil be able to know what the vote was.  Then get data from server, assert that everyone voted at most once count the votes, voila!", 'questionId': '29357', 'answerId': '256156'}
{'answer': 'Your problem is that you need to identify the user reliably, so that you can prevent them from re-voting and accessing each others votes.  This is not any different from any other desktop application that requires authentication (and potentially authorization). If your voters are a closed group on a network with user accounts, you could integrate with the directory and require users to log in.  If voters do not have network user accounts, this is where it gets interesting. Each user will still need to authenticate with the application. You could generate accounts with passwords in the application and distribute this information securely prior to voting. Your application could ask users to select a password when the access the application for the first time. Without knowing the specifics, it is hard give a more specific answer.', 'questionId': '29357', 'answerId': '645162'}
{'answer': 'You are aware that electronic voting is an unsolved research problem? Large scale fraud should take a large effort.', 'questionId': '29357', 'answerId': '1091088'}
{'answer': "'Jigloo' is a very cool GUI designer.  It is not free for commercial use however. It auto-generates code and allows for custom editing of the code it creates. http://www.cloudgarden.com/jigloo/", 'questionId': '29426', 'answerId': '29434'}
{'answer': "Another good GUI designer for Eclipse is Window Builder Pro. Like Jigloo, it's not free for commercial use. It allows you to design user interfaces for Swing, SWT and even the Google Web Toolkit (GWT).", 'questionId': '29426', 'answerId': '29640'}
{'answer': 'Visual Editor is a good choice. It generates very clean code, with no "layout" files beside of your sourcen using a simple but convenient pattern. It\'s very easy to patch the generated code and directly see the result. There are some stability problems (some times, the preview window does not refresh anymore...), but nothing that a "clean Project" can\'t fix...', 'questionId': '29426', 'answerId': '31961'}
{'answer': 'I use GWTDesigner http://www.instantiations.com/gwtdesigner/ which is not free but works well. Best of all, their customer support is top notch - very responsive.', 'questionId': '29426', 'answerId': '56093'}
{'answer': 'GWT Designer is very good and allows for rapid development of GWT websites. (http://www.instantiations.com/gwtdesigner/)', 'questionId': '29426', 'answerId': '63177'}
{'answer': 'well check out the eclipse distro easyeclipse at EasyEclipse. it has Visual editor project already added as a plugin, so no hassles of eclipse version compatibility.Plus the eclipse help section has a tutorial on VE.', 'questionId': '29426', 'answerId': '173051'}
{'answer': "Look at my plugin for developing swing application. It is as easy as that of netbeans': http://code.google.com/p/visualswing4eclipse/", 'questionId': '29426', 'answerId': '333531'}
{'answer': "It's not free or open source. But you can give Intellij Idea's SWING GUI designer a try.", 'questionId': '29426', 'answerId': '2432259'}
{'answer': "visualswing4eclipse looks good but the eclipse update URL didn't work for me (I raised ticket 137) I was only able to install a previous version. Here's a url in case anyone wants it: http://visualswing4eclipse.googlecode.com/svn-history/r858/trunk/org.dyno.visual.swing.site/site.xml The plugin actually looks very good.", 'questionId': '29426', 'answerId': '2454168'}
{'answer': 'Old question, but have you checked out JFormDesigner?', 'questionId': '29426', 'answerId': '3467112'}
{'answer': 'Here is a quite good but old comparison http://wiki.computerwoche.de/doku.php/programmierung/gui-builder_fuer_eclipse Window Builder Pro is now free at Google Web Toolkit', 'questionId': '29426', 'answerId': '3811404'}
{'answer': 'Window Builder Pro is a great GUI Designer for eclipse and is now offered for free by google.', 'questionId': '29426', 'answerId': '3816214'}
{'answer': "I don't know anything about groovy so in a sense I've qualified to answer this... I would want you to: Tell me why I would want to use Scripting (in general) as opposed to Java-- what does it let me do quicker (as in development time), what does it make more readable. Give tantalising examples of ways I can use chunks of scripting in my mostly Java app. You want to make this relevant to Java devs moreso than tech-junkies. With that out of the way, why Groovy? Why not Ruby, Python or whatever (which are all runnable on the JVM). Don't show me syntax that Java can already do (if statements, loops etc) or if you do make it quick. It's as boring as hell to watch someone walk through language syntax 101 for 20min. For syntax that has a comparible feature in Java maybe show them side by side quickly. For syntax that is not in Java (closures etc) you can talk to them in a bit more detail. Remember those examples from the first point. Show me one, fully working (or at least looking like it is). At the end have question time. That is crazy important, and with that comes a burden on you to be a psuedo-guru :P. I'm not sure about how the Java6 scripting support works but I'm fairly sure it can be made secure. I remember something about defining the API the script can use before it's run. If this is the case then an example you could show would be some thick-client application (e.g. a music player) where users can write their own scripts with an API you provide them in Groovy which allows them to script their app in interesting and secure ways (e.g. creating custom columns in the playlist)", 'questionId': '29461', 'answerId': '29573'}
{'answer': "I'd go for: Closures Duck typing Builders (XML builder and slurper) GStrings Grails", 'questionId': '29461', 'answerId': '29983'}
{'answer': 'Include an example of how making Java code more groovy takes away soooo much code. Wait for them to pick their jaws up off of the floor before continuing. Scott Davis has a simple example at the beginning of Groovy Recipes that takes 35 lines of Java or 3 lines of Groovy.', 'questionId': '29461', 'answerId': '30031'}
{'answer': "You should definitely show them how to create a quick Grails application.  Two domain classes that are related.  Build a basic CRUD app.  Explain that tables are being created behind the scenes using GORM(Hibernate).  Then explain that you can create a war file and deploy it as you would any other Java war file. You can also add Grails/Groovy to an existing Java/JSP project so it doesn't require a huge commitment or paradigm change.   Groovy/Grails is simply Ruby/Rails for Java people. I'd cover the plugins for Netbeans/Eclipse too.  Groovy/Grails are just now getting full support in the major IDE's. Finally, if you can find a good diagram that shows how Grails is built on top of Spring, Hibernate, Quartz, Sitemesh and Groovy, I think people will understand that there is a treasure chest waiting to be unlocked.", 'questionId': '29461', 'answerId': '49122'}
{'answer': "I'd mention the following things in addition to what has already been stated: GDK - extensions/additions to existing JDK classes Interaction between Groovy and Java code (basically a non-issue) Compiling Groovy code to Java .class files XML parsing and mechanisms for accessing document content One thing I like doing with Groovy is implementing an interface defined in Java as a map from method names to closures. It's a cool thing you can do with Groovy, but probably well beyond an introductory presentation though.", 'questionId': '29461', 'answerId': '49135'}
{'answer': "[More of a comment than an answer] Les, Nicely done on the Groovy presentation.  Going through it reminded me of a dozen features of Groovy that I forgot about.  (I'm pretty good at Groovy, but it's so rich with features...)  I'm going to use your presentation slides like flashcards until I learn it all.  Thanks.", 'questionId': '29461', 'answerId': '430695'}
{'answer': 'here is a recent presentation of groovy and grails that seems representative: http://jshingler.blogspot.com/2009/01/codemash-2009-groovy-and-grails.html', 'questionId': '29461', 'answerId': '430723'}
{'answer': 'Generally, no. The stream format for Java serialization is defined in this document, but you need access to the original class definitions (and a Java runtime to load them into) to turn the stream data back into something approaching the original objects. For example, classes may define writeObject() and readObject() methods to customise their own serialized form. (edit: lubos hasko suggests having a little java program to deserialize the objects in front of Python, but the problem is that for this to work, your "little java program" needs to load the same versions of all the same classes that it might deserialize. Which is tricky if you\'re receiving log messages from one app, and really tricky if you\'re multiplexing more than one log stream. Either way, it\'s not going to be a little program any more. edit2: I could be wrong here, I don\'t know what gets serialized. If it\'s just log4j classes you should be fine. On the other hand, it\'s possible to log arbitrary exceptions, and if they get put in the stream as well my point stands.) It would be much easier to customise the log4j network adapter and replace the raw serialization with some more easily-deserialized form (for example you could use XStream to turn the object into an XML representation)', 'questionId': '29505', 'answerId': '29524'}
{'answer': 'In theory it\'s possible. Now how difficult in practice it might be depends on whether Java serialization format is documented or not. I guess, it\'s not. edit: oops, I was wrong, thanks Charles. Anyway, this is what I suggest you to do capture from log4j & deserialize Java object in your own little Java program. now when you have the object again, serialize it using your own custom formatter.  Tip: Maybe you don\'t even have to write your own custom formatter. for example, JSON (scroll down for libs) has libraries for Python and Java, so you could in theory use Java library to serialize your objects and Python equivalent library to deserialize it send output stream to your python application and deserialize it Charles wrote: the problem is that for this   to work, your "little java program"   needs to load the same versions of all   the same classes that it might   deserialize. Which is tricky if you\'re   receiving log messages from one app,   and really tricky if you\'re   multiplexing more than one log stream.   Either way, it\'s not going to be a   little program any more. Can\'t you just simply reference Java log4j libraries in your own java process? I\'m just giving general advice here that is applicable to any pair of languages (name of the question is pretty language agnostic so I just provided one of the generic solutions). Anyway, I\'m not familiar with log4j and don\'t know whether you can "inject" your own serializer into it. If you can, then of course your suggestion is much better and cleaner.', 'questionId': '29505', 'answerId': '29529'}
{'answer': 'I would recommend moving to a third-party format (by creating your own log4j adapters etc) that both languages understand and can easily marshal / unmarshal, e.g. XML.', 'questionId': '29505', 'answerId': '29535'}
{'answer': 'Theoretically, it\'s possible. The Java Serialization, like pretty much everything in Javaland, is standardized. So, you could implement a deserializer according to that standard in Python. However, the Java Serialization format is not designed for cross-language use, the serialization format is closely tied to the way objects are represented inside the JVM. While implementing a JVM in Python is surely a fun exercise, it\'s probably not what you\'re looking for (-: There are other (data) serialization formats that are specifically designed to be language agnostic. They usually work by stripping the data formats down to the bare minimum (number, string, sequence, dictionary and that\'s it) and thus requiring a bit of work on both ends to represent a rich object as a graph of dumb data structures (and vice versa). Two examples are JSON (JavaScript Object Notation) and YAML (YAML Ain\'t Markup Language). ASN.1 (Abstract Syntax Notation One) is another data serialization format. Instead of dumbing the format down to a point where it can be easily understood, ASN.1 is self-describing, meaning all the information needed to decode a stream is encoded within the stream itself. And, of course, XML (eXtensible Markup Language), will work too, provided that it is not just used to provide textual representation of a "memory dump" of a Java object, but an actual abstract, language-agnostic encoding. So, to make a long story short: your best bet is to either try to coerce log4j into logging in one of the above-mentioned formats, replace log4j with something that does that or try to somehow intercept the objects before they are sent over the wire and convert them before leaving Javaland. Libraries that implement JSON, YAML, ASN.1 and XML are available for both Java and Python (and pretty much every programming language known to man).', 'questionId': '29505', 'answerId': '29564'}
{'answer': "Well I am not Python expert so I can't comment on how to solve your problem but if you have program in .NET you may use IKVM.NET to deserialize Java objects easily. I have experimented this by creating .NET Client for Log4J log messages written to Socket appender and it worked really well. I am sorry, if this answer does not make sense here.", 'questionId': '29505', 'answerId': '29582'}
{'answer': 'If you can have a JVM on the receiving side and the class definitions for the serialized data, and you only want to use Python and no other language, then you may use Jython: you would deserialize what you received using the correct Java methods and then you process what you get with you Python code', 'questionId': '29505', 'answerId': '570540'}
{'answer': 'I really like regular expressions. As long as the command strings are fairly simple, you can write a few regexes that could take a few pages of code to manually parse. I would suggest you check out http://www.regular-expressions.info for a good intro to regexes, as well as specific examples for Java.', 'questionId': '2968', 'answerId': '2969'}
{'answer': "A simple string tokenizer on spaces should work, but there are really many ways you could do this. Here is an example using a tokenizer: Then tokens can be further used for the arguments.  This all assumes no spaces are used in the arguments... so you might want to roll your own simple parsing mechanism (like getting the first whitespace and using text before as the action, or using a regular expression if you don't mind the speed hit), just abstract it out so it can be used anywhere.", 'questionId': '2968', 'answerId': '2971'}
{'answer': 'I would look at Java migrations of Zork, and lean towards a simple Natural Language Processor (driven either by tokenizing or regex) such as the following (from this link): ... Anything which gives a programmer a reason to look at Zork again is good in my book, just watch out for Grues. ...', 'questionId': '2968', 'answerId': '2977'}
{'answer': 'I assume you\'re trying to make the command interface as forgiving as possible. If this is the case, I suggest you use an algorithm similar to this: Read in the string Split the string into tokens Use a dictionary to convert synonyms to a common form  For example, convert "hit", "punch", "strike", and "kick" all to "hit" Perform actions on an unordered, inclusive base Unordered - "punch the monkey in the face" is the same thing as "the face in the monkey punch" Inclusive - If the command is supposed to be "punch the monkey in the face" and they supply "punch monkey", you should check how many commands this matches. If only one command, do this action. It might even be a good idea to have command priorities, and even if there were even matches, it would perform the top action.', 'questionId': '2968', 'answerId': '2985'}
{'answer': '@CodingTheWheel Heres your code, a bit clean up and through eclipse (ctrl+shift+f) and the inserted back here :) Including the four spaces in front each line.', 'questionId': '2968', 'answerId': '3539'}
{'answer': 'When the separator String for the command is allways the same String or char (like the ";") y recomend you use the StrinkTokenizer class: StringTokenizer but when the separator varies or is complex y recomend you to use the regular expresions, wich can be used by the String class itself, method split, since 1.4. It uses the Pattern class from the java.util.regex package Pattern', 'questionId': '2968', 'answerId': '3565'}
{'answer': "Sun itself recommends staying away from StringTokenizer and using the String.spilt method instead.  You'll also want to look at the Pattern class.", 'questionId': '2968', 'answerId': '3616'}
{'answer': "Parsing manually is a lot of fun... at the beginning:)  In practice if commands aren't very sophisticated you can treat them the same way as those used in command line interpreters. There's a list of libraries that you can use: http://java-source.net/open-source/command-line. I think you can start with apache commons CLI or args4j (uses annotations). They are well documented and really simple in use. They handle parsing automatically and the only thing you need to do is to read particular fields in an object. If you have more sophisticated commands, then maybe creating a formal grammar would be a better idea. There is a very good library with graphical editor, debugger and interpreter for grammars. It's called ANTLR (and the editor ANTLRWorks) and it's free:) There are also some example grammars and tutorials.", 'questionId': '2968', 'answerId': '36412'}
{'answer': 'If this is to parse command lines I would suggest using Commons Cli. The Apache Commons CLI library provides an API for processing command line interfaces.', 'questionId': '2968', 'answerId': '36531'}
{'answer': 'Another vote for ANTLR/ANTLRWorks.  If you create two versions of the file, one with the Java code for actually executing the commands, and one without (with just the grammar), then you have an executable specification of the language, which is great for testing, a boon for documentation, and a big timesaver if you ever decide to port it.', 'questionId': '2968', 'answerId': '36549'}
{'answer': "Try JavaCC a parser generator for Java. It has a lot of features for interpreting languages, and it's well supported on Eclipse.", 'questionId': '2968', 'answerId': '37054'}
{'answer': "If the language is dead simple like just  VERB NOUN then splitting by hand works well. If it's more complex, you should really look into a tool like ANTLR or JavaCC. I've got a tutorial on ANTLR (v2) at http://javadude.com/articles/antlrtut which will give you an idea of how it works.", 'questionId': '2968', 'answerId': '73662'}
{'answer': 'JCommander seems quite good, although I have yet to test it.', 'questionId': '2968', 'answerId': '3531547'}
{'answer': 'If your text contains some delimiters then you can your split method. If text contains irregular strings means different format in it then you must use regular expressions.', 'questionId': '2968', 'answerId': '13539884'}
{'answer': 'split method can split a string into an array of the specified substring expression regex. Its arguments in two forms, namely: split (String regex) and split (String regex, int limit), which split (String regex) is actually by calling split (String regex, int limit) to achieve, limit is 0. Then, when the limit> 0 and limit <0 represents what?  When the jdk explained: when limit> 0 sub-array lengths up to limit, that is, if possible, can be limit-1 sub-division, remaining as a substring (except by limit-1 times the character has string split end);  limit <0 indicates no limit on the length of the array;  limit = 0 end of the string empty string will be truncated.  StringTokenizer class is for compatibility reasons and is preserved legacy class, so we should try to use the split method of the String class. refer to link', 'questionId': '2968', 'answerId': '23633702'}
{'answer': 'If you right-click in the source of a file in Eclipse, it has a Javadoc generation option under the source menu.', 'questionId': '29689', 'answerId': '29710'}
{'answer': 'The JAutodoc plugin for eclipse does exactly what you need, but with a package granularity :  right click on a package, select "Add javadoc for members..." and the skeleton will be added. There are numerous interesting options : templates for javadoc, adding a TODO in the header of every file saying : "template javadoc, must be filled...", etc.', 'questionId': '29689', 'answerId': '31946'}
{'answer': "You can configure eclipse to show warnings for things that lack javadoc, or have javadoc that does not have all the information, or has wrong information. It can also insert templates for you to fill out. Not quite the tool you asked for, but probably better because you won't end up with empty skeletons on methods that you missed. You can achieve this by investigating and editing the preference page beyond the path Window > Preferences > Java > Compiler > Javadoc for your workspace. The screenshot of that preference page is below: For further information about the items in this screen please follow the link below: Java Compiler Javadoc Preferences Help", 'questionId': '29689', 'answerId': '31952'}
{'answer': "I think auto-generating empty Javadoc is an anti-pattern and should be discouraged; it gives code the appearance of being documented, but just adds noise to the codebase.   I would recommend instead that you configure your code editor to assist on a per-method and per-class basis to use when you actually write the javadoc (one commenter pointed to Eclipse's feature that does this).", 'questionId': '29689', 'answerId': '64497'}
{'answer': 'You can also place your cursor on the line above a method you would like to JavaDoc, then type: and press Enter.  This will generate your JavaDoc stub.', 'questionId': '29689', 'answerId': '16472314'}
{'answer': 'Select the method that you want add Javadoc and alt+Shift+j, creates automatically the javadoc comment. EXAMPLE:', 'questionId': '29689', 'answerId': '25558376'}
{'answer': 'The SLSBs are single threaded because of the TX Context, Principal is associated with a bean instance when it is called. These beans are pooled and unless the max pool size is reached are processed in separate threads ( Vendor dependent). If SLSBs were designed thread safe every call would have looked like a servlet doGet/Post with request info containing Tx Context , Security Context info and etc. So at least the code looks clean (developer dependent).', 'questionId': '29734', 'answerId': '29739'}
{'answer': "The primary reason stateless session beans are single threaded is to make them highly scalable for the container. The container can make a lot of simplifying assumptions about the runtime environment. A second reason is to make life easier for the developer because  the developer doesn't have to worry about any synchronization or re-entrancy in his business logic because the bean will never be called in another thread context. I remember the reasoning being discussed in the reviews of the original EJB 1.0 specification. I would look at the goals section of the specification. See http://java.sun.com/products/ejb/docs.html for the list of specifications.", 'questionId': '29734', 'answerId': '30334'}
{'answer': 'have you tried adding the following before the call : The options are explained here. contentType : When sending data to the server, use this content-type. Default is "application/x-www-form-urlencoded", which is fine for most cases. scriptCharset : Only for requests with \'jsonp\' or \'script\' dataType and GET type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.', 'questionId': '29751', 'answerId': '29756'}
{'answer': 'I had the same problem and fixed it by downgrading to mysql-connector-odbc-3.51.16.', 'questionId': '29751', 'answerId': '323518'}
{'answer': 'I had the same problem also and I fixed it in this way: In PHP, before storing the data in the database, I used the htmlentities() function. And during showing the data, I used the html_entity_decode() function. This worked. I strongly hope this will work for you too.', 'questionId': '29751', 'answerId': '732713'}
{'answer': "I'm having the same problem. I saw InternetExplorer8 sends this header: while Firefox sends this: My solution was just forcing in jQuery to use the Firefox content-type:", 'questionId': '29751', 'answerId': '2048911'}
{'answer': "I see this problem a lot. The meta doesn't work always in your PHP data operations, so just type this at the beginning:", 'questionId': '29751', 'answerId': '3129545'}
{'answer': "As the exception is a jdbc error, your best approach is to capture the input before it is sent to the database. java.sql.BatchUpdateException: Incorrect string value: '\\xF1a' for column 'body' at row 1 A single character is causing the exception. It may be the case that you will need to override some characters manually.  You will find, when working with non-latin-alphabet languages (as I do), that this is a common pain.", 'questionId': '29751', 'answerId': '3656547'}
{'answer': "One option is to use serialization. Here's a blog post explaining it: http://weblogs.java.net/blog/emcmanus/archive/2007/04/cloning_java_ob.html", 'questionId': '29820', 'answerId': '29825'}
{'answer': "Turn that into a spec: -that objects need to implement an interface in order to be allowed into the collection Something like ArrayList<ICloneable>() Then you can be assured that you always do a deep copy - the interface should have a method that is guaranteed to return a deep copy.   I think that's the best you can do.", 'questionId': '29820', 'answerId': '29826'}
{'answer': 'I suppose it is an ovbious answer: Make a requisite for the classes stored in the collection to be cloneable. You could check that at insertion time or at retrieval time, whatever makes more sense, and throw an exception. Or if the item is not cloneable, just fail back to the return by reference option.', 'questionId': '29820', 'answerId': '29828'}
{'answer': 'DrJava is your best bet. It also has an Eclipse plugin to use the interactions pane like GroovyConsole.', 'questionId': '30160', 'answerId': '30402'}
{'answer': 'try beanshell. its a scripting wrapper over java. http://www.beanshell.org/', 'questionId': '30160', 'answerId': '30408'}
{'answer': 'Why not use the GroovyConsole ? Groovy accepts the vast majority of Java syntax', 'questionId': '30160', 'answerId': '190089'}
{'answer': "One good reason for not using something like the Groovy Console (wonderful though it is) is when you want to test what something would be like in Java, without actually going to the trouble of a boilerplate class and main method to run snippets of code. There are some differences between what Groovy does and what Java does. It'd be nice to have a simple way to test something and know for sure it will work when you put it in Java.", 'questionId': '30160', 'answerId': '1717633'}
{'answer': "Here's what I ended up with.  I have never found another solution out there for this, so if you have something better, by all means, contribute. First, the long array definition in the wsdl:types area: Next, we create a SoapExtensionAttribute that will perform the fix.  It seems that the problem was that .NET wasn't following the multiref id to the element containing the double value.  So, we process the array item, go find the value, and then insert it the value into the element: Finally, we tag all methods in the Reference.cs file that will be deserializing a long array with our attribute: This fix is long-specific, but it could probably be generalized to handle any primitive type having this problem.", 'questionId': '30171', 'answerId': '30172'}
{'answer': 'Found this link that may offer a better alternative:  http://www.tomergabel.com/GettingWCFAndApacheAxisToBeFriendly.aspx', 'questionId': '30171', 'answerId': '570459'}
{'answer': "Here's a more or less copy-pasted version of a blog post I wrote on the subject. Executive summary: You can either change the way .NET deserializes the result set (see Chris's solution above), or you can reconfigure Axis to serialize its results in a way that's compatible with the .NET SOAP implementation. If you go the latter route, here's how: ... the generated   classes look and appear to function   normally, but if you'll look at the   deserialized array on the client   (.NET/WCF) side you'll find that the   array has been deserialized   incorrectly, and all values in the   array are 0. You'll have to manually   look at the SOAP response returned by   Axis to figure out what's wrong;   here's a sample response (again,   edited for clarity): You'll notice that Axis does not   generate values directly in the   returned element, but instead   references external elements for   values. This might make sense when   there are many references to   relatively few discrete values, but   whatever the case this is not properly   handled by the WCF basicHttpBinding   provider (and reportedly by gSOAP and   classic .NET web references as well). It took me a while to find a solution:   edit your Axis deployment's   server-config.wsdd file and find the   following parameter: Change it to false,   then redeploy via the command line,   which looks (under Windows) something   like this: The web service's   response should now be deserializable   by your .NET client.", 'questionId': '30171', 'answerId': '650260'}
{'answer': 'Hope this helps a little, but at my college our web applications course just got revamped.  So now we are going the jsp, servlet, hibernate route with the second part of the course on mostly JBoss Seam.  So who knows, it probably just needs time to grow in the community.', 'questionId': '30281', 'answerId': '30350'}
{'answer': "In our JBoss Seam in Action presentation at the Javapolis conference last year, my colleague and I said that 'Seam is the next Struts'. This needed some explanation, which I later wrote-up as Seam is the new Struts. Needless to say, we like Seam. One indication of Seam's popularity is the level of traffic on the Seam Users Forum.", 'questionId': '30281', 'answerId': '32303'}
{'answer': 'Seam is fixed JSF based on annotations. No more crappy XML. I used it at work.', 'questionId': '30281', 'answerId': '248418'}
{'answer': 'I have used JBoss Seam on two commercial projects for two different clients. Yet JBoss Seam is still a new approach to developing JSF Web Applications. One measure is the results from a Indeed Job Search.  Indeed Job Search', 'questionId': '30281', 'answerId': '441193'}
{'answer': 'I would say that seam is a rather popular framework, it has great documentation, a great and helpful community and a forum with many many questions and problems answered.  It should be popular among developers who use jsf beacuse it works great with jsf, but not only that... it fixes jsf in many ways (s:convertEntity tag, and unified component model are my favourite examples).', 'questionId': '30281', 'answerId': '516220'}
{'answer': 'It really works for us....JSF+EJB3.0 with the help of seam framework is really fantastic.But i have a question...why this is not becoming more popular for developing large scale application.I have seen that many are using other frameworks for developing large scale j2ee application.It seems to me that seam really helps the developers to build a j2ee application...but still ...why this but coming in?', 'questionId': '30281', 'answerId': '751725'}
{'answer': 'I have used JBoss Seam now for about a year and like it very much over Spring.  Unfortunately, I don\'t use this at work, more for side projects and personal projects.  For me, it saves me a lot of time developing new projects for clients.  And, one big reason I use it primarily is, the tight integration with each layer and I never get any lazy load errors that I used to get with Spring (even after the filter and other hacks). An equivalent Spring application would have much more boilerplate code within it to get stuff working.  Spring does not integrate each layer very well, it more or less is a wrapper for a lot of different things, but doesn\'t glue itself together very well. The other nice thing I like with Seam is they practice what they preach.  Take a look at their website.  Take a guess what it is running, hmm, a live example of their code.  Seam Wiki, Seam Forums, etc.  If you truly believe in your code, stand behind it.  I would be happy to have their pager 24x7x365, I bet it rarely goes off. While you write a lot less code, the learning curve is about twice as steep.  The further I get in, the more I understand how to write good code.  I would like to see more comments, but as far as coding style, it is well written. On the negative side, just as any product you try to market, Seam was years after Spring had already become popular so Spring is by far still more popular.  Search on Indeed and Seam only has a few hits.  If you look on Spring, there are roughly 40k registered users, while Seam has about 7k. Depends on what is important to you, as a Java developer/engineer/programmer, you should be able to work with both technologies and chances are, you will most likely encounter a Spring application before a Seam one.  Learn both and how to leverage both.  If you use both properly and know the nuances and quirks of each, development becomes much easier whether you\'re using Spring or Seam. I don\'t agree with the statement, "Seam is the next Struts".  Struts was a view technology whereas Seam integrates all layers.  I will agree that it is a new concept like Struts and will bring the same impact to the Java community that Struts did.  I don\'t think we\'ll see that until Java EE 6 and CDI become more popular, and of course Seam 3 is released. Walter', 'questionId': '30281', 'answerId': '1983480'}
{'answer': 'I like Seam, have been using it for the past year professionally. However, the question concerns its popularity. I can see the following indications that it is not very popular (at least in comparison to plain JSF or Spring): Its forum is very inactive (at least at this point, they are working hard on Seam 3). http://seamframework.org/Community/SeamCommunityForumSlightlyInactive You can also take a look at its comparison with Spring in Google insights for search: http://www.google.com/insights/search/?hl=en-US#cat=732&q=seam%2Cspring&cmpt=q I only know one other company here in Athens where they use it, and I know a handful of companies that use plain JSF, Struts or Spring (of course, Athens is not representative for all the world).', 'questionId': '30281', 'answerId': '3309674'}
{'answer': 'We have been using Seam for a while in huge projects.  Easy to kick-off a new project, reverse engineering is very handy.', 'questionId': '30281', 'answerId': '3332652'}
{'answer': 'When Java was introduced in the 90s as oak the community did not embrace it because it was too powerful for its time and was appreciated later on and is now running the show. Seam will get popular soon. if not it can be rebranded just as oak to java.', 'questionId': '30281', 'answerId': '3372019'}
{'answer': 'I have been using Seam from Seam 1.2 since 2007 in mid-size and large projects, sometimes in small projects no more than 200 users. My main concern is the productivity. Although my team has already gained obvious productivity from Spring since 2005, for some tricky clients developers have to code javascripts which is time consuming and error-prone. Seam was really helpful in this scenario because at that time most developers in my team had no experience with JSF. Happy to see Seam being more popular.', 'questionId': '30281', 'answerId': '5399370'}
{'answer': "Seam has been discontinued in 2012. However, Apache DeltaSpike is the modern version of Seam, and this project is actively maintained, and it even won the 2014 Duke's Choice Award.", 'questionId': '30281', 'answerId': '40884794'}
{'answer': "I'm not aware of anyone who keeps track of this publicly on a regular basis (unlike Adobe who pushes it every chance they get).  The closest that I could come was this article from last November.  Based upon his site, this data could be skewed a bit, but I think we fairly similar numbers as well.", 'questionId': '30337', 'answerId': '30416'}
{'answer': 'There is a very rough percentage of browsers with some JRE available at The Counter, though I wouldn\'t trust it. Sun has a few useful stats from 2007, but their stats from 2008 are much less detailed. They suggest that in 2007 "92%...of JRE installs...are now Java SE 6", but who knows what highly technical site they surveyed to get that number.', 'questionId': '30337', 'answerId': '30424'}
{'answer': 'Jboss clustering was very easy to get up and running.  It seems to work well for us.', 'questionId': '30428', 'answerId': '30518'}
{'answer': 'You might want to take a look at Hazelcast. It is super lite, easy and free clustering platform with cluster API. If you are clustering your application state/data, Hazelcast can be great help with its distributed/partitioned, queue, map, set, list and lock implementations. Regards, -talip http://www.hazelcast.com', 'questionId': '30428', 'answerId': '247780'}
{'answer': 'JBossCache is a standalone open source project that JbossClustering makes use of in the Application Server. Our company made use of it in our own custom network server, its working well so far in development, though yet to be deployed.  Its a pretty simple API, and it comes in two flavors, a flat cache, or a "POJO Cache" that uses insturmentation to keep State across servers.  Basically, updates to fields are propgated across the  network using JGroups.', 'questionId': '30428', 'answerId': '279889'}
{'answer': 'You may look at Oracle Coherence (formerly Tangosole Coherence). http://www.oracle.com/technology/products/coherence/coherencedatagrid/coherence_solutions.html', 'questionId': '30428', 'answerId': '279911'}
{'answer': "I saw a demonstration of GridGain at our local JUG and I was very impressed. The documentation is very complete and it's very easy to get it going. I haven't started using it yet, so I can't quite say that it's working for us. http://www.gridgain.com/", 'questionId': '30428', 'answerId': '383914'}
{'answer': "Build a time machine and go back to 1987? Ho ho. Ok, no more snarky comments. How do I figure out what the configuration settings (e.g. baud rate) should be... Read the datasheet? Ok, ok. Seriously, last one. If you don't know the baud rate of the device you are trying to communicate with, you have two choices. Start guessing, or possibly bust out an o-scope. If you need a good starting point, let me suggest 9600-8-N-1. My suspicion is you can get there with brute force relatively quickly. There's a third option of having an old-school ninja who can tell just by the LOOK of the garbled characters at some standard baud rate what actual baud rate is. An impressive party trick to be sure. Hopefully though you have access to this information. In unix/linux, you can get ahold of minicom to play with the serial port directly. This should make it fairly quick to get the configuration figured out. one of the major Unix shells In Unix the serial port(s) is/are file-mapped into the /dev/ subdir. ttyS0, for example. If you setup the correct baud rate and whatnot using minicom, you can even cat stuff to that file to send stuff out there. On to the meat of the question, you can access it programmatically through the POSIX headers. termios.h is the big one.  See: http://www.easysw.com/~mike/serial/serial.html#3_1 (NOT AVAILABLE ANYMORE) but I also have some interest in serial programming using Windows/Hyperterminal. Hyperterminal and minicom are basically the same program. As for how Windows let's you get access to the serial port, I'll leave that question for someone else. I haven't done that in Windows since the Win95 days.", 'questionId': '3049', 'answerId': '3054'}
{'answer': 'From the other side, if you want to do it using C#, which will run on both Windows and Linux--with some limitations (EDIT: which may be out of date. I have no way to test it.). Just create a SerialPort object, set its baudrate, port and any other odd settings, call open on it, and write out your byte[]s. After all the setup, the SerialPort object acts very similar to any networked stream, so it should be easy enough to figure out. And as ibrandy states, you need to know all these settings, like baud rate, before you even start attempting to communicate to any serial device.', 'questionId': '3049', 'answerId': '3060'}
{'answer': 'At work we use teraterm and realterm for checking serial data is correctly formatted. Also we have a hardware splitter with a switch so we can monitor traffic to our application via a cable back to another port. Windows allows you access to the serial port via CreateFile. That gives you a handle and from there you can configure access.', 'questionId': '3049', 'answerId': '3090'}
{'answer': "From Java the rxtx (NOT AVAILABLE ANYMORE)library is quite good. It picks up where Sun's serial IO framework left off.", 'questionId': '3049', 'answerId': '6352'}
{'answer': 'For C/C++ on Windows you have (at least) two choices: Use the SerialPort class provided by .NET. Use the Win32 API. There is an extensive MSDN article dating back to 1995, and many free libraries and examples on the web to get you started. The .NET option will be much easier.', 'questionId': '3049', 'answerId': '9725'}
{'answer': "If you want to code in Java I really recommend SerialIOs SerialPort. It is very easy to use and saves you days of work. I've never found an open source library as good as SerialIO, REALLY! My advice: do not use Sun's serial IO framework! It is from 1998 and full of bugs. You can use rxtx but serialio is better!", 'questionId': '3049', 'answerId': '24078'}
{'answer': 'If it needs to be cross platfrom, I would suggest looking at Boost Asio.', 'questionId': '3049', 'answerId': '41526'}
{'answer': "Awhile back I wrote a decent sized application to route connections from a farm of modems through to a TCP/IP network address. Initially I looked for an unencumbered (free) Serial IO library.  I tried Sun's, IBM's and RxTx.  They were fine for developing the application, and in initial testing, but in production they each proved unstable. Finally I paid for SerialIO's SerialPort.  Converting over was literally an exercise in changing imports, and the library has been absolutely rock solid - I cannot recommend it enough.  My application has been running in the field 24/7 for a couple of years now, with not a single problem encountered by multiple customers. If you start development using SerialPort, they have a better API and I would use it. If you need cross platform support, Java with SerialPort was the best choice I could find. Lastly, their licensing is pretty darn reasonable as long as you are not preinstalling software on the equipment for your customer(s).", 'questionId': '3049', 'answerId': '65870'}
{'answer': "Depending on the device You are trying to communicate with, there may be more parameters than the baud rate, number of data bits, type of parity checking and number of stop bits to consider. If I recall correctly, modems use nine lines of the RS-232C interface. Some devices like, for example cash registers, may use hardware handshaking on RTS/CTS lines or on DTR/STR lines.   In general it's good to know how the interface works. You can't communicate if the baud rate doesn't match, but wrong setting of other parameters might kind of work. For example You can easily send data to the device expecting 1 stop bit with 2 stop bits set. Problems start when You try to receive data in such case. You can also use appropriately set parity bit as one of stop bits, etc.", 'questionId': '3049', 'answerId': '118609'}
{'answer': "I have been using purejavacomm: It is an implementation of javax.comm written in pure java + JNA Unlike rxtx, you don't need to install a dll. It is written in pure Java + JNA, which solved the problem of portability between Windows and Linux for me. It should be easy to port to other OS-es that JNA supports, such as Solaris and FreeBSD, but I haven't tried it.  You might expect a pure java library to lag behind a native implementation such as rxtx in performance, but with modern CPU's, the bottleneck is very likely to be the bitrate of your serial port, not CPU cycles. Also, it's much easier to debug than a mixed Java/Native library or pure compiled native code.", 'questionId': '3049', 'answerId': '15475192'}
{'answer': 'If you are not forced to use a particular compiler I suggest to use Qt and in the new 5.3 version you will find a class dedicated to serial ports: http://qt-project.org/doc/qt-5/qserialport.html The code you will write will run on all supprited Qt platforms, at least those that have serial ports.', 'questionId': '3049', 'answerId': '25700546'}
{'answer': "Are you possibly depending on development versions that obviously change a lot during development?  Instead of incrementing the version of development releases, you could just use a snapshot version that you overwrite when necessary, which means you wouldn't have to change the version tag on every minor change. Something like 1.0-SNAPSHOT... But maybe you are trying to achieve something else ;)", 'questionId': '30571', 'answerId': '30590'}
{'answer': 'Please take a look at this page (section "Dependency Version Ranges"). What you might want to do is something like  These version ranges are implemented in Maven2.', 'questionId': '30571', 'answerId': '30628'}
{'answer': 'NOTE: This answer applies to Maven 2 only! The mentioned LATEST and RELEASE metaversions have been dropped in Maven 3 "for the sake of reproducible builds", over 6 years ago. If you  always want to use the newest version, Maven has two keywords you can use as an alternative to version ranges. You should use these options with care as you are no longer in control of the plugins/dependencies you are using. When you depend on a plugin or a dependency, you can use the a version value of LATEST or RELEASE. LATEST refers to the latest released or snapshot version of a particular artifact, the most recently deployed artifact in a particular repository. RELEASE refers to the last non-snapshot release in the repository. In general, it is not a best practice to design software which depends on a non-specific version of an artifact. If you are developing software, you might want to use RELEASE or LATEST as a convenience so that you don\'t have to update version numbers when a new release of a third-party library is released. When you release software, you should always make sure that your project depends on specific versions to reduce the chances of your build or your project being affected by a software release not under your control. Use LATEST and RELEASE with caution, if at all. See the POM Syntax section of the Maven book for more details. Or see this doc on Dependency Version Ranges, where:  A square bracket ( [ & ] ) means "closed" (inclusive). A parenthesis ( ( & ) ) means "open" (exclusive). Here\'s an example illustrating the various options. In the Maven repository, com.foo:my-foo has the following metadata: If a dependency on that artifact is required, you have the following options (other version ranges can be specified of course, just showing the relevant ones here): Declare an exact version (will always resolve to 1.0.1): Declare an explicit version (will always resolve to 1.0.1 unless a collision occurs, when Maven will select a matching version): Declare a version range for all 1.x (will currently resolve to 1.1.1): Declare an open-ended version range (will resolve to 2.0.0): Declare the version as LATEST (will resolve to 2.0.0) (removed from maven 3.x) Declare the version as RELEASE (will resolve to 1.1.1) (removed from maven 3.x): Note that by default your own deployments will update the "latest" entry in the Maven metadata, but to update the "release" entry, you need to activate the "release-profile" from the Maven super POM. You can do this with either "-Prelease-profile" or "-DperformRelease=true" It\'s worth emphasising that any approach that allows Maven to pick the dependency versions (LATEST, RELEASE, and version ranges) can leave you open to build time issues, as later versions can have different behaviour (for example the dependency plugin has previously switched a default value from true to false, with confusing results). It is therefore generally a good idea to define exact versions in releases. As Tim\'s answer points out, the maven-versions-plugin is a handy tool for updating dependency versions, particularly the versions:use-latest-versions and versions:use-latest-releases goals.', 'questionId': '30571', 'answerId': '1172371'}
{'answer': 'Now I know this topic is old, but reading the question and the OP supplied answer it seems the Maven Versions Plugin might have actually been a better answer to his question: In particular the following goals could be of use: versions:use-latest-versions searches the pom for all versions which have been a newer version and replaces them with the latest version. versions:use-latest-releases searches the pom for all non-SNAPSHOT versions which have been a newer release and replaces them with the latest release version. versions:update-properties updates properties defined in a project so that they correspond to the latest available version of specific dependencies. This can be useful if a suite of dependencies must all be locked to one version. The following other goals are also provided: versions:display-dependency-updates scans a project\'s dependencies and produces a report of those dependencies which have newer versions available. versions:display-plugin-updates scans a project\'s plugins and produces a report of those plugins which have newer versions available. versions:update-parent updates the parent section of a project so that it references the newest available version. For example, if you use a corporate root POM, this goal can be helpful if you need to ensure you are using the latest version of the corporate root POM. versions:update-child-modules updates the parent section of the child modules of a project so the version matches the version of the current project. For example, if you have an aggregator pom that is also the parent for the projects that it aggregates and the children and parent versions get out of sync, this mojo can help fix the versions of the child modules. (Note you may need to invoke Maven with the -N option in order to run this goal if your project is broken so badly that it cannot build because of the version mis-match). versions:lock-snapshots searches the pom for all -SNAPSHOT versions and replaces them with the current timestamp version of that -SNAPSHOT, e.g. -20090327.172306-4 versions:unlock-snapshots searches the pom for all timestamp locked snapshot versions and replaces them with -SNAPSHOT. versions:resolve-ranges finds dependencies using version ranges and resolves the range to the specific version being used. versions:use-releases searches the pom for all -SNAPSHOT versions which have been released and replaces them with the corresponding release version. versions:use-next-releases searches the pom for all non-SNAPSHOT versions which have been a newer release and replaces them with the next release version. versions:use-next-versions searches the pom for all versions which have been a newer version and replaces them with the next version. versions:commit removes the pom.xml.versionsBackup files. Forms one half of the built-in "Poor Man\'s SCM". versions:revert restores the pom.xml files from the pom.xml.versionsBackup files. Forms one half of the built-in "Poor Man\'s SCM". Just thought I\'d include it for any future reference.', 'questionId': '30571', 'answerId': '1172805'}
{'answer': "Unlike others I think there are many reasons why you might always want the latest version. Particularly if you are doing continuous deployment (we sometimes have like 5 releases in a day) and don't want to do a multi-module project. What I do is make Hudson/Jenkins do the following for every build: That is I use the versions plugin and scm plugin to update the dependencies and then check it in to source control. Yes I let my CI do SCM checkins (which you have to do anyway for the maven release plugin). You'll want to setup the versions plugin to only update what you want: I use the release plugin to do the release which takes care of -SNAPSHOT and validates that there is a release version of -SNAPSHOT (which is important). If you do what I do you will get the latest version for all snapshot builds and the latest release version for release builds. Your builds will also be reproducible. Update I noticed some comments asking some specifics of this workflow. I will say we don't use this method anymore and the big reason why is the maven versions plugin is buggy and in general is inherently flawed. It is flawed because to run the versions plugin to adjust versions all the existing versions need to exist for the pom to run correctly. That is the versions plugin cannot update to the latest version of anything if it can't find the version referenced in the pom. This is actually rather annoying as we often cleanup old versions for disk space reasons. Really you need a separate tool from maven to adjust the versions (so you don't depend on the pom file to run correctly). I have written such a tool in the the lowly language that is Bash. The script will update the versions like the version plugin and check the pom back into source control. It also runs like 100x faster than the mvn versions plugin. Unfortunately it isn't written in a manner for public usage but if people are interested I could make it so and put it in a gist or github. Going back to workflow as some comments asked about that this is what we do: We have 20 or so projects in their own repositories with their own jenkins jobs When we release the maven release plugin is used. The workflow of that is covered in the plugin's documentation. The maven release plugin sort of sucks (and I'm being kind) but it does work. One day we plan on replacing this method with something more optimal. When one of the projects gets released jenkins then runs a special job we will call the update all versions job (how jenkins knows its a release is a complicated manner in part because the maven jenkins release plugin is pretty crappy as well). The update all versions job knows about all the 20 projects. It is actually an aggregator pom to be specific with all the projects in the modules section in dependency order. Jenkins runs our magic groovy/bash foo that will pull all the projects update the versions to the latest and then checkin the poms (again done in dependency order based on the modules section).  For each project if the pom has changed (because of a version change in some dependency) it is checked in and then we immediately ping jenkins to run the corresponding job for that project (this is to preserve build dependency order otherwise you are at the mercy of the SCM Poll scheduler).  At this point I'm of the opinion it is a good thing to have the release and auto version a separate tool from your general build anyway. Now you might think maven sort of sucks because of the problems listed above but this actually would be fairly difficult with a build tool that does not have a declarative easy to parse extendable syntax (aka XML). In fact we add custom XML attributes through namespaces to help hint bash/groovy scripts (e.g. don't update this version).", 'questionId': '30571', 'answerId': '8795380'}
{'answer': 'By the time this question was posed there were some kinks with version ranges in maven, but these have been resolved in newer versions of maven. This article captures very well how version ranges work and best practices to better understand how maven understands versions: https://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm#MAVEN8855', 'questionId': '30571', 'answerId': '29435600'}
{'answer': 'The truth is even in 3.x it still works, surprisingly the projects builds and deploys. But the  LATEST/RELEASE keyword causing problems in m2e and eclipse all over the place, ALSO projects depends on the dependency which deployed through the  LATEST/RELEASE fail to recognize the version.  It will also causing problem if you are try to define the version as property, and reference it else where. So the conclusion is use the versions-maven-plugin if you can.', 'questionId': '30571', 'answerId': '31077439'}
{'answer': 'The dependencies syntax is located at the Dependency Version Requirement Specification documentation. Here it is is for completeness: Dependencies\' version element define version requirements, used to compute effective dependency version. Version requirements have the following syntax: 1.0: "Soft" requirement on 1.0 (just a recommendation, if it matches all other ranges for the dependency) [1.0]: "Hard" requirement on 1.0 (,1.0]: x <= 1.0 [1.2,1.3]: 1.2 <= x <= 1.3 [1.0,2.0): 1.0 <= x < 2.0 [1.5,): x >= 1.5 (,1.0],[1.2,): x <= 1.0 or x >= 1.2; multiple sets are comma-separated (,1.1),(1.1,): this excludes 1.1 (for example if it is known not to   work in combination with this library) In your case, you could do something like <version>[1.2.3,)</version>', 'questionId': '30571', 'answerId': '31568725'}
{'answer': "Who ever is using LATEST, please make sure you have -U otherwise the latest snapshot won't be pulled.", 'questionId': '30571', 'answerId': '31782879'}
{'answer': 'Sometimes you don\'t want to use version ranges, because it seems that they are "slow" to resolve your dependencies, especially when there is continuous delivery in place and there are tons of versions - mainly during heavy development. One workaround would be to use the versions-maven-plugin. For example, you can declare a property: and add the versions-maven-plugin to your pom file: Then, in order to update the dependency, you have to execute the goals: If there is a version newer than 1.1.1, it will tell you:', 'questionId': '30571', 'answerId': '43852216'}
{'answer': "JAXB. The Java Architecture for XML Binding.  Basically you create an xsd defining your XML layout (I believe you could also use a DTD).  Then you pass the XSD to the JAXB compiler and the compiler creates Java classes to marshal and unmarshal your XML document into Java objects.  It's really simple. BTW, there are command line options to jaxb to specify the package name you want to place the resulting classes in, etc.", 'questionId': '30627', 'answerId': '30673'}
{'answer': "You've done a good job of explaining what you want to do but not why. There are several XML frameworks that simplify marshalling and unmarshalling Java objects to/from XML.  The simplest is Commons Digester which I typically use to parse configuration files. But if you are want to deal with Java objects then you should look at Castor, JiBX, JAXB, XMLBeans, XStream, or something similar. Castor or JiBX are my two favourites.", 'questionId': '30627', 'answerId': '30677'}
{'answer': 'I have tried the SAXParser once, but once I found XStream I never went back to it. With XStream you can create Java Objects and convert them to XML. Send them over and use XStream to recreate the object. Very easy to use, fast, and creates clean XML. Either way you have to know what data your going to receiver from the XML file. You can send them over in different ways to know which parser to use. Or have a data object that can hold everything but only one structure is populated (product/store/managers). Maybe something like: And with XStream convert to XML send over and then recreate the object. Then do what you want with it.', 'questionId': '30627', 'answerId': '30689'}
{'answer': "As I understand it, the problem is that you don't know what format the document is prior to parsing. You could use a delegate pattern. I'm assuming you're not validating against a DTD/XSD/etcetera and that it is OK for the DefaultHandler to have state.", 'questionId': '30627', 'answerId': '30697'}
{'answer': "See the documentation for XMLReader.setContentHandler(), it says: Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately. Thus, you should be able to create a SelectorContentHandler that consumes events until the first startElement event, based on that changes the ContentHandler on the XML reader, and passes the first start element event to the new content handler. You just have to pass the XMLReader to the SelectorContentHandler in the constructor. If you need all the events to be passes to the vocabulary specific content handler, SelectorContentHandler has to cache the events and then pass them, but in most cases this is not needed. On a side note, I've lately used XOM in almost all my projects to handle XML ja thus far performance hasn't been the issue.", 'questionId': '30627', 'answerId': '30896'}
{'answer': "If you want more dynamic handling, Stax approach would probably work better than Sax. That's quite low-level, still; if you want simpler approach, XStream and JAXB are my favorites. But they do require quite rigid objects to map to.", 'questionId': '30627', 'answerId': '423223'}
{'answer': "Agree with StaxMan, who interestingly enough wants you to use Stax.  It's a pull based parser instead of the push you are currently using.  This would require some significant changes to your code though.", 'questionId': '30627', 'answerId': '424424'}
{'answer': ':-) Yes, I have some bias towards Stax. But as I said, oftentimes data binding is more convenient than streaming solution. But if it\'s streaming you want, and don\'t need pipelining (of multiple filtering stages), Stax is simpler than SAX. One more thing: as good as XOM is (wrt alternatives), often Tree Model is not the right thing to use if  you are not dealing with "document-centric" xml  (~= xhtml pages, docbook, open office docs). For data interchange, config files etc data binding is more convenient, more efficient, more natural. Just say no to tree models like DOM for these use cases. So, JAXB, XStream, JibX are good. Or, for more acquired taste, digester, castor, xmlbeans.', 'questionId': '30627', 'answerId': '485082'}
{'answer': 'VTD-XML is known for being the best XML processing technology for heavy duty XML processing. See the reference below for a proof http://sdiwc.us/digitlib/journal_paper.php?paper=00000582.pdf', 'questionId': '30627', 'answerId': '36521605'}
{'answer': 'The literal answer is no - there is never anything "inherently wrong" with code, it\'s a matter of whether it meets the requirements - which may or may not include being maintainable, secure, robust or fast. The code you are running is actually a JET query purely within Access - the Java code is doing nothing except telling Access to run the query. On the one hand, if it ain\'t broke don\'t fix it. On the other hand, there\'s a good chance it will break in the near future so you could try fixing it in advance. The two likely reasons it might break are: SQL injection risk. Depending on where csvDirPath and csvFileName come from (e.g. csvFileName might come from the name of the file uploaded by a user?), and on how clever the Access JDBC driver is, you could be open to someone breaking or deleting your data by inserting a semicolon (or some brackets to make a subquery) and some additional SQL commands into the query. You are relying on the columns of the CSV file being compatible with the columns of the Access table. If you have unchecked CSV being uploaded, or if the CSV generator has a particular way of handling nulls, or if you one day get an unusual date or number format, you may get an error on inserting into the Access table. Having said all that, we are all about pragmatism here. If the above code is from a utility class which you are going to use by hand a few times a week/month/year/ever, then it isn\'t really a problem. If it is a class which forms part of a web application, then the \'official\' Java way to do it would be to read records out of the CSV file (either using a CSV parser or a CSV/text JDBC driver), get the columns out of the recordset, do some validation or sanity checking on them, and then use a new PreparedStatement to insert them into the Access database. Much more trouble but much more robust. You can probably find a combination of tools (e.g. object-relational layers or other data access tools) which will do a lot of that for you, but setting up the tools is going to be as much hassle as writing the code. Then again, you\'ll learn a lot from either one.', 'questionId': '30696', 'answerId': '30720'}
{'answer': 'One word of warning - jdbc -> Access queries (which bridge using odbc) do not work on 64 bit systems, as there exist no 64 bit Access database drivers (The driver is included into 32 bit copies of Windows and can only be accessed by 32 bit processes. You can run "odbcad32" or look at the ODBC control panel to see that the driver is present) While I don\'t see the code with the connection string in your code snippet, I am not aware of any noncommercial Access JDBC drivers for Java, only jdbc->odbc bridging and relying on Windows to have the Access (*.mdb) driver. Microsoft no longer supports this driver and has no plans to port it to 64bit, so infrastructure wise it is something to think about.', 'questionId': '30696', 'answerId': '31611'}
{'answer': "Question to Joshua McKinnon: Can you provide a citation about MS's plans to never introduce 64-bit ODBC drivers for Jet? This sounds reasonable, so I'm not doubting you at all, I would just like to know if you have a source for it that you can point to. Surely MS is providing access to Jet on 64-bit systems through OLEDB, though, right? That doesn't help with JDBC, but certainly provides a method to use Jet data (they have to provide something, since Jet 4 is part of the OS, as it is used as the data store for Active Directory, and has been used thus since Windows 2000).", 'questionId': '30696', 'answerId': '67681'}
{'answer': '@david.w.fenton.myopenid.com:  "Can you provide a citation about MS\'s plans to never introduce 64-bit ODBC drivers for Jet?" David, I found a post on Microsoft\'s Connect Feedback about that. http://connect.microsoft.com/SQLServer/feedback/ViewFeedback.aspx?FeedbackID=125117 "At the moment there are no plans to ship a 64-bit version of JET driver by Office team. We may considere alternate options and will update you when we have a concrete plan." Thanks, SSIS team.  Posted by Microsoft on 10/3/2007 at 9:47 PM There\'s been no update from Microsoft in that feedback thread.', 'questionId': '30696', 'answerId': '104028'}
{'answer': 'You can try something like: In your JAR file, you might have a directory structure of: MyJAR.jar   - com (class files in here)   - images   ----image.jpg', 'questionId': '31127', 'answerId': '31146'}
{'answer': 'To create an ImageIcon from an image file within the same jars your code is loaded: Class.getResource returns a URL of a resource (or null!). ImageIcon has a constructors that load from a URL. To construct a URL for a resource in a jar not on your "classpath", see the documentation for java.net.JarURLConnection.', 'questionId': '31127', 'answerId': '45580'}
{'answer': 'This is working for me to load and set the content pane background image: jar (or build path) contains: java contains: Tested and working in both jar and unjarred (is that the technical term) execution. BTW getClass().getClassLoader().getResourceAsStream("/img/bg.png") - which I tried first - returned me a null InputStream.', 'questionId': '31127', 'answerId': '15353743'}
{'answer': 'Load image in from Jar file during run time is the same as loading image when executed from IDE e.g netbeans the difference is that when loading image from JAR file the path must be correct and its case sensitive (very important). This works for me if p in "/Pictures/firstgame/habitat1.jpg" is in lower case it wont work. check spaces, cases and spelling', 'questionId': '31127', 'answerId': '34138083'}
{'answer': "In netbeans 8.1 what I've done is to include the folder of icons and other images called Resources inside the src folder in the project file. So whenever i build Jar file the folder is included there.The file tree should be like this: src (Java files in source packges are here) ** PACKAGE YOU NAMED IN PROJECT** file.java Resources image.jpg The code should be like:", 'questionId': '31127', 'answerId': '42084902'}
{'answer': 'Use EnclosingClass.this', 'questionId': '31201', 'answerId': '31216'}
{'answer': 'I just found this recently. Use OuterClassName.this. Updated If you just want the object itself (instead of invoking members), then Outer.this is the way to go.', 'questionId': '31201', 'answerId': '31218'}
{'answer': 'You can still use Outer.class to get the class of the outer class object (which will return the same Class object as Outer.this.getClass() but is more efficient) If you want to access statics in the enclosing class, you can use Outer.name where name is  the static field or method.', 'questionId': '31201', 'answerId': '73469'}
{'answer': 'You are correct, if you use BufferedReader for reading HTTP content and headers you will want InputStreamReader so you can read byte for byte.  BufferedReader in this scenario sometimes does weird things...escpecially when it comes to reading HTTP POST headers, sometimes you will be unable to read the POST data, if you use the InputStreamReader you can read the content length and read that many bytes...', 'questionId': '31380', 'answerId': '31392'}
{'answer': "My gut tells me that since you're already performing buffering by using the byte array, it's redundant to use the BufferedReader.", 'questionId': '31380', 'answerId': '31395'}
{'answer': "In this case, I would do as you are doing (use a byte array for buffering and not one of the stream buffers). There are exceptions, though. One place you see buffers (output this time) is in the servlet API. Data isn't written to the underlying stream until flush() is called, allowing you to buffer output but then dump the buffer if an error occurs and write an error page instead. You might buffer input if you needed to reset the stream for rereading using mark(int) and reset(). For example, maybe you'd inspect the file header before deciding on which content handler to pass the stream to. Unrelated, but I think you should rewrite your stream handling. This pattern works best to avoid resource leaks: If you are opening multiple streams, nest try/finally blocks. Another thing your code is doing is making the assumption that the returned content is encoded in your VM's default character set (though that might be adequate, depending on the use case).", 'questionId': '31380', 'answerId': '32509'}
{'answer': "Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream. To enable the efficient conversion of bytes to characters, more bytes may be read ahead from the underlying stream than are necessary to satisfy the current read operation.", 'questionId': '31380', 'answerId': '2087785'}
{'answer': "You're actually really close. This is what you're looking for:", 'questionId': '31394', 'answerId': '31401'}
{'answer': 'The commonly available system properties are documented in the System.getProperties() method.   As Chris said "user.name" is the property to get the user running your app.', 'questionId': '31394', 'answerId': '41463'}
{'answer': 'As mentioned above (and linked for Java 6), to get the current user: For Java 7:  System.getProperties() For Java 8:  System.getProperties()', 'questionId': '31394', 'answerId': '37172080'}
{'answer': "Depends on how sophisticated of an Http request you need to build (authentication, etc). Here's one simple way I've seen used in the past.  Probably plenty of typos here to be found when compiled. (hope this wasn't homework)", 'questionId': '31415', 'answerId': '31432'}
{'answer': "You may want to check the documentation for Apache's org.apache.commons.HttpClient package and the related packages here.  Sending an HTTP request from a Java application is pretty easy to do.  Poking through the documentation should get you off in the right direction.", 'questionId': '31415', 'answerId': '31464'}
{'answer': "I haven't tried this, but wouldn't the basic framework be Open a java.net.HttpURLConnection Get an input stream using getInputStream Use the regular expression in Mike's answer to parse out the bit you want", 'questionId': '31415', 'answerId': '31467'}
{'answer': 'Strictly speaking you can\'t really be sure you got the right value, since the meta tag may be commented out, or the meta tag may be in uppercase etc. It depends on how certain you are that the HTML can be considered as "nice".', 'questionId': '31415', 'answerId': '101117'}
{'answer': 'You should be using XPath query. It\'ls as simple as getting value of "/html/head/meta[@name=generator]/@value". a good tutorial: Parsing an XML Document with XPath', 'questionId': '31415', 'answerId': '137216'}
{'answer': 'It depends. If you are extracting information from a site or sites that are guaranteed to be well-formed HTML, and you know that the <meta> won\'t be obfuscated in some way then a reading the <head> section line by line and applying a regex is a good approach. On the other hand, if the HTML may be mangled or "tricky" then you need to use a proper HTML parser, possibly a permissive one like HTMLTidy.  Beware of using a strict HTML or XML parser on stuff trawled from random websites.  Lots of so-called HTML you find out there is actually malformed.', 'questionId': '31415', 'answerId': '1778256'}
{'answer': 'Its amazing how noone, when adressing the problem of using RegEx with HTML, confronts the problem of HTML often NOT being well-formed, thus rendering a lot of HTML-parsers completely useless. If you are developing tools to analyze webpages and its a fact that these are not well-formed HTML, the statement "Regex should never be used to parse HTML" og "use a HTML parser" is just completely bogus. Facts are that in the real world, people create HTML as they feel like - and not necessarily suited for parsers. RegEx is a completely valid way to find elements in text, thus in HTML. If there are any other reasonable way to confront the problems the Original Poster has, then post them instead of refering to a "use a parser" or "RTFM" statement.', 'questionId': '31415', 'answerId': '4465801'}
{'answer': 'As far as I know, the only direct ways to do it are: Commit the txn - Probably not a reasonable option Clear the Persistence Context - EntityManager.clear() - This is brutal, but would clear it out Copy the object - Most of the time your JPA objects are serializable, so this should be easy (if not particularly efficient).', 'questionId': '31446', 'answerId': '31489'}
{'answer': "If there aren't too many properties in the bean, you might just create a new instance and set all of its properties manually from the persisted bean. This could be implemented as a copy constructor, for example: Then:", 'questionId': '31446', 'answerId': '31553'}
{'answer': "Unfortunately, there's no way to disconnect one object from the entity manager in the current JPA implementation, AFAIR. EntityManager.clear() will disconnect all the JPA objects, so that might not be an appropriate solution in all the cases, if you have other objects you do plan to keep connected. So your best bet would be to clone the objects and pass the clones to the code that changes the objects. Since primitive and immutable object fields are taken care of by the default cloning mechanism in a proper way, you won't have to write a lot of plumbing code (apart from deep cloning any aggregated structures you might have).", 'questionId': '31446', 'answerId': '33041'}
{'answer': "(may be too late to answer, but can be useful for others) I'm developing my first system with JPA right now. Infortunately I'm faced with this problem when this system is almost complete. Simply put. Use Hibernate, or wait for JPA 2.0. In Hibernate, you can use 'session.evict(object)' to remove one object from session. In JPA 2.0, in draft right now, there is the 'EntityManager.detach(object)' method to detach one object from persistence context.", 'questionId': '31446', 'answerId': '898013'}
{'answer': 'Mauricio Kanada, thanks to you for this advice, method evict() works nice. I use JPA from SEAM, there is built in support of JPA Entity Manager, and it is possible to access hibernate delegate Session and thus this method "evict". Many thanks, Zmicer', 'questionId': '31446', 'answerId': '1201524'}
{'answer': 'this is quick and dirty, but you can also serialize and deserialize the object.', 'questionId': '31446', 'answerId': '1605647'}
{'answer': 'I think you can also use method EntityManager.refresh(Object o) if primary key of the entity has not been changed. This method will restore original state of the entity.', 'questionId': '31446', 'answerId': '1808454'}
{'answer': 'If you need to detach an object from the EntityManager and you are using Hibernate as your underlying ORM layer you can get access to the Hibernate Session object and use the Session.evict(Object) method that Mauricio Kanada mentioned above. Of course this would break if you switched to another ORM provider but I think this is preferably to trying to make a deep copy.', 'questionId': '31446', 'answerId': '2049477'}
{'answer': 'Since I am using SEAM and JPA 1.0 and my system has a fuctinality that needs to log all fields changes, i have created an value object or data transfer object if same fields of the entity that needs to be logged. The constructor of the new pojo is:', 'questionId': '31446', 'answerId': '5491768'}
{'answer': 'If using EclipseLink you also have the options, Use the Query hint, eclipselink.maintain-cache"="false - all returned objects will be detached. Use the EclipseLink JpaEntityManager copy() API to copy the object to the desired depth.', 'questionId': '31446', 'answerId': '5500466'}
{'answer': 'If you get here because you actually want to pass an entity across a remote boundary then you just put some code in to fool the hibernazi. Cloneable wont work because it actually copies the PersistantBag across.  And forget about using serializable and bytearray streams and piped streams. creating threads to avoid deadlocks kills the entire concept.', 'questionId': '31446', 'answerId': '6149959'}
{'answer': "No matter which JPA implementation you use, Just use entityManager.detach(object) it's now in JPA 2.0 and part of JEE6.", 'questionId': '31446', 'answerId': '12139908'}
{'answer': 'In JPA 1.0 (tested using EclipseLink) you could retrieve the entity outside of a transaction. For example, with container managed transactions you could do:', 'questionId': '31446', 'answerId': '16928294'}
{'answer': 'Do deal with a similar case I have created a DTO object that extends the persistent entity object as follows: Finally, an scalar query will retrieve the desired non managed attributes:', 'questionId': '31446', 'answerId': '25649132'}
{'answer': "I'm currently using this: But not sure if there's a better way.", 'questionId': '31462', 'answerId': '31463'}
{'answer': "I just left this post in your other thread, though what you have above might work as well.  I don't think either would be any easier than the other.  The Apache packages can be accessed by just using import org.apache.commons.HttpClient at the top of your code. Edit: Forgot the link ;)", 'questionId': '31462', 'answerId': '31471'}
{'answer': 'This has worked well for me: Not sure at to whether the other solution(s) provided are any more efficient or not.', 'questionId': '31462', 'answerId': '33986'}
{'answer': "Whilst not vanilla-Java, I'll offer up a simpler solution. Use Groovy ;-)", 'questionId': '31462', 'answerId': '15219927'}
{'answer': "I wouldn't do it myself, because to me it muddies what a particular method does, and the method-chaining is of limited use to me over doing it longhand. It isn't going to send me into a quivering ball of rage and psychosis, though, which is always a good thing. :') I wouldn't be concerned about performance; just ask Knuth.", 'questionId': '31584', 'answerId': '31589'}
{'answer': "This is called a Fluent Interface, for reference. Personally, I think it's a pretty neat idea, but a matter of taste really. I think jQuery works this way.", 'questionId': '31584', 'answerId': '31604'}
{'answer': 'I agree with @Bernard that method chaining like this muddles the purpose of the setters. Instead I would suggest that if you are always creating chains of setters like this that you create a custom Constructor for your class so instead of You do This makes it more readable and you can use this to make your class immutable if you chose to.', 'questionId': '31584', 'answerId': '31606'}
{'answer': 'This idea is seen a lot in c++, it allows operations to be cascaded... for example is where the stream method << returns an instance of itself (*this). see this: http://www.java2s.com/Tutorial/Cpp/0180__Class/Cascadingmemberfunctioncallswiththethispointer.htm', 'questionId': '31584', 'answerId': '31614'}
{'answer': 'I find this to be in poor style when used in setters. Immutable classes are usually a better fit for chaining, such as: where myObject is of this class: The builder pattern is also useful, since it allows the final object to be immutable while preventing the intermediate instances you would normally have to create when using this technique.', 'questionId': '31584', 'answerId': '31621'}
{'answer': "I use to be a fan of the Java (and worse C#) practice of making getters and setters (get set properties) throughout an object.  This use to be what I considered object oriented, but really this leads us just to exposing the guts and implementation of the object and not really taking advantage of encapsulation.  There are times you can't get away from this (OR/M comes to mind), but in general the object should be set up and then perform its function.  My dream objects tend to have one or two constructors, and maybe a half dozen functions that do work. The reason for this is that once I started developing API's there is a real need to keep things simple.  You really only want to add as much complexity as is required to get the job done, and getters and setters, while simple in themselves, add complexity in heaps when added in mass.  What happens when I load setters i na different order?  Anythign different? Are you sure?", 'questionId': '31584', 'answerId': '31625'}
{'answer': '@Dan again, for more complex situations (immutability comes in mind) the Builder Pattern is a great solution. Also, I agree with you mostly in getters. I believe what you are saying is to mostly follow the "Tell don\'t ask" paradigm and I greatly agree. But that is oriented mostly at getters. Lastly, all of the above are for classes that have a great deal of attributes. I don\'t see a reason for any if you only have less than, say, 7.', 'questionId': '31584', 'answerId': '31639'}
{'answer': "@pek Chained invocation is one of proposals for Java 7. It says that if a method return type is void, it should implicitly return this. If you're interested in this topic, there is a bunch of links and a simple example on Alex Miller's Java 7 page.", 'questionId': '31584', 'answerId': '37005'}
{'answer': 'I ended up doing this a lot when working with the Apache POI excel library; I ended up writing helper methods that chained so I could apply formatting, data types, internal cell data, formulas, and cell positioning. For stuff with lots of little tiny flyweight elements that need to have finicky little tweaks applied it works pretty well.', 'questionId': '31584', 'answerId': '39948'}
{'answer': 'It makes sense for builders, where all you are going to do is set a load of stuff, create the real object and throw the builder away. For builders, you might as well get rid of the "set" part of the method name. Similarly, immutable types don\'t really need the "get". A useful trick (if you don\'t mind a ~2K runtime overhead per class) is to use the double brace idiom:', 'questionId': '31584', 'answerId': '46858'}
{'answer': 'How To Use', 'questionId': '31584', 'answerId': '3741052'}
{'answer': 'Wikipedia has great write-ups comparing both Java/C# generics and Java generics/C++ templates. The main article on Generics seems a bit cluttered but it does have some good info in it.', 'questionId': '31693', 'answerId': '31696'}
{'answer': 'Anders Hejlsberg himself described the differences here "Generics in C#, Java, and C++".', 'questionId': '31693', 'answerId': '31697'}
{'answer': "The biggest complaint is type erasure.  In that, generics are not enforced at runtime.  Here's a link to some Sun docs on the subject. Generics are implemented by type   erasure: generic type information is   present only at compile time, after   which it is erased by the compiler.", 'questionId': '31693', 'answerId': '31698'}
{'answer': 'C++ templates are actually much more powerful than their C# and Java counterparts as they are evaluated at compile time and support specialization. This allows for Template Meta-Programming and makes the C++ compiler equivalent to a Turing machine (i.e. during the compilation process you can compute anything that is computable with a Turing machine).', 'questionId': '31693', 'answerId': '31721'}
{'answer': "C++ rarely uses the generics terminology. Instead, the word templates is used and is more accurate. Templates describes one technique to achieve a generic design. C++ templates is very different from what both C# and Java implement for two main reasons. The first reason is that C++ templates don't only allow compile-time type arguments but also compile-time const-value arguments: templates can be given as integers or even function signatures. This means that you can do some quite funky stuff at compile time, e.g. calculations: This code also uses the other distinguished feature of C++ templates, namely template specialization. The code defines one class template, product that has one value argument. It also defines a specialization for that template that is used whenever the argument evaluates to 1. This allows me to define a recursion over template definitions. I believe that this was first discovered by Andrei Alexandrescu. Template specialization is important for C++ because it allows for structural differences in data structures. Templates as a whole is a means of unifying an interface across types. However, although this is desirable, all types cannot be treated equally inside the implementation. C++ templates takes this into account. This is very much the same difference that OOP makes between interface and implementation with the overriding of virtual methods. C++ templates are essential for its algorithmic programming paradigm. For example, almost all algorithms for containers are defined as functions that accept the container type as a template type and treat them uniformly. Actually, that's not quite right: C++ doesn't work on containers but rather on ranges that are defined by two iterators, pointing to the beginning and behind the end of the container. Thus, the whole content is circumscribed by the iterators: begin <= elements < end. Using iterators instead of containers is useful because it allows to operate on parts of a container instead of on the whole. Another distinguishing feature of C++ is the possibility of partial specialization for class templates. This is somewhat related to pattern matching on arguments in Haskell and other functional languages. For example, let's consider a class that stores elements: This works for any element type. But let's say that we can store pointers more effciently than other types by applying some special trick. We can do this by partially specializing for all pointer types: Now, whenever we instance a container template for one type, the appropriate definition is used:", 'questionId': '31693', 'answerId': '31758'}
{'answer': "In Java, generics are compiler level only, so you get: Note that the type of 'a' is an array list, not a list of strings. So the type of a list of bananas would equal() a list of monkeys. So to speak.", 'questionId': '31693', 'answerId': '31778'}
{'answer': "Follow-up to my previous posting. Templates are one of the main reasons why C++ fails so abysmally at intellisense, regardless of the IDE used. Because of template specialization, the IDE can never be really sure if a given member exists or not. Consider: Now, the cursor is at the indicated position and it's damn hard for the IDE to say at that point if, and what, members a has. For other languages the parsing would be straightforward but for C++, quite a bit of evaluation is needed beforehand. It gets worse. What if my_int_type were defined inside a class template as well? Now its type would depend on another type argument. And here, even compilers fail. After a bit of thinking, a programmer would conclude that this code is the same as the above: Y<int>::my_type resolves to int, therefore b should be the same type as a, right? Wrong. At the point where the compiler tries to resolve this statement, it doesn't actually know Y<int>::my_type yet! Therefore, it doesn't know that this is a type. It could be something else, e.g. a member function or a field. This might give rise to ambiguities (though not in the present case), therefore the compiler fails. We have to tell it explicitly that we refer to a type name: Now, the code compiles. To see how ambiguities arise from this situation, consider the following code: This code statement is perfectly valid and tells C++ to execute the function call to Y<int>::my_type. However, if my_type is not a function but rather a type, this statement would still be valid and perform a special cast (the function-style cast) which is often a constructor invocation. The compiler can't tell which we mean so we have to disambiguate here.", 'questionId': '31693', 'answerId': '31821'}
{'answer': "Both Java and C# introduced generics after their first language release.  However, there are differences in how the core libraries changed when generics was introduced.  C#'s generics are not just compiler magic and so it was not possible to generify existing library classes without breaking backwards compatibility. For example, in Java the existing Collections Framework was completely genericised.  Java does not have both a generic and legacy non-generic version of the collections classes.  In some ways this is much cleaner - if you need to use a collection in C# there is really very little reason to go with the non-generic version, but those legacy classes remain in place, cluttering up the landscape.  Another notable difference is the Enum classes in Java and C#.  Java's Enum has this somewhat tortuous looking definition: (see Angelika Langer's very clear explanation of exactly why this is so.  Essentially, this means Java can give type safe access from a string to its Enum value: Compare this to C#'s version: As Enum already existed in C# before generics was introduced to the language, the definition could not change without breaking existing code.  So, like collections, it remains in the core libraries in this legacy state.", 'questionId': '31693', 'answerId': '31866'}
{'answer': 'I\'ll add my voice to the noise and take a stab at making things clear: C# Generics allow you to declare something like this. and then the compiler will prevent you from putting things that aren\'t Person into the list. Behind the scenes the C# compiler is just putting List<Person> into the .NET dll file, but at runtime the JIT compiler  goes and builds a new set of code, as if you had written a special list class just for containing people - something like ListOfPerson. The benefit of this is that it makes it really fast. There\'s no casting or any other stuff, and because the dll contains the information that this is a List of Person, other code that looks at it later on using reflection can tell that it contains Person objects (so you get intellisense and so on). The downside of this is that old C# 1.0 and 1.1 code (before they added generics) doesn\'t understand these new List<something>, so you have to manually convert things back to plain old List to interoperate with them. This is not that big of a problem, because C# 2.0 binary code is not backwards compatible. The only time this will ever happen is if you\'re upgrading some old C# 1.0/1.1 code to C# 2.0 Java Generics allow you to declare something like this. On the surface it looks the same, and it sort-of is. The compiler will also prevent you from putting things that aren\'t Person into the list. The difference is what happens behind the scenes. Unlike C#, Java does not go and build a special ListOfPerson - it just uses the plain old ArrayList which has always been in Java. When you get things out of the array, the usual Person p = (Person)foo.get(1); casting-dance still has to be done. The compiler is saving you the key-presses, but the speed hit/casting is still incurred just like it always was. When people mention "Type Erasure" this is what they\'re talking about. The compiler inserts the casts for you, and then \'erases\' the fact that it\'s meant to be a list of Person not just Object The benefit of this approach is that old code which doesn\'t understand generics doesn\'t have to care. It\'s still dealing with the same old ArrayList as it always has. This is more important in the java world because they wanted to support compiling code using Java 5 with generics, and having it run on old 1.4 or previous JVM\'s, which microsoft deliberately decided not to bother with. The downside is the speed hit I mentioned previously, and also because there is no ListOfPerson pseudo-class or anything like that going into the .class files, code that looks at it later on (with reflection, or if you pull it out of another collection where it\'s been converted into Object or so on) can\'t tell in any way that it\'s meant to be a list containing only Person and not just any other array list. C++ Templates allow you to declare something like this It looks like C# and Java generics, and it will do what you think it should do, but behind the scenes different things are happening. It has the most in common with C# generics in that it builds special pseudo-classes rather than just throwing the type information away like java does, but it\'s a whole different kettle of fish. Both C# and Java produce output which is designed for virtual machines. If you write some code which has a Person class in it, in both cases some information about a Person class will go into the .dll or .class file, and the JVM/CLR will do stuff with this. C++ produces raw x86 binary code. Everything is not an object, and there\'s no underlying virtual machine which needs to know about a Person class. There\'s no boxing or unboxing, and functions don\'t have to belong to classes, or indeed anything.  Because of this, the C++ compiler places no restrictions on what you can do with templates - basically any code you could write manually, you can get templates to write for you. The most obvious example is adding things: In C# and Java, the generics system needs to know what methods are available for a class, and it needs to pass this down to the virtual machine. The only way to tell it this is by either hard-coding the actual class in, or using interfaces. For example: That code won\'t compile in C# or Java, because it doesn\'t know that the type T actually provides a method called Name(). You have to tell it - in C# like this: And then you have to make sure the things you pass to addNames implement the IHasName interface and so on. The java syntax is different (<T extends IHasName>), but it suffers from the same problems. The \'classic\' case for this problem is trying to write a function which does this You can\'t actually write this code because there are no ways to declare an interface with the + method in it. You fail. C++ suffers from none of these problems. The compiler doesn\'t care about passing types down to any VM\'s - if both your objects have a .Name() function, it will compile. If they don\'t, it won\'t. Simple. So, there you have it :-)', 'questionId': '31693', 'answerId': '31929'}
{'answer': 'There are already a lot of good answers on what the differences are, so let me give a slightly different perspective and add the why. As was already explained, the main difference is type erasure, i.e. the fact that the Java compiler erases the generic types and they don\'t end up in the generated bytecode. However, the question is: why would anyone do that? It doesn\'t make sense! Or does it? Well, what\'s the alternative? If you don\'t implement generics in the language, where do you implement them? And the answer is: in the Virtual Machine. Which breaks backwards compatibility. Type erasure, on the other hand, allows you to mix generic clients with non-generic libraries. In other words: code that was compiled on Java 5 can still be deployed to Java 1.4. Microsoft, however, decided to break backwards compatibility for generics. That\'s why .NET Generics are "better" than Java Generics. Of course, Sun aren\'t idiots or cowards. The reason why they "chickened out", was that Java was significantly older and more widespread than .NET when they introduced generics. (They were introduced roughly at the same time in both worlds.) Breaking backwards compatibility would have been a huge pain. Put yet another way: in Java, Generics are a part of the Language (which means they apply only to Java, not to other languages), in .NET they are part of the Virtual Machine (which means they apply to all languages, not just C# and Visual Basic.NET). Compare this with .NET features like LINQ, lambda expressions, local variable type inference, anonymous types and expression trees: these are all language features. That\'s why there are subtle differences between VB.NET and C#: if those features were part of the VM, they would be the same in all languages. But the CLR hasn\'t changed: it\'s still the same in .NET 3.5 SP1 as it was in .NET 2.0. You can compile a C# program that uses LINQ with the .NET 3.5 compiler and still run it on .NET 2.0, provided that you don\'t use any .NET 3.5 libraries. That would not work with generics and .NET 1.1, but it would work with Java and Java 1.4.', 'questionId': '31693', 'answerId': '33729'}
{'answer': "Looks like, among other very interesting proposals, there is one about refining generics and breaking backwards compatibility: Currently, generics are implemented   using erasure, which means that the   generic type information is not   available at runtime, which makes some   kind of code hard to write. Generics   were implemented this way to support   backwards compatibility with older   non-generic code. Reified generics   would make the generic type   information available at runtime,   which would break legacy non-generic   code. However, Neal Gafter has   proposed making types reifiable only   if specified, so as to not break   backward compatibility. at Alex Miller's article about Java 7 Proposals", 'questionId': '31693', 'answerId': '38286'}
{'answer': "11 months late, but I think this question is ready for some Java Wildcard stuff. This is a syntactical feature of Java. Suppose you have a method: And suppose you don't need to refer to the type T in the method body. You're declaring a name T and then only using it once, so why should you have to think of a name for it? Instead, you can write: The question-mark asks the the compiler to pretend that you declared a normal named type parameter that only needs to appear once in that spot. There's nothing you can do with wildcards that you can't also do with a named type parameter (which is how these things are always done in C++ and C#).", 'questionId': '31693', 'answerId': '1109644'}
{'answer': "NB: I don't have enough point to comment, so feel free to move this as a comment to appropriate answer. Contrary to popular believe, which I never understand where it came from, .net implemented true generics without breaking backward compatibility, and they spent explicit effort for that. You don't have to change your non-generic .net 1.0 code into generics just to be used in .net 2.0. Both the generic and non-generic lists are still available in .Net framework 2.0 even until 4.0, exactly for nothing else but backward compatibility reason. Therefore old codes that still used non-generic ArrayList will still work, and use the same ArrayList class as before. Backward code compatibility is always maintained since 1.0 till now... So even in .net 4.0, you still have to option to use any non-generics class from 1.0 BCL if you choose to do so. So I don't think java has to break backward compatibility to support true generics.", 'questionId': '31693', 'answerId': '3398108'}
{'answer': 'I\'d say you\'re probably fine with util.logging for the needs you describe. For a good decision tree, have a look at Log4j vs java.util.logging Question One :   Do you anticipate a need for any of the clever handlers that Log4j has that JUL does not have, such as the SMTPHandler, NTEventLogHandler, or any of the very convenient FileHandlers? Question Two :   Do you see yourself wanting to frequently switch the format of your logging output? Will you need an easy, flexible way to do so? In other words, do you need Log4j\'s PatternLayout? Question Three :   Do you anticipate a definite need for the ability to change complex logging configurations in your applications, after they are compiled and deployed in a production environment? Does your configuration sound something like, "Severe messages from this class get sent via e-mail to the support guy; severe messages from a subset of classes get logged to a syslog deamon on our server; warning messages from another subset of classes get logged to a file on network drive A; and then all messages from everywhere get logged to a file on network drive B"? And do you see yourself tweaking it every couple of days? If you can answer yes to any of the above questions, go with Log4j. If you answer a definite no to all of them, JUL will be more than adequate and it\'s conveniently already included in the SDK. That said, pretty much every project these days seems to wind up including log4j, if only because some other library uses it.', 'questionId': '31840', 'answerId': '31852'}
{'answer': 'I would go with log4j. The possibilites with log4j is not obsolete at all!', 'questionId': '31840', 'answerId': '31861'}
{'answer': 'I recommend using Apache Commmons Logging as your logging interface. That way you have the flexibility to switch logging implementations anytime you want without requiring any code changes on your end.', 'questionId': '31840', 'answerId': '31914'}
{'answer': 'I recommend that you use the Simple Logging Facade for Java (SLF4J). It supports different providers that include Log4J and can be used as a replacement for Apache Commons Logging.', 'questionId': '31840', 'answerId': '32015'}
{'answer': "Log4j has been around for a long time, and it works very well.  I have no scientific study to back it, but based on what I've seen at a large number of clients, it is easily the logging framework that I see used more than any other.  It has been around for a long time, and not been replaced by the Next Big Logging Framework, which says something.   It is dead simple to set up, and easy to learn the basic appenders (outputs).  There are a whole host appenders that are available, including: ConsoleAppender DailyRollingFileAppender ExternallyRolledFileAppender  FileAppender JDBCAppender JMSAppender NTEventLogAppender RollingFileAppender SMTPAppender SocketAppender SyslogAppender TelnetAppender WriterAppender Plus others.  It isn't difficult to write your own appender either.  Additionally there is a great deal of flexibility in each of the appenders that allow you to control specifically what is output in your log. One note, I had a series of classloader problems when I used apache commons logging in addition to log4j.  It was only for one specific application, but I found it simpler to use log4j alone, rather than to have the flexibility offered when using an abstraction layer like commons logging.     See this article for more details: Good luck!", 'questionId': '31840', 'answerId': '36482'}
{'answer': "log4j is a much nicer package overall, and doesn't have some of the hiccups that java.util.logging contains.  I'd second that using log4j directly is easier than using the commons logging.", 'questionId': '31840', 'answerId': '51201'}
{'answer': 'java.util.logging offers a comprehensive logging package without the excess baggage some of the others provide..', 'questionId': '31840', 'answerId': '370981'}
{'answer': 'Some tips: Understand the JSF request lifecycle and where your various pieces of code fit in it. Especially find out why your model values will not be updated if there are validation errors. Choose a tag library and then stick with it. Take your time to determine your needs and prototype different libraries. Mixing different taglibs may cause severe harm to your mental health.', 'questionId': '31924', 'answerId': '31960'}
{'answer': "Consider using facelets- it greatly simplifies the worst parts of JSF development. I'm doing a CMS-based JSF project now without facelets (after doing a project with it) and it feels like my left arm is missing....", 'questionId': '31924', 'answerId': '43562'}
{'answer': 'I would strongly recommend getting someone experienced in JSF to lead your first project in JSF even if this means paying a contractor for 3 months. The JSF approach is very different to JSP. The way you approach and solve problems is very different.  Libraries  Consider the following libraries: Tomahawk RichFaces Shale Trinidad Spring Architecture Embrace MVC you need not only to know what this means but use it extensively. There are two main patterns for associating controllers with the views Dot Net Style, One Request controller per view Every top level page has a request scoped controller (bean) all validation and actions of the page use this class. Also used for filtering and ordering the Model. The Model will be stored on a few session level controllers which will handle talking to the back-end (EJBs, or persistence layer) these session controllers should be implementing the business logic and have no knowledge of JSF,HTML or any presentation technology. Controllers are session level Design controllers based on your data model, nest them with in each other. (This post is getting too long so I wont go into the nuts and bolts of these). Knowledge Required Everyone: Life Cycle MDC Component based development Tags in h: and f:  At Least One Person: Creating Custom Components Limitations to JSF (back button, random navigation, etc)  Debug 3rd party libraries (At least one person has to be comfortable breaking out the debugger and stepping into the implementation of JSF (easiest with open source implementations like MyFaces))', 'questionId': '31924', 'answerId': '72508'}
{'answer': "I have been using the IBM implementation of JSf and have some comments. It is not a bad way to go but you have to commit to the IBM 'way-of-life'. They have written their own tag lib which extends the JSF standard. If you can manage to stay inside of Rational Application Developer (RAD) (which does not get updated THAT often), the integration is sometimes buggy but overall decent. Also the integration with WebSphere is pretty good. Unless your employer plays golf with IBM, I think it is better to stay as vanilla as possible.", 'questionId': '31924', 'answerId': '143110'}
{'answer': 'I am not yet aware of a "Best Practice" for cross field / form level validation. That is, JSF validation is currently orientated to single field validation. IMO it gets ugly when you look at complex cross field / form level validation. Old but still looks acurate to me http://weblogs.java.net/blog/johnreynolds/archive/2004/07/improve_jsf_by_1.html http://www.jroller.com/robwilliams/entry/jsf_multi_field_validation_not', 'questionId': '31924', 'answerId': '341990'}
{'answer': ' Add my vote for facelets. I\'ve recently upgraded a project to use facelets, and it solves some big issues with jsf, specially giving you a decent template system right out of the box and letting you use standard html when it is appropriate, without wrapping it in "verbatim"-tags. RestFaces is a solution to the get/post problem that many people complain about. It\'s also well documented and easy to use. Don\'t use to many taglibs. It makes the job a lot harder when upgrading. SEAM collects many of the JSF best practices, but I haven\'t used it yet, so I can\'t really recommend it, just recommend you to take a look at it.', 'questionId': '31924', 'answerId': '358918'}
{'answer': 'Select a good component library .Do not use richfaces ,  i suggest you dont use jsf , use spring mvc,jquery fro view  and  json in a  rest architecture.  but if you have to ,use primefaces it easy to use and has enough components.', 'questionId': '31924', 'answerId': '7666298'}
{'answer': 'You could check it the following link in where you could find interesting articles http://www.jsftutorials.net/', 'questionId': '31924', 'answerId': '8808345'}
{'answer': 'Do you need to schedule a recurring task? In that case I recommend you consider using Quartz.', 'questionId': '32001', 'answerId': '32008'}
{'answer': "I don't think it's possible to do it with Timer/TimerTask, but depending on what exactly you want to achieve you might be happy with using java.util.concurrent.ScheduledThreadPoolExecutor.", 'questionId': '32001', 'answerId': '32047'}
{'answer': "According to the Timer documentation, in Java 1.5 onwards, you should prefer the ScheduledThreadPoolExecutor instead. (You may like to create this executor using Executors.newSingleThreadScheduledExecutor() for ease of use; it creates something much like a Timer.) The cool thing is, when you schedule a task (by calling schedule()), it returns a ScheduledFuture object. You can use this to cancel the scheduled task. You're then free to submit a new task with a different triggering time. ETA: The Timer documentation linked to doesn't say anything about ScheduledThreadPoolExecutor, however the OpenJDK version had this to say: Java 5.0 introduced the java.util.concurrent package and   one of the concurrency utilities therein is the    ScheduledThreadPoolExecutor which is a thread pool for repeatedly   executing tasks at a given rate or delay.  It is effectively a more   versatile replacement for the Timer/TimerTask   combination, as it allows multiple service threads, accepts various   time units, and doesn't require subclassing TimerTask (just   implement Runnable).  Configuring   ScheduledThreadPoolExecutor with one thread makes it equivalent to   Timer.", 'questionId': '32001', 'answerId': '32057'}
{'answer': 'If your Timer is only ever going to have one task to execute then I would suggest subclassing it: You will need to work on the code to add checks for mis-use, but it  should achieve what you want. The ScheduledThreadPoolExecutor does not seem to have built in support for rescheduling existing tasks either, but a similar approach should work there as well.', 'questionId': '32001', 'answerId': '32073'}
{'answer': "this is what I'm trying out.  I have a class that polls a database every 60 seconds using a TimerTask. in my main class, I keep the instance of the Timer, and an instance of my local subclass of TimerTask.  the main class has a method to set the polling interval (say going from 60 to 30).  in it, i cancel my TimerTask (which is my subclass, where I overwrote the cancel() method to do some cleanup, but that shouldn't matter) and then make it null.  i recreate a new instance of it, and schedule the new instance at the new interval in the existing Timer. since the Timer itself isn't canceled, the thread it was using stays active (and so would any other TimerTasks inside it), and the old TimerTask is replaced with a new one, which happens to be the same, but VIRGIN (since the old one would have been executed or scheduled, it is no longer VIRGIN, as required for scheduling). when i want to shutdown the entire timer, i cancel and null the TimerTask (same as i did when changing the timing, again, for cleaning up resources in my subclass of TimerTask), and then i cancel and null the Timer itself.", 'questionId': '32001', 'answerId': '756285'}
{'answer': 'The whole Code snippet goes like this .... I hope it will be help full', 'questionId': '32001', 'answerId': '13583445'}
{'answer': 'Here is the example for Resetable Timer . Try to change it for your convinence... This example prints the current date and time for every 5 seconds...But if you give any input in console the timer will be delayed to perform the given input task...', 'questionId': '32001', 'answerId': '13720407'}
{'answer': 'Use Java Preprocessor?  (google foo low but this is a link to the old Joel forums discussing it)', 'questionId': '32041', 'answerId': '32046'}
{'answer': ' The compiler will remove the code block with "Hello, logging world." in it if ENABLE_LOGGING is set to true because it\'s a static final value. If you use an obfuscator such as proguard, then the Config class will vanish too. An obfuscator would also allow things like this instead: The method Log#log would reduce to nothing in the compiler, and be removed by the obfuscator, along with any calls to that method and eventually even the Log class would itself be removed.', 'questionId': '32041', 'answerId': '32067'}
{'answer': "Java contains some sort of preprocessor of its own. It's called APT. It processes and generates code. At the moment I'm not sure how this should work (I haven't tried it). But it seems to be used for these kind of things.", 'questionId': '32041', 'answerId': '32077'}
{'answer': 'To directly answer your question: I don\'t know. But here is another solution to your problem: In my mind, there are two statements that collide with each other here: "debug statements" and "production code".  What is the purpose of debug statements? Help to get rid of bugs while (unit) testing. If a piece of software is properly tested and works according to the requirements, debug statements are nothing else but OBSOLETE. I strongly disagree with leaving any debug statements in production code. I bet nobody bothers testing side-effects of debug code in production code. The code probably does what it\'s supposed to do, but does it do more than that? Do all your #defines work correctly and really take ALL of the debug code out? Who analyzes 100000 lines of pre-processed code to see if all the debug stuff is gone? Unless we have a different definition of production code, you should consider taking out the debug statements after the code is tested and be done with it.', 'questionId': '32041', 'answerId': '32091'}
{'answer': "Two recommendations. First: for real logging, use a modern logging package like log4j or java's own built in logging. Don't worry about performance so much, the logging level check is on the order of nanoseconds. (it's an integer comparison). And if you have more than a single log statement, guard the whole block: (log4j, for example:) This gives you the added ability control logging at runtime. Having to restart and run a debug build can be very inconvenient. Second: You may find assertions are more what you need. An assertion is a statement which evaluates to a boolean result, with an optional message: Whenever the assertion results in a false, the assertion fails and an AssertionError is thrown containing your message (this is an unchecked exception, intended to exit the application).  The neat thing is, these are treated special by the JVM and can toggled at runtime down to the class level, using a VM parameter (no recompile needed). If not enabled, there is zero overhead.", 'questionId': '32041', 'answerId': '32122'}
{'answer': 'I would also highly recommend using a logging framework. The logger.IsDebugEnabled() is not mandatory, it is just that it can be faster to check whether the system is in the debug level before logging. Using a logging framework means you can configure logging levels on the fly without restarting the application. You could have logging like:', 'questionId': '32041', 'answerId': '32342'}
{'answer': "Another possibility is to put the if statement within your logging function, you get less code this way, but at the expense of some extra function calls. I'm also not a big fan of completely removing the debug code. Once you're in production, you'll probably need access to debug messages if something goes wrong. If you remove all of your code level debugging, than this isn't a possibility.", 'questionId': '32041', 'answerId': '32484'}
{'answer': 'This "trick" seems to make your debug statements vanished The post said that javac is smart enough to check the static final boolean and exclude the debug statements. (I did not personally try it) For logging, I personally donot like to see code like: The logging things distracts me from the realImportantWork(). The right way for me is: plus the config which excludes all debug messages on Production. I mean that the logger.isDebugEnabled() control should be the job of the logging framework, not my job. Most logging framework support concepts like "logger", "LogLevel".. which can do the trick.', 'questionId': '32041', 'answerId': '23541646'}
{'answer': "I generally prefer not doing either, since it's just slowing things down. NullPointerExceptions are thrown later on anyway, which will quickly lead the user to discovering they're passing null to the method. I used to check, but 40% of my code ended up being checking code, at which point I decided it was just not worth the nice assertion messages.", 'questionId': '32280', 'answerId': '32295'}
{'answer': " It doesn't really go into how you would enforce this restriction? You enforce it by throwing an ArgumentExcexception if they pass in null.", 'questionId': '32280', 'answerId': '32304'}
{'answer': "I agree or disagree with wvdschel's post, it depends on what he's specifically saying. In this case, sure, this method will crash on null so the explicit check here is probably not needed. However, if the method simply stores the passed data, and there is some other method that you call later that will deal with it, discovering bad input as early as possible is the key to fixing bugs faster. At that later point, there could be a myriad of ways that bad data happened to be given to your class. It's sort of trying to figure out how the rats came into your house after the fact, trying to find the hole somewhere.", 'questionId': '32280', 'answerId': '32305'}
{'answer': 'I prefer the use of assertions.  I have a rule that I only use assertions in public and protected methods. This is because I believe the calling method should ensure that it is passing valid arguments to private methods.', 'questionId': '32280', 'answerId': '32310'}
{'answer': "General rule is if your method doesn't expect null arguments then you should throw System.ArgumentNullException. Throwing proper exception not only protects you from resource corruption and other bad things but serves as a guide for users of your code saving time spent debugging your code. Also read an article on Defensive programming", 'questionId': '32280', 'answerId': '32313'}
{'answer': '@Chris Karcher I would say absolutely correct. The only thing I would say is check the params separately and have the exeption report the param that was null also as it makes tracking where the null is coming from much easier. @wvdschel wow! If writing the code is too much effort for you, you should look into something like PostSharp (or a Java equivalent if one is available) which can post-process your assemblies and insert param checks for you.', 'questionId': '32280', 'answerId': '32314'}
{'answer': "@lassevk: However, if the method simply stores the passed data, and there is some other method that you call later that will deal with it, discovering bad input as early as possible is the key to fixing bugs faster. At that later point, there could be a myriad of ways that bad data happened to be given to your class. It's sort of trying to figure out how the rats came into your house after the fact, trying to find the hole somewhere. You're right about that, these checks should only be enforced when data is only stored to be processed or used later, I didn't think of that scenario. @Shaun Austin: wow! If writing the code is too much effort for you, ... Writing code is not the problem, writing monkey code that bothers me. Writing code that a machine could have written better. That library looks like it does just that, thanks for pointing it out!", 'questionId': '32280', 'answerId': '32340'}
{'answer': "Although it is not strictly related you might want to take a look to Spec#. I think it is still in development (by Microsoft) but some CTP are available and it looks promising. Basically it allows you to do this: or It also provides another features like Notnull types. It's build on top of the .NET Framework 2.0 and it's fully compatible. The syntaxt, as you may see, is C#.", 'questionId': '32280', 'answerId': '32384'}
{'answer': "Spec# looks very interesting! When something like that isn't available, I generally test non-private methods with a run-time null-check, and assertions for internal methods.  Rather than code the null check explicitly in each method, I delegate that to a utilities class with a check null method: Then checking turns into: That can be added with editor macros, or a code-processing script. Edit: The verbose check could be added this way as well, but I think it's significantly easier to automate the addition of a single line.", 'questionId': '32280', 'answerId': '32666'}
{'answer': 'Also not of immediate use, but related to the mention of Spec#... There\'s a proposal to add "null-safe types" to a future version of Java: "Enhanced null handling - Null-safe types". Under the proposal, your method would become where #Point is the type of non-null references to objects of type Point.', 'questionId': '32280', 'answerId': '32716'}
{'answer': 'Thwrowing C# ArgumentException, or Java IllegalArgumentException right at the beginning of the method looks to me as the clearest of solutions.  One should always be careful with Runtime Exceptions - exceptions that are not declared on the method signature. Since the compiler doesn\'t enforce you to catch these it\'s really easy to forget about them. Make sure you have some kind of a "catch all" exception handling to prevent the software to halt abruptly. That\'s the most important part of your user experience.', 'questionId': '32280', 'answerId': '32791'}
{'answer': 'The best way to handle this really would be the use of exceptions. Ultimately, the asserts are going to end up giving a similar experience to the end user but provide no way for the developer calling your code to handle the situation before showing an exception to the end user. Ultimatley, you want to ensure that you test for invalid inputs as early as possible (especially in public facing code) and provide the appropriate exceptions that the calling code can catch.', 'questionId': '32280', 'answerId': '32808'}
{'answer': " In most programming languages there is no good way to deal with a null that is passed by a caller accidentally. Because this is the case, the rational approach is to forbid passing null by default. I found JetBrains' @Nullable and @NotNull annotations approach for dealing with this the most ingenious, so far. It's IDE specific, unfortunately, but really clean and powerful, IMO. http://www.jetbrains.com/idea/documentation/howto.html  Having this (or something similar) as a java standard would be really nice.", 'questionId': '32280', 'answerId': '32907'}
{'answer': "Both the use of assertions and the throwing of exceptions are valid approaches here.  Either mechanism can be used to indicate a programming error, not a runtime error, as is the case here. Assertions have the advantage of performance as they are typically disabled on production systems.   Exceptions have the advantage of safety, as the check is always performed.   The choice really depends on the development practices of the project.  The project as a whole needs to decide on an assertion policy: if the choice is to enable assertions during all development, then I'd say to use assertions to check this kind of invalid parameter - in a production system, a NullPointerException thrown due to a programming error is unlikely to be able to be caught and handled in a meaningful way anyway and so will act just like an assertion. Practically though, I know a lot of developers that don't trust that assertions will be enabled when appropriate and so opt for the safety of throwing a NullPointerException. Of course if you can't enforce a policy for your code (if you're creating a library, for example, and so are dependent on how other developers run your code), you should opt for the safe approach of throwing NullPointerException for those methods that are part of the library's API.", 'questionId': '32280', 'answerId': '33552'}
{'answer': 'Slightly off-topic, but one feature of findbugs that I think is very useful is to be able to annotate the parameters of methods to describe which parameters should not be passed a null value.   Using static analysis of your code, findbugs can then point out locations where the method is called with a potentially null value.   This has two advantages: The annotation describes your intention for how the method should be called, aiding documentation FindBugs can point to potential problem callers of the method, allowing you to track down potential bugs. Only useful when you have access to the code that calls your methods ... but that is usually the case.', 'questionId': '32280', 'answerId': '33566'}
{'answer': "@aku then you should throw System.ArgumentNullException I don't see how throwing a .net framework exception is going to help him :) Otherwise, in a Java way, assuming the null comes from a programming error (ie. should never go outside the testing phase), then leave the system throw it, or if there are side-effects reaching that point, check for null at the beginning and throw either IllegalArgumentException or NullPointerException. If the null could come from an actual exceptional case but you don't want to use a checked exception for that, then you definitely want to go the IllegalArgumentException route at the beginning of the method.", 'questionId': '32280', 'answerId': '33679'}
{'answer': 'Since off-topic seems to have become the topic, Scala takes an interesting approach to this. All types are assumed to be not null, unless you explicity wrap it in an Option to indicate that it might be null. So:', 'questionId': '32280', 'answerId': '248687'}
{'answer': 'Have you tried explicitly enabling double-buffering on the JList and/or the components that it is drawing over? (with:setDoubleBuffered(boolean aFlag)) Another thought is that you might need to exit the function immediately after delegating to the EDT.  The way your code is written, it looks like the update will happen in both threads if ContentChanged is invoked from a non-EDT thread.  Logging in the first if (or set a breakpoint in the if -- but not in the runnable -- should help determine if that is your problem. eg:', 'questionId': '32519', 'answerId': '32707'}
{'answer': 'You can probably do this by setting your own FileSystemView.', 'questionId': '32529', 'answerId': '32549'}
{'answer': 'Incase anyone else needs this in the future: You\'ll obviously need to make a better "createNewFolder" method, but this does restrict the user to one of more directories. And use it like this: or like this:', 'questionId': '32529', 'answerId': '32658'}
{'answer': 'The solution of Allain is almost complete. Three problems are open to solve: Clicking the "Home"-Button kicks the user out of restrictions DirectoryRestrictedFileSystemView is not accessible outside the package Starting point is not Root Append @Override to DirectoryRestrictedFileSystemView public TFile getHomeDirectory() {   return rootDirectories[0]; } set class and constructor public Change JFileChooser fileChooser = new JFileChooser(fsv); into JFileChooser fileChooser = new JFileChooser(fsv.getHomeDirectory(),fsv); I use it for restricting users to stay in a zip-file via TrueZips TFileChooser and with slight modifications to the above code, this works perfectly. Thanks a lot.', 'questionId': '32529', 'answerId': '6852912'}
{'answer': 'No need to be that complicated. You can easily set selection mode of a JFileChooser like this You can read more reference here How to Use File Choosers', 'questionId': '32529', 'answerId': '12244107'}
{'answer': 'I like the answer on jGuru that lists the option of using JNI to get the answer. This might prove to be faster than shelling out and you may encounter other situations such as this that need to be implemented specifically for windows. Also, if you ever need to port to a different platform, then you can port your library as well and just have it return -1 for the answer to this question on *ix.', 'questionId': '32586', 'answerId': '32712'}
{'answer': "I've been investigating this myself, but I need something that will work across Windows/*nix platforms. One SO post includes some links to Posix JNI implementations. JNA-POSIX POSIX for Java In particular, JNA-POSIX implements methods for getting file stats with implementations for Windows, BSD, Solaris, Linux and OSX. All in all it looks very promising, so I'll be trying it out on my own project very soon.", 'questionId': '32586', 'answerId': '2193954'}
{'answer': "I've wrote a small test class some days ago, wish it can help you:", 'questionId': '32586', 'answerId': '3350512'}
{'answer': '', 'questionId': '32586', 'answerId': '6185263'}
{'answer': 'The javaxt-core library includes a File class that can be used to retrieve file attributes, including the creation time. Example: Works with Java 1.5 and up.', 'questionId': '32586', 'answerId': '14287216'}
{'answer': 'With the release of Java 7 there is a built-in way to do this: It is important to note that not all operating systems provide this information.  I believe in those instances this returns the mtime which is the last modified time. Windows does provide creation time.', 'questionId': '32586', 'answerId': '16969301'}
{'answer': 'This is a basic example in Java, using BasicFileAttributes class:', 'questionId': '32586', 'answerId': '32771938'}
{'answer': 'It\'s frowned upon for normal exits.  If "not everything is going according to plan", then System.exit is fine. Update:  I should add that I assume your \'1\' has meaning that is documented somewhere.', 'questionId': '32790', 'answerId': '32793'}
{'answer': 'It can be dangerous / problematic in web servlet environments also.  Throwing an Exception is generally considered the other alternative.', 'questionId': '32790', 'answerId': '32804'}
{'answer': "Our company's policy is that it's OK (even preferred) to call System.exit(-1), but only in init() methods.  I would definitely think twice before calling it during a program's normal flow.", 'questionId': '32790', 'answerId': '32811'}
{'answer': "Throwing exceptions is the best way to send information about a certain error up and out of the app. A number doesn't tell you as much as: (or something close to that)", 'questionId': '32790', 'answerId': '32817'}
{'answer': 'I agree with the "throw an Exception" crowd. One reason is that calling System.exit makes your code difficult to use if you want other code to be able to use it. For example, if you find out that your class would be useful from a web app, or some kind of message consuming app, it would be nice to allow those containers the opportunity to deal with the failure somehow. A container may want to retry the operation, decide to log and ignore the problem, send an email to an administrator, etc. An exception to this would be your main() method; this could trap the Exception, and call System.exit() with some value that can be recognized by the calling process or shell script.', 'questionId': '32790', 'answerId': '33007'}
{'answer': "The use of System.exit is frowned upon when the 'application' is really a sub-application (e.g. servlet, applet) of a larger Java application (server): in this case the System.exit could stop the JVM and hence also all other sub-applications. In this situation, throwing an appropriate exception, which could be caught and handled by the application framework/server is the best option. If the java application is really meant to be run as a standalone application, there is nothing wrong with using System.exit. in this case, setting an exit value is probably the easiest (and also most used) way of communicating failure or success to the parent process.", 'questionId': '32790', 'answerId': '33008'}
{'answer': 'I think throwing an exception is what you should do when something goes wrong. This way, if your application is not running as a stand-alone app the caller can react to it and has some information about what went wrong. It is also easier for debugging purposes because you as well get a better idea about what went wrong when you see a stack trace. One important thing to note is that when the exception reaches the top level and therefore causes the VM to quit the VM returns a return code of 1, therefore outside applications that use the return code see that something went wrong. The only case where I think System.exit() makes sense is when your app is meant to be called by applications which are not Java and therefore have to use return codes to see if your app worked or not and you want those applications to have a chance to react differently on different things going wrong, i.e. you need different return codes.', 'questionId': '32790', 'answerId': '34147'}
{'answer': 'System.exit() will block, and create a deadlock if the thread that initiated it is used in a shutdown hook.', 'questionId': '32790', 'answerId': '19823189'}
{'answer': 'Eclipse is correct. There is no interpretation context inside a comment (no escaping, etc). See JLS 3.7.', 'questionId': '32897', 'answerId': '32916'}
{'answer': "Yes, I am commenting the code out just to do a quick test. I've already tested what I needed to by commenting the code out another way; I was just curious about what appears to be an odd misfeature of Java and/or Eclipse.", 'questionId': '32897', 'answerId': '32918'}
{'answer': 'A simple test shows Eclipse is correct: This fails to compile with:', 'questionId': '32897', 'answerId': '32927'}
{'answer': 'I may be helpful to just do a "batch" multiline comment so that it comments each line with "//". It is Ctrl+"/" in Idea for commenting and uncommenting the selected lines, Eclipse should have a similar feature.', 'questionId': '32897', 'answerId': '32931'}
{'answer': 'In Eclipse you can highlight the part of the source code you want to comment out and use the Ctrl+/ to single-line comment every line in the highlighted section - puts a "//" at the beginning of the lines. Or if you really want to block-comment the selection use the Ctrl+Shift+/ combination. It will detect the block comments in your selection. However undoing this is harder than single-line comments.', 'questionId': '32897', 'answerId': '32982'}
{'answer': "I often use only // for inline commments, and use /* */ only for commenting out large blocks the way you have. A lot of developers will still use /*  */ for inline comments, because that's what they're familiar with, but they all run into problems like this one, in C it didn't matter as much because you could #if 0 the stuff away.", 'questionId': '32897', 'answerId': '143915'}
{'answer': 'This works for me in Java 1.5 - I stripped out specific exceptions for readability.', 'questionId': '33262', 'answerId': '33283'}
{'answer': "Whoa there!  There's a potentially serious problem with this code, because it ignores the character encoding specified in the String (which is UTF-8 by default). When you call String.getBytes() the platform default encoding is used to encode Unicode characters to bytes. So, the parser may think it's getting UTF-8 data when in fact it's getting EBCDIC or something not pretty! Instead, use the parse method that takes an InputSource, which can be constructed with a Reader, like this: It may not seem like a big deal, but ignorance of character encoding issues leads to insidious code rot akin to y2k.", 'questionId': '33262', 'answerId': '33618'}
{'answer': "Just had a similar problem, except i needed a NodeList and not a Document, here's what I came up with.  It's mostly the same solution as before, augmented to get the root element down as a NodeList and using erickson's suggestion of using an InputSource instead for character encoding issues.", 'questionId': '33262', 'answerId': '46121'}
{'answer': 'To manipulate XML in Java, I always tend to use the Transformer API:', 'questionId': '33262', 'answerId': '25137190'}
{'answer': "For session cookies it doesn't seem to be supported in Tomcat yet. See the bug report Need to add support for HTTPOnly session cookie parameter. A somewhat involved work-around for now can be found here, which basically boils down to manually patching Tomcat. Can't really find an easy way to do it at this moment at this point I'm affraid.  To summarize the work-around, it involves downloading the 5.5 source, and then change the source in the following places: org.apache.catalina.connector.Request.java org.apache.catalina.connectorResponse.addCookieInternal", 'questionId': '33412', 'answerId': '33456'}
{'answer': " Update: The JSESSIONID stuff here is   only for older containers. Please use   jt's currently accepted answer unless   you are using < Tomcat 6.0.19 or < Tomcat   5.5.28 or another container that does not support HttpOnly JSESSIONID cookies as a config option. When setting cookies in your app, use However, in many webapps, the most important cookie is the session identifier, which is automatically set by the container as the JSESSIONID cookie. If you only use this cookie, you can write a ServletFilter to re-set the cookies on the way out, forcing JSESSIONID to HttpOnly. The page at http://keepitlocked.net/archive/2007/11/05/java-and-httponly.aspx http://alexsmolen.com/blog/?p=16 suggests adding the following in a filter. but note that this will overwrite all cookies and only set what you state here in this filter.  If you use additional cookies to the JSESSIONID cookie, then you'll need to extend this code to set all the cookies in the filter. This is not a great solution in the case of multiple-cookies, but is a perhaps an acceptable quick-fix for the JSESSIONID-only setup.  Please note that as your code evolves over time, there's a nasty hidden bug waiting for you when you forget about this filter and try and set another cookie somewhere else in your code. Of course, it won't get set. This really is a hack though. If you do use Tomcat and can compile it, then take a look at Shabaz's excellent suggestion to patch HttpOnly support into Tomcat.", 'questionId': '33412', 'answerId': '33461'}
{'answer': 'httpOnly is supported as of Tomcat 6.0.19 and Tomcat 5.5.28. See the changelog entry for bug 44382.  The last comment for bug 44382 states, "this has been applied to 5.5.x and will be included in 5.5.28 onwards." However, it does not appear that 5.5.28 has been released. The httpOnly functionality can be enabled for all webapps in conf/context.xml: My interpretation is that it also works for an individual context by setting it on the desired Context entry in conf/server.xml (in the same manner as above).', 'questionId': '33412', 'answerId': '1088009'}
{'answer': 'Please be careful not to overwrite the ";secure" cookie flag in https-sessions. This flag prevents the browser from sending the cookie over an unencrypted http connection, basically rendering the use of https for legit requests pointless.', 'questionId': '33412', 'answerId': '1465092'}
{'answer': 'also it should be noted that turning on HttpOnly will break applets that require stateful access back to the jvm. the Applet http requests will not use the jsessionid cookie and may get assigned to a different tomcat.', 'questionId': '33412', 'answerId': '3516432'}
{'answer': 'For cookies that I am explicitly setting, I switched to use SimpleCookie provided by Apache Shiro. It does not inherit from javax.servlet.http.Cookie so it takes a bit more juggling to get everything to work correctly however it does provide a property set HttpOnly and it works with Servlet 2.5. For setting a cookie on a response, rather than doing response.addCookie(cookie) you need to do cookie.saveTo(request, response).', 'questionId': '33412', 'answerId': '14610452'}
{'answer': 'If your Serlvet 3.0 web server, like tomcat 7.0+, you can use below in web.xml as: As mentioned in docs: HttpOnly: Specifies whether any session tracking cookies created by   this web application will be marked as HttpOnly  Secure: Specifies   whether any session tracking cookies created by this web application   will be marked as secure even if   the request that initiated the   corresponding session is using plain HTTP instead of HTTPS Please refer to how to set httponly and session cookie for java web appliaction', 'questionId': '33412', 'answerId': '30995999'}
{'answer': 'In Tomcat6, You can conditionally enable from your HTTP Listener Class: Using this class', 'questionId': '33412', 'answerId': '34147407'}
{'answer': "Hibernate is written against the JDBC API. So, you need a JDBC driver that works with the file format you are interested in. Obviously, even for read-only access, this isn't going to perform well, but it might still be useful if that's not a high priority. On a Windows system, you can set up ODBC datasources for delimited text files, Excel files, etc. Then you can set up the JdbcOdbcDriver in your Java application to use this data source. For most of the applications I work on, I would not consider this approach; I would use an import/export mechanism to convert from a real database (even if it's an in-process database like Berkeley DB or Derby) to the text files. Yes, it's an extra step, but it could be automated, and the performance isn't likely to be much worse than trying to use the text files directly (it will likely be much better, overall), and it will be more robust and easy to develop.", 'questionId': '33438', 'answerId': '33516'}
{'answer': 'Like erickson said, your only hope is in finding a JDBC driver for that task. There is maybe xlsql (CSV, XML and Excel driver) which could fit the task. After that, you just have to either find or write the most simple Hibernate Dialect which fits your driver.', 'questionId': '33438', 'answerId': '33668'}
{'answer': 'A quick google came up with JDBC driver for csv files JDBC driver for XML files Hope this might provide some inspiration?', 'questionId': '33438', 'answerId': '34265'}
{'answer': 'Action listeners, such as for a CommandButton, are called during the Invoke Application phase, which is the last phase before the final Render Response phase. This is shown in The JSF Lifecycle - figure 1.', 'questionId': '33476', 'answerId': '34371'}
{'answer': "There is a pretty good diagram in the JSF specification that shows the request lifecycle - essential for understanding this stuff. The steps are: Restore View. The UIComponent tree is rebuilt. Apply Request Values. Editable components should implement EditableValueHolder. This phase walks the component tree and calls the processDecodes methods. If the component isn't something complex like a UIData, it won't do much except call its own decode method. The decode method doesn't do much except find its renderer and invokes its decode method, passing itself as an argument. It is the renderer's job to get any submitted value and set it via setSubmittedValue. Process Validations. This phase calls processValidators which will call validate. The validate method takes the submitted value, converts it with any converters, validates it with any validators and (assuming the data passes those tests) calls setValue. This will store the value as a local variable. While this local variable is not null, it will be returned and not the value from the value binding for any calls to getValue. Update Model Values. This phase calls processUpdates. In an input component, this will call updateModel which will get the ValueExpression and invoke it to set the value on the model. Invoke Application. Button event listeners and so on will be invoked here (as will navigation if memory serves). Render Response. The tree is rendered via the renderers and the state saved. If any of these phases fail (e.g. a value is invalid), the lifecycle skips to Render Response. Various events can be fired after most of these phases, invoking listeners as appropriate (like value change listeners after Process Validations). This is a somewhat simplified version of events. Refer to the specification for more details. I would question why you are writing your own UIComponent. This is a non-trivial task and a deep understanding of the JSF architecture is required to get it right. If you need a custom control, it is better to create a concrete control that extends an exisiting UIComponent (like HtmlInputText does) with an equivalent renderer. If contamination isn't an issue, there is an open-source JSF implementation in the form of Apache MyFaces.", 'questionId': '33476', 'answerId': '34454'}
{'answer': "@McDowell - Thanks for the information... I was able to figure out most of this in the morning by reading through MyFaces code, but you've added and clarified a number of details that are helpful. I would question why you are writing your own UIComponent. This is a non-trivial task and a deep understanding of the JSF architecture is required to get it right. Honestly, I've struggled with whether to use JSF at all for exactly this reason.  It is the only framework that I've ever used where component creation is a deep intricate process like this.  None of the other web frameworks (whether in the .net world or not) make this so painful, which is completely inexplicable to me. I've stuck with JSF largely for the promise that 2.0 will make it much less painful.  The component is a composition of several inputtext (and other) base components, btw.", 'questionId': '33476', 'answerId': '34572'}
{'answer': " It is the only framework that I've   ever used where component creation is   a deep intricate process like this.   None of the other web frameworks   (whether in the .net world or not)   make this so painful, which is   completely inexplicable to me. Some of the design decisions behind JSF start to make a little more sense when you consider the goals. JSF was designed to be tooled - it exposes lots of metadata for IDEs. JSF is not a web framework - it is a MVP framework that can be used as a web framework. JSF is highly extensible and configurable - you can replace 90% of the implementation on a per-application basis. Most of this stuff just makes your job more complicated if all you want to do is slip in an extra HTML control. The component is a composition of   several inputtext (and other) base   components, btw. I'm assuming JSP-includes/tooling-based page fragments don't meet your requirements. I would consider using your UIComponentELTag.createComponent to create a composite control with a UIPanel base and creating all its children from existing implementations. (I'm assuming you're using JSPs/taglibs and making a few other guesses.) You'd probably want a custom renderer if none of the existing UIPanel renderers did the job, but renderers are easy.", 'questionId': '33476', 'answerId': '34746'}
{'answer': '@McDowell: Some of the design decisions behind JSF start to make a little more sense when you consider the goals. JSF was designed to be tooled - it exposes lots of metadata for IDEs. JSF is not a web framework - it is a MVP framework that can be used as a web framework. JSF is highly extensible and configurable - you can replace 90% of the implementation on a per-application basis. Of that, I think the only part that I agree with is the "a little more sense".  The metadata could have been exposed in other ways in JSF 1.2, and frankly, I have yet to see an IDE make decent use of it.  Why can\'t an IDE give me a simple way to build a component? I\'ve used ASP.Net as well, and by comparison, JSF feels like it was written by a bunch of architecture astronauts led by a guy like the original Struts designer.  Oh wait... :)', 'questionId': '33476', 'answerId': '34786'}
{'answer': "The best article I've found is Jsf Component Writing,  as for 2 where do I read the value for a value binding in your component you have a getter that looks like this how did this get into the getValueBinding? In your tag class setProperties method", 'questionId': '33476', 'answerId': '72753'}
{'answer': 'I like to repackage exceptions between the "tiers" of my application, so for example a DB-specific exception is repackaged inside of another exception which is meaningful in the context of my application (of course, I leave the original exception as a member so I don\'t clobber the stack trace). That said, I think that a non-unique user name is not an "exceptional" enough situation to warrant a throw.  I\'d use a boolean return argument instead.  Without knowing much about your architecture, it\'s hard for me to say anything more specific or applicable.', 'questionId': '33497', 'answerId': '33509'}
{'answer': "Since you're currently using hibernate the easiest thing to do is just check for that exception and wrap it in either a custom exception or in a custom result object you may have setup in your framework.  If you want to ditch hibernate later just make sure you wrap this exception in only 1 place, the first place you catch the exception from hibernate, that's the code you'll probably have to change when you make a switch anyway, so if the catch is in one place then the additional overhead is almost zilch. help?", 'questionId': '33497', 'answerId': '33514'}
{'answer': 'I agree with Nick. Exception you described is not really "unexpected exception" so you should design you code accordingly taking possible exceptions into account. Also I would recommend to take a look at documentation of Microsoft Enterprise Library Exception Handling Block it has a nice outline of error handling patterns.', 'questionId': '33497', 'answerId': '33542'}
{'answer': 'IMO, wrapping exceptions (checked or otherwise) has several benefits that are worth the cost: 1) It encourages you to think about the failure modes for the code you write. Basically, you have to consider the exceptions that the code you call may throw, and in turn you\'ll consider the exceptions you\'ll throw for the code that calls yours. 2) It gives you the opportunity to add additional debugging information into the exception chain. For instance, if you have a method that throws an exception on a duplicate username, you might wrap that exception with one that includes additional information about the circumstances of the failure (for example, the IP of the request that provided the dupe username) that wasn\'t available to the lower-level code. The cookie trail of exceptions may help you debug a complex problem (it certainly has for me). 3) It lets you become implementation-independent from the lower level code. If you\'re wrapping exceptions and need to swap out Hibernate for some other ORM, you only have to change your Hibernate-handling code. All the other layers of code will still be successfully using the wrapped exceptions and will interpret them in the same way, even though the underlying circumstances have changed. Note that this applies even if Hibernate changes in some way (ex: they switch exceptions in a new version); it\'s not just for wholesale technology replacement. 4) It encourages you use different classes of exceptions to represent different situations. For example, you may have a DuplicateUsernameException when the user tries to reuse a username, and a DatabaseFailureException when you can\'t check for dupe usernames due to a broken DB connection. This, in turn, lets you answer your question ("how do I recover?") in flexible and powerful ways. If you get a DuplicateUsernameException, you may decide to suggest a different username to the user. If you get a DatabaseFailureException, you may let it bubble up to the point where it displays a "down for maintenance" page to the user and send off a notification email to you. Once you have custom exceptions, you have customizeable responses -- and that\'s a good thing.', 'questionId': '33497', 'answerId': '33564'}
{'answer': 'You can catch unchecked exceptions without needing to wrap them. For example, the following is valid Java. So in your action/controller you can have a try-catch block around the logic where the Hibernate call is made. Depending on the exception you can render specific error messages.  But I guess in your today it could be Hibernate, and tomorrow SleepLongerDuringWinter framework. In this case you need to pretend to have your own little ORM framework that wraps around the third party framework. This will allow you to wrap any framework specific exceptions into more meaningful and/or checked exceptions that you know how to make better sense of.', 'questionId': '33497', 'answerId': '33651'}
{'answer': ' The question is not really related to checked vs. unchecked debate, the same applies to both exception types. Between the point where the ConstraintViolationException is thrown and the point, where we want to handle the violation by displaying a nice error message is a large number of method calls on the stack that should abort immediately and shouldn\'t care about the problem. That makes the exception mechanism the right choice as opposed to redesigning the code from exceptions to return values. In fact, using an unchecked exception instead of a checked exception is a natural fit, since we really want all intermediate methods on the call stack to ignore the exception and not handle it . If we want to handle the "unique name violation" only by displaying a nice error message (error page) to the user, there\'s not really a need for a specific DuplicateUsernameException. This will keep the number of exception classes low. Instead, we can create a MessageException that can be reused in many similar scenarios. As soon as possible we catch the ConstraintViolationException and convert it to a MessageException with a nice message. It\'s important to convert it soon, when we can be sure, it\'s really the "unique user name constraint" that was violated and not some other constraint. Somewhere close to the top level handler, just handle the MessageException in a different way. Instead of "we logged your problem but for now you\'re hosed" simply display the message contained in the MessageException, no stack trace. The MessageException can take some additional constructor parameters, such as a detailed explanation of the problem, available next action (cancel, go to a different page), icon (error, warning)... The code may look like this In a totally different place there\'s a top exception handler', 'questionId': '33497', 'answerId': '39769'}
{'answer': "@Jan Checked versus unchecked is a central issue here. I question your supposition (#3) that the exception should be ignored in intervening frames. If I do that, I will end up with an implementation-specific dependency in my high-level code. If I replace Hibernate, catch blocks throughout my application will have to be modified. Yet, at the same time, if I catch the exception at a lower level, I'm not receiving much benefit from using an unchecked exception. Also, the scenario here is that I want to catch a specific logical error and change the flow of the application by re-prompting the user for a different ID. Simply changing the displayed message is not good enough, and the ability to map to different messages based on exception type is built into Servlets already.", 'questionId': '33497', 'answerId': '40636'}
{'answer': '@erikson Just to add food to your thoughts: Checked versus unchecked is also debated here The usage of unchecked exceptions is compliant with the fact they are used IMO for exception caused by the caller of the function (and the caller can be several layers above that function, hence the necessity for other frames to ignore the exception) Regarding your specific issue, you should catch the unchecked exception at high level, and encapsulate it, as said by @Kanook in your own exception, without displaying the callstack (as mentionned by @Jan Soltis ) That being said, if the underlying technology changes, that will indeed have an impact on those catch() already present in your code, and that does not answer your latest scenario.', 'questionId': '33497', 'answerId': '73601'}
{'answer': 'See Patterns for Generation, Handling and Management of Errors From the Split Domain and Technical Errors pattern A technical error should never cause a   domain error to be generated (never   the twain should meet). When a   technical error must cause business   processing to fail, it should be   wrapped as a SystemError.  Domain errors should always start from a   domain problem and be handled by   domain code.  Domain errors should   pass "seamlessly" through technical   boundaries. It may be that such errors   must be serialized and re-constituted   for this to happen. Proxies and   facades should take responsibility for   doing this.  Technical errors should   be handled in particular points in the   application, such as boundaries (see   Log at Distribution Boundary).  The   amount of context information passed   back with the error will depend on how   useful this will be for subsequent   diagnosis and handling (figuring out   an alternative strategy). You need to   question whether the stack trace from   a remote machine is wholly useful to   the processing of a domain error   (although the code location of the   error and variable values at that time   may be useful) So, wrap the hibernate exception at the boundary to hibernate with an unchecked domain exception such as a "UniqueUsernameException", and let that bubble up all the way to the handler of it.  Make sure to javadoc the thrown exception even though it isn\'t a checked exception!', 'questionId': '33497', 'answerId': '75250'}
{'answer': "The implements mouselistener, mousemotionlistener just allows the displayArea class to listen to some, to be defined, Swing component's mouse events. You have to explicitly define what it should be listening at. So I suppose you could add something like this to the constructor:", 'questionId': '33708', 'answerId': '33715'}
{'answer': "I don't see anywhere in the code where you call addMouseListener(this) or addMouseMotionListener(this) for the DisplayArea in order for it to subscribe to those events.", 'questionId': '33708', 'answerId': '33716'}
{'answer': "I don't see any code here to register to the mouse listeners.  You have to call addMouseListener(this) and addMouseMotionListener(this) on the DisplayArea.", 'questionId': '33708', 'answerId': '33718'}
{'answer': 'You should be able to just add this line:', 'questionId': '33751', 'answerId': '33762'}
{'answer': ' Note that you might not actually be allowed to do that. See also the documentation of the AddType directive and the .htaccess howto.', 'questionId': '33751', 'answerId': '33767'}
{'answer': 'You want to ask to the SecurityManager if you have Exec right with the checkExec method.', 'questionId': '33829', 'answerId': '33838'}
{'answer': 'I have also found that adding the following to the JNLP file: And signing the JAR file allows the app to run with all the permissions needed for Runtime.exec.', 'questionId': '33829', 'answerId': '33851'}
{'answer': "For the specific example of Runtime.exec there is a method on the SecurityManager class checkExec(String cmd) that will throw an exception that can be caught to determine if the necessary command can be executed.  For more information see the javadoc for Runtime.exec and SecurityManager.checkExec. The more general case requires creating a Permission object representing the task being checked and running SecurityManager's checkPermission method.", 'questionId': '33829', 'answerId': '33868'}
{'answer': "I had limited success with iCal4j (intro) on a project last year. It seems to be a fairly popular choice for ical work in the java community.  If I remember correctly the API can be slightly confusing at first glance. However It's pretty solid in the long run. Good luck,  Brian", 'questionId': '33901', 'answerId': '33916'}
{'answer': "A challenger appears!  Please give biweekly a try.  I'm looking for lots of feedback on how it can be improved.", 'questionId': '33901', 'answerId': '17325369'}
{'answer': "There may well be a better Solr-specific answer, but I work with straight Lucene, and since you're not getting much traction I'll take a stab. There, I'd create a populate a Filter with a FilteredQuery wrapping the original Query. Then I'd get a FieldCache for the field of interest. Enumerate the hits in the filter's bitset, and for each hit, you get the value of the field from the field cache, and add it to a SortedSet. When you've got all of the hits, divide the size of the set into the number of ranges you want (five to seven is a good number according the user interface guys), and rather than a single-valued constraint, your facets will be a range query with the lower and upper bounds of each of those subsets. I'd recommend using some special-case logic for a small number of values; obviously, if you only have four distinct values, it doesn't make sense to try and make 5 range refinements out of them. Below a certain threshold (say 3*your ideal number of ranges), you just show the facets normally rather than ranges.", 'questionId': '33956', 'answerId': '34027'}
{'answer': 'To answer your first question, you can get facet ranges by using the the generic facet query support. Here\'s an example: As for your second question (automatically suggesting facet ranges), that\'s not yet implemented. Some argue that this kind of querying would be best implemented on your application rather that letting Solr "guess" the best facet ranges. Here are some discussions on the topic: (Archived) https://web.archive.org/web/20100416235126/http://old.nabble.com/Re:-faceted-browsing-p3753053.html (Archived) https://web.archive.org/web/20090430160232/http://www.nabble.com/Re:-Sorting-p6803791.html (Archived) https://web.archive.org/web/20090504020754/http://www.nabble.com/Dynamically-calculated-range-facet-td11314725.html', 'questionId': '33956', 'answerId': '170477'}
{'answer': 'You can use solr facet ranges http://wiki.apache.org/solr/SimpleFacetParameters#Facet_by_Range', 'questionId': '33956', 'answerId': '10599043'}
{'answer': 'I have worked out how to calculate sensible dynamic facets for product price ranges.  The solution involves some pre-processing of documents and some post-processing of the query results, but it requires only one query to Solr, and should even work on old version of Solr like 1.4. Round up prices before submission First, before submitting the document, round up the the price to the nearest "nice round facet boundary" and store it in a "rounded_price" field.  Users like their facets to look like "250-500" not "247-483", and rounding also means you get back hundreds of price facets not millions of them.  With some effort the following code can be generalised to round nicely at any price scale: Permissible prices go 1,2,3,...,24,25,30,35,...,95,100,110,...,240,250,275,300,325,...,975,1000 and so forth.   Get all facets on rounded prices Second, when submitting the query, request all facets on rounded prices sorted by price: facet.field=rounded_price.  Thanks to the rounding, you\'ll get at most a few hundred facets back. Combine adjacent facets into larger facets Third, after you have the results, the user wants see only 3 to 7 facets, not hundreds of facets.  So, combine adjacent facets into a few large facets (called "segments") trying to get a roughly equal number of documents in each segment. The following rather more complicated code does this, returning tuples of (start, end, count) suitable for performing range queries.  The counts returned will be correct provided prices were been rounded up to the nearest boundary: Filter results by selected facet Fourth, suppose ("250","500",38) was one of the resulting segments.  If the user selects "$250 to $500" as a filter, simply do a filter query fq=price:[250 TO 500]', 'questionId': '33956', 'answerId': '11329853'}
{'answer': 'You can get the address that connects to your ServerSocket using http://java.sun.com/javase/6/docs/api/java/net/NetworkInterface.html#getInetAddresses() However if your client is connecting via a NAT, then you will get the address of the router and NOT the Ethernet address. If it is on your local network (via a hub/switch, no router with NAT) the it wil work as intended.', 'questionId': '33960', 'answerId': '33966'}
{'answer': " java.net.NetworkInterface.getHardwareAddress (method added in Java 6) It has to be called on the machine you are interested in - the MAC is not transferred across network boundaries (i.e. LAN and WAN). If you want to make use of it on a website server to interrogate the clients, you'd have to run an applet that would report the result back to you. For Java 5 and older I found code parsing output of command line tools on various systems.", 'questionId': '33960', 'answerId': '33967'}
{'answer': "Actually, beyond other right answers (JDK 6; exec 'ifconfig'), there are JNI-based libraries. Java Uuid Generator (JUG) 2.0 has code for some platforms. This works on JDK 1.2 and above at least (maybe 1.1 even)", 'questionId': '33960', 'answerId': '2656092'}
{'answer': 'You can use Jxnet: https://github.com/ardikars/Jxnet (Require libpcap/winpcap)', 'questionId': '33960', 'answerId': '38294233'}
{'answer': 'Using the Maven Dependency Plugin:', 'questionId': '34144', 'answerId': '34156'}
{'answer': 'If you run maven with "-x" switch, it will print out plenty of diagnostics, I guess the relevant dependency path can be picked up from there.', 'questionId': '34144', 'answerId': '34162'}
{'answer': "To add to @David Crow, here's a dependency:tree example from the Maven site: might output", 'questionId': '34144', 'answerId': '34167'}
{'answer': 'The dependency information is also included in the Project Information/Dependencies report if you have maven generate a site for the project, using mvn site.', 'questionId': '34144', 'answerId': '219325'}
{'answer': 'If you use eclipse and the m2eclipse plugin (http://m2eclipse.sonatype.org) then there is a graphical version of dependency tree where you can filter by scope etc.', 'questionId': '34144', 'answerId': '274901'}
{'answer': 'You can have many reports by  mvn site One of them is the dependency report.', 'questionId': '34144', 'answerId': '4233244'}
{'answer': 'This is caused when there is a class file that your code depends on and it is present at compile time but not found at runtime. Look for differences in your build time and runtime  classpaths.', 'questionId': '34413', 'answerId': '34419'}
{'answer': 'I have found that sometimes I get a NoClassDefFound error when code is compiled with an incompatible version of the class found at runtime.  The specific instance I recall is with the apache axis library.  There were actually 2 versions on my runtime classpath and it was picking up the out of date and incompatible version and not the correct one, causing a NoClassDefFound error.  This was in a command line app where I was using a command similar to this.   I was able to get it to pick up the proper version by using:', 'questionId': '34413', 'answerId': '34444'}
{'answer': "While it's possible that this is due to a classpath mismatch between compile-time and run-time, it's not necessarily true. It is important to keep two or three different exceptions straight in our head in this case: java.lang.ClassNotFoundException  This exception indicates that the class was not found on the classpath.  This indicates that we were trying to load the class definition, and the class did not exist on the classpath. java.lang.NoClassDefFoundError  This exception indicates that the JVM looked in its internal class definition data structure for the definition of a class and did not find it.  This is different than saying that it could not be loaded from the classpath.  Usually this indicates that we previously attempted to load a class from the classpath, but it failed for some reason - now we're trying to use the class again (and thus need to load it, since it failed last time), but we're not even going to try to load it, because we failed loading it earlier (and reasonably suspect that we would fail again).  The earlier failure could be a ClassNotFoundException or an ExceptionInInitializerError (indicating a failure in the static initialization block) or any number of other problems.  The point is, a NoClassDefFoundError is not necessarily a classpath problem.", 'questionId': '34413', 'answerId': '5756989'}
{'answer': 'Here is the code to illustrate java.lang.NoClassDefFoundError. NoClassDefFoundErrorDemo.java SimpleCalculator.java', 'questionId': '34413', 'answerId': '28507116'}
{'answer': "I was using spring framework with maven and solved this error in my project. There was a runtime error in the class. I was reading a property as integer, but when it read the value from the property file, its value was double. Spring did not give me a full stack trace of on which line the runtime failed. It simply said NoClassDefFoundError. But when I executed it as a native Java Application (taking it out of MVC), it gave ExceptionInInitializerError which was the true cause and which is how I traced the error. @xli's answer gave me insight into what may be wrong in my code.", 'questionId': '34413', 'answerId': '31914707'}
{'answer': "I get NoClassFoundError when classes loaded by the runtime class loader cannot access classes already loaded by the java rootloader. Because the different class loaders are in different security domains (according to java) the jvm won't allow classes already loaded by the rootloader to be resolved in the runtime loader address space. Run your program with 'java -javaagent:tracer.jar [YOUR java ARGS]' It produces output showing the loaded class, and the loader env that loaded the class.  It's very helpful tracing why a class cannot be resolved.", 'questionId': '34413', 'answerId': '32479072'}
{'answer': 'This is the best solution I found so far. Suppose we have a package called org.mypackage containing the classes: HelloWorld (main class)   SupportClass  UtilClass and the files defining this package are stored physically under the directory D:\\myprogram (on Windows) or /home/user/myprogram (on Linux). The file structure will look like this: When we invoke Java, we specify the name of the application to run: org.mypackage.HelloWorld. However we must also tell Java where to look for the files and directories defining our package. So to launch the program, we have to use the following command:', 'questionId': '34413', 'answerId': '32593355'}
{'answer': "I got this message after removing 2 files from the SRC library, and when I brought them back I kept seeing this Error message.  My solution was:restart Eclipse. Since then I havn't seen this message again :-)", 'questionId': '34413', 'answerId': '33122745'}
{'answer': 'make sure this matches in the module:app and module:lib', 'questionId': '34413', 'answerId': '36870883'}
{'answer': 'I have a same problem I was stock long hr. I found the solution, In my case, there is the static method defined due to that The JVM can not create the another object of that class. example, private static HttpHost proxy = new HttpHost(proxyHost, Integer.valueOf(proxyPort), "http");', 'questionId': '34413', 'answerId': '38383004'}
{'answer': 'The technique below helped me many times: where the TheNoDefFoundClass is the class that might be "lost" due to a preference for an older version of the same library used by your program. This most frequently happens with the cases, when the client software is being deployed into a dominant container, armed with its own classloaders and tons of ancient versions of most popular libs.', 'questionId': '34413', 'answerId': '38614741'}
{'answer': 'NoClassDefFoundError In Java Definition:  Java Virtual Machine is not able to find a particular class at runtime which was available at compile time. If a class was present during compile time but not available in java classpath during runtime. Examples: The class is not in Classpath, there is no sure shot way of knowing it but many times you can just have a look to print System.getproperty("java.classpath") and it will print the classpath from there you can at least get an idea of your actual runtime classpath. A simple example of NoClassDefFoundError is class belongs to a missing JAR file or JAR was not added into classpath or sometimes jar\'s name has been changed by someone like in my case one of my colleagues has changed tibco.jar into tibco_v3.jar and the program is failing with java.lang.NoClassDefFoundError and I were wondering what\'s wrong. Just try to run with explicitly -classpath option with the classpath you think will work and if it\'s working then it\'s a sure short sign that someone is overriding java classpath. Permission issue on JAR file can also cause NoClassDefFoundError in Java. Typo on XML Configuration can also cause NoClassDefFoundError in Java. when your compiled class which is defined in a package, doesnt present in the same package while loading like in the case of JApplet it will throw NoClassDefFoundError in Java. Possible Solutions: The class is not available in Java Classpath. If you are working in J2EE environment than the visibility of Class among multiple Classloader can also cause java.lang.NoClassDefFoundError, see examples and scenario section for detailed discussion. Check for java.lang.ExceptionInInitializerError in your log file. NoClassDefFoundError due to the failure of static initialization is quite common. Because NoClassDefFoundError is a subclass of java.lang.LinkageError it can also come if one of it dependency like native library may not available. Any start-up script is overriding Classpath environment variable. You might be running your program using jar command and class was not defined in manifest file\'s ClassPath attribute. Resources: 3 ways to solve NoClassDefFoundError java.lang.NoClassDefFoundError Problem patterns', 'questionId': '34413', 'answerId': '38879739'}
{'answer': 'In case you have generated-code (EMF etc.) there can be too many static initialisers which consume all stack space. How to increase the Java stack size?.', 'questionId': '34413', 'answerId': '40467093'}
{'answer': "If someone comes here because of java.lang.NoClassDefFoundError: org/apache/log4j/Logger error, in my case it was produced because I used log4j 2 (but I didn't add all the files that come with it), and some dependency library used log4j 1. The solution was to add the Log4j 1.x bridge: the jar log4j-1.2-api-<version>.jar which comes with log4j 2. More info in the log4j 2 migration.", 'questionId': '34413', 'answerId': '44632379'}
{'answer': 'The best way to test a private method is via another public method. If this cannot be done, then one of the following conditions is true: The private method is dead code There is a design smell near the class that you are testing The method that you are trying to test should not be private', 'questionId': '34571', 'answerId': '34586'}
{'answer': 'Generally a unit test is intended to exercise the public interface of a class or unit. Therefore, private methods are implementation detail that you would not expect to test explicitly.', 'questionId': '34571', 'answerId': '34590'}
{'answer': 'The private methods are called by a public method, so the inputs to your public methods should also test private methods that are called by those public methods. When a public method fails, then that could be a failure in the private method.', 'questionId': '34571', 'answerId': '34594'}
{'answer': "From this article: Testing Private Methods with JUnit and SuiteRunner (Bill Venners), you basically have 4 options: Don't test private methods. Give the methods package access. Use a nested test class. Use reflection.", 'questionId': '34571', 'answerId': '34598'}
{'answer': 'I tend not to test private methods.  There lies madness.  Personally, I believe you should only test your publicly exposed interfaces (and that includes protected and internal methods).', 'questionId': '34571', 'answerId': '34630'}
{'answer': "I'd use reflection, since I don't like the idea of changing the access to a package on the declared method just for the sake of testing. However, I usually just test the public methods which should also ensure the private methods are working correctly. you can't use reflection to get private methods from outside the owner class, the private modifier affects reflection also This is not true. You most certainly can, as mentioned in Cem Catikkas's answer.", 'questionId': '34571', 'answerId': '34644'}
{'answer': "If you have somewhat of a legacy application, and you're not allowed to change the visibility of your methods, the best way to test private methods is to use reflection.  Internally we're using helpers to get/set private and private static variables as well as invoke private and private static methods. The following patterns will let you do pretty much anything related to the private methods and fields. Of course you can't change private static final variables through reflection. And for fields: Notes:   1. targetClass.getDeclaredMethod(methodName, argClasses) lets you look into private methods. The same thing applies for   getDeclaredField.   2. The setAccessible(true) is required to play around with privates.", 'questionId': '34571', 'answerId': '34658'}
{'answer': "Having tried Cem Catikkas' solution using reflection, I'd have to say his was a more elegant solution than I have described here. However, if you're looking for an alternative to using reflection, and have access to the source you're testing, this will still be an option. There is possible merit in testing private methods of a class, particularly with test-driven development, where you would like to design small tests before you write any code. Creating a test with access to private members and methods can test areas of code which are difficult to target specifically with access only to public methods. If a public method has several steps involved, it can consist of several private methods, which can then be tested individually. Advantages: Can test to a finer granularity Disadvantages: Test code must reside in the same file as source code, which can be more difficult to maintain Similarly with .class output files, they must remain within the same package as declared in source code However, if continuous testing requires this method, it may be a signal that the private methods should be extracted, which could be tested in the traditional, public way. Here is a convoluted example of how this would work: The inner class would be compiled to ClassToTest$StaticInnerTest. See also: Java Tip 106: Static inner classes for fun and profit", 'questionId': '34571', 'answerId': '38425'}
{'answer': "If you're trying to test existing code that you're reluctant or unable to change, reflection is a good choice. If the class's design is still flexible, and you've got a complicated private method that you'd like to test separately, I suggest you pull it out into a separate class and test that class separately. This doesn't have to change the public interface of the original class; it can internally create an instance of the helper class and call the helper method. If you want to test difficult error conditions coming from the helper method, you can go a step further. Extract an interface from the helper class, add a public getter and setter to the original class to inject the helper class (used through its interface), and then inject a mock version of the helper class into the original class to test how the original class responds to exceptions from the helper. This approach is also helpful if you want to test the original class without also testing the helper class.", 'questionId': '34571', 'answerId': '46255'}
{'answer': "If you want to test private methods of a legacy application where you can't change the code, one option is jMockit, which will allow you to create mocks to an object even when they're private to the class.", 'questionId': '34571', 'answerId': '51192'}
{'answer': "When I have private methods in a class that are sufficiently complicated that I feel the need to test the private methods directly, that is a code smell: my class is too complicated.   My usual approach to addressing such issues is to tease out a new class that contains the interesting bits.  Often, this method and the fields it interacts with, and maybe another method or two can be extracted in to a new class.   The new class exposes these methods as 'public', so they're accessible for unit testing.  The new and old classes are now both simpler than the original class, which is great for me (I need to keep things simple, or I get lost!). Note that I'm not suggesting that people create classes without using their brain! The point here is to use the forces of unit testing to help you find good new classes.", 'questionId': '34571', 'answerId': '52054'}
{'answer': "As many above have suggested, a good way is to test them via your public interfaces. If you do this, it's a good idea to use a code coverage tool (like Emma) to see if your private methods are in fact being executed from your tests.", 'questionId': '34571', 'answerId': '53571'}
{'answer': "Since you're using JUnit, have a look at junit-addons. It has the ability to ignore the Java security model and access private methods and attributes.", 'questionId': '34571', 'answerId': '57795'}
{'answer': "First, I'll throw this question out: Why do your private members need isolated testing? Are they that complex, providing such complicated behaviors as to require testing apart from the public surface? It's unit testing, not 'line-of-code' testing. Don't sweat the small stuff. If they are that big, big enough that these private members are each a 'unit' large in complexity -- consider refactoring such private members out of this class. If refactoring is inappropriate or infeasible, can you use the strategy pattern to replace access to these private member functions / member classes when under unit test? Under unit test, the strategy would provide added validation, but in release builds it would be simple passthrough.", 'questionId': '34571', 'answerId': '91206'}
{'answer': "Testing private methods breaks the encapsulation of your class because every time you change the internal implementation you break client code (in this case, the tests). So don't test private methods.", 'questionId': '34571', 'answerId': '190338'}
{'answer': "As others have said... don't test private methods directly. Here are a few thoughts: Keep all methods small and focused (easy to test, easy to find what is wrong) Use code coverage tools. I like Cobertura (oh happy day, looks like a new version is out!) Run the code coverage on the unit tests. If you see that methods are not fully tested add to the tests to get the coverage up. Aim for 100% code coverage, but realize that you probably won't get it.", 'questionId': '34571', 'answerId': '549551'}
{'answer': 'You can turn off access restrictions for reflection so that private means nothing. The setAccessible(true) call does that. The only restriction is that a ClassLoader may disallow you from doing that. See Subverting Java Access Protection for Unit Testing (Ross Burton) for a way to do this in Java.', 'questionId': '34571', 'answerId': '549558'}
{'answer': 'In C# you could have used System.Reflection, though in Java I don\'t know. Though I feel the urge to answer this anyway since if you "feel you need to unit test private methods" my guess is that there is something else which is wrong... I would seriously consider looking at my architecture again with fresh eyes...', 'questionId': '34571', 'answerId': '549592'}
{'answer': 'What if your test classes are in the same package as the class that should be tested? But in a different directory of course, src & classes for your source code, test/src and test/classes for your test classes. And let classes and test/classes be in your classpath.', 'questionId': '34571', 'answerId': '1038507'}
{'answer': "I have used reflection to do this in the past, and in my opinion it was a big mistake. Strictly speaking, you should not be writing unit tests that directly test private methods. What you should be testing is the public contract that the class has with other objects; you should never directly test an object's internals. If another developer wants to make a small internal change to the class, which doesn't affect the classes public contract, he/she then has to modify your reflection based test to ensure that it works. If you do this repeatedly throughout a project, unit tests then stop being a useful measurement of code health, and start to become a hindrance to development, and an annoyance to the development team. What I recommend doing instead is using a code coverage tool such as Cobertura, to ensure that the unit tests you write provide decent coverage of the code in private methods. That way, you indirectly test what the private methods are doing, and maintain a higher level of agility.", 'questionId': '34571', 'answerId': '1043013'}
{'answer': 'Just two examples of where I would want to test a private method: Decryption routines - I would not want to make them visible to anyone to see just for the sake of testing, else anyone can use them to decrypt. But they are intrinsic to the code, complicated, and need to always work (the obvious exception is reflection which can be used to view even private methods in most cases, when SecurityManager is not configured to prevent this). Creating an SDK for community consumption. Here public takes on a wholly different meaning, since this is code that the whole world may see (not just internal to my application). I put code into private methods if I don\'t want the SDK users to see it - I don\'t see this as code smell, merely as how SDK programming works. But of course I still need to test my private methods, and they are where the functionality of my SDK actually lives. I understand the idea of only testing the "contract". But I don\'t see one can advocate actually not testing code - your mileage may vary. So my tradeoff involves complicating the JUnits with reflection, rather than compromising my security & SDK.', 'questionId': '34571', 'answerId': '3177465'}
{'answer': "To test legacy code with large and quirky classes, it is often very helpful to be able to test the one private (or public) method I'm writing right now. I use the junitx.util.PrivateAccessor-package. Lots of helpful one-liners for accessing private methods and private fields. Hope that was helpful :)", 'questionId': '34571', 'answerId': '4667692'}
{'answer': "The answer from JUnit.org FAQ page: But if you must... If you are using JDK 1.3 or higher, you can use reflection to subvert   the access control mechanism with the aid of the PrivilegedAccessor.   For details on how to use it, read this article. If you are using JDK 1.6 or higher and you annotate your tests with   @Test, you can use Dp4j to inject reflection in your test methods. For   details on how to use it, see this test script. P.S. I'm the main contributor to Dp4j, ask me if you need help. :)", 'questionId': '34571', 'answerId': '5083041'}
{'answer': 'I only test the public interface, but I have been known to make specific private methods protected so I can either mock them out entirely, or add in additional steps specific for unit testing purposes. A general case is to hook in flags I can set from the unit test to make certain methods intentionally cause an exception to be able to test fault paths; the exception triggering code is only in the test path in an overridden implementation of the protected method. I minimize the need for this though and I always document the precise reasons to avoid confusion.', 'questionId': '34571', 'answerId': '5820700'}
{'answer': "I am not sure whether this is a good technique, but I developed the following pattern to unit test private methods: I don't modify the visibility of the method that I want to test and add an additional method. Instead I am adding an additional public method for every private method I want to test. I call this additional method Test-Port and denote them with the prefix t_. This Test-Port method then simply accesses the according private method. Additionally I add a boolean flag to the Test-Port method to decide whether I grant access to the private method through the Test-Port method from outside. This flag is then set globally in a static class where I place e.g. other global settings for the application. So I can switch the access to the private methods on and off in one place e.g. in the corresponding unit test.", 'questionId': '34571', 'answerId': '8139572'}
{'answer': "Groovy has a bug/feature, through which you can invoke private methods as if they were public.  So if you're able to use Groovy in your project, it's an option you can use in lieu of reflection.  Check out this page for an example.", 'questionId': '34571', 'answerId': '8704898'}
{'answer': "JML has a spec_public comment annotation syntax that allows you to specify a method as public during tests: This syntax is discussed at http://www.eecs.ucf.edu/~leavens/JML/jmlrefman/jmlrefman_2.html#SEC12. There also exists a program that translates JML specifications into JUnit tests. I'm not sure how well that works or what its capabilities are, but it doesn't appear to be necessary since JML is a viable testing framework on its own.", 'questionId': '34571', 'answerId': '15192546'}
{'answer': 'Today, I pushed a library to help testing private methods and fields. It has been designed with Android in mind, but it can really be used for any Java project. If you got some code with private methods or fields or constructors, you can use BoundBox. It does exactly what you are looking for. Here below is an example of a test that accesses two private fields of an Android activity to test it: BoundBox makes it easy to test private/protected fields, methods and constructors. You can even access stuff that is hidden by inheritance. Indeed, BoundBox breaks encapsulation. It will give you access to all that through reflection, BUT everything is checked at compile time. It is ideal for testing some legacy code. Use it carefully. ;) https://github.com/stephanenicolas/boundbox', 'questionId': '34571', 'answerId': '18859235'}
{'answer': "Private methods are consumed by public ones. Otherwise, they're dead code. That's why you test the public method, asserting the expected results of the public method and thereby, the private methods it consumes. Testing private methods should be tested by debugging before running your unit tests on public methods. They may also be debugged using test-driven development, debugging your unit tests until all your assertions are met. I personally believe it is better to create classes using TDD; creating the public method stubs, then generating unit tests with all the assertions defined in advance, so the expected outcome of the method is determined before you code it. This way, you don't go down the wrong path of making the unit test assertions fit the results. Your class is then robust and meets requirements when all your unit tests pass.", 'questionId': '34571', 'answerId': '20337937'}
{'answer': 'Here is my generic function to test private fields:', 'questionId': '34571', 'answerId': '20990300'}
{'answer': 'A private method is only to be accessed within the same class. So there is no way to test a private method of a target class from any test class. A way out is that you can perform unit testing manually or can change your method from private to protected. And then a protected method can only be accessed within the same package where the class is defined. So, testing a protected method of a target class means we need to define your test class in the same package as the target class. If all the above does not suits your requirement, use the  reflection way to access the private method.', 'questionId': '34571', 'answerId': '23441118'}
{'answer': 'If using Spring, ReflectionTestUtils provides some handy tools that help out here with minimal effort. For example, to set up a mock on a private member without being forced to add an undesirable public setter:', 'questionId': '34571', 'answerId': '26855013'}
{'answer': 'I recently had this problem and wrote a little tool, called Picklock, that avoids the problems of explicitly using the Java reflection API, two examples: Calling methods, e.g. private void method(String s) - by Java reflection Calling methods, e.g. private void method(String s) - by Picklock Setting fields, e.g. private BigInteger amount; - by Java reflection Setting fields, e.g. private BigInteger amount; - by Picklock', 'questionId': '34571', 'answerId': '30093076'}
{'answer': 'In the Spring Framework you can test private methods using this method: For example:', 'questionId': '34571', 'answerId': '31020978'}
{'answer': 'Another approach I have used is to change a private method to package private or protected then complement it with the @VisibleForTesting annotation of the Google Guava library. This will tell anybody using this method to take caution and not access it directly even in a package. Also a test class need not be in same package physically, but in the same package under the test folder. For example, if a method to be tested is in src/main/java/mypackage/MyClass.java then your test call should be placed in src/test/java/mypackage/MyClassTest.java. That way, you got access to the test method in your test class.', 'questionId': '34571', 'answerId': '36115967'}
{'answer': 'Please see below for an example; The following import statement should be added: Now you can directly pass the object which has the private method, method name to be called, and additional parameters as below.', 'questionId': '34571', 'answerId': '37591098'}
{'answer': "A quick addition to @Cem Catikka's comment, when using ExpectedException: Keep in mind that your expected exception will be wrapped in an InvocationTargetException, so in order to get to your exception you will have to throw the cause of the InvocationTargetException you received. Something like (testing private method validateRequest() on BizService):", 'questionId': '34571', 'answerId': '37618628'}
{'answer': "I would suggest you refactoring your code a little bit. When you have to start thinking about using reflection or other kind of stuff, for just testing your code, something is going wrong with your code. You mentioned different types of problems. Let's start with private fields. In case of private fields I would have added a new constructor and injected fields into that. Instead of this: I'd have used this: This won't be a problem even with some legacy code. Old code will be using an empty constructor, and if you ask me, refactored code will look cleaner, and you'll be able to inject necessary values in test without reflection. Now about private methods. In my personal experience when you have to stub a private method for testing, then that method has nothing to do in that class. A common pattern, in that case, would be to wrap it within an interface, like Callable and then you pass in that interface also in the constructor (with that multiple constructor trick): Mostly all that I wrote looks like it's a dependency injection pattern. In my personal experience it's really useful while testing, and I think that this kind of code is cleaner and will be easier to maintain. I'd say the same about nested classes. If a nested class contains heavy logic it would be better if you'd moved it as a package private class and have injected it into a class needing it. There are also several other design patterns which I have used while refactoring and maintaining legacy code, but it all depends on cases of your code to test. Using reflection mostly is not a problem, but when you have an enterprise application which is heavily tested and tests are run before every deployment everything gets really slow (it's just annoying and I don't like that kind of stuff). There is also setter injection, but I wouldn't recommended using it. I'd better stick with a constructor and initialize everything when it's really necessary, leaving the possibility for injecting necessary dependencies.", 'questionId': '34571', 'answerId': '39215279'}
{'answer': "Hibernate has a filter mechanism that may work for you.  The filters will rewrite the queries hibernate generates to include an additional clause to limit the rows returned.  I'm not aware of anything in hibernate to mask/hide columns. Your database may also have support for this functionality.  Oracle, for example, has the Virtual Private Database (VPD) which will rewrite your queries at the database level.  This solution has the added benefit that any external program (e.g. reporting tools) that goes against your db will have your security restrictions enforced.  VPD also has support to mask restricted columns with NULLs. Unfortunately, the above solutions have not been adequate to support the security requirements for the types projects I typically work on.  There is usually some sort of context that cannot be easily expressed in the above solutions.  For example, users can view data that they have created, or that have been been marked as public, or belong to a project which they manage. We typically create query/finder/DAO objects where we pass in the values required to enforce the security and then create the query accordingly. I hope this helps", 'questionId': '34638', 'answerId': '34917'}
{'answer': 'When using Hibernate filters you need to be aware that the additional restrictions will not be applied to SQL statements generted by the load() or get() methods.', 'questionId': '34638', 'answerId': '37755'}
{'answer': "It's kind of a hack, but sometimes I use an AtomicInteger, which is mutable, to do things like this.  I've also seen cases where an int[] of size 1 is passed in.", 'questionId': '34669', 'answerId': '34678'}
{'answer': 'The current solution I am using is: and then pass it to the recursive algorithm: and when I want to increment it: Not super elegant, but it works...', 'questionId': '34669', 'answerId': '34689'}
{'answer': "Integers are immutable, which means that when you pass it as an argument it creates a copy rather than a reference to the same item. (explanation). To get the behavior you're looking for, you can write your own class which is like Integer only mutable. Then, just pass it to the recursive function, it is incremented within the recursion, and when you access it again after the recursion is over it will still maintain its new values. Edit: Note that using an int[] array is a variation on this method... In Java, arrays are also passed by reference rather than copied like primitives or immutable classes.", 'questionId': '34669', 'answerId': '34700'}
{'answer': 'Since you\'ve already discovered the pseudo-mutable integer "hack," how about this option: Does it make sense for you to make a separate Parser class?  If you do this, you can store the current state in a member variable.  You probably need to think about how you\'re going to handle any thread safety issues, and it might be overkill for this particular application, but it might work for you.', 'questionId': '34669', 'answerId': '34716'}
{'answer': 'To be honest I would recode the function to make it a linear algorithm that uses a loop. This way you have no chance of running out of heap space if you are stepping through an extremely large string. Also, you would not need to have a the extra parameter just to keep track of the count. This also would probably have the result of making the algorithm faster because it does not need to make a function call for every character. Unless of course there is a specific reason it needs to be recursive.', 'questionId': '34669', 'answerId': '34740'}
{'answer': "One possibility I can think of is to store the count in a member variable of the class.  This of course assumes that the public doIt method is only called by a single thread. Another option is to refactor the public method to call a private helper method.  The private method takes the list as a parameter and returns the count.  For example: This assumes that you can do the error handling in the public doIt method, since the count variable isn't actually passed back to the caller.  If you need to do that, you could of course throw an exception: It's difficult to know whether that will help without knowing more about how your algorithm actually works.", 'questionId': '34669', 'answerId': '34856'}
{'answer': 'You could just use a static int class variable that gets incremented each time your doIt method is called.', 'questionId': '34669', 'answerId': '34890'}
{'answer': 'You could also do:', 'questionId': '34669', 'answerId': '9588103'}
{'answer': 'This is probably going to be difficult to resolve unless you post either the error message from the log file or the list of steps that you took so far. I have JRun 3.1 configured on my machine so maybe I can duplicate your issue if you give us more information.', 'questionId': '34726', 'answerId': '34743'}
{'answer': 'Jrun development has pretty much stopped. You should look into running another application server. Jboss or Glassfish are good alternatives.', 'questionId': '34726', 'answerId': '34876'}
{'answer': "I didn't know JRun was even still in existence since 1999 or something like that. Anyway, Tomcat or Jetty would be my easy replacements. Tomcat for its scriptability from ANT etc and Jetty for its pure simplicity (start an instance in 5 lines of code!). Glassfish is a huge system with many components, if you just want to host vanilla servlets and JSPs etc. then I would go for one of the above.", 'questionId': '34726', 'answerId': '35550'}
{'answer': "I don't think so. There is a way to create a read-only List and read only Collection, but I don't think there's a built in read only Dictionary. System.ServiceModel has a ReadOnlyDictinoary implementation, but its internal. Probably wouldn't be too hard to copy it though, using Reflector, or to simply create your own from scratch. It basically wraps an Dictionary and throws when a mutator is called.", 'questionId': '35002', 'answerId': '35045'}
{'answer': 'As far as I know, there is not. But may be you can copy some code (and learn alot) from these articles: Immutability in C# Part One: Kinds of Immutability Immutability in C# Part Two: A Simple Immutable Stack Immutability in C# Part Three: A Covariant Immutable Stack Immutability in C# Part Four: An Immutable Queue Immutability in C# Part Six: A Simple Binary Tree Immutability in C# Part Seven: More on Binary Trees Immutability in C# Part Eight: Even More On Binary Trees Immutability in C# Part Nine: Academic? Plus my AVL tree implementation Immutability in C# Part 10: A double-ended queue Immutability in C# Part Eleven: A working double-ended queue', 'questionId': '35002', 'answerId': '35059'}
{'answer': '"Out of the box" there is not a way to do this. You can create one by deriving your own Dictionary class and implementing the restrictions you need.', 'questionId': '35002', 'answerId': '35099'}
{'answer': "One workaround might be, throw a new list of KeyValuePair from the Dictionary to keep the original unmodified. This way the original dictionary won't get modified.", 'questionId': '35002', 'answerId': '35144'}
{'answer': 'No, but a wrapper is rather trivial: Obviously, you can change the this[] setter above if you want to allow modifying values.', 'questionId': '35002', 'answerId': '35666'}
{'answer': "I've found an implementation of an Inmutable (not READONLY) implementation of a AVLTree for C# here.  An AVL tree has logarithmic (not constant) cost on each operation, but stills fast. http://csharpfeeds.com/post/7512/Immutability_in_Csharp_Part_Nine_Academic_Plus_my_AVL_tree_implementation.aspx", 'questionId': '35002', 'answerId': '503344'}
{'answer': "Adding onto dbkk's answer, I wanted to be able to use an object initializer when first creating my ReadOnlyDictionary.  I made the following modifications: Now I can use the class like so:", 'questionId': '35002', 'answerId': '1104668'}
{'answer': 'Since Linq, there is a generic interface ILookup.  Read more in MSDN. Therefore, To simply get immutable dictionary you may call:', 'questionId': '35002', 'answerId': '1428665'}
{'answer': "There's also another alternative as I have described at: http://www.softwarerockstar.com/2010/10/readonlydictionary-tkey-tvalue/ Essentially it's a subclass of ReadOnlyCollection>, which gets the work done in a more elegant manner.  Elegant in the sense that it has compile-time support for making the Dictionary read-only rather than throwing exceptions from methods that modify the items within it.", 'questionId': '35002', 'answerId': '4057390'}
{'answer': 'The open-source PowerCollections library includes a read-only dictionary wrapper (as well as read-only wrappers for pretty much everything else), accessible via a static ReadOnly() method on the Algorithms class.', 'questionId': '35002', 'answerId': '6471072'}
{'answer': 'You could try something like this: This would remove the mutability problem in favour of having your caller have to either convert it to their own dictionary: ... or use a comparison operation on the key rather than an index lookup, e.g.:', 'questionId': '35002', 'answerId': '8585197'}
{'answer': 'With the release of .NET 4.5, there is a new ReadOnlyDictionary class. You simply pass an IDictionary to the constructor to create the immutable dictionary. Here is a helpful extension method which can be used to simplify creating the readonly dictionary.', 'questionId': '35002', 'answerId': '12463109'}
{'answer': "In general it is a much better idea to not pass around any dictionaries in the first place (if you don't HAVE to). Instead - create a domain-object with an interface that doesn't offer any methods modifying the dictionary (that it wraps). Instead offering required LookUp-method that retrieves element from the dictionary by key (bonus is it makes it easier to use than a dictionary as well).", 'questionId': '35002', 'answerId': '19387663'}
{'answer': "Don't you need to recompute the size of the scrollBox after the layout?", 'questionId': '35123', 'answerId': '35503'}
{'answer': 'If I am not mistaken you need to swap the  and so that you have:', 'questionId': '35123', 'answerId': '36306'}
{'answer': 'Try setting .setMinWidth and .setMinHeight on the ScrolledComposite once the layout has been done, passing it the size of the main composite.', 'questionId': '35123', 'answerId': '152324'}
{'answer': 'This is a common hurdle when using ScrolledComposite.  When the SC is gets so small that the scroll bar must be shown, the client control has to shrink horizontally to make room for the scroll bar.  This has the side effect of making some labels wrap lines, which moved the following controls farther down, which increased the minimum height needed by the content composite. You need to listen for width changes on the content composite (mParent), compute the minimum height again given the new content width, and call setMinHeight() on the scrolled composite with new height. In listening for size changes, note that we ignore any resize events where the width stays the same.  This is because changes in the height of the content do not affect the minimum height of the content, as long as the width is the same.', 'questionId': '35123', 'answerId': '159454'}
{'answer': 'This is usually caused when using a build system like Apache Ant that only compiles java files when the java file is newer than the class file.  If a method signature changes and classes were using the old version things may not be compiled correctly.  The usual fix is to do a full rebuild (usually "ant clean" then "ant").   Sometimes this can also be caused when compiling against one version of a library but running against a different version.', 'questionId': '35186', 'answerId': '35187'}
{'answer': 'Without any more information it is difficult to pinpoint the problem, but the root cause is that you most likely have compiled a class against a different version of the class that is missing a method, than the one you are using when running it. Look at the stack trace ... If the exception appears when calling a method on an object in a library, you are most likely using separate versions of the library when compiling and running. Make sure you have the right version both places. If the exception appears when calling a method on objects instantiated by classes you made, then your build process seems to be faulty. Make sure the class files that you are actually running are updated when you compile.', 'questionId': '35186', 'answerId': '35210'}
{'answer': 'This can also be the result of using reflection.  If you have code that reflects on a class and extracts a method by name (eg: with Class.getDeclaredMethod("someMethodName", .....)) then any time that method name changes, such as during a refactor, you will need to remember to update the parameters to the reflection method to match the new method signature, or the getDeclaredMethod call will throw a NoSuchMethodException. If this is the reason, then the stack trace should show the point that the reflection method is invoked, and you\'ll just need to update the parameters to match the actual method signature.   In my experience, this comes up occasionally when unit testing private methods/fields, and using a TestUtilities class to extract fields for test verification.  (Generally with legacy code that wasn\'t designed with unit testing in mind.)', 'questionId': '35186', 'answerId': '35350'}
{'answer': 'Note that in the case of reflection, you get an NoSuchMethodException, while with non-reflective code, you get NoSuchMethodError. I tend to go looking in very different places when confronted with one versus the other.', 'questionId': '35186', 'answerId': '36617'}
{'answer': "If you are writing a webapp, ensure that you don't have conflicting versions of a jar in your container's global library directory and also in your app. You may not necessarily know which jar is being used by the classloader. e.g.   tomcat/common/lib mywebapp/WEB-INF/lib", 'questionId': '35186', 'answerId': '38656'}
{'answer': 'If you have access to change the JVM parameters, adding verbose output should allow you to see what classes are being loaded from what JARs. When your program is run, the JVM should dump to standard out information such as: ... [Loaded junit.framework.Assert from file:/C:/Program%20Files/junit3.8.2/junit.jar] ...', 'questionId': '35186', 'answerId': '42097'}
{'answer': 'I feel your pain.  You can learn programming out of a book, but when it comes to working with Eclipse or Visual Studio, its a ^&^&\'n nightmare to do something simple like add a library.  Everybody expects you to know how to use it and if you don\'t they downvote your question.  The problem is, if you don\'t work in an office or know anyone who you can ask these questions, then its almost impossible to figure this stuff out.  Anyway... I was having your problem, and this is how I fixed it.  The following steps are a working way to add a library.  I had done the first two steps right, but I hadn\'t done the last one by dragging the ".jar" file direct from the file system into the "lib" folder on my eclipse project.  Additionally, I had to remove the previous version of the library from both the build path and the "lib" folder. If anyone knows of a more proper way to add/update a library, please chime in. Step 1 - Add .jar to build path Step 2 - Associate sources and javadocs (optional) Step 3 - Actually drag .jar file into "lib" folder (not optional)', 'questionId': '35186', 'answerId': '2985338'}
{'answer': 'To answer the original question. According to java docs here "NoSuchMethodError" Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed.  !) if it happens in the run time, check the class containing the method is in class path. 2) Check if you have added new version of jar and the method is compatible.', 'questionId': '35186', 'answerId': '14017856'}
{'answer': 'I ran into a similar problem when I was changing method signatures in my application.  Cleaning and rebuilding my project resolved the "NoSuchMethodError".', 'questionId': '35186', 'answerId': '18336764'}
{'answer': 'If your file name is different than the class name which contain main method then it may be the possibility that this error may cause.', 'questionId': '35186', 'answerId': '27896288'}
{'answer': 'These problems are caused by the use of the same object at the same two classes. Objects used does not contain new method has been added that the new object class contains. ex: These problems are caused by the concomitant 02 similar class (1 in src, 1 in jar file here is gateway.jar)', 'questionId': '35186', 'answerId': '31451884'}
{'answer': 'If using maven or another framework, and you get this error randomly almost, try "clean install", especially if you wrote the object and you know it has the method.  Worked for me.', 'questionId': '35186', 'answerId': '33004790'}
{'answer': "I've had the same problem. This is also caused when there is an ambiguity in classes. My program was trying to invoke a method which was present in two jar files present in the same location / class path. Delete one jar file or execute your code such that only one jar file is used. Check that you are not using same jar or different versions of the same jar that contain the same class. DISP_E_EXCEPTION [step] [] [Z-JAVA-105  Java exception java.lang.NoSuchMethodError(com.example.yourmethod)]", 'questionId': '35186', 'answerId': '38221921'}
{'answer': 'It means the respective method is not present in the class:  If you are using jar then decompile and check if the respective version of jar have proper class.  Check if you have compiled proper class from your source.', 'questionId': '35186', 'answerId': '40418906'}
{'answer': "Above answer explains very well ..just to add one thing If you are using using eclipse use ctrl+shift+T and enter package structure of class (e.g. : gateway.smpp.PDUEventListener ), you will find all jars/projects where it's present. Remove unnecessary jars from classpath or add above in class path. Now it will pick up correct one.", 'questionId': '35186', 'answerId': '40696954'}
{'answer': 'For me it happened because I changed argument type in function, from Object a, to String a. I could resolve it with clean and build again', 'questionId': '35186', 'answerId': '45825973'}
{'answer': "bittorrent? There have been a few web-based versions already (bitlet, w3btorrent), and Azureus was built using java, so it's definitely possible. Edit: @TonyB is it limited to port 80?", 'questionId': '35248', 'answerId': '35252'}
{'answer': "Please don't use ActiveX... I am so sick of sites that are only viewable in IE. My actual preference, as a user, in these situations is to download a lightweight .exe file that downloads the file for you.", 'questionId': '35248', 'answerId': '35257'}
{'answer': "@travis Unfortunately It has to be over HTTP inside the users browser. I'll update the question to be more clear about that.", 'questionId': '35248', 'answerId': '35258'}
{'answer': 'Can you split the files into pieces and then rejoin them after the download?', 'questionId': '35248', 'answerId': '35264'}
{'answer': "@levand The problem only exist in IE (it works in Firefox) so while ActiveX would only work on IE, IE is the only one we need the work around for. @travis - interesting idea.  Not sure if it will work for what I need but I'll keep it in mind.  I'm hoping to find something to integrate with the existing site instead of having to go out to a third party.  It would also require me to setup a bittorrent tracker which wouldn't be as easy as it sounds for this application because different users will have different access to different files.", 'questionId': '35248', 'answerId': '35280'}
{'answer': "@jjnguy I'm looking for a java applet or ActiveX component that will do that for me.  These are non-technical users so we really just want to have them click download and the full file ends up in the specified location", 'questionId': '35248', 'answerId': '35289'}
{'answer': '@levand: My actual preference, as a user, in these situations is to download a lightweight .exe file that downloads the file for you. That\'s a dealbreaker for many, many sites. Users either are or should be extremely reluctant to download .exe files from websites and run them willy-nilly.  Even if they\'re not always that cautious, incautious behaviour is not something we should encourage as responsible developers. If you\'re working on something along the lines of a company intranet, a .exe is potentially an okay solution, but for the public web?  No way. @TonyB: What is the best way to do this without using FTP. I\'m sorry, but I have to ask why the requirement. Your question reads to me along the lines of "what\'s the best way to cook a steak without any meat or heat source?"  FTP was designed for this sort of thing.', 'questionId': '35248', 'answerId': '35291'}
{'answer': "@ceejayoz I totally agree but its part of the requirement for our client.  There will be FTP access but each user will have the option of downloading via HTTP or FTP.  There are some users that will be behind corporate firewalls that don't permit FTP I have seen other sites do this in the past (MSDN, Adobe) so I was hoping there is something out there already instead of having to make one in house (and learning java and/or ActiveX)", 'questionId': '35248', 'answerId': '35293'}
{'answer': "I say click-once installed download manager, similar to msdn. But becoming a CDN without a more optimized protocol for the job is no easy task. I can't imagine a business model that can be worthwhile enough to have such large file downloads as a core competency unless you are doing something like msdn. If you create a thick client, you at least get the chance to get some more face time with the users, for advertising or some other revenue model, since you will probably be paying in the hundreds of thousands of dollars to host such a service.", 'questionId': '35248', 'answerId': '35296'}
{'answer': 'The problem with the applet approach mentioned is that unless you have the end user modify their java security properties your applet will not have permission to save to the hard drive.   It may be possible using Java Web Start (aka JNLP).  I think that if it is a signed app it can get the extra permission to write to the hard drive.  This is not too different from the download an exe approach.  The problem with this is that the user has to have the correct version of Java installed and has to have the Java Web Start capability setup correctly.   I would recommend the exe approach as it will be the easiest for the non-technical users to use.', 'questionId': '35248', 'answerId': '35496'}
{'answer': "If you don't want to write java code in-house, there are commercial applet solutions available: Vault MyDownloder Both of them have eval versions that you can download and test.", 'questionId': '35248', 'answerId': '35600'}
{'answer': " There are some users that will be behind corporate firewalls that don't permit FTP... Are users with restrictive firewalls like that likely to be permitted to install and run a .exe file from your website?", 'questionId': '35248', 'answerId': '42167'}
{'answer': "A few ideas: Blizzard use a light-weight .exe BitTorrent wrapper for their patches.  I'm not entirely sure how it is done, but it looks like a branded version of the official BitTorrent client. Upload to Amazon S3, provide the torrent link of the file (all S3 files are automatically BitTorrent-enabled), plus the full HTTP download link as alternative.  See S3 documentation", 'questionId': '35248', 'answerId': '42211'}
{'answer': "Take a look at cURL.  This article describes how to do a multi-part simultaneous download via HTTP.  I've used cURL in the past to manage FTP downloads of files over 300GB. Another tip: You can boost download times even more if you increase the size of the TCP Window on the client's NIC configuration.  Set it as high as the OS allows and you should see up to 2x improvement depending on your physical network.  This worked for me on Windows 2000 and 2003 when FTPing over a WAN.  The down side is it may increase overhead for all other network traffic that wants only a few KB for a network packet, but is now forced to send/recv in 64KB packets.  Your mileage may vary. Edit: What exactly is this you're trying to accomplish?  Who is the audience?  I'm assumed for a bit that you're looking to do this over your own network; but you seem to imply the client side is someone on the internet.  I think we need clearer requirements.", 'questionId': '35248', 'answerId': '42225'}
{'answer': 'What about saying "We recommend that you install Free Download Manager to download this file.  You will have the added benefit of being able to resume the file and accelerate the download." Personally I never download anything using the built in browser download tool unless I have to (e.g. Gmail attachments)', 'questionId': '35248', 'answerId': '487722'}
{'answer': "For persistence.xml, specifically, you can put a persistence unit in a separate JAR, which you can deploy separately from your web application WAR, or both together in an EAR archive, depending on what your application server supports. For example, the JBoss manual describes this as Deploy EAR with EJB3 JAR.  For struts-config.xml I expect that you are going to have to override the Struts code that loads it, if you want to use a non-standard location. I don't know about the Velocity templates. In general, web applications only load resources from within the WAR, for security reasons. There are other techniques you can use, but you may find it easier to try weblets, which seems to be a framework designed to let you load resources from a separate JAR.", 'questionId': '35507', 'answerId': '35867'}
{'answer': 'You need to look into velocity.properties file in your WEB_INF folder.IMHO it is here where you need to change your template root changing the property file.resource.loader.path. Hope it helps, Petr', 'questionId': '35507', 'answerId': '197980'}
{'answer': 'If I understood your question about Struts config files right, they are specified in web.xml. Find the Struts servlet config param. The param-value can be a list of comma separated list of XML files to load. Eg: See this Struts guide under 5.3.2. And yes, this applies to 2.x also.', 'questionId': '35507', 'answerId': '234746'}
{'answer': "If you're talking about automatic XML serialization of objects, check out Castor: Castor is an Open Source data binding framework for Java[tm]. It's the shortest path between Java objects, XML documents and relational tables. Castor provides Java-to-XML binding, Java-to-SQL persistence, and more.", 'questionId': '35785', 'answerId': '35793'}
{'answer': "XStream is pretty good at serializing object to XML without much configuration and money! (it's under BSD license). We used it in one of our project to replace the plain old java-serialization and it worked almost out of the box.", 'questionId': '35785', 'answerId': '35796'}
{'answer': 'The "Official" Java API for this is now JAXB - Java API for XML Binding. See Tutorial by Oracle. The reference implementation lives at http://jaxb.java.net/', 'questionId': '35785', 'answerId': '35821'}
{'answer': 'XMLBeans works great if you have a schema for your XML.  It creates Java objects for the schema and creates easy to use parse methods.', 'questionId': '35785', 'answerId': '35898'}
{'answer': "Usually I use jaxb or XMLBeans if I need to create objects serializable to XML. Now, I can see that XStream might be very useful as it's nonintrusive and has really simple api. I'll play with it soon and probably use it. The only drawback I noticed is that I can't create object's id on my own for cross referencing.  @Barak Schiller Thanks for posting link to XStream!", 'questionId': '35785', 'answerId': '36776'}
{'answer': '"Simple XML Serialization" Project You may want to look at the Simple XML Serialization project. It is the closest thing I\'ve found to the System.Xml.Serialization in .Net.', 'questionId': '35785', 'answerId': '469213'}
{'answer': "Don't forget JiBX.", 'questionId': '35785', 'answerId': '927076'}
{'answer': 'JAXB is part of JDK standard edition version 1.6+. So it is FREE and no extra libraries to download and manage. A simple example can be found here  XStream seems to be dead. Last update was on Dec 6 2008. Simple seems as easy and simpler as JAXB but I could not find any licensing information to evaluate it for enterprise use.', 'questionId': '35785', 'answerId': '4067429'}
{'answer': 'if you want a structured solution (like ORM) then JAXB2 is a good solution. If you want a serialization like DOT NET then you could use Long Term Persistence of JavaBeans Components The choice depends on use of serialization.', 'questionId': '35785', 'answerId': '5506572'}
{'answer': "Worth mentioning that since version 1.4, Java had the classes java.beans.XMLEncoder and java.beans.XMLDecoder. These classes perform XML encoding which is at least very comparable to XML Serialization and in some circumstances might do the trick for you.  If your class sticks to the JavaBeans specification for its getters and setters, this method is straightforward to use and you don't need a schema. With the following caveats: As with normal Java serialization coding and decoding run over a InputStream and OutputStream the process uses the familar writeObject and readObject methods In contrast to normal Java serialization the encoding but also decoding causes constructors and initializers to be invoked encoding and decoding work regardless if your class implements Serializable or not transient modifiers are not taken into account works only for public classes, that have public constructors For example, take the following declaration: Executing this code: Would result in the following file:", 'questionId': '35785', 'answerId': '18681762'}
{'answer': '', 'questionId': '35785', 'answerId': '26011571'}
{'answer': "There exists no platform-independent way that can be guaranteed to work in all jvm implementations. ManagementFactory.getRuntimeMXBean().getName() looks like the best (closest) solution. It's short, and probably works in every implementation in wide use. On linux+windows it returns a value like 12345@hostname (12345 being the process id). Beware though that according to the docs, there are no guarantees about this value: Returns the name representing the running Java virtual machine. The   returned name string can be any arbitrary string and a Java virtual   machine implementation can choose to embed platform-specific useful   information in the returned name string. Each running virtual machine   could have a different name. In Java 9 the new process API can be used:", 'questionId': '35842', 'answerId': '35885'}
{'answer': 'It depends on where you are looking for the information from. If you are looking for the information from the console you can use the jps command. The command gives output similar to the Unix ps command and comes with the JDK since I believe 1.5 If you are looking from the process the RuntimeMXBean (as said by Wouter Coekaerts) is probably your best choice. The output from getName() on Windows using Sun JDK 1.6 u7 is in the form [PROCESS_ID]@[MACHINE_NAME]. You could however try to execute jps and parse the result from that: If run with no options the output should be the process id followed by the name.', 'questionId': '35842', 'answerId': '42970'}
{'answer': 'You can check out my project: JavaSysMon on GitHub. It provides process id and a bunch of other stuff (CPU usage, memory usage) cross-platform (presently Windows, Mac OSX, Linux and Solaris)', 'questionId': '35842', 'answerId': '1962335'}
{'answer': 'Try Sigar . very extensive APIs.  Apache 2 license.', 'questionId': '35842', 'answerId': '3134967'}
{'answer': 'For older JVM, in linux...', 'questionId': '35842', 'answerId': '6372205'}
{'answer': 'You could use JNA. Unfortunately there is no common JNA API to get the current process ID yet, but each platform is pretty simple: Windows Make sure you have jna-platform.jar then: Unix Declare: Then: Java 9 Under Java 9 the new process API can be used to get the current process ID. First you grab a handle to the current process, then query the PID:', 'questionId': '35842', 'answerId': '7303433'}
{'answer': 'The latest I have found is that there is a system property called sun.java.launcher.pid that is available at least on linux.  My plan is to use that and if it is not found to use the JMX bean.', 'questionId': '35842', 'answerId': '7309009'}
{'answer': 'The following method tries to extract the PID from java.lang.management.ManagementFactory: Just call getProcessId("<PID>"), for instance.', 'questionId': '35842', 'answerId': '7690178'}
{'answer': "Here's a backdoor method which might not work with all VMs but should work on both linux and windows (original example here):", 'questionId': '35842', 'answerId': '12066696'}
{'answer': 'This is the code JConsole, and potentially jps and VisualVM uses. It utilizes classes from sun.jvmstat.monitor.* package, from tool.jar. There are few catches: The tool.jar is a library distributed with Oracle JDK but not JRE!  You cannot get tool.jar from Maven repo; configure it with Maven is a bit tricky The tool.jar probably contains platform dependent (native?) code so it is not easily   distributable It runs under assumption that all (local) running JVM apps are "monitorable". It looks like  that from Java 6 all apps generally are (unless you actively configure opposite) It probably works only for Java 6+ Eclipse does not publish main class, so you will not get Eclipse PID easily Bug in MonitoredVmUtil? UPDATE: I have just double checked that JPS uses this way, that is Jvmstat library (part of tool.jar). So there is no need to call JPS as external process, call Jvmstat library directly as my example shows. You can aslo get list of all JVMs runnin on localhost this way. See JPS source code:', 'questionId': '35842', 'answerId': '17348465'}
{'answer': 'This is what I used when I had similar requirement. This determines the PID of the Java process correctly. Let your java code spawn a server on a pre-defined port number and then execute OS commands to find out the PID listening on the port. For Linux', 'questionId': '35842', 'answerId': '19091039'}
{'answer': "Based on Ashwin Jayaprakash's answer (+1) about the Apache 2.0 licensed SIGAR, here is how I use it to get only the PID of the current process: Even though it does not work on all platforms, it does work on Linux, Windows, OS X and various Unix platforms as listed here.", 'questionId': '35842', 'answerId': '21702291'}
{'answer': 'You can try getpid() in JNR-Posix.   It has a Windows POSIX wrapper that calls getpid() off of libc.', 'questionId': '35842', 'answerId': '28981466'}
{'answer': 'I know this is an old thread, but I wanted to call out that API for getting the PID (as well as other manipulation of the Java process at runtime) is being added to the Process class in JDK 9: http://openjdk.java.net/jeps/102', 'questionId': '35842', 'answerId': '31037052'}
{'answer': 'Since Java 9 there is a method Process.getPid() which returns the native ID of a process: To get the process ID of the current Java process one can use the ProcessHandle interface:', 'questionId': '35842', 'answerId': '31072610'}
{'answer': 'Here is my solution:', 'questionId': '35842', 'answerId': '33573952'}
{'answer': 'In Scala: This should give you a workaround on Unix systems until Java 9 will be released. (I know, the question was about Java, but since there is no equivalent question for Scala, I wanted to leave this for Scala users who might stumble into the same question.)', 'questionId': '35842', 'answerId': '33837794'}
{'answer': "For completeness there is a wrapper in Spring Boot for the  solution. If an integer is required, then this can be summed up to the one-liner: If someone uses Spring boot already, she/he might use org.springframework.boot.ApplicationPid The toString() method prints the pid or '???'. Caveats using the ManagementFactory are discussed in other answers already.", 'questionId': '35842', 'answerId': '38122943'}
{'answer': '', 'questionId': '35842', 'answerId': '39744535'}
{'answer': '', 'questionId': '35842', 'answerId': '43399977'}
{'answer': "C++ has templates. Java has generics, which look kinda sorta like C++ templates, but they're very, very different. Templates work, as the name implies, by providing the compiler with a (wait for it...) template that it can use to generate type-safe code by filling in the template parameters.  Generics, as i understand them, work the other way around: the type parameters are used by the compiler to verify that the code using them is type-safe, but the resulting code is generated without types at all.  Think of C++ templates as a really good macro system, and Java generics as a tool for automatically generating typecasts.", 'questionId': '36347', 'answerId': '36356'}
{'answer': 'There is a big difference between them. In C++ you don\'t have to specify a class or an interface for the generic type. That\'s why you can create truly generic functions and classes, with the caveat of a looser typing. The method above adds two objects of the same type, and can be used for any type T that has the "+" operator available. In Java you have to specify a type if you want to call methods on the objects passed, something like: In C++ generic functions/classes can only be defined in headers, since the compiler generates different functions for different types (that it\'s invoked with). So the compilation is slower. In Java the compilation doesn\'t have a major penalty, but Java uses a technique called "erasure" where the generic type is erased at runtime, so at runtime Java is actually calling ... So generic programming in Java is not really useful, it\'s only a little syntactic sugar to help with the new foreach construct. EDIT: the opinion above on usefulness was written by a younger self. Java\'s generics help with type-safety of course.', 'questionId': '36347', 'answerId': '36364'}
{'answer': 'Java (and C#) generics seem to be a simple run-time type substitution mechanism. C++ templates are a compile-time construct which give you a way to modify the language to suit your needs. They are  actually a purely-functional language that the compiler executes during a compile.', 'questionId': '36347', 'answerId': '41510'}
{'answer': "Another advantage of C++ templates is specilization.   Now, if you call sum with pointers, the second method will be called, if you call sum with non-pointer objects the first method will be called, and if you call sum() with Special objects, the third will be called.  I don't think that this is possible with Java.", 'questionId': '36347', 'answerId': '41930'}
{'answer': "@Keith: That code is actually wrong and apart from the smaller glitches (template omitted, specialization syntax looks differently), partial specialization doesn't work on function templates, only on class templates. The code would however work without partial template specialization, instead using plain old overloading:", 'questionId': '36347', 'answerId': '41973'}
{'answer': "Basically, AFAIK, C++ templates create a copy of the code for each type, while Java generics use exactly the same code. Yes, you can say that C++ template is equivalent to Java generic concept ( although more properly would be to say Java generics are equivalent to C++ in concept )  If you are familiar with C++'s template mechanism, you might think that generics are similar, but the similarity is superficial. Generics do not generate a new class for each specialization, nor do they permit template metaprogramming. from: Java Generics", 'questionId': '36347', 'answerId': '498321'}
{'answer': "Java Generics are massively different to C++ templates. Basically in C++ templates are basically a glorified preprocessor/macro set (Note: since some people seem unable to comprehend an analogy, I'm not saying template processing is a macro).  In Java they are basically syntactic sugar to minimize boilerplate casting of Objects.  Here is a pretty decent introduction to C++ templates vs Java generics. To elaborate on this point: when you use a C++ template, you're basically creating another copy of the code, just as if you used a #define macro.  This allows you to do things like have int parameters in template definitions that determine sizes of arrays and such. Java doesn't work like that.  In Java all objects extent from java.lang.Object so, pre-Generics, you'd write code like this: because all the Java collection types used Object as their base type so you could put anything in them.  Java 5 rolls around and adds generics so you can do things like: And that's all Java Generics are: wrappers for casting objects.  That's because Java Generics aren't refined.  They use type erasure.  This decision was made because Java Generics came along so late in the piece that they didn't want to break backward compatibility (a Map<String, String> is usable whenever a Map is called for).  Compare this to .Net/C# where type erasure isn't used, which leads to all sorts of differences (e.g. you can use primitive types and IEnumerable and IEnumerable<T> bear no relation to each other). And a class using generics compiled with a Java 5+ compiler is usable on JDK 1.4 (assuming it doesn't use any other features or classes that require Java 5+). That's why Java Generics are called syntactic sugar. But this decision on how to do generics has profound effects so much so that the (superb) Java Generics FAQ has sprung up to answer the many, many questions people have about Java Generics. C++ templates have a number of features that Java Generics don't: Use of primitive type arguments. For example: Java does not allow the use of primitive type arguments in generics. Use of default type arguments, which is one feature I miss in Java but there are backwards compatibility reasons for this; Java allows bounding of arguments. For example: It really does need to be stressed that template invocations with different arguments really are different types.  They don't even share static members.  In Java this is not the case. Aside from the differences with generics, for completeness, here is a basic comparison of C++ and Java (and another one). And I can also suggest Thinking in Java.  As a C++ programmer a lot of the concepts like objects will be second nature already but there are subtle differences so it can be worthwhile to have an introductory text even if you skim parts. A lot of what you'll learn when learning Java is all the libraries (both standard--what comes in the JDK--and nonstandard, which includes commonly used things like Spring).  Java syntax is more verbose than C++ syntax and doesn't have a lot of C++ features (e.g. operator overloading, multiple inheritance, the destructor mechanism, etc) but that doesn't strictly make it a subset of C++ either.", 'questionId': '36347', 'answerId': '498329'}
{'answer': 'There is a great explanation of this topic in Java Generics and Collections  By Maurice Naftalin, Philip Wadler. I highly recommend this book. To quote: Generics in Java resemble templates in   C++. ... The syntax is deliberately   similar and the semantics are   deliberately different. ...   Semantically, Java generics are   defined by erasure, where as C++   templates are defined by expansion. Please read the full explanation here. alt text http://oreilly.com/catalog/covers/0596527756_cat.gif', 'questionId': '36347', 'answerId': '499272'}
{'answer': "Another feature that C++ templates have that Java generics don't is specialization.  That allows you to have a different implementation for specific types.  So you can, for example, have a highly optimized version for an int, while still having a generic  version for the rest of the types.  Or you can have different versions for pointer and non-pointer types.  This comes in handy if you want to operate on the dereferenced object when handed a pointer.", 'questionId': '36347', 'answerId': '499289'}
{'answer': "Templates are nothing but a macro system. Syntax sugar. They are fully expanded before actual compilation (or, at least, compilers behave as if it were the case). Example: Let's say we want two functions. One function takes two sequences (list, arrays, vectors, whatever goes) of numbers, and returns their inner product. Another function takes a length, generates two sequences of that length, passes them to the first function, and returns it's result. The catch is that we might make a mistake in the second function, so that these two functions aren't really of the same length. We need the compiler to warn us in this case. Not when the program is running, but when it's compiling. In Java you can do something like this: In C# you can write almost the same thing. Try to rewrite it in C++, and it won't compile, complaining about infinite expansion of templates.", 'questionId': '36347', 'answerId': '18420523'}
{'answer': 'I will sum it up in a single sentence: templates create new types, generics restricts existing types.', 'questionId': '36347', 'answerId': '35109742'}
{'answer': "I don't see the harm if you know that it's always going to be a simple struct and that you're never going to want to attach behaviour to it.", 'questionId': '36701', 'answerId': '36702'}
{'answer': "If the Java way is the OO way, then yes, creating a class with public fields breaks the principles around information hiding which say that an object should manage its own internal state. (So as I'm not just spouting jargon at you, a benefit of information hiding is that the internal workings of a class are hidden behind an interface - say you wanted to change the mechanism by which your struct class saved one of its fields, you'll probably need to go back and change any classes that use the class...) You also can't take advantage of the support for JavaBean naming compliant classes, which will hurt if you decide to, say, use the class in a JavaServer Page which is written using Expression Language. The JavaWorld article Why Getter and Setter  Methods are Evil article also might be of interest to you in thinking about when not to implement accessor and mutator methods. If you're writing a small solution and want to minimise the amount of code involved, the Java way may not be the right way - I guess it always depends on you and the problem you're trying to solve.", 'questionId': '36701', 'answerId': '36718'}
{'answer': "This is a commonly discussed topic. The drawback of creating public fields in objects is that you have no control over the values that are set to it. In group projects where there are many programmers using the same code, it's important to avoid side effects. Besides, sometimes it's better to return a copy of field's object or transform it somehow etc. You can mock such methods in your tests. If you create a new class you might not see all possible actions. It's like defensive programming - someday getters and setters may be helpful, and it doesn't cost a lot to create/use them. So they are sometimes useful. In practice, most fields have simple getters and setters. A possible solution would look like this:  Update: It's highly unlikely that property support will be added in Java 7 or perhaps ever.  Other JVM languages like Groovy, Scala, etc do support this feature now. - Alex Miller", 'questionId': '36701', 'answerId': '36734'}
{'answer': "This is a question on Object Oriented Design, not Java the language. It's generally good practice to hide data types within the class and expose only the methods that are part of the class API. If you expose internal data types, you can never change them in the future. If you hide them, your only obligation to the user is the method's return and argument types.", 'questionId': '36701', 'answerId': '36747'}
{'answer': "By the way, the structure you're giving as an example already exist in the Java base class library as java.awt.Point. It has x and y as public fields, check it out for yourself. If you know what you're doing, and others in your team know about it, then it is okay to have public fields. But you shouldn't rely on it because they can cause headaches as in bugs related to developers using objects as if they were stack allocated structs (java objects are always sent to methods as references and not as copies).", 'questionId': '36701', 'answerId': '36874'}
{'answer': "Use common sense really. If you have something like: Then there's little point in wrapping them up in getters and setters. You're never going to store an x, y coordinate in whole pixels any other way. Getters and setters will only slow you down. On the other hand, with: You might want to change the way a balance is calculated at some point in the future. This should really use getters and setters. It's always preferable to know why you're applying good practice, so that you know when it's ok to bend the rules.", 'questionId': '36701', 'answerId': '36891'}
{'answer': 'Re: aku, izb, John Topley... Watch out for mutability issues... It may seem sensible to omit getters/setters. It actually may be ok in some cases. The real problem with the proposed pattern shown here is mutability. The problem is once you pass an object reference out containing non-final, public fields. Anything else with that reference is free to modify those fields. You no longer have any control over the state of that object. (Think what would happen if Strings were mutable.) It gets bad when that object is an important part of the internal state of another, you\'ve just exposed internal implementation. To prevent this, a copy of the object must be returned instead. This works, but can cause massive GC pressure from tons of single-use copies created. If you have public fields, consider making the class read-only. Add the fields as parameters to the constructor, and mark the fields final. Otherwise make sure you\'re not exposing internal state, and if you need to construct new instances for a return value, make sure it won\'t be called excessively. See: "Effective Java" by Joshua Bloch -- Item #13: Favor Immutability. PS: Also keep in mind, all JVMs these days will optimize away the getMethod if possible, resulting in just a single field-read instruction.', 'questionId': '36701', 'answerId': '36944'}
{'answer': 'To address mutability concerns you can declare x and y as final. For example: Calling code that attempts to write to these fields will get a compile time error of "field x is declared final; cannot be assigned". The client code can then have the \'short-hand\' convenience you described in your post', 'questionId': '36701', 'answerId': '38698'}
{'answer': "The problem with using public field access is the same problem as using new instead of a factory method - if you change your mind later, all existing callers are broken.  So, from an API evolution point of view, it's usually a good idea to bite the bullet and use getters/setters. One place where I go the other way is when you strongly control access to the class, for example in an inner static class used as an internal data structure.  In this case, it might be much clearer to use field access. By the way, on e-bartek's assertion, it is highly unlikely IMO that property support will be added in Java 7.", 'questionId': '36701', 'answerId': '64376'}
{'answer': "I frequently use this pattern when building private inner classes to simplify my code, but I would not recommend exposing such objects in a public API. In general, the more frequently you can make objects in your public API immutable the better, and it is not possible to construct your 'struct-like' object in an immutable fashion. As an aside, even if I were writing this object as a private inner class I would still provide a constructor to simplify the code to initialize the object. Having to have 3 lines of code to get a usable object when one will do is just messy.", 'questionId': '36701', 'answerId': '203722'}
{'answer': 'You can make a simple class with public fields and no methods in Java, but it is still a class and is still handled syntactically and in terms of memory allocation just like a class.  There is no way to genuinely reproduce structs in Java.', 'questionId': '36701', 'answerId': '203730'}
{'answer': 'Sometime I use such class, when I need to return multiple values from a method. Of course, such object is short lived and with very limited visibility, so it should be OK.', 'questionId': '36701', 'answerId': '312808'}
{'answer': "I have tried this in a few projects, on the theory that getters and setters clutter up the code with semantically meaningless cruft, and that other languages seem to do just fine with convention-based data-hiding or partitioning of responsibilities (e.g. python).  As others have noted above, there are 2 problems that you run into, and they're not really fixable: Just about any automated tool in the java world relies on the getter/setter convention. Ditto for, as noted by others, jsp tags, spring configuration, eclipse tools, etc. etc...  Fighting against what your tools expect to see is a recipe for long sessions trolling through google trying to find that non-standard way of initiating spring beans. Really not worth the trouble. Once you have your elegantly coded application with hundreds of public variables you will likely find at least one situation where they're insufficient- where you absolutely need immutability, or you need to trigger some event when the variable gets set, or you want to throw an exception on a variable change because it sets an object state to something unpleasant. You're then stuck with the unenviable choices between  cluttering up your code with some special method everywhere the variable is directly referenced, having some special access form for 3 out of the 1000 variables in your application.  And this is in the best case scenario of working entirely in a self-contained private project. Once you export the whole thing to a publicly accessible library these problems will become even larger.  Java is very verbose, and this is a tempting thing to do. Don't do it.", 'questionId': '36701', 'answerId': '332162'}
{'answer': "There is nothing wrong with that type of code, provided that the author knows they are structs (or data shuttles) instead of objects. Lots of Java developers can't tell the difference between a well-formed object (not just a subclass of java.lang.Object, but a true object in a specific domain) and a pineapple. Ergo,they end up writing structs when they need objects and viceversa.", 'questionId': '36701', 'answerId': '2642464'}
{'answer': "As with most things, there's the general rule and then there are specific circumstances. If you are doing a closed, captured application so that you know how a given object is going to be used, then you can exercise more freedom to favor visibility and/or efficiency. If you're developing a class which is going to be used publicly by others beyond your control, then lean towards the getter/setter model. As with all things, just use common sense. It's often ok to do an initial round with publics and then change them to getter/setters later.", 'questionId': '36701', 'answerId': '2707127'}
{'answer': 'It appears that many Java people are not familiar with the Sun Java Coding Guidelines which say it is quite appropriate to use public instance variable when the class is  essentially a "Struct", if Java supported "struct" (when there is no behavior). People tend to think getters and setters are the Java way,  as if they are at the heart of Java. This is not so. If you follow the Sun Java  Coding Guidelines, using public instance variables in appropriate situations,  you are actually writing better code than cluttering it with needless getters and setters. Java Code Conventions from 1999 and still unchanged. 10.1     Providing Access to Instance and Class Variables Don\'t make any instance or class variable public without good reason. Often, instance variables don\'t need to be explicitly set or gotten-often that happens as a side effect of method calls. One example of appropriate public instance variables is the case where the class is essentially a data structure, with no behavior. In other words, if you would have used a struct instead of a class (if Java supported struct), then it\'s appropriate to make the class\'s instance variables public. http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-137265.html#177 http://en.wikipedia.org/wiki/Plain_old_data_structure http://docs.oracle.com/javase/1.3/docs/guide/collections/designfaq.html#28', 'questionId': '36701', 'answerId': '8565711'}
{'answer': "Aspect-oriented programming lets you trap assignments or fetches and attach intercepting logic to them, which I propose is the right way to solve the problem.  (The issue of whether they should be public or protected or package-protected is orthogonal.) Thus you start out with unintercepted fields with the right access qualifier.  As your program requirements grow you attach logic to perhaps validate, make a copy of the object being returned, etc. The getter/setter philosophy imposes costs on a large number of simple cases where they are not needed. Whether aspect-style is cleaner or not is somewhat qualitative.  I would find it easy to see just the variables in a class and view the logic separately.  In fact, the raison d'etre for Apect-oriented programming is that many concerns are cross-cutting and compartmentalizing them in the class body itself is not ideal (logging being an example -- if you want to log all gets Java wants you to write a whole bunch of getters and keeping them in sync but AspectJ allows you a one-liner). The issue of IDE is a red-herring. It is not so much the typing as it is the reading and visual pollution that arises from get/sets. Annotations seem similar to aspect-oriented programming at first sight however they require you to exhaustively enumerate pointcuts by attaching annotations, as opposed to a concise wild-card-like pointcut specification in AspectJ. I hope awareness of AspectJ prevents people from prematurely settling on dynamic languages.", 'questionId': '36701', 'answerId': '8566099'}
{'answer': "Here I create a program to input Name and Age of 5 different persons and perform a selection sort (age wise). I used an class which act as a structure (like C programming language) and a main class to perform the complete operation. Hereunder I'm furnishing the code... The above code is Error Free and Tested... Just copy and paste it into your IDE and ... You know and what??? :)", 'questionId': '36701', 'answerId': '14950725'}
{'answer': 'A very-very old question, but let me make another short contribution. Java 8 introduced lambda expressions and method references. Lambda expressions can be simple method references and not declare a "true" body. But you cannot "convert" a field into a method reference. Thus isn\'t legal, but is.', 'questionId': '36701', 'answerId': '24680006'}
{'answer': "Do not use public fields Don't use public fields when you really want to wrap the internal behavior of a class. Take java.io.BufferedReader for example. It has the following field: skipLF is read and written in all read methods. What if an external class running in a separate thread maliciously modified the state of skipLF in the middle of a read? BufferedReader will definitely go haywire. Do use public fields Take this Point class for example: This would make calculating the distance between two points very painful to write. The class does not have any behavior other than plain getters and setters.  It is acceptable to use public fields when the class represents just a data structure, and does not have, and never will have behavior (thin getters and setters is not considered behavior here). It can be written better this way: Clean! But remember: Not only your class must be absent of behavior, but it should also have no reason to have behavior in the future as well.", 'questionId': '36701', 'answerId': '26032324'}
{'answer': "Both ways can lead to unexpected results.  Your best bet is to not call a virtual function in your constructor at all.  The C++ way I think makes more sense, but leads to expectation problems when someone reviews your code.  If you are aware of this situation, you should purposely not put your code in this situation for later debugging's sake.", 'questionId': '36832', 'answerId': '36837'}
{'answer': "I think C++ offers the best semantics in terms of having the 'most correct' behavior ... however it is more work for the compiler and the code is definitiely non-intuitive to someone reading it later. With the .NET approach the function must be very limited not to rely on any derived object state.", 'questionId': '36832', 'answerId': '36844'}
{'answer': " Virtual functions in constructors, why do languages differ? Because there's no one good behaviour.  I find the C++ behaviour makes more sense (since base class c-tors are called first, it stands to reason that they should call base class virtual functions--after all, the derived class c-tor hasn't run yet, so it may not have set up the right preconditions for the derived class virtual function). But sometimes, where I want to use the virtual functions to initialize state (so it doesn't matter that they're being called with the state uninitialized) the C#/Java behaviour is nicer.", 'questionId': '36832', 'answerId': '37322'}
{'answer': 'Delphi makes good use of virtual constructors in the VCL GUI framework:', 'questionId': '36832', 'answerId': '75026'}
{'answer': "There's a fundamental difference in how the languages define an object's life time. In Java and .Net the object members are zero/null initialized before any constructor is run and is at this point that the object life time begins. So when you enter the constructor you've already got an initialized object. In C++ the object life time only begins when the constructor finishes (although member variables and base classes are fully constructed before it starts). This explains the behaviour when virtual functions are called and also why the destructor isn't run if there's an exception in the constructor's body. The problem with the Java/.Net definition of object lifetime is that it's harder to make sure the object always meets its invariant without having to put in special cases for when the object is initialized but the constructor hasn't run. The problem with the C++ definition is that you have this odd period where the object is in limbo and not fully constructed.", 'questionId': '36832', 'answerId': '75654'}
{'answer': "I have found the C++ behavior very annoying. You cannot write virtual functions to, for instance, return the desired size of the object, and have the default constructor initialize each item. For instance it would be nice to do: BaseClass() {    for (int i=0; i<virtualSize(); i++)      initialize_stuff_for_index(i); } Then again the advantage of C++ behavior is that it discourages constuctors like the above from being written. I don't think the problem of calling methods that assume the constructor has been finished is a good excuse for C++. If this really was a problem then the constructor would not be allowed to call any methods, since the same problem can apply to methods for the base class. Another point against C++ is that the behavior is much less efficient. Although the constructor knows directly what it calls, the vtab pointer has to be changed for every single class from base to final, because the constructor might call other methods that will call virtual functions. From my experience this wastes far more time than is saved by making virtual functions calls in the constructor more efficient. Far more annoying is that this is also true of destructors. If you write a virtual cleanup() function, and the base class destructor does cleanup(), it certainly does not do what you expect. This and the fact that C++ calls destructors on static objects on exit have really pissed me off for a long time.", 'questionId': '36832', 'answerId': '77445'}
{'answer': "The short answer is, you're not missing anything.  The Android SDK doesn't provide a direct method to change the indicator of a TabHost after it's been created.  The TabSpec is only used to build the tab, so changing the TabSpec after the fact will have no effect. I think there's a workaround, though.  Call mTabs.getTabWidget() to get a TabWidget object.  This is just a subclass of ViewGroup, so you can call getChildCount() and getChildAt() to access individual tabs within the TabWidget.  Each of these tabs is also a View, and in the case of a tab with a graphical indicator and a text label, it's almost certainly some other ViewGroup (maybe a LinearLayout, but it doesn't matter) that contains an ImageView and a TextView.  So with a little fiddling with the debugger or Log.i, you should be able to figure out a recipe to get the ImageView and change it directly. The downside is that if you're not careful, the exact layout of the controls within a tab could change and your app could break.  Your initial solution is perhaps more robust, but then again it might lead to other unwanted side effects like flicker or focus problems.", 'questionId': '36881', 'answerId': '68078'}
{'answer': "Just to confirm dominics answer, here's his solution in code (that actually works): Of course it's not polished at all and using those direct indices in getChildAt() is not nice at all...", 'questionId': '36881', 'answerId': '504023'}
{'answer': 'See my post with code example regarding Customized Android Tabs. Thanks Spct', 'questionId': '36881', 'answerId': '510196'}
{'answer': 'It might be a little late but you might wanna take a look at this thread http://groups.google.com/group/android-developers/browse_thread/thread/ef3bdebcb715b385', 'questionId': '36881', 'answerId': '615487'}
{'answer': 'This is what I did and it works for me. I created this function in the activity that extends from TabBarActivity You can modify this function to change the image instead of text or you can change both, also you can modify this to get any tab child. I was particularly interested in modifying the text of the first tab at runtime. I called this function from the relevant activity using this call', 'questionId': '36881', 'answerId': '6627972'}
{'answer': 'Try This:', 'questionId': '36881', 'answerId': '11808808'}
{'answer': 'notify() will wake up one thread while notifyAll() will wake up all. As far as I know there is no middle ground. But if you are not sure what notify() will do to your threads, use notifyAll(). Works like a charm everytime.', 'questionId': '37026', 'answerId': '37038'}
{'answer': 'I think it depends on how resources are produced and consumed. If 5 work objects are available at once and you have 5 consumer objects, it would make sense to wake up all threads using notifyAll() so each one can process 1 work object. If you have just one work object available, what is the point in waking up all consumer objects to race for that one object? The first one checking for available work will get it and all other threads will check and find they have nothing to do. I found a great explanation here. In short:  The notify() method is generally used   for resource pools, where there   are an arbitrary number of "consumers"   or "workers" that take resources, but   when a resource is added to the pool,   only one of the waiting consumers or   workers can deal with it. The   notifyAll() method is actually used in   most other cases. Strictly, it is   required to notify waiters of a   condition that could allow multiple   waiters to proceed. But this is often   difficult to know. So as a general   rule, if you have no particular   logic for using notify(), then you   should probably use notifyAll(),   because it is often difficult to know   exactly what threads will be waiting   on a particular object and why.', 'questionId': '37026', 'answerId': '37045'}
{'answer': "Simply put, it depends on why your threads are waiting to be notified. Do you want to tell one of the waiting threads that something happened, or do you want to tell all of them at the same time? In some cases, all waiting threads can take useful action once the wait finishes. An example would be a set of threads waiting for a certain task to finish; once the task has finished, all waiting threads can continue with their business. In such a case you would use notifyAll() to wake up all waiting threads at the same time. Another case, for example mutually exclusive locking, only one of the waiting threads can do something useful after being notified (in this case acquire the lock). In such a case, you would rather use notify(). Properly implemented, you could use notifyAll() in this situation as well, but you would unnecessarily wake threads that can't do anything anyway.", 'questionId': '37026', 'answerId': '37046'}
{'answer': "Useful differences: Use notify() if all your waiting threads are interchangeable (the order they wake up doesn't matter), or if you only ever have one waiting thread. A common example is a thread pool used to execute jobs from a queue--when a job is added, one of threads is notified to wake up, execute the next job and go back to sleep. Use notifyAll() for other cases where the waiting threads may have different purposes and should be able to run concurrently. An example is a maintenance operation on a shared resource, where multiple threads are waiting for the operation to complete before accessing the resource.", 'questionId': '37026', 'answerId': '37050'}
{'answer': "All the above answers are correct, as far as I can tell, so I'm going to tell you something else. For production code you really should use the classes in java.util.concurrent. There is very little they cannot do for you, in the area of concurrency in java.", 'questionId': '37026', 'answerId': '37058'}
{'answer': 'From Joshua Bloch, the Java Guru himself in Effective Java 2nd edition: "Item 69: Prefer concurrency utilities to wait and notify".', 'questionId': '37026', 'answerId': '41788'}
{'answer': 'Note that with concurrency utilities you also have the choice between signal() and signalAll() as these methods are called there.  So the question remains valid even with java.util.concurrent. Doug Lea brings up an interesting point in his famous book: if a notify() and Thread.interrupt() happen at the same time, the notify might actually get lost.  If this can happen and has dramatic implications notifyAll() is a safer choice even though you pay the price of overhead (waking too many threads most of the time).', 'questionId': '37026', 'answerId': '1006498'}
{'answer': "Waking up all does not make much significance here.  wait notify and notifyall, all these are put after owning the object's monitor. If a thread is in the waiting stage and notify is called, this thread will take up the lock and no other thread at that point can take up that lock. So concurrent access can not take place at all. As far as i know any call to wait notify and notifyall can be made only after taking the lock on the object. Correct me if i am wrong.", 'questionId': '37026', 'answerId': '1899610'}
{'answer': 'Here is an example. Run it. Then change one of the notifyAll() to notify() and see what happens. ProducerConsumerExample class Dropbox class Consumer class Producer class', 'questionId': '37026', 'answerId': '2879412'}
{'answer': "Clearly, notify wakes (any) one thread in the wait set, notifyAll wakes all threads in the waiting set. The following discussion should clear up any doubts. notifyAll should be used most of the time. If you are not sure which to use, then use notifyAll.Please see explanation that follows. Read very carefully and understand. Please send me an email if you have any questions. Look at producer/consumer (assumption is a ProducerConsumer class with two methods). IT IS BROKEN (because it uses notify) - yes it MAY work - even most of the time, but it may also cause deadlock - we will see why: FIRSTLY, Why do we need a while loop surrounding the wait? We need a while loop in case we get this situation: Consumer 1 (C1) enter the synchronized block and the buffer is empty, so C1 is put in the wait set (via the wait call). Consumer 2 (C2) is about to enter the synchronized method (at point Y above), but Producer P1 puts an object in the buffer, and subsequently calls notify. The only waiting thread is C1, so it is woken and now attempts to re-acquire the object lock at point X (above). Now C1 and C2 are attempting to acquire the synchronization lock. One of them (nondeterministically) is chosen and enters the method, the other is blocked (not waiting - but blocked, trying to acquire the lock on the method). Let's say C2 gets the lock first. C1 is still blocking (trying to acquire the lock at X). C2 completes the method and releases the lock. Now, C1 acquires the lock. Guess what, lucky we have a while loop, because, C1 performs the loop check (guard) and is prevented from removing a non-existent element from the buffer (C2 already got it!). If we didn't have a while, we would get an IndexArrayOutOfBoundsException as C1 tries to remove the first element from the buffer! NOW, Ok, now why do we need notifyAll? In the producer/consumer example above it looks like we can get away with notify. It seems this way, because we can prove that the guards on the wait loops for producer and consumer are mutually exclusive. That is, it looks like we cannot have a thread waiting in the put method as well as the get method, because, for that to be true, then the following would have to be true: buf.size() == 0 AND buf.size() == MAX_SIZE (assume MAX_SIZE is not 0) HOWEVER, this is not good enough, we NEED to use notifyAll. Let's see why ... Assume we have a buffer of size 1 (to make the example easy to follow). The following steps lead us to deadlock. Note that ANYTIME a thread is woken with notify, it can be non-deterministically selected by the JVM - that is any waiting thread can be woken. Also note that when multiple threads are blocking on entry to a method (i.e. trying to acquire a lock), the order of acquisition can be non-deterministic. Remember also that a thread can only be in one of the methods at any one time - the synchronized methods allow only one thread to be executing (i.e. holding the lock of) any (synchronized) methods in the class. If the following sequence of events occurs - deadlock results: STEP 1: - P1 puts 1 char into the buffer STEP 2: - P2 attempts put - checks wait loop - already a char - waits STEP 3: - P3 attempts put - checks wait loop - already a char - waits STEP 4: - C1 attempts to get 1 char  - C2 attempts to get 1 char - blocks on entry to the get method - C3 attempts to get 1 char - blocks on entry to the get method STEP 5: - C1 is executing the get method - gets the char, calls notify, exits method - The notify wakes up P2 - BUT, C2 enters method before P2 can (P2 must reacquire the lock), so P2 blocks on entry to the put method - C2 checks wait loop, no more chars in buffer, so waits - C3 enters method after C2, but before P2, checks wait loop, no more chars in buffer, so waits STEP 6: - NOW: there is P3, C2, and C3 waiting! - Finally P2 acquires the lock, puts a char in the buffer, calls notify, exits method STEP 7: - P2's notification wakes P3 (remember any thread can be woken) - P3 checks the wait loop condition, there is already a char in the buffer, so waits. - NO MORE THREADS TO CALL NOTIFY and THREE THREADS PERMANENTLY SUSPENDED! SOLUTION: Replace notify with notifyAll in the producer/consumer code (above).", 'questionId': '37026', 'answerId': '3186336'}
{'answer': 'notify() wakes up the first thread that called wait() on the same object. notifyAll() wakes up all the threads that called wait() on the same object. The highest priority thread will run first.', 'questionId': '37026', 'answerId': '8390277'}
{'answer': 'Take a look at the code posted by @xagyg.   Suppose two different threads are waiting for two different conditions: The first thread is waiting for buf.size() != MAX_SIZE, and the second thread is waiting for buf.size() != 0.   Suppose at some point buf.size() is not equal to 0. JVM calls notify() instead of notifyAll(), and the first thread is notified (not the second one).    The first thread is woken up, checks for buf.size() which might return MAX_SIZE, and goes back to waiting. The second thread is not woken up, continues to wait and does not call get().', 'questionId': '37026', 'answerId': '9880331'}
{'answer': 'I am very surprised that no one mentioned the infamous "lost wakeup" problem (google it). Basically: if you have multiple threads waiting on a same condition and,  multiple threads that can make you transition from state A to state B and, multiple threads that can make you transition from state B to state A (usually the same threads as in 1.) and, transitioning from state A to B should notify threads in 1.   THEN you should use notifyAll unless you have provable guarantees that lost wakeups are impossible. A common example is a concurrent FIFO queue where: multiple enqueuers (1. and 3. above) can transition your queue from empty to non-empty  multiple dequeuers (2. above) can wait for the condition "the queue is not empty" empty -> non-empty should notify dequeuers You can easily write an interleaving of operations in which, starting from an empty queue, 2 enqueuers and 2 dequeuers interact and 1 enqueuer will remain sleeping. This is a problem arguably comparable with the deadlock problem.', 'questionId': '37026', 'answerId': '12439274'}
{'answer': "notify() lets you write more efficient code than notifyAll(). Consider the following piece of code that's executed from multiple parallel threads: It can be made more efficient by using notify(): In the case if you have a large number of threads, or if the wait loop condition is costly to evaluate, notify() will be significantly faster than notifyAll(). For example, if you have 1000 threads then 999 threads will be awakened and evaluated after the first notifyAll(), then 998, then 997, and so on. On the contrary, with the notify() solution, only one thread will be awakened.  Use notifyAll() when you need to choose which thread will do the work next: Finally, it's important to understand that in case of notifyAll(), the code inside synchronized blocks that have been awakened will be executed sequentially, not all at once. Let's say there are three threads waiting in the above example, and the fourth thread calls notifyAll(). All three threads will be awakened but only one will start execution and check the condition of the while loop. If the condition is true, it will call wait() again, and only then the second thread will start executing and will check its while loop condition, and so on.", 'questionId': '37026', 'answerId': '17158435'}
{'answer': 'Here\'s a simpler explanation: You\'re correct that whether you use notify() or notifyAll(), the immediate result is that exactly one other thread will acquire the monitor and begin executing. (Assuming some threads were in fact blocked on wait() for this object, other unrelated threads aren\'t soaking up all available cores, etc.) The impact comes later. Suppose thread A, B, and C were waiting on this object, and thread A gets the monitor. The difference lies in what happens once A releases the monitor. If you used notify(), then B and C are still blocked in wait(): they are not waiting on the monitor, they are waiting to be notified. When A releases the monitor, B and C will still be sitting there, waiting for a notify(). If you used notifyAll(), then B and C have both advanced past the "wait for notification" state and are both waiting to acquire the monitor. When A releases the monitor, either B or C will acquire it (assuming no other threads are competing for that monitor) and begin executing.', 'questionId': '37026', 'answerId': '17287218'}
{'answer': "I would like to mention what is explained in Java Concurrency in Practice: First point, whether Notify or NotifyAll? If two threads A and B are waiting on different condition predicates   of same condition queue and notify is called, then it is upto JVM to   which thread JVM will notify. Now if notify was meant for thread A and JVM notified thread B, then   thread B will wake up and see that this notification is not useful so   it will wait again. And Thread A will never come to know about this   missed signal and someone hijacked it's notification. So, calling notifyAll will resolve this issue, but again it will have   performance impact as it will notify all threads and all threads will   compete for same lock and it will involve context switch and hence   load on CPU. But we should care about performance only if it is   behaving correctly, if it's behavior itself is not correct then   performance is of no use. This problem can be solved with using Condition object of explicit locking Lock, provided in jdk 5, as it provides different wait for each condition predicate. Here it will behave correctly and there will not be performance issue as it will call signal and make sure that only one thread is waiting for that condition", 'questionId': '37026', 'answerId': '18650599'}
{'answer': 'I hope this will clear some doubts. notify() : The notify() method wakes up one thread waiting for the lock (the first thread that called wait() on that lock). notifyAll() : The notifyAll() method wakes up all the threads waiting for the lock; the JVM selects one of the threads from the list of threads waiting for the lock and wakes that thread up. In the case of a single thread waiting for a lock, there is no significant difference between notify() and notifyAll(). However, when there is more than one thread waiting for the lock, in both notify() and notifyAll(), the exact thread woken up is under the control of the JVM and you cannot programmatically control waking up a specific thread. At first glance, it appears that it is a good idea to just call notify() to wake up one thread; it might seem unnecessary to wake up all the threads. However, the problem with notify() is that the thread woken up might not be the suitable one to be woken up (the thread might be waiting for some other condition, or the condition is still not satisfied for that thread etc). In that case, the notify() might be lost and no other thread will wake up potentially leading to a type of deadlock (the notification is lost and all other threads are waiting for notificationforever). To avoid this problem, it is always better to call notifyAll() when there is more than one thread waiting for a lock (or more than one condition on which waiting is done). The notifyAll() method wakes up all threads, so it is not very efficient. however, this performance loss is negligible in real world applications.', 'questionId': '37026', 'answerId': '23927058'}
{'answer': 'notify will notify only one thread which are in waiting state, while notify all will notify all the threads in the waiting state now all the notified threads and all the blocked threads are eligible for the lock, out of which only one will get the lock and all others (including those who are in waiting state earlier) will be in blocked state.', 'questionId': '37026', 'answerId': '24894963'}
{'answer': 'To summarize the excellent detailed explanations above, and in the simplest way I can think of, this is due to the limitations of the JVM built-in monitor, which 1) is acquired on the entire synchronization unit (block or object) and 2) does not discriminate about the specific condition being waited/notified on/about.  This means that if multiple threads are waiting on different conditions and notify() is used, the selected thread may not be the one which would make progress on the newly fulfilled condition - causing that thread (and other currently still waiting threads which would be able to fulfill the condition, etc..) not to be able to make progress, and eventually starvation or program hangup.  In contrast, notifyAll() enables all waiting threads to eventually re-acquire the lock and check for their respective condition, thereby eventually allowing progress to be made.  So notify() can be used safely only if any waiting thread is guaranteed to allow progress to be made should it be selected, which in general is satisfied when all threads within the same monitor check for only one and the same condition - a fairly rare case in real world applications.', 'questionId': '37026', 'answerId': '33066887'}
{'answer': "Short summary: Always prefer notifyAll() over notify() unless you have a massively parallel application where a large number of threads all do the same thing. Explanation: notify() [...] wakes up a single   thread. Because notify() doesn't allow you to specify the thread that is   woken up, it is useful only in massively parallel applications  that   is, programs with a large number of threads, all doing similar chores.   In such an application, you don't care which thread gets woken up. source: https://docs.oracle.com/javase/tutorial/essential/concurrency/guardmeth.html Compare notify() with notifyAll() in the above described situation: a massively parallel application where threads are doing the same thing. If you call notifyAll() in that case, notifyAll() will induce the waking up (i.e. scheduling) of a huge number of threads, many of them unnecessarily (since only one thread can actually proceed, namely the thread which will be granted the monitor for the object wait(), notify(), or notifyAll() was called on), therefore wasting computing resources. Thus, if you don't have an application where a huge number of threads do the same thing concurrently, prefer notifyAll() over notify(). Why? Because, as other users have already answered in this forum, notify()  wakes up a single thread that is waiting on this object's monitor. [...] The   choice is arbitrary and occurs at the discretion of the   implementation. source: Java SE8 API (https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--) Imagine you have a producer consumer application where consumers are ready (i.e. wait() ing) to consume, producers are ready (i.e. wait() ing) to produce and the queue of items (to be produced / consumed) is empty. In that case, notify() might wake up only consumers and never producers because the choice who is waken up is arbitrary. The producer consumer cycle wouldn't make any progress although producers and consumers are ready to produce and consume, respectively. Instead, a consumer is woken up (i.e. leaving the wait() status), doesn't take an item out of the queue because it's empty, and notify() s another consumer to proceed. In contrast, notifyAll() awakens both producers and consumers. The choice who is scheduled depends on the scheduler. Of course, depending on the scheduler's implementation, the scheduler might also only schedule consumers (e.g. if you assign consumer threads a very high priority). However, the assumption here is that the danger of the scheduler scheduling only consumers is lower than the danger of the JVM only waking up consumers because any reasonably implemented scheduler doesn't make just arbitrary decisions. Rather, most scheduler implementations make at least some effort to prevent starvation.", 'questionId': '37026', 'answerId': '33329002'}
{'answer': 'notify() - Selects a random thread from the wait set of the object and puts it in the BLOCKED state. The rest of the threads in the wait set of the object are still in the WAITING state. notifyAll() - Moves all the threads from the wait set of the object to BLOCKED state. After you use notifyAll(), there are no threads remaining in the wait set of the shared object because all of them are now in BLOCKED state and not in WAITING state.  BLOCKED - blocked for lock acquisition. WAITING - waiting for notify ( or blocked for join completion ).', 'questionId': '37026', 'answerId': '33329952'}
{'answer': 'When you call the wait() of the "object"(expecting the object lock is acquired),intern this will release the lock on that object and help\'s the other threads to have lock on this "object", in this scenario there will be more than 1 thread waiting for the "resource/object"(considering the other threads also issued the wait on the same above object and down the way there will be a thread that fill the resource/object and invokes notify/notifyAll).  Here when you issue the notify of the same object(from the same/other side of the process/code),this will release a blocked and waiting single thread (not all the waiting threads  -- this released thread will be picked by JVM Thread Scheduler and all the lock obtaining process on the object is same as regular). If you have Only one thread that will be sharing/working on this object , it is ok to use the notify() method alone in your wait-notify implementation. if you are in situation where more than one thread read\'s and writes on resources/object  based on your business logic,then you should go for notifyAll() now i am looking how exactly the jvm is identifying and breaking the waiting thread when we issue notify() on a object ...', 'questionId': '37026', 'answerId': '36777757'}
{'answer': 'There are three states for a thread.  WAIT - The thread is not using any CPU cycle BLOCKED - The thread is blocked trying to acquire a monitor.It might still be using the CPU cycles RUNNING - The thread is running. Now, when a notify() is called, JVM picks one thread and move them to to the BLOCKED state and hence to the RUNNING State as there is no competition for the monitor object. When a notifyAll() is called, JVM picks all the threads and move all of them to BLOCKED State. All these threads will get the lock of the object on a priority basis.Thread which is able to acquire the monitor first will be able to go to the RUNNING state first and so on.', 'questionId': '37026', 'answerId': '41530610'}
{'answer': "While there are some solid answers above, I am surprised by the number of confusions and misunderstandings I have read. This probably proves the idea that one should use java.util.concurrent as much as possible instead of trying to write own broken concurrent code. Back to the question: to summarize, the best practice today is to AVOID notify() in ALL situations due to the lost wakeup problem. Anyone who doesn't understand this should not be allowed to write mission critical concurrency code. If you are worried about the herding problem, one safe way to achieve waking one thread up at a time is to: 1. Build an explicit waiting queue for the waiting threads; 2. Have each of the thread in the queue wait for it's predecessor; 3. Have each thread call notifyAll() when done. Or you can use Java.util.concurrent.*, which have already implemented this.", 'questionId': '37026', 'answerId': '41910658'}
{'answer': 'This answer is a graphical rewriting and simplification of the excellent answer by xagyg, including comments by eran. Why use notifyAll, even when each product is intended for a single consumer? Consider producers and consumers, simplified as follows. Producer: Consumer: Assume 2 producers and 2 consumers, sharing a buffer of size 1. The following picture depicts a scenario leading to a deadlock, which would be avoided if all threads used notifyAll. Each notify is labeled with the thread being woken up.', 'questionId': '37026', 'answerId': '44175631'}
{'answer': "All the answers that says that notifyAll() wakes up all the threads and then randomly selects a thread are WRONG. notifyAll() selects a thread with the highest priority and then let's them work according to their priority.", 'questionId': '37026', 'answerId': '44577093'}
{'answer': 'For the asynchronous bit, I would suggest checking into java.util.concurrent, and especially the Future<T> interface. The future interface is used to represent objects which are not ready yet, but are being created in a separate thread. You say that objects can be modified at any time by a third party, but I would still suggest you use immutable return objects here, and instead have a separate thread/event log you can subscribe to to get noticed when objects expire. I have little programming with UIs, but I believe using Futures for asynchronous calls would let you have a responsive GUI, rather than one that was waiting for a server reply. For the queries I would suggest using method chaining to build the query object, and each object returned by method chaining should be Iterable. Similar to how Djangos model is. Say you have QuerySet which implements Iterable<Song>. You can then call allSongs() which would return a result iterating over all Songs. Or allSongs().artist("Beatles"), and you would have an iterable over all Betles songs. Or even allSongs().artist("Beatles").years(1965,1967) and so on.  Hope this helps as a starting place.', 'questionId': '37041', 'answerId': '37093'}
{'answer': "@Staale: Thanks a bunch! Using Future for the async operations is interesting. The only drawback being that it is doesn't provide callbacks. But then again, I tried that approach, and look where that got me :) I'm currently solving a similar problem using a worker thread and a blocking queue for dispatching the incoming command replies, but that approach doesn't translate very well. The remote objects can be modified, but since I do use threads, I try to keep the objects immutable. My current hypothesis is that I will send notification events on track updates on the form or similar, but then I might end up with several versions of the same track. I'll definitely look into Djangos method chaining. I've been looking at some similar constructs but haven't been able to come up with a good variant. Returning something iterable is interesting, but the query could take some time to complete, and I wouldn't want to actually execute the query before it's completely constructed. Perhaps something like returning a Future might work...", 'questionId': '37041', 'answerId': '37123'}
{'answer': 'Iterable only has the method Iterator get() or somesuch. So no need to build any query or execute any code until you actually start iterating. It does make the execute in your example redundant. However, the thread will be locked until the first result is available, so you might consider using an Executor to run the code for the query in a separate thread.', 'questionId': '37041', 'answerId': '37175'}
{'answer': "@Staale It is certainly possibly, but as you note, that would make it blocking (at home for something like 10 seconds due to sleeping disks), meaning I can't use it to update the UI directly. I could use the iterator to create a copy of the result in a separate thread and then send that to the UI, but while the iterator solution by itself is rather elegant, it won't fit in very well. In the end, something implementing IStructuredContentProvider needs to return an array of all the objects in order to display it in a TableViewer, so if I can get away with getting something like that out of a callback... :) I'll give it some more thought. I might just be able to work out something. It does give the code a nice look.", 'questionId': '37041', 'answerId': '37226'}
{'answer': "My conclusions so far; I am torn on whether to use getters for the Track objects or just expose the members since the object is immutable. Anybody who wants to know when something happened to a track in the library would implement this... This is how querys are built. Chain calls to your hearts content. the jury is still out on the get() though. There are some details missing, such as how I should handle wildcards and more advanced queries with disjunctions. I might just need some completion callback functionality, perhaps similar to the Asynchronous Completion Token, but we'll see about that. Perhaps that will happen in an additional layer. Some examples: The tracks interface is mostly just the glue between the connection and the individual tracks. It will be the one implementing or managing meta-data caching, if any (as today, but I think I'll just remove it during the refactoring and see if I actually need it). Also, this provides medialib track updates as it would just be too much work to implement it by track.", 'questionId': '37041', 'answerId': '37933'}
{'answer': "If you're using multiple threads, the operating system will automatically take care of using multiple cores.", 'questionId': '37089', 'answerId': '37090'}
{'answer': "The operating system takes care of multi-threading when the virtual machine is using native threads (as opposed to green-threads), and you can't specify low level details, like choosing a processor for a certain thread. It is better that way because you usually have many more threads than you have processors available, so the operating system needs to do time-slicing to give all threads a chance to run. That being said, you can set threads priorities if you have a critical task, and a threading API usually provides this possibility. See the Java API for example: http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Thread.html#setPriority(int) PS: there's something broken in the parsing engine ... I had to add the above link as plain text", 'questionId': '37089', 'answerId': '37096'}
{'answer': " is there a way to choose which processor or core it is launched on? You can use the task manager to tell windows what CPU(s) your program should be allowed to run on. Normally this is only useful for troubleshooting legacy programs which have broken implementations of multi-threading. To do this,  Run task manager Find your process in the Processes window. Right click and choose Set Affinity... Tick the checkboxes next to the CPU's you want to allow your application to run on. Windows will then only schedule threads from that process onto those particular CPU's If I recall correctly, windows will 'remember' these settings for subsequent times your process is run, but please don't quote me on that - run some tests yourself :-) You can also do this programatically in .NET after your program has launched using using the System.Diagnostics.Process.ProcessorAffinity property, but I don't think it will 'remember' the settings, so there will always be a short period in which your app is run on whichever CPU windows sees fit. I don't know how to do this in java sorry. Note: This applies at the entire process level. If you set affinity for CPU0 only, and then launch 50 threads, all 50 of those threads will run on CPU0, and CPU1, 2, 3, etc will sit around doing nothing. Just to reiterate the point, this is primarily useful for troubleshooting broken legacy software. If your software is not broken, you really shouldn't mess with any of these settings, and let windows decide the best CPU(s) to run your program on, so it can take the rest of the system's performance into account. As for the 'shared memory' model, it works the same, but there are more things that can go subtly wrong when your app is running on multiple CPU's as opposed to just timeslices on a single one. For an eye-opening example, read this ridiculousfish article about CPU's and Memory Barriers. It's aimed at OSX development on PowerPC, but general enough that it should apply everywhere. IMHO it's one of the top ten 'all developers should read this' articles I've read.", 'questionId': '37089', 'answerId': '37117'}
{'answer': 'I have used this in a couple of programs because my core 0 was kind of messed up. or More on this in "Process.ProcessorAffinity Property".', 'questionId': '37089', 'answerId': '37127'}
{'answer': 'I would have a look at the Parallel extensions to the .NET framework. It is still in CTP, however it supposed to make the best use of multi core processors. The easiest place to get started for .NET is on the parallel teams blog. As for Java I have no idea.', 'questionId': '37089', 'answerId': '37998'}
{'answer': 'My docs would probably best be handled by accessing: Look up the docs on System.getProperty.', 'questionId': '37198', 'answerId': '37240'}
{'answer': 'Any information you can get about the user\'s environment can be fetched from For a list of what you can get, take a look here: http://mgrand.home.mindspring.com/java-system-properties.htm I don\'t think you\'ll be able to get the path you require (the All Users path) in an OS dependent way.  After all - do other operating systems have an equivalent?  Your best bet is to probably inspect: to see if you are running Windows and then if so use "C:\\Documents & Settings\\All Users\\". But you\'ll be better off just constantly using (as mentioned by other people) throughout the application.  Or alternatively, allow the user to specify the directory to store whatever it is you want to store.', 'questionId': '37198', 'answerId': '37693'}
{'answer': ' Specifically getting on Windows the "..\\Documents & Settings\\All Users, basicaly any path that needs the front end to be dynamically derived based on the OS your software is running on. (Now I need the answer to this) The folders below the All Users dir are variable directories in windows. Details can be found in the document about KNOWNFOLDERIDs (CSIDL in older versions). Because this values are system dependent Java does not provide a way to access the values. I think there is in general no equivalent on other operating systems to this windows specific folder. In addition the folder Documents & Settings\\All Users is only present in latest windows versions and things are handled differently for e.g Windows 2000 or XP I think. If you really need this information you should read the microsoft docs and impement a native library or some script invoked by Runtime.exec to provide the information to your java application.', 'questionId': '37198', 'answerId': '12264950'}
{'answer': 'Have a look at Hibernate as a simpler way to interface to a database.', 'questionId': '37271', 'answerId': '37274'}
{'answer': 'XStream from codehaus.org XML serialization/deserialization largely without coding. You can use annotations to tweak it. Working well in two projects where I work. See my users group presentation at http://cjugaustralia.org/?p=61', 'questionId': '37271', 'answerId': '37278'}
{'answer': "I would go for the your final option JavaDB (Sun's distribution of Derby) and use an object relational layer like Hibernate or iBatis. Using the first three aproaches means you are going to spend more time building a database engine than developing application features.", 'questionId': '37271', 'answerId': '37279'}
{'answer': 'db4objects might be the best choice', 'questionId': '37271', 'answerId': '37300'}
{'answer': "In my experience, you're probably better off using an embedded database.  SQL, while less than perfect, is usually much easier than designing a file format that performs well and is reliable. I haven't used JavaDB, but I've had good luck with H2 and SQLite.  SQLite is a C library which means a little more work in terms of deployment.  However, it has the benefit of storing the entire database in a single, cross-platform library.  Basically, it is a pre-packaged, generic file format.  SQLite has been so useful that I've even started using it instead of text files in scripts. Be careful using Hibernate if you're working with a small persistence problem.  It adds a lot of complexity and library overhead.  Hibernate is really nice if you're working with a large number of tables, but it will probably be cumbersome if you only need a few tables.", 'questionId': '37271', 'answerId': '37355'}
{'answer': "I think it depends on what you need. Let's see the options: 1) Descarded imediatelly! I'll not even justify. :) 2) If you need a simple, quick, one-method persistence, stick with it. It will persist the complete data graph as it is! Beware of how long you'll be maintaning the persisted objects. As yourself pointed out, versioning can be a problem. 3) Slower than (2), need extra code and can be edited by the user. I would only use it the data is supposed to be used by a client in another language. 4) If you need to query your data in anyway, stick with the DB solution. Well, I think you had already answered your question :)", 'questionId': '37271', 'answerId': '39383'}
{'answer': "Since I don't know how your factory method looks like, all I can advise right now is to  Check to see the object is the correct concrete implementation you were looking for: You can check if the factory setup the concrete instances with valid instance variables.", 'questionId': '37310', 'answerId': '37316'}
{'answer': " update: Don't know why this got marked down, so I'll expand it a bit...", 'questionId': '37310', 'answerId': '37318'}
{'answer': "@cem-catikkas I think it would be more correct to compare the getClass().getName() values. In the case that MyInterfaceImpl1 class is subclassed your test could be broken, as the subclass is instanceof MyInterfaceImpl1. I would rewrite as follow: If you think this could fail in some way (I can't imagine), make the two verifications.", 'questionId': '37310', 'answerId': '39369'}
{'answer': 'What you are trying to do is not Unit Testing If you test whether or not the returned objects are instances of specific concrete classes, you aren\'t unit testing. You are integration testing. While integration testing is important, it is not the same thing. In unit testing, you only need to test the object itself. If you assert on the concrete type of the abstract objects returned, you are testing over the implementation of the returned object. Unit Testing on Objects in general When unit testing, there are four things, you want to assert: Return values of queries (non-void methods) are what you expect them to be. Side-effects of commands (void methods) modify the object itself as you expect them to. Commands send to other objects are received (This is usually done using mocks). Furthermore, you only want to test what could be observed from an object instance, i.e. the public interface. Otherwise you tie yourself to a specific set of implementation details. This would require you to change your tests, when those details change. Unit Testing Factories Unit testing on Factories is really uninteresting, because you are not interested in the behavior of the returned objects of queries. That behavior is (hopefully) tested elswhere, presumable while unit testing that object itself. You are only really interested in whether or not the returned object has the correct type, which is guarenteed if your program compiles. As Factories do not change over time (because then they would be "Builders", which is another pattern), there are no commands to test. Factories are responsible for instantiating objects, so they should not depend on other factories to do this for them. They might depend on a Builder, but even so, we are not supposed to test the Builder\'s correctness, only whether or not the Builder receives the message. This means that all you have to test on Factories is whether or not they send the messages to the objects on which they depend. If you use Dependency Injection, this is almsot trivial. Just mock the dependencies in your unit tests, and verify that they receive the messages. Summary on Unit Testing Factories Do not test the behavior nor the implementation details of the returned objects! Your Factory is not responsible for the implementation of the object instances! Test whether or not the commands sent to dependencies are received. That\'s it. If there are no dependencies, there is nothing to test. Except maybe to assert that the returned object isn\'t a null reference. Integration Testing Factories If you have a requirement that the returned abstract object type is an instance of a specific concrete type, then this falls under integration testing. Others here have already answered how to do this using the instanceof operator.', 'questionId': '37310', 'answerId': '34199097'}
{'answer': 'Ultimately you always have a finite max of heap to use no matter what platform you are running on. In Windows 32 bit this is around 2gb (not specifically heap but total amount of memory per process). It just happens that Java chooses to make the default smaller (presumably so that the programmer can\'t create programs that have runaway memory allocation without running into this problem and having to examine exactly what they are doing). So this given there are several approaches you could take to either determine what amount of memory you need or to reduce the amount of memory you are using. One common mistake with garbage collected languages such as Java or C# is to keep around references to objects that you no longer are using, or allocating many objects when you could reuse them instead. As long as objects have a reference to them they will continue to use heap space as the garbage collector will not delete them. In this case you can use a Java memory profiler to determine what methods in your program are allocating large number of objects and then determine if there is a way to make sure they are no longer referenced, or to not allocate them in the first place. One option which I have used in the past is "JMP" http://www.khelekore.org/jmp/. If you determine that you are allocating these objects for a reason and you need to keep around references (depending on what you are doing this might be the case), you will just need to increase the max heap size when you start the program. However, once you do the memory profiling and understand how your objects are getting allocated you should have a better idea about how much memory you need.  In general if you can\'t guarantee that your program will run in some finite amount of memory (perhaps depending on input size) you will always run into this problem. Only after exhausting all of this will you need to look into caching objects out to disk etc. At this point you should have a very good reason to say "I need Xgb of memory" for something and you can\'t work around it by improving your algorithms or memory allocation patterns. Generally this will only usually be the case for algorithms operating on large datasets (like a database or some scientific analysis program) and then techniques like caching and memory mapped IO become useful.', 'questionId': '37335', 'answerId': '37349'}
{'answer': 'Run Java with the command-line option -Xmx, which sets the maximum size of the heap. See here for details..', 'questionId': '37335', 'answerId': '37466'}
{'answer': "Yes, with -Xmx you can configure more memory for you JVM.  To be sure that you don't leak or waste memory. Take a heap dump and use the Eclipse Memory Analyzer to analyze your memory consumption.", 'questionId': '37335', 'answerId': '186390'}
{'answer': 'If you need to monitor your memory usage at runtime, the java.lang.management package offers MBeans that can be used to monitor the memory pools in your VM (eg, eden space, tenured generation etc), and also garbage collection behaviour. The free heap space reported by these MBeans will vary greatly depending on GC behaviour, particularly if your application generates a lot of objects which are later GC-ed. One possible approach is to monitor the free heap space after each full-GC, which you may be able to use to make a decision on freeing up memory by persisting objects. Ultimately, your best bet is to limit your memory retention as far as possible whilst performance remains acceptable. As a previous comment noted, memory is always limited, but your app should have a strategy for dealing with memory exhaustion.', 'questionId': '37335', 'answerId': '186957'}
{'answer': 'Big caveat ---- at my office, we were finding that (on some windows machines) we could not allocate more than 512m for Java heap. This turned out to be due to the Kaspersky anti-virus product installed on some of those machines. After uninstalling that AV product, we found we could allocate at least 1.6gb,   i.e,   -Xmx1600m (m is mandatory other wise it will lead to another error "Too small initial heap")   works. No idea if this happens with other AV products but presumably this is happening because the AV program is reserving a small block of memory in every address space, thereby preventing a single really large allocation.', 'questionId': '37335', 'answerId': '747593'}
{'answer': 'Note that if you need this in a deployment situation, consider using Java WebStart (with an "ondisk" version, not the network one - possible in Java 6u10 and later) as it allows you to specify the various arguments to the JVM in a cross platform way. Otherwise you will need a operating system specific launcher which sets the arguments you need.', 'questionId': '37335', 'answerId': '880998'}
{'answer': "I read somewhere else that you can try - catch java.lang.OutOfMemoryError and on the catch block, you can free all resources that you know might use alot of memory, close connections and so forth, then do a System.gc() then re-try whatever you were going to do. Another way is this although, i don't know whether this would work, but I am currently testing whether it will work on my application. The Idea is to do Garbage collection by calling System.gc() which is known to increase free memory. You can keep checking this after a memory gobbling code executes.", 'questionId': '37335', 'answerId': '3500230'}
{'answer': "If you keep on allocating & keeping references to object, you will fill up any ammount of memory you have. One option is to do a transparent file close & open when they switch tabs (you only keep a pointer to the file, and when the user switches tab, you close & clean all the objects... it'll make the file change slower... but...), and maybe keep only 3 or 4 files on memory. Other thing you should do is, when the user opens a file, load it, and intercept any OutOfMemoryError, then (as it is not possible to open the file) close that file, clean its objects and warn the user that he should close unused files. Your idea of dynamically extending virtual memory doesn't solve the issue, for the machine is limited on resources, so you should be carefull & handle memory issues (or at least, be carefull with them). A couple of hints i've seen with memory leaks is: --> Keep on mind that if you put something into a collection and afterwards forget about it, you still have a strong reference to it, so nullify the collection, clean it or do something with it... if not you will find a memory leak difficult to find. --> Maybe, using collections with weak references (weakhashmap...) can help with memory issues, but you must be carefull with it, for you might find that the object you look for has been collected. --> Another idea i've found is to develope a persistent collection that stored on database objects least used and transparently loaded. This would probably be the best approach...", 'questionId': '37335', 'answerId': '3819680'}
{'answer': 'You could specify per project how much heap space your project wants Following is for Eclipse Helios/Juno/Kepler: Right mouse click on then add this', 'questionId': '37335', 'answerId': '5121287'}
{'answer': 'I have faced same problem of java heap size. I have two solutions if you are using java 5(1.5). 1st:-just install jdk1.6 and go to the preferences of eclipse and set the jre path of jav1 1.6 as you have installed. 2nd:-Check your VM argument and let it be whatever it is. just add one line below of all the arguments present in VM arguments as  -Xms512m  -Xmx512m -XX:MaxPermSize=...m(192m). I think it will work...', 'questionId': '37335', 'answerId': '5954865'}
{'answer': 'VM argument worked for me in eclipse. If you are using eclipse version 3.4, do the following go to Run --> Run Configurations --> then select the project under maven build --> then select the tab "JRE" --> then enter -Xmx1024m. Alternatively you could do Run --> Run Configurations --> select the "JRE" tab --> then enter -Xmx1024m This should increase the memory heap for all the builds/projects. The above memory size is 1 GB. You can optimize the way you want.', 'questionId': '37335', 'answerId': '6299069'}
{'answer': 'Easy way to solve OutOfMemoryError in java is to increase the maximum heap size by using JVM options -Xmx512M, this will immediately solve your OutOfMemoryError. This is my preferred solution when I get OutOfMemoryError in Eclipse, Maven or ANT while building project because based upon size of project you can easily ran out of Memory. Here is an example of increasing maximum heap size of JVM, Also its better to keep -Xmx to -Xms ration either 1:1 or 1:1.5 if you are setting heap size in your java application. export JVM_ARGS="-Xms1024m -Xmx1024m" Reference Link', 'questionId': '37335', 'answerId': '7297504'}
{'answer': 'Follow below steps: Open catalina.sh from tomcat/bin. Chnage JAVA_OPTS to  Restart your tomcat', 'questionId': '37335', 'answerId': '19222984'}
{'answer': 'Increasing the heap size is not a "fix" it is a "plaster", 100% temporary. It will crash again in somewhere else. To avoid these issues, write high performance code. Use local variables wherever possible. Make sure you select the correct object (EX: Selection between String, StringBuffer and StringBuilder) Use a good code system for your program(EX: Using static variables VS non static variables) Other stuff which could work on your code. Try to move with multy THREADING', 'questionId': '37335', 'answerId': '21494341'}
{'answer': 'I would like to add recommendations from oracle trouble shooting article Exception in thread thread_name: java.lang.OutOfMemoryError: Java heap space The detail message Java heap space indicates object could not be allocated in the Java heap. This error does not necessarily imply a memory leak Possible causes: Simple configuration issue, where the specified heap size is insufficient for the application. Application is unintentionally holding references to objects, and this prevents the objects from being garbage collected. Excessive use of finalizers.  One other potential source of this error arises with applications that make excessive use of finalizers. If a class has a finalize method, then objects of that type do not have their space reclaimed at garbage collection time After garbage collection, the objects are queued for finalization, which occurs at a later time.  finalizers are executed by a daemon thread that services the finalization queue. If the finalizer thread cannot keep up with the finalization queue, then the Java heap could fill up and this type of OutOfMemoryError exception would be thrown.  One scenario that can cause this situation is when an application creates high-priority threads that cause the finalization queue to increase at a rate that is faster than the rate at which the finalizer thread is servicing that queue.', 'questionId': '37335', 'answerId': '36162516'}
{'answer': 'For exampl: On linux Platform for production mode preferable settings.  After downloading and configuring server with this way http://www.ehowstuff.com/how-to-install-and-setup-apache-tomcat-8-on-centos-7-1-rhel-7/  create setenv.sh file on folder /opt/tomcat/bin/ touch /opt/tomcat/bin/setenv.sh Open and write this params for setting preferable mode. nano  /opt/tomcat/bin/setenv.sh export CATALINA_OPTS="$CATALINA_OPTS -Xms512m" export CATALINA_OPTS="$CATALINA_OPTS -Xmx8192m" export CATALINA_OPTS="$CATALINA_OPTS -XX:MaxPermSize=256m" service tomcat restart', 'questionId': '37335', 'answerId': '37460287'}
{'answer': 'If this issue is happening in Wildfly 8 and JDK1.8,then we need to specify MaxMetaSpace settings instead of PermGen settings. For example we need to add below configuration in setenv.sh file of wildfly. JAVA_OPTS="$JAVA_OPTS -XX:MaxMetaspaceSize=256M" For more information, please check Wildfly Heap Issue', 'questionId': '37335', 'answerId': '43212058'}
{'answer': "Regarding to netbeans, you could set max heap size to solve the problem. Firstly, go to 'Run', then --> 'Set Project Configuration' --> 'Customise' --> 'run' of its popped up window --> 'VM Option' --> fill in '-Xms2048m -Xmx2048m'.", 'questionId': '37335', 'answerId': '44509883'}
{'answer': 'libxml is a heavily used and documented XML library for C, which provides a SAX API. Expat is another, but in my experience is not as well documented.', 'questionId': '37449', 'answerId': '37452'}
{'answer': 'I have used Expat pretty extensively - I like it for its simplicity and small footprint.', 'questionId': '37449', 'answerId': '37455'}
{'answer': 'Expat does StAX', 'questionId': '37449', 'answerId': '465382'}
{'answer': 'Huh? No, Expat does not do Stax, and code example confirms this. Perhaps you meant it does something bit like SAX?', 'questionId': '37449', 'answerId': '534130'}
{'answer': 'If you are not opposed to C++ then try LLama', 'questionId': '37449', 'answerId': '2459217'}
{'answer': 'Maybe you should use another jdk version. For your "puzzling one", there is a bug entry for 1.5.0_08. A memory leak is reported (I do not know, if this is related to your problem): http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6469701  Also you could get the source code and look, what happens at line 1383. On the other side, it could just be the stack dump, after the original error occurred.', 'questionId': '37551', 'answerId': '38320'}
{'answer': 'My initial suspicion would be that you are experiencing some sort of class-loader realted dead lock. I imagine, that class loading needs to be synchronized at some level because class information will become available for the entire VM, not just the thread where it was initially loaded. The fact that the methods on top of the stack are native methods seems to be pure coincidence, since part of the class loading mechanism happens to implemented that way. I would investigate further what is going on class-loading wise. Maybe some thread uses the class loader to load a class from a network location which is slow/unavailable and thus blocks for a really long time, not yielding the monitor to other threads that want to load a class. Investigating the output when starting the JVM with -verbose:class might be one thing to try.', 'questionId': '37551', 'answerId': '152563'}
{'answer': 'I was having similar problems a few months ago and found the jthread(?) utility to be invaluable.  You give it the process ID for your Java application and it will dump the entire stack for each thread in your process. From the output of jthread, I could see one thread was trying to obtain a lock after having entered a monitor and another thread was trying to enter the monitor after obtaining the lock.  A recipe for deadlock. I was also wondering if your application was running into a garbage collection issue.  You say it runs for a couple days before it stops like this.  How long have you let it sit in the stuck state to see if maybe the GC ever finishes?', 'questionId': '37551', 'answerId': '156378'}
{'answer': "Can you find out which thread is actually synchronizing on the monitor on which the native method is waiting? At least the thread-dump you get from the VM when you send it a SIGQUIT (kill -3) should show this information, as in In the dumps you've posted so far, I can't see any thread that is actually waiting to lock a specific monitor...", 'questionId': '37551', 'answerId': '177855'}
{'answer': 'I found this thread after hitting the same problem - JDK 1.6.0_23 running on Linux with Tomcat 6.0.29.  Not sure those bits are relevant, though - what I did notice was that aside from many threads getting "stuck" in the getDeclaredConstructors() native method, the CPU was at 100% for the java process.  So, all request threads getting stuck here, CPU at 100%, thread dumps not showing any deadlocks (and no other threads doing any significant activity), it smelled like a thrashing garbage collector to me.  Sure enough, checked the server logs and there were numerous OutOfMemory errors - heap space was exhausted. Can\'t say that this is going to be the root cause of threads getting stuck here every time, but hopefully the info here will help others at least rule out this as a possible cause...', 'questionId': '37551', 'answerId': '5005799'}
{'answer': "The name reflection is used to describe code which is able to inspect other code in the same system (or itself). For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to. So, to give you a code example of this in Java (imagine the object in question is foo) : One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through your classes for methods tagged with the @Test annotation, and will then call them when running the unit test. There are some good reflection examples to get you started at http://docs.oracle.com/javase/tutorial/reflect/index.html And finally, yes, the concepts are pretty much similar in other statically types languages which support reflection (like C#). In dynamically typed languages, the use case described above is less necessary (since the compiler will allow any method to be called on any object, failing at runtime if it does not exist), but the second case of looking for methods which are marked or work in a certain way is still common.", 'questionId': '37628', 'answerId': '37632'}
{'answer': "Reflection is a set of functions which allows you to access the runtime information of your program and modify it behavior (with some limitations). It's useful because it allows you to change the runtime behaivour depending on the meta information of your program, that is, you can check the return type of a function and change the way you handle the situation. In C# for example you can load an assembly (a .dll) in runtime an examine it, navigating through the classes and taking actions according to what you found. It also let you create an instance of a class on runtime, invoke its method, etc. Where can it be useful? Is not useful everytime but for concrete situations. For example you can use it to get the name of the class for loggin purposes, to dinamically create handlers for events according to what's specified on a configuration file and so on...", 'questionId': '37628', 'answerId': '37634'}
{'answer': 'Not every language supports reflection but the principles are usually the same in languages that support it. Reflection is the ability to "reflect" on the structure of your program. Or more concrete. To look at the objects and classes you have and programmatically get back information on the methods, fields, and interfaces they implement. You can also look at things like annotations. It\'s usefull in a lot of situations. Everywhere you want to be able to dynamically plug in classes into your code. Lot\'s of object relational mappers use reflection to be able to instantiate objects from databases without knowing in advance what objects they\'re going to use. Plug-in architectures is another place where reflection is usefull. Being able to dynamically load code and determine if there are types there that implement the right interface to use as a plugin is important in those situations.', 'questionId': '37628', 'answerId': '37635'}
{'answer': ' Reflection is a language\'s ability to inspect and dynamically call classes, methods, attributes, etc. at runtime. For example, all objects in Java have the method getClass(), which lets you determine the object\'s class even if you don\'t know it at compile time (e.g. if you declared it as an Object) - this might seem trivial, but such reflection is not possible in less dynamic languages such as C++. More advanced uses lets you list and call methods, constructors, etc. Reflection is important since it lets you write programs that do not have to "know" everything at compile time, making them more dynamic, since they can be tied together at runtime. The code can be written against known interfaces, but the actual classes to be used can be instantiated using reflection from configuration files. Lots of modern frameworks use reflection extensively for this very reason. Most other modern languages use reflection as well, and in scripting languages (such as Python) they are even more tightly integrated, since it feels more natural within the general programming model of those languages.', 'questionId': '37628', 'answerId': '37638'}
{'answer': "Reflection is a key mechanism to allow an application or framework to work with code that might not have even been written yet! Take for example your typical web.xml file. This will contain a list of servlet elements, which contain nested servlet-class elements. The servlet container will process the web.xml file, and create new a new instance of each servlet class through reflection. Another example would be the Java API for XML Parsing (JAXP). Where an XML parser provider is 'plugged-in' via well-known system properties, which are used to construct new instances through reflection. And finally, the most comprehensive example is Spring which uses reflection to create its beans, and for its heavy use of proxies", 'questionId': '37628', 'answerId': '37659'}
{'answer': 'One of my favorite uses of reflection is the below Java dump method. It takes any object as a parameter and uses the Java reflection API print out every field name and value.', 'questionId': '37628', 'answerId': '39918'}
{'answer': 'As per my understanding: Reflection allows programmer to access entities in program dynamically. i.e. while coding an application if programmer is unaware about a class or its methods, he can make use of such class dynamically (at run time) by using reflection. It is frequently used in scenarios where a class name changes frequently. If such a situation arises, then it is complicated for the programmer to rewrite the application and change the name of the class again and again. Instead, by using reflection, there is need to worry about a possibly changing class name.', 'questionId': '37628', 'answerId': '9155976'}
{'answer': 'Example : Take for example a remote application which gives your application an object which you obtain using their API Methods . Now based on the object you might need to perform some sort of computation . The provider guarantees that object can be of 3 types and we need to perform computation based on what type of object . So we might implement in 3 classes each containing a different logic .Obviously the object  information is available in runtime so you cannot statically code to perform computation hence reflection is used to instantiate the object of the class that you require to perform the computation based on the object received from the provider .', 'questionId': '37628', 'answerId': '11159447'}
{'answer': 'Java Reflection makes it possible to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc. at compile time. Mostly at framework level the maximum benefits of reflection can be achieved. The byte code that is compiled if needs extra modification at run time for examination, modification, addition of more byte code within itself, or another program or another framework at method level, instance variable level, constructor level, annotation level reflection can be useful. Suppose you have a method add(Int a,int b). The equivalent byte code is suppose B1. If suppose you have 1000 methods named add in your system. Now you want to check the value of parameter a and b before method add is called. So, you can glue your code to another program or framework that uses reflection to dynamically examine the byte code value using Object.getClass.getMethod(). There are several classes for examining. It can add more operation before method add is called. But, the program itself or another program or framework does not know about the object that has a method named add. Mostly in dependency injection, aspect oriented programming use of reflection is mostly used.', 'questionId': '37628', 'answerId': '14277235'}
{'answer': 'Reflection has many uses. The one I am more familiar with, is to be able to create code on the fly.  IE: dynamic classes, functions, constructors - based on any data   (xml/array/sql results/hardcoded/etc..)', 'questionId': '37628', 'answerId': '16406534'}
{'answer': "Reflection allows instantiation of new objects, invocation of methods, and get/set operations on class variables dynamically at run time without having prior knowledge of its implementation. In above example the null parameter is the object you want to invoke the method on. If the method is static you supply null. If the method is not static, then while invoking you need to supply a valid MyObject instance instead of null. Reflection also allows you to access private member/methods of a class: . For inspection of classes (also know as introspection) you don't need to import the reflection package (java.lang.reflect). Class metadata can be accessed through java.lang.Class. Reflection is a very powerful API but it may slow down the application if used in excess, as it resolves all the types at runtime.", 'questionId': '37628', 'answerId': '17531269'}
{'answer': 'Java Reflection is quite powerful and can be very useful. Java Reflection makes it possible to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc. at compile time. It is also possible to instantiate new objects, invoke methods and get/set field values using reflection. A quick Java Reflection example to show you what using reflection looks like: This example obtains the Class object from the class called MyObject. Using the class object the example gets a list of the methods in that class, iterates the methods and print out their names. Exactly how all this works is explained here Edit: After almost 1 year I am editing this answer as while reading about reflection I got few more uses of Reflection. Spring uses bean configuration such as: When the Spring context processes this < bean > element, it will use Class.forName(String) with the argument "com.example.Foo" to instantiate that Class.  It will then again use reflection to get the appropriate setter for the < property > element and set its value to the specified value. Junit uses Reflection especially for testing Private/Protected methods. For Private methods, For private fields,', 'questionId': '37628', 'answerId': '25721335'}
{'answer': 'I just want to add some point to all that was listed. With Reflection API you can write universal toString() method for any object. It is useful at debugging. Here is some example:', 'questionId': '37628', 'answerId': '25953852'}
{'answer': 'Uses of Reflection Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable applications to perform operations which would otherwise be impossible. Extensibility Features An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names. Class Browsers and Visual Development Environments A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code. Debuggers and Test Tools Debuggers need to be able to examine private members on classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to insure a high level of code coverage in a test suite. Drawbacks of Reflection Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection. Performance Overhead Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications. Security Restrictions Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet. Exposure of Internals Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform. source: The Reflection API', 'questionId': '37628', 'answerId': '26424561'}
{'answer': 'simple example for reflection. In a Chess Game, you do not know what will be moved by the user at run time. reflection can be used to call methods which are already implemented at run time.', 'questionId': '37628', 'answerId': '26771874'}
{'answer': 'Reflection is to let object to see their appearance. This argument seems nothing to do with reflection. In fact, this is the "self-identify" ability. Reflection itself is a word for such languages that lack capability of self-knowledge and self-sensing as Java and C#. Because they do not have the capability of self-knowledge, when we want to observe how it looks like, we must have another thing to reflect how it looks like. Excellent dynamic languages such as Ruby and Python can perceive the reflection of their own without the help of other individuals. We can say that the object of Java cannot perceive how it looks like without a mirror, which is an object of the reflection class, but object in Python can perceive it without a mirror. So that\'s why we need reflection in Java.', 'questionId': '37628', 'answerId': '34149864'}
{'answer': "From java documentation page java.lang.reflect package provides classes and interfaces for obtaining reflective information about classes and objects. Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions. AccessibleObject allows suppression of access checks if the necessary ReflectPermission is available. Classes in this package, along with java.lang.Class accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as Object Serialization and JavaBeans that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class It includes following functionality. Obtaining Class objects, Examining properties of a class (fields, methods, constructors), Setting and getting field values, Invoking methods, Creating new instances of objects. Have a look at this documentation link for the methods exposed by Class class. From this article (by Dennis Sosnoski, President, Sosnoski Software Solutions, Inc)  and this article (security-explorations pdf): I can see considerable drawbacks than uses of using Reflection User of Reflection: It provides very versatile way of dynamically linking program components It is useful for creating libraries that work with objects in very general ways Drawbacks of Reflection: Reflection is much slower than direct code when used for field and method access. It can obscure what's actually going on inside your code It bypasses the source code can create maintenance problems Reflection code is also more complex than the corresponding direct code It  allows violation of key Java security constraints such as data access protection and type safety General abuses: Loading of restricted classes, Obtaining references to constructors, methods or fields of a restricted class, Creation of new object instances, methods invocation, getting or setting field values of a restricted class. Have a look at this SE question regarding abuse of reflection feature: How do I read a private field in Java? Summary: Insecure use of its functions conducted from within a system code can also easily lead to the compromise of a Java security model. So use this feature sparingly", 'questionId': '37628', 'answerId': '35379881'}
{'answer': 'Reflection gives you ability to write more generic code . It allows you to create object at runtime and call its method at runtime. Hence the program can be made higly parameterised. It also allow to introspect the object and class to detect its variables and method exposed to outer world.', 'questionId': '37628', 'answerId': '36877237'}
{'answer': 'Reflection is an API which is used to examine or modify the behaviour of methods, classes, interfaces at runtime. The required classes for reflection are provided under java.lang.reflect package. Reflection gives us information about the class to which an object belongs and also the methods of that class which can be executed by using the object. Through reflection we can invoke methods at runtime irrespective of the access specifier used with them. The java.lang and java.lang.reflect packages provide classes for java reflection. Reflection can be used to get information about  Class The getClass() method is used to get the name of the class to which an object belongs. Constructors The getConstructors() method is used to get the public constructors of the class to which an object belongs. Methods The getMethods() method is used to get the public methods of the class to which an objects belongs. The Reflection API is mainly used in: IDE (Integrated Development Environment) e.g. Eclipse, MyEclipse, NetBeans etc. Debugger and Test Tools etc. Advantages of Using Reflection: Extensibility Features: An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names. Debugging and testing tools: Debuggers use the property of reflection to examine private members on classes. Drawbacks: Performance Overhead: Reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications. Exposure of Internals: Reflective code breaks abstractions and therefore may change behaviour with upgrades of the platform. Ref: Java Reflection javarevisited.blogspot.in', 'questionId': '37628', 'answerId': '42945244'}
{'answer': 'As name itself suggest it reflects what it holds for example class method,etc apart from providing feature to invoke method creating instance dynamically at runtime. It is used by many frameworks and application under the wood to invoke services without actually knowing the code.', 'questionId': '37628', 'answerId': '43302409'}
{'answer': 'You should take a look at ICProject, especially the getOutputEntries and getAllSourceRoots operations. This tutorial has some brief examples too. I work with JDT so thats pretty much what I can do. Hope it helps :)', 'questionId': '37692', 'answerId': '39989'}
{'answer': 'From what I gather from reading the javadocs it looks like this allows a Spring WebServiceMessageReceiver to be invoked using a JMS client instead of a web services client.  Hopefully that\'s right, because the rest of this is based on that assumption. The basics of is should match with how you create a regular Spring message driven bean.  There is a little bit of documentation on how to do that in the Spring Reference Manual.  Also see the AbstractEnterpriseBean Javadoc for some additional information about how the Spring context is retrieved.   The extra configuration required for a WebServiceMessageDrivenBean appear to be a ConnectionFactory, a WebServiceMessageFactory, and your WebServiceMessageReceiver.  These need to use the bean names specified in the Javadoc for the WebServiceMessageDrivenBean.  The bean names are "connectionFactory", "messageFactory", and "messageReceiver" respectively.', 'questionId': '37912', 'answerId': '45005'}
{'answer': 'Using the WebServiceMessageDrivenBean is very similar to the Spring support for Message Driven Beans (MDBS). First you create a MDB: That is it as far as the MDB goes! Next you configure the MDB by adding the following following to the MDB definition in the  ejb-jar.xml: This tells the Spring MDB support classes where to pick up your Spring configuration file. You can now configure your endpoints either in the application-context.xml file or in addition using the annotation support.', 'questionId': '37912', 'answerId': '92867'}
{'answer': 'Try using a profiler on your running code. It should help you identify the bottlenecks. Try jprofiler or Netbeans profiler', 'questionId': '37929', 'answerId': '37934'}
{'answer': 'If you are running on Java 6 you can use the supplied monitoring tools', 'questionId': '37929', 'answerId': '37942'}
{'answer': 'For testing/development purposes, you can download Oracle JRockit Mission Control for free from this site. (Requires Login, but accounts can be set up with any email adress) Docs Here. It will allow you to find hotspots, memory leaks and much more.', 'questionId': '37929', 'answerId': '39050'}
{'answer': "I'm often happy enough using Java -Xprof. This gives you a sorted list of the functions your code spends most of its time in.", 'questionId': '37929', 'answerId': '39056'}
{'answer': 'YourKit is a excelent java profiler (not free).', 'questionId': '37929', 'answerId': '15366010'}
{'answer': "As we see from  How can I profile C++ code running in Linux?, the most statistically significant approach is to use a stack profiler. Well, Java runs in the JVM, so getting a stack useful for C code won't be useful for us (it'll get the JVM stuff, not your code). Fortunately, Java has jstack! http://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jstack.html It'll give you a bunch of threads, like the GarbageCollector. Don't worry about those, just look at where your threads are.", 'questionId': '37929', 'answerId': '15366173'}
{'answer': "Sure there is. This is all you need to do: Go to Disable the checkbox next to 'Use same settings for all file types'   The 'XML' tab should become enabled. Click it and set the 'tab' (and probably 'indent') size to 2.", 'questionId': '37976', 'answerId': '38224'}
{'answer': "In IntelliJ IDEA 10.0.3 it's  File > Settings > Code Style > General", 'questionId': '37976', 'answerId': '6286495'}
{'answer': 'Note: make sure to not use the same file in two project, or your settings might revert to the default (4 spaces), instead of the custom XML tab indent size. See bug IDEA-130878, for the latest IntelliJ IDEA 14 (Oct 2014)', 'questionId': '37976', 'answerId': '26929608'}
{'answer': 'I think you need to annotate your Problem super-class with @MappedSuperclass instead of @Entity.', 'questionId': '38057', 'answerId': '38096'}
{'answer': 'Unfortunately, according to the Hibernate documentation "Properties from superclasses not mapped as @MappedSuperclass are ignored." I ran up against this too. My solution was to represent the desired inheritance through interfaces rather than the entity beans themselves. In your case, you could define the following: Then implement these interfaces using an abstract superclass and two entity subclasses: As an added benefit, if you code using the interfaces rather than the actual entity beans that implement those interfaces, it makes it easier to change the underlying mappings later on (less risk of breaking compatibility).', 'questionId': '38057', 'answerId': '38992'}
{'answer': 'I think it\'s a wise decision made by the Hibernate team. They could be less arrogante and make it clear why it was implemented this way, but that\'s just how Emmanuel, Chris and Gavin works. :) Let\'s try to understand the problem. I think your concepts are "lying". Firts you say that many Problems are associated to People. But, then you say that one Person have many UglyProblems (and does not relate to other Problems). Something is wrong with that design. Imagine how it\'s going to be mapped to the database. You have a single table inheritance, so: How is hibernate going to enforce the database to make Problem only relate to People if its problemType is equal UP? That\'s a very difficult problem to solve. So, if you want this kind of relation, every subclass must be in it\'s own table. That\'s what @MappedSuperclass does. PS.: Sorry for the ugly drawing :D', 'questionId': '38057', 'answerId': '53448'}
{'answer': 'I figured out how to do the OneToMany mappedBy problem.  In the derived class UglyProblem from the original post.  The callback method needs to be in the derived class not the parent class. Found the secret sauce for using Hibernate at least.  http://docs.jboss.org/hibernate/stable/annotations/api/org/hibernate/annotations/ForceDiscriminator.html  The @ForceDiscriminator makes the @OneToMany honor the discriminator Requires Hibernate Annotations.', 'questionId': '38057', 'answerId': '1923659'}
{'answer': "In my case I wanted to use the SINGLE_TABLE inheritance type, so using @MappedSuperclass wasn't an option. What works, although not very clean, is to add the Hibernate proprietary @Where clause to the @OneToMany association to force the type in queries:", 'questionId': '38057', 'answerId': '26091090'}
{'answer': 'No. Though, groovy, a JVM language, is dynamically typed and would let you write:', 'questionId': '38068', 'answerId': '38098'}
{'answer': 'There\'s the pseudo-typedef antipattern...  Good stuff, drink up! ;-) As the article notes, this technique has some serious issues, primarily that this "typedef" is actually a separate class and thus cannot be used interchangeably with either the type it extends or other similarly defined types.', 'questionId': '38068', 'answerId': '38102'}
{'answer': 'In a generic method, you can use a limited form of type inferrence to avoid some repetitions. Example: if you have the function you can use: instead of:', 'questionId': '38068', 'answerId': '38116'}
{'answer': 'Use Factory Pattern for creation of Generics: Method Sample:', 'questionId': '38068', 'answerId': '38118'}
{'answer': 'The pseudo-typedef antipattern mentioned by Shog9 would work - though it\'s not recommended to use an ANTIPATTERN - but it does not address your intentions. The goal of pseudo-typedef is to reduce clutter in declaration and improve readability.  What you want is to be able to replace a group of generics declarations by one single trade. I think you have to stop and think: "in witch ways is it valuable?". I mean, I can\'t think of a scenario where you would need this. Imagine class A: Imagine now that I want to change the \'values\' field to a Map. Why would exist many other fields scattered through the code that needs the same change? As for the operations that uses \'values\' a simple refactoring would be enough.', 'questionId': '38068', 'answerId': '39325'}
{'answer': 'I am not sure is it 100% what your looking for, but check out the built in example that comes packaged with NetBeans 6.1. It uses JSF/EJB3/ApacheDerby. I played around with it for like 20 minutes and thought it was pretty cool as a simple/starter JavaEE application to learn from.', 'questionId': '38183', 'answerId': '38326'}
{'answer': 'Seam examples are quite good - they are stand-alone projects, that you may deploy out of the box.', 'questionId': '38183', 'answerId': '85760'}
{'answer': 'I have to second jb\'s comment: The seam examples are great and can be put to use. The Seam Homepage uses the Seam Wiki from the examples (that application alone fulfills all the outlined criteria). Other examples in the distribution: Hotel Booking, DVD Store, and a Blog. The documentation contains quite some information on the special parts of the examples. The "problem" might be that Seam covers a lot of the details you\'d usually have to do in a traditional EJB3/JSF application. You might want to have a look at AppFuse or AppFuse Light. They have one application with examples using different technologies, including EJB3 (JPA only) and JSF. The examples are not as sophisticated (don\'t really fulfill your criteria), but contain a lot of useful stuff.', 'questionId': '38183', 'answerId': '176747'}
{'answer': 'I feel your pain, this is not an answer, as much as an observation that the Java World in general suffers from the lack of good applications that go beyond the tutorial. Some of the sample .NET applications are very good and show interesting techniques, while solving small enough problems that the novice can wrap their heads around the entire application and see "real code" doing "real things". I have not looked at the Seam examples, so they may well be an exception, but having sample applications, particularly the CRUD, Query, Report style back office applications you\'re talking about, are a great help to folks and I wish there were more in the Java community.', 'questionId': '38183', 'answerId': '176808'}
{'answer': 'You might poke around at these real world JSF apps and see if any of them have their source available: RealWorldJsfLinks', 'questionId': '38183', 'answerId': '1139033'}
{'answer': "This warning is there because Java is not actually storing type information at run-time in an object that uses generics.  Thus, if object is actually a List<String>, there will be no ClassCastException at run-time except until an item is accessed from the list that doesn't match the generic type defined in the variable.   This can cause further complications if items are added to the list, with this incorrect generic type information.  Any code still holding a reference to the list but with the correct generic type information will now have an inconsistent list.   To remove the warning, try: However, note that you will not be able to use certain methods such as add because the compiler doesn't know if you are trying to add an object of incorrect type.  The above will work in a lot of situations, but if you have to use add, or some similarly restricted method, you will just have to suffer the yellow underline in Eclipse (or a SuppressWarning annotation).", 'questionId': '382', 'answerId': '384'}
{'answer': "jar is just a zip file, so I guess you can. If you could get to the source, it's cleaner. Maybe try disassembling the class?", 'questionId': '38305', 'answerId': '38309'}
{'answer': 'Adding to this question, can that improve performance? Since the classes not used would not be JIT compiled improving startup time or does the java automatically detect that while compiling to bytecode and do not even deal with the code that is not used?', 'questionId': '38305', 'answerId': '38315'}
{'answer': 'At a previous job, I used a Java obfuscator that as well as obfuscating the code, also removed classes and methods that weren\'t being used.  If you were doing "Class.byName" or any other type of reflection stuff, you needed to tell the obfuscator because it couldn\'t tell by inspecting the code what classes or methods called by reflection. The problem, of course, is that you don\'t know if other parts of the third party library are doing any reflection, and so removing an "unused" class might cause things to break in an obscure case that you haven\'t tested.', 'questionId': '38305', 'answerId': '38318'}
{'answer': "This would be an interesting project (has anyone done it already?)  I presume you'd give the tool your jar(s) as a starting point, and the library jar to clean up. It could use reflection to determine which classes your jar(s) reference directly, and which are used indirectly down the call tree (this is not trivial at all, but doable). If it encounters any reflection code in any of the two places, it should give a very loud warning.", 'questionId': '38305', 'answerId': '38373'}
{'answer': 'There is a way. The JarJar project does this AFAIR. The first goal of the JarJar project is to allow one to embed third party libraries in your own jar, changing the package structure if necessary. Doing so it can strip out the classes that are not needed. Check it out at http://code.google.com/p/jarjar/. Here is a link about shrinking jars: http://sixlegs.com/blog/java/jarjar-keep.html', 'questionId': '38305', 'answerId': '38591'}
{'answer': "There is a tool in Ant called a classfileset. You specify the list of root classes that you know you need, and then the classfileset recursively analyzes their code to find all dependencies. Alternatively, you could develop a good test suite that exercises all of the functions that you need, then run your tests under a test coverage tool. The tool will tell you which classes (and statement in them) were actually utilized. This could give you an even smaller set of code than what you'd find with static analysis.", 'questionId': '38305', 'answerId': '40057'}
{'answer': 'I use ProGuard for this. As well as being an excellent obfuscator, it has a code shrinking phase which can combine multiple JARs and then strip out any unused classes or class members.  It does an excellent job at shrinking.', 'questionId': '38305', 'answerId': '1788498'}
{'answer': "It seems like an IllegalArgumentException is called for if you don't want null to be an allowed value, and the NullPointerException would be thrown if you were trying to use a variable that turns out to be null.", 'questionId': '3881', 'answerId': '3886'}
{'answer': "If it's a setter method and null is being passed to it, I think it would make more sense to throw an IllegalArgumentException. A NullPointerException seems to make more sense in the case where you're attempting to actually use the null. So, if you're using it and it's null, NullPointer. If it's being passed in and it's null, IllegalArgument.", 'questionId': '3881', 'answerId': '3890'}
{'answer': 'I tend to follow the design of JDK libraries, especially Collections and Concurrency (Joshua Bloch, Doug Lea, those guys know how to design solid APIs). Anyway, many APIs in the JDK pro-actively throws NullPointerException.  For example, the Javadoc for Map.containsKey states: @throws NullPointerException if the key is null and this map     does not permit null keys (optional). It\'s perfectly valid to throw your own NPE. The convention is to include the parameter name which was null in the message of the exception.  The pattern goes: Whatever you do, don\'t allow a bad value to get set and throw an exception later when other code attempts to use it. That makes debugging a nightmare. You should always the follow the "fail-fast" principle.', 'questionId': '3881', 'answerId': '6358'}
{'answer': 'If you choose to throw a NPE and you are using the argument in your method, it might be redundant and expensive to explicitly check for a null. I think the VM already does that for you.', 'questionId': '3881', 'answerId': '7770'}
{'answer': 'The accepted practice if to use the IllegalArgumentException( String message ) to declare a parameter to be invalid and give as much detail as possible... So to say that a parameters was found to be null while exception non-null, you would do something like this: You have virtually no reason to implicitly use the "NullPointerException". The NullPointerException is an exception thrown by the Java Virtual Machine when you try to execute code on null reference (Like toString()).', 'questionId': '3881', 'answerId': '8132'}
{'answer': 'The standard is to throw the NullPointerException. The generally infallible "Effective Java" discusses this briefly in Item 42 (in the first edition) or Item 60 (in the second edition) "Favor the use of standard exceptions": "Arguably, all erroneous method   invocations boil down to an illegal   argument or illegal state, but other   exceptions are standardly used for   certain kinds of illegal arguments and   states. If a caller passes null in   some parameter for which null values   are prohibited, convention dictates   that NullPointerException be thrown   rather than IllegalArgumentException."', 'questionId': '3881', 'answerId': '8160'}
{'answer': 'The definitions from the links to the two exceptions above are IllegalArgumentException: Thrown to indicate that a method has been passed an illegal or inappropriate argument.  NullPointerException: Thrown when an application attempts to use null in a case where an object is required. The big difference here is the IllegalArgumentException is supposed to be used when checking that an argument to a method is valid. NullPointerException is supposed to be used whenever an object being "used" when it is null. I hope that helps put the two in perspective.', 'questionId': '3881', 'answerId': '13262'}
{'answer': "Couldn't agree more with what's being said.  Fail early, fail fast.  Pretty good Exception mantra.  The question about which Exception to throw is mostly a matter of personal taste.  In my mind IllegalArgumentException seems more specific than using a NPE since it's telling me that the problem was with an argument I passed to the method and not with a value that may have been generated while performing the method. My 2 Cents", 'questionId': '3881', 'answerId': '22074'}
{'answer': 'If it\'s a "setter", or somewhere I\'m getting a member to use later, I tend to use IllegalArgumentException. If it\'s something I\'m going to use (dereference) right now in the method, I throw a NullPointerException proactively. I like this better than letting the runtime do it, because I can provide a helpful message (seems like the runtime could do this too, but that\'s a rant for another day). If I\'m overriding a method, I use whatever the overridden method uses.', 'questionId': '3881', 'answerId': '32940'}
{'answer': "In general, a developer should never throw a NullPointerException. This exception is thrown by the runtime when code attempts to dereference a variable who's value is null. Therefore, if your method wants to explicitly disallow null, as opposed to just happening to have a null value raise a NullPointerException, you should throw an IllegalArgumentException.", 'questionId': '3881', 'answerId': '45518'}
{'answer': 'You should be using IllegalArgumentException (IAE), not NullPointerException (NPE) for the following reasons: First, the NPE JavaDoc explicitly lists the cases where NPE is appropriate.  Notice that all of them are thrown by the runtime when null is used inappropriately.  In contrast, the IAE JavaDoc couldn\'t be more clear: "Thrown to indicate that a method has been passed an illegal or inappropriate argument."  Yup, that\'s you! Second, when you see an NPE in a stack trace, what do you assume?  Probably that someone dereferenced a null.  When you see IAE, you assume the caller of the method at the top of the stack passed in an illegal value.  Again, the latter assumption is true, the former is misleading. Third, since IAE is clearly designed for validating parameters, you have to assume it as the default choice of exception, so why would you choose NPE instead?  Certainly not for different behavior -- do you really expect calling code to catch NPE\'s separately from IAE and do something different as a result?  Are you trying to communicate a more specific error message?  But you can do that in the exception message text anyway, as you should for all other incorrect parameters. Fourth, all other incorrect parameter data will be IAE, so why not be consistent?  Why is it that an illegal null is so special that it deserves a separate exception from all other types of illegal arguments? Finally, I accept the argument given by other answers that parts of the Java API use NPE in this manner.  However, the Java API is inconsistent with everything from exception types to naming conventions, so I think just blindly copying (your favorite part of) the Java API isn\'t a good enough argument to trump these other considerations.', 'questionId': '3881', 'answerId': '47710'}
{'answer': "You should throw an IllegalArgumentException, as it will make it obvious to the programmer that he has done something invalid.  Developers are so used to seeing NPE thrown by the VM, that any programmer would not immediately realize his error, and would start looking around randomly, or worse, blame your code for being 'buggy'.", 'questionId': '3881', 'answerId': '51213'}
{'answer': 'It\'s a "Holy War" style question. In others words, both alternatives are good, but people will have their preferences which they will defend to the death.', 'questionId': '3881', 'answerId': '212119'}
{'answer': 'In this case, IllegalArgumentException conveys clear information to the user using your API that the " should not be null". As other forum users pointed out you could use NPE if you want to as long as you convey the right information to the user using your API.  GaryF and tweakt dropped "Effective Java" (which I swear by) references which recommends using NPE. And looking at how other good APIs are constructed is the best way to see how to construct your API. Another good example is to look at the Spring APIs. For example, org.springframework.beans.BeanUtils.instantiateClass(Constructor ctor, Object[] args) has a Assert.notNull(ctor, "Constructor must not be null") line. org.springframework.util.Assert.notNull(Object object, String message) method checks to see if the argument (object) passed in is null and if it is it throws a new IllegalArgumentException(message) which is then caught in the org.springframework.beans.BeanUtils.instantiateClass(...) method.', 'questionId': '3881', 'answerId': '247447'}
{'answer': 'I wanted to single out Null arguments from other illegal arguments, so I derived an exception from IAE named NullArgumentException. Without even needing to read the exception message, I know that a null argument was passed into a method and by reading the message, I find out which argument was null. I still catch the NullArgumentException with an IAE handler, but in my logs is where I can see the difference quickly.', 'questionId': '3881', 'answerId': '452516'}
{'answer': "Apache Commons Lang has a NullArgumentException that does a number of the things discussed here: it extends IllegalArgumentException and its sole constructor takes the name of the argument which should have been non-null. While I feel that throwing something like a NullArgumentException or IllegalArgumentException more accurately describes the exceptional circumstances, my colleagues and I have chosen to defer to Bloch's advice on the subject.", 'questionId': '3881', 'answerId': '1072549'}
{'answer': 'Voted up Jason Cohen\'s argument because it was well presented. Let me dismember it step by step. ;-) The NPE JavaDoc explicitly says, "other illegal uses of the null object". If it was just limited to situations where the runtime encounters a null when it shouldn\'t, all such cases could be defined far more succinctly. Can\'t help it if you assume the wrong thing, but assuming encapsulation is applied properly, you really shouldn\'t care or notice whether a null was dereferenced inappropriately vs. whether a method detected an inappropriate null and fired an exception off. I\'d choose NPE over IAE for multiple reasons It is more specific about the nature of the illegal operation Logic that mistakenly allows nulls tends to be very different from logic that mistakenly allows illegal values. For example, if I\'m validating data entered by a user, if I get value that is unacceptable, the source of that error is with the end user of the application. If I get a null, that\'s programmer error. Invalid values can cause things like stack overflows, out of memory errors, parsing exceptions, etc. Indeed, most errors generally present, at some point, as an invalid value in some method call. For this reason I see IAE as actually the MOST GENERAL of all exceptions under RuntimeException. Actually, other invalid arguments can result in all kinds of other exceptions. UnknownHostException, FileNotFoundException, a variety of syntax error exceptions, IndexOutOfBoundsException, authentication failures, etc., etc. In general, I feel NPE is much maligned because traditionally has been associated with code that fails to follow the fail fast principle. That, plus the JDK\'s failure to populate NPE\'s with a message string really has created a strong negative sentiment that isn\'t well founded. Indeed, the difference between NPE and IAE from a runtime perspective is strictly the name. From that perspective, the more precise you are with the name, the more clarity you give to the caller.', 'questionId': '3881', 'answerId': '1871889'}
{'answer': 'I was all in favour of throwing IllegalArgumentException for null parameters, until today, when I noticed the java.util.Objects.requireNonNull method in Java 7.  With that method, instead of doing: you can do: and it will throw a NullPointerException if the parameter you pass it is null. Given that that method is right bang in the middle of java.util I take its existence to be a pretty strong indication that throwing NullPointerException is "the Java way of doing things". I think I\'m decided at any rate. Note that the arguments about hard debugging are bogus because you can of course provide a message to NullPointerException saying what was null and why it shouldn\'t be null.  Just like with IllegalArgumentException. One added advantage of NullPointerException is that, in highly performance critical code, you could dispense with an explicit check for null (and a NullPointerException with a friendly error message), and just rely on the NullPointerException you\'ll get automatically when you call a method on the null parameter.  Provided you call a method quickly (i.e. fail fast), then you have essentially the same effect, just not quite as user friendly for the developer.  Most times it\'s probably better to check explicitly and throw with a useful message to indicate which parameter was null, but it\'s nice to have the option of changing that if performance dictates without breaking the published contract of the method/constructor.', 'questionId': '3881', 'answerId': '8196334'}
{'answer': 'the dichotomy... Are they non-overlapping? Only non-overlapping parts of a whole can make a dichotomy. As i see it:', 'questionId': '3881', 'answerId': '10195862'}
{'answer': 'Some collections assume that null is rejected using NullPointerException rather than IllegalArgumentException. For example, if you compare a set containing null to a set that rejects null, the first set will call containsAll on the other and catch its NullPointerException -- but not IllegalArgumentException. (I\'m looking at the implementation of AbstractSet.equals.) You could reasonably argue that using unchecked exceptions in this way is an antipattern, that comparing collections that contain null to collections that can\'t contain null is a likely bug that really should produce an exception, or that putting null in a collection at all is a bad idea. Nevertheless, unless you\'re willing to say that equals should throw an exception in such a case, you\'re stuck remembering that NullPointerException is required in certain circumstances but not in others. ("IAE before NPE except after \'c\'...")', 'questionId': '3881', 'answerId': '13311822'}
{'answer': 'Throwing an exception that\'s exclusive to null arguments (whether NullPointerException or a custom type) makes automated null testing more reliable. This automated testing can be done with reflection and a set of default values, as in Guava\'s NullPointerTester. For example, NullPointerTester would attempt to call the following method... ...with two lists of arguments: "", null and null, ImmutableList.of(). It would test that each of these calls throws the expected NullPointerException. For this implementation, passing a null list does not produce NullPointerException. It does, however, happen to produce an IllegalArgumentException because NullPointerTester happens to use a default string of "". If NullPointerTester expects only NullPointerException for null values, it catches the bug. If it expects IllegalArgumentException, it misses it.', 'questionId': '3881', 'answerId': '13312050'}
{'answer': 'Actually, the question of throwing IllegalArgumentException or NullPointerException is in my humble view only a "holy war" for a minority with an incomlete understanding of exception handling in Java. In general, the rules are simple, and as follows: argument constraint violations must be indicated as fast as possible (-> fast fail), in order to avoid illegal states which are much harder to debug in case of an invalid null pointer for whatever reason, throw NullPointerException in case of an illegal array/collection index, throw ArrayIndexOutOfBounds in case of a negative array/collection size, throw NegativeArraySizeException in case of an illegal argument that is not covered by the above, and for which you don\'t have another more specific exception type, throw IllegalArgumentException as a wastebasket on the other hand, in case of a constraint violation WITHIN A FIELD that could not be avoided by fast fail for some valid reason, catch and rethrow as IllegalStateException or a more specific checked exception. Never let pass the original NullPointerException, ArrayIndexOutOfBounds, etc in this case! There are at least three very good reasons against the case of mapping all kinds of argument constraint violations to IllegalArgumentException, with the third probably being so severe as to mark the practice bad style: (1) A programmer cannot a safely assume that all cases of argument constraint violations result in IllegalArgumentException, because the large majority of standard classes use this exception rather as a wastebasket if there is no more specific kind of exception available. Trying to map all cases of argument constraint violations to IllegalArgumentException in your API only leads to programmer frustration using your classes, as the standard libraries mostly follow different rules that violate yours, and most of your API users will use them as well! (2) Mapping the exceptions actually results in a different kind of anomaly, caused by single inheritance: All Java exceptions are classes, and therefore support single inheritance only. Therefore, there is no way to create an exception that is truly say both a NullPointerException and an IllegalArgumentException, as subclasses can only inherit from one or the other. Throwing an IllegalArgumentException in case of a null argument therefore makes it harder for API users to distinguish between problems whenever a program tries to programmatically correct the problem, for example by feeding default values into a call repeat! (3) Mapping actually creates the danger of bug masking: In order to map argument constraint violations into IllegalArgumentException, you\'ll need to code an outer try-catch within every method that has any constrained arguments. However, simply catching RuntimeException in this catch block is out of the question, because that risks mapping documented RuntimeExceptions thrown by libery methods used within yours into IllegalArgumentException, even if they are no caused by argument constraint violations. So you need to be very specific, but even that effort doesn\'t protect you from the case that you accidentally map an undocumented runtime exception of another API (i.e. a bug) into an IllegalArgumentException of your API. Even the most careful mapping therefore risks masking programming errors of other library makers as argument constraint violations of your method\'s users, which is simply hillareous behavior! With the standard practice on the other hand, the rules stay simple, and exception causes stay unmasked and specific. For the method caller, the rules are easy as well: - if you encounter a documented runtime exception of any kind because you passed an illegal value, either repeat the call with a default (for this specific exceptions are neccessary), or correct your code - if on the other hand you enccounter a runtime exception that is not documented to happen for a given set of arguments, file a bug report to the method\'s makers to ensure that either their code or their documentation is fixed.', 'questionId': '3881', 'answerId': '14104551'}
{'answer': 'According to your scenario, IllegalArgumentException is the best pick, because null is not a valid value for your property.', 'questionId': '3881', 'answerId': '30663317'}
{'answer': 'NullPointerException thrown when attempting to access an object with a reference variable whose current value is null IllegalArgumentException thrown when a method receives an argument formatted differently than the method expects', 'questionId': '3881', 'answerId': '31004679'}
{'answer': 'Ideally runtime exceptions should not be thrown. A checked exception(business exception) should be created for your scenario. Because if either of these exception is thrown and logged, it misguides the developer while going through the logs. Instead business exceptions do not create that panic and usually ignored while troubleshooting logs.', 'questionId': '3881', 'answerId': '39013552'}
{'answer': 'As an subjective question this should be closed, but as its still open: This is part of the the internal policy used at my previous place of employment and it worked really well. This is all from memory so I can\'t remember the exact wording. Its worth noting that they did not use checked exceptions, but that is beyond the scope of the question. The unchecked exceptions they did use fell into 3 main categories. NullPointerException: Do not throw intentionally. NPEs are to be thrown only by the VM when dereferencing a null reference. All possible effort is to be made to ensure that these are never thrown. @Nullable and @NotNull should be used in conjunction with code analysis tools to find these errors. IllegalArgumentException: Thrown when an argument to a function does not conform to the public documentation, such that the error can be identified and described in terms of the arguments passed in. The OP\'s situation would fall into this category. IllegalStateException: Thrown when a function is called and its arguments are either unexpected at the time they are passed or incompatible with the state of the object the method is a member of. For example, there were two internal versions of the IndexOutOfBoundsException used in things that had a length. One a sub-class of IllegalStateException, used if the index was larger than the length. The other a subclass of IllegalArgumentException, used if the index was negative. This was because you could add more items to the object and the argument would be valid, while a negative number is never valid. As I said, this system works really well, and it took someone to explain why the distinction is there: "Depending on the type of error it is quite straight forward for you to figure out what to do. Even if you can\'t actually figure out what went wrong you can figure out where to catch that error and create additional debugging information." NullPointerException: Handle the Null case or put in an assertion so that the NPE is not thrown. If you put in an assertion it must one of the other two types. If possible, continue debugging as if the assertion was there in the first place. IllegalArgumentException: you have something wrong at your callsite. If the values being passed in are from another function, find out why you are receiving an incorrect value. If you are passing in one of your arguments propagate the error checks up the call stack until you find the function that is not returning what you expect. IllegalStateException: You have not called your functions in the correct order. If you are using one of your arguments, check them and throw an IllegalArgumentException describing the issue. You can then propagate the cheeks up the stack until you find the issue. Anyway, his point was that you can only copy the IllegalArgumentAssertions up the stack. There is no way for you to propagate the IllegalStateExceptions or NullPointerExceptions up the stack because they had something to do with your function.', 'questionId': '3881', 'answerId': '39658107'}
{'answer': 'Have a look at this: http://www.icu-project.org/', 'questionId': '38949', 'answerId': '38956'}
{'answer': "How are you doing the cross-platform calls? Is it all called from Java?  http://java.sun.com/docs/books/tutorial/i18n/text/string.html might be useful. I'm a bit confused about exactly what you are trying to do. Is the database essentially interface between all the code? Then it should be easy - just make the DB UTF-8 and each of the clients will need to do their own conversions. Sounds like an interesting problem, could you share some more details?", 'questionId': '38949', 'answerId': '40801'}
{'answer': "Perl has Encode as a standard library. It can be used to read/write any encoding you want, so that's not going to be a problem.", 'questionId': '38949', 'answerId': '45602'}
{'answer': "Well. I guess iconv is sufficient for your needs. Iconv should be avaible on any POSIX system by default (those include (GNU/)Linux, *BSD, Mac OS X...). On Windows AFAIK it requires separate library but: you may just install it/bundle with your software/static compile it. (libiconv for windows). (I'd guess I'd recommend to bundle it). You may use some native Windows calls as special case. Of course if you are using Java it has it built-in - but I see that it may not be what you want (JNI calls are expensive). PS. Cannot you set perl to specific encoding?", 'questionId': '38949', 'answerId': '765098'}
{'answer': ' With this code you can determine the current resolution. On my system (SuSE linux) it does NOT output the possible resolutions.  Seems to work an Mac and Windows.', 'questionId': '38955', 'answerId': '38981'}
{'answer': "Are you trying to show the JDialog indepentently of the annimation? In order to get the order set properly, you may need to bundle those actions in a runnable that is passed to the EDT at once. eg: It may be best to subclass JDialog so that you can just add the doAnnimation() logic to the setVisible(..) or show() method before calling the superclass implementation.   Finally, I imagine you'll need to set the dimensions of the dalog manually --  I don't remember if Java will know the actual size of the dialog before it is shown, so you may get some useless information for your annimation if you query the size before showing it.", 'questionId': '39108', 'answerId': '39868'}
{'answer': "You may be able to take @rcreswick's answer and expand on it a little to make it work. It's pretty ugly and would have to be invoked in place of the basic showDialog() call, but it should work.", 'questionId': '39108', 'answerId': '42959'}
{'answer': 'Maybe you have a look at the SwingWorker Project which is included in JSE 6. (Link to SwingWorker) In the book "Filthy Rich Client" that I am reading at the moment they use this tool a lot. Maybe you can find a hint in the examples on the books website: http://filthyrichclients.org/', 'questionId': '39108', 'answerId': '92610'}
{'answer': "One possibility is to paint your own dialog on the Glass Pane.  Then you have full control of the dialog and can paint whatever you want.  Here's a tutorial on creating animations on the Glass Pane.", 'questionId': '39108', 'answerId': '3662376'}
{'answer': 'A Java application bundle on OS X is nothing more than a directory containing your .jars and a number of configuration files.  The SetFile tool sets a custom HFS filesystem property on the directory to tell finder that it is an app, but giving it a ".app" extension serves the same purpose.  I don\'t think there\'s anything stopping you from building one on, say, Windows, though of course you have no way of testing that it works, but if you are able to test it at least once on a real Mac, you could then conceivably update the .jars within it on Windows to reflect code changes without too much difficulty. Have a look at the Bundle Programming Guide for more info.', 'questionId': '39194', 'answerId': '39309'}
{'answer': 'One way is to generate a zip file with the App using for example Ant. In ant you can specify that the file in Contents/MacOS should have execute-permissions using something like filemode="755".', 'questionId': '39194', 'answerId': '39356'}
{'answer': "Having worked on the Mac port of NITE, I can say that jar packages for other platforms should work equally well on Mac. I would still recommend finding a mac for testing (or even announcing mac support was in beta ;-) ) as we discovered a few mac-only quirks during the port (to go with the windows- and linux- only quirks we'd already discovered)", 'questionId': '39194', 'answerId': '39362'}
{'answer': "Technically, you don't need a Mac.  Applications in OS X just require a specific folder structure and an XML file.  However, the Mac has a really nice tool called Jar Bundler.  In addition to setting up the bundle directories and XML file, it creates a C executable that launches your java application via JNI.  This is nice because the process name matches the application name. I believe that you could have someone generate an application bundle for you once, and then check in the files to your project.  At build time, all you would need to do is copy your jar files to the appropriate locations and maybe update the XML file.", 'questionId': '39194', 'answerId': '40210'}
{'answer': "No it does not. But if the protocol of the URL is HTTP, you'll get a HttpURLConnection as a return object. This class has a setRequestMethod method to specify which HTTP method you want to use.  If you want to do more sophisticated stuff you're probably better off using a library like Jakarta HttpClient.", 'questionId': '39391', 'answerId': '39431'}
{'answer': "If you retrieve the URLConnection object using openConnection() it doesn't actually start communicating with the server.  That doesn't happen until you get the stream from the URLConnection().  When you first get the connection you can add/change headers and other connection properties before actually opening it. URLConnection's life cycle is a bit odd.  It doesn't send the headers to the server until you've gotten one of the streams.  If you just get the input stream then I believe it does a GET, sends the headers, then lets you read the output.  If you get the output stream then I believe it sends it as a POST, as it assumes you'll be writing data to it (You may need to call setDoOutput(true) for the output stream to work).  As soon as you get the input stream the output stream is closed and it waits for the response from the server. For example, this should do a POST: While this would do a GET: URLConnection will also do other weird things.  If the server specifies a content length then URLConnection will keep the underlying input stream open until it receives that much data, even if you explicitly close it.  This caused a lot of problems for us as it made shutting our client down cleanly a bit hard, as the URLConnection would keep the network connection open.  This probably probably exists even if you just use getStream() though.", 'questionId': '39391', 'answerId': '39449'}
{'answer': 'It appears that a popular solution will not work in all containers... http://www.theserverside.com/discussions/thread.tss?thread_id=30190', 'questionId': '39399', 'answerId': '39599'}
{'answer': 'I would create a filter and bounce all requests to root back with forward responce. Hacks with creating home.do page looks ugly to me (One more thing to remember for you and investigate for someone who will support your code).', 'questionId': '39399', 'answerId': '40745'}
{'answer': '"Surely there\'s a better way!" There isn\'t. Servlet specifications (Java Servlet Specification 2.4, "SRV.9.10 Welcome Files" for instance) state: The purpose of this mechanism is to allow the deployer to specify an ordered   list of partial URIs for the container to use for appending to URIs when there is a   request for a URI that corresponds to a directory entry in the WAR not mapped to   a Web component. You can\'t map Struts on \'/\', because Struts kind of require to work with a file extension. So you\'re left to use an implicitely mapped component, such as a JSP or a static file. All the other solutions are just hacks. So keep your solution, it\'s perfectly readable and maintainable, don\'t bother looking further.', 'questionId': '39399', 'answerId': '42614'}
{'answer': 'Personally, I\'d keep the same setup you have now, but change the redirect for a forward.  That avoids sending a header back to the client and having them make another request. So, in particular, I\'d replace the  in index.jsp with The other effect of this change is that the user won\'t see the URL in the address bar change from "http://server/myproject" to "http://server/myproject/index.jsp", as the forward happens internally on the server.', 'questionId': '39399', 'answerId': '43879'}
{'answer': 'As of the 2.4 version of the Servlet specification you are allowed to have a servlet in the welcome file list. Note that this may not be a URL (such as /myproject/MyAction.action). It must be a named servlet and you cannot pass a query string to the servlet. Your controller servlet would need to have a default action.', 'questionId': '39399', 'answerId': '318846'}
{'answer': 'Something that I do is to put an empty file of the same name as your struts action and trick the container to call the struts action. Ex. If your struts action is welcome.do, create an empty file named welcome.do. That should trick the container to call the Struts action.', 'questionId': '39399', 'answerId': '1775500'}
{'answer': 'This is a pretty old thread but the topic discussed, i think, is still relevant. I use a struts tag - s:action to achieve this. I created an index.jsp in which i wrote this...', 'questionId': '39399', 'answerId': '4842983'}
{'answer': 'This works as well reducing the need of a new servlet or jsp', 'questionId': '39399', 'answerId': '14811399'}
{'answer': 'Here two blogs with same technique: http://technologicaloddity.com/2010/03/25/spring-welcome-file-without-redirect/ http://wiki.metawerx.net/wiki/HowToUseAServletAsYourMainWebPage It require Servlet API >= v2.4: so you no longer need redirect.jsp in non-WEB-INF directory!!', 'questionId': '39399', 'answerId': '15551450'}
{'answer': "Just add a filter above Strut's filter in web.xml like this: And add the following code in doFilter method of that CustomFilter class So that Filter will redirect to the action. You dont need any JSP to be placed outside WEB-INF as well.", 'questionId': '39399', 'answerId': '15905476'}
{'answer': "This worked fine for me, too: I was not able to get the default action to execute when the user enters the webapp using the root of the web app (mywebapp/).  There is a bug in struts 2.3.12 that won't go to the default action or use the welcome page when you use the root url.  This will be a common occurrence.  Once I changed back to struts 2.1.8 it worked fine.", 'questionId': '39399', 'answerId': '16113198'}
{'answer': 'I have configured like following. it worked perfect and no URL change also... Create a dummy action like following in struts2.xml file. so whenever we access application like http://localhost:8080/myapp, it will forward that to dummy action and then it redirects to index.jsp / index.tiles... w/o tiles may be we configure some action index.action in web.xml as <welcome-file>index.action</welcome-file>, and use that action to forward required page...', 'questionId': '39399', 'answerId': '16638674'}
{'answer': 'there are this answer above but it is not clear about web app context so i do this: And in index.jsp i just write: And i have index definition, named index and it all togather work fine and not depends on webapp context path.', 'questionId': '39399', 'answerId': '18162786'}
{'answer': 'I am almost sure that the OP is the best solution(not sure about best practice, but it works perfectly, and actually is the solution my project leader and I prefer.) Additionally, I find it can be combined with Spring security like this: By this, not only we have control over the first page to be the login form, but we control the flow AFTER user is login in, depending on his role. Works like a charm.', 'questionId': '39399', 'answerId': '33825842'}
{'answer': 'Below code can be used in struts.xml to load welcome page. Execute some Action before loading a welcome page. Return directly some JSP without execution of an Action. No <welcome-file-list> is not needed in web.xml', 'questionId': '39399', 'answerId': '36919549'}
{'answer': 'AspectJ doesn\'t work well with classes in the Spring Web MVC framework. Read the bottom of the "Open for extension..." box on the right side of the page  Instead, take a look at the HandlerInterceptor interface.  The new Spring MVC Annotations may work as well since then the Controller classes are all POJOs, but I haven\'t tried it myself.', 'questionId': '39639', 'answerId': '39766'}
{'answer': "Is this as simple as spelling? or are there just typos in the question? Sometimes you write rebuildThumbnail and sometimes you write rebildThumbnail The methods you are trying to override with advice are not final methods in the MVC framework, so whilst bpapas answer is useful, my understanding is that this is not the problem in this case. However, do make sure that the rebuildThumbnail controller action is not final @bpapas: please correct me if i'm wrong. The programmer's own controller action is what he is trying to override. Looking at the MultiActionController source (and its parents') the only finalised method potentially in the stack is MultiActionController.invokeNamedMethod, although i'm not 100% sure if this would be in the stack at that time or not. Would having a finalised method higher up the stack cause a problem addding AOP advice to a method further down?", 'questionId': '39639', 'answerId': '41457'}
{'answer': "The basic setup looks ok. The syntax can be simplified slightly by not defining an in-place pointcut and just specifying the method to which the after-advice should be applied. (The named pointcuts for methods are automatically created for you.) e.g. As long as the rebuildThumbnail method is not final, and the method name and class are correct. I don't see why this won't work. see http://static.springframework.org/spring/docs/2.0.x/reference/aop.html", 'questionId': '39639', 'answerId': '41480'}
{'answer': 'Your breakpoints aren\'t being hit because you are using Spring\'s AOP Proxies. See understanding-aop-proxies for a description of how AOP Proxies are special.  Basically, the MVC framework is going to call the handleRequest method on your controller\'s proxy (which for example the MultiActionController you\'re using as a base class implements), this method will then make an "internal" call to its rebuildThumbnail method, but this won\'t go through the proxy and thus won\'t pick up any aspects. (This has nothing to do with the methods being final.) To achieve what you want, investigate using "real" AOP via load time weaving (which Spring supports very nicely).', 'questionId': '39639', 'answerId': '67661'}
{'answer': 'If I get this right, you want a vector that is normal to the screen plane, but in world coordinates? In that case you want to INVERT the transformation from World -> Screen and do Screen -> World of (0,0,-1) or (0,0,1) depending on which axis the screen points down. Since the ModelView matrix is just a rotation matrix (ignoring the homogeneous transformation part), you can simply pull this out by taking the transpose of the rotational part, or simple reading in  the bottom row - as this transposes onto the Z coordinate column under transposition.', 'questionId': '40028', 'answerId': '40666'}
{'answer': 'Yes, you got my question right. Sorry that I was a little bit confused yesterday. Now I have corrected the code by following your suggestion and mixing two pieces of code in the question together: Thank you.', 'questionId': '40028', 'answerId': '41231'}
{'answer': 'TINI is a java ethernet controller, which may have libraries and classes for directly accessing data from ethernet frames to TCP streams.  You may be able to find something in there that implements your needed classes.  If not, there should be pointers or user groups that will give you a head start. -Adam', 'questionId': '40039', 'answerId': '40081'}
{'answer': "If you start with the idea that you need something like a packet sniffer, you'll want to look at http://netresearch.ics.uci.edu/kfujii/jpcap/doc/.", 'questionId': '40039', 'answerId': '46480'}
{'answer': "Raw Socket for Java is a request for JDK for a looong long time. See the request here. There's a long discussion there where you can look for workarounds and solutions. I once needed this for a simple PING operation, but I can't remember how I resolved this. Sorry :)", 'questionId': '40039', 'answerId': '46538'}
{'answer': 'My best bet so far seems to be the BPF api and to write a thin JNI wrapper', 'questionId': '40039', 'answerId': '46864'}
{'answer': 'You can\'t access raw sockets from pure Java, so you will need some sort of layer between your Java code and the network interfaces. Also note that access to raw sockets is normally only available to "root" processes, since otherwise any user could both a) sniff all traffic, and b) generate spoofed packets. Rather than write your whole program so that it needs to run as "root", you might consider having the packet capture and generation done in a standalone program with some sort of IPC (RMI, named pipe, TCP socket, etc) to exchange the data with your Java app.', 'questionId': '40039', 'answerId': '114666'}
{'answer': "Well, there's always the low tech solution of adding logging of the size of your maps when you modify them, then search the logs for which maps are growing beyond a reasonable size.", 'questionId': '40119', 'answerId': '40124'}
{'answer': 'You really need to use a memory profiler that tracks allocations. Take a look at JProfiler - their "heap walker" feature is great, and they have integration with all of the major Java IDEs. It\'s not free, but it isn\'t that expensive either ($499 for a single license) - you will burn $500 worth of time pretty quickly struggling to find a leak with less sophisticated tools.', 'questionId': '40119', 'answerId': '40138'}
{'answer': 'There are tools that should help you find your leak, like JProbe, YourKit, AD4J or JRockit Mission Control. The last is the one that I personally know best. Any good tool should let you drill down to a level where you can easily identify what leaks, and where the leaking objects are allocated.  Using HashTables, Hashmaps or similar is one of the few ways that you can acually leak memory in Java at all. If I had to find the leak by hand I would peridically print the size of my HashMaps, and from there find the one where I add items and forget to delete them.', 'questionId': '40119', 'answerId': '40146'}
{'answer': 'NetBeans has a built-in profiler.', 'questionId': '40119', 'answerId': '40214'}
{'answer': 'A tool is a big help. However, there are times when you can\'t use a tool: the heap dump is so huge it crashes the tool, you are trying to troubleshoot a machine in some production environment to which you only have shell access, etc. In that case, it helps to know your way around the hprof dump file. Look for SITES BEGIN. This shows you what objects are using the most memory. But the objects aren\'t lumped together solely by type: each entry also includes a "trace" ID. You can then search for that "TRACE nnnn" to see the top few frames of the stack where the object was allocated. Often, once I see where the object is allocated, I find a bug and I\'m done. Also, note that you can control how many frames are recorded in the stack with the options to -Xrunhprof. If you check out the allocation site, and don\'t see anything wrong, you have to start backward chaining from some of those live objects to root objects, to find the unexpected reference chain. This is where a tool really helps, but you can do the same thing by hand (well, with grep). There is not just one root object (i.e., object not subject to garbage collection). Threads, classes, and stack frames act as root objects, and anything they reference strongly is not collectible. To do the chaining, look in the HEAP DUMP section for entries with the bad trace id. This will take you to an OBJ or ARR entry, which shows a unique object identifier in hexadecimal. Search for all occurrences of that id to find who\'s got a strong reference to the object. Follow each of those paths backward as they branch until you figure out where the leak is. See why a tool is so handy? Static members are a repeat offender for memory leaks. In fact, even without a tool, it\'d be worth spending a few minutes looking through your code for static Map members. Can a map grow large? Does anything ever clean up its entries?', 'questionId': '40119', 'answerId': '40215'}
{'answer': "you may want to check out jconsole.  It's also part of the JDK and I have found it helpful to find memory/reference leaks in conjunction with jhat.  Also take a look at this blog entry.", 'questionId': '40119', 'answerId': '40243'}
{'answer': 'I use following approach to finding memory leaks in Java. I\'ve used jProfiler with great success, but I believe that any specialized tool with graphing capabilities (diffs are easier to analyze in graphical form) will work. Start the application and wait until it get to "stable" state, when all the initialization is complete and the application is idle. Run the operation suspected of producing a memory leak several times to allow any cache, DB-related initialization to take place. Run GC and take memory snapshot. Run the operation again. Depending on the complexity of operation and sizes of data that is processed operation may need to be run several to many times. Run GC and take memory snapshot. Run a diff for 2 snapshots and analyze it. Basically analysis should start from greatest positive diff by, say, object types and find what causes those extra objects to stick in memory. For web applications that process requests in several threads analysis gets more complicated, but nevertheless general approach still applies. I did quite a number of projects specifically aimed at reducing memory footprint of the applications and this general approach with some application specific tweaks and trick always worked well.', 'questionId': '40119', 'answerId': '40285'}
{'answer': 'Questioner here, I have got to say getting a tool that does not take 5 minutes to answer any click makes it a lot easier to find potential memory leaks. Since people are suggesting several tools ( I only tried visual wm since I got that in the JDK and JProbe trial ) I though I should suggest a free / open source tool built on the Eclipse platform, the Memory Analyzer (sometimes referenced as the SAP memory analyzer) available on http://www.eclipse.org/mat/ .  What is really cool about this tool is that it indexed the heap dump when I first opened it which allowed it to show data like retained heap without waiting 5 minutes for each object (pretty much all operations were tons faster than the other tools I tried). When you open the dump, the first screen shows you a pie chart with the biggest objects (counting retained heap) and one can quickly navigate down to the objects that are to big for comfort. It also has a Find likely leak suspects which I reccon can come in handy, but since the navigation was enough for me I did not really get into it.', 'questionId': '40119', 'answerId': '56031'}
{'answer': 'Most of the time, in enterprise applications the Java heap given is larger than the ideal size of max 12 to 16 GB. I have found it hard to make the NetBeans profiler work directly on these big java apps. But usually this is not needed. You can use the jmap utility that comes with the jdk to take a "live" heap dump , that is jmap will dump the heap after running GC.  Do some operation on the application, wait till the operation is completed, then take another "live" heap dump. Use tools like Eclipse MAT to load the heapdumps, sort on the histogram, see which objects have increased, or which are the highest, This would give a clue. There is only one problem with this approach; Huge heap dumps, even with the live option, may be too big to transfer out to development lap, and may need a machine with enough memory/RAM to open. That is where the class histogram comes into picture. You can dump a live class histogram with the jmap tool. This will give only the class histogram of memory usage.Basically it won\'t have the information to chain the reference. For example it may put char array at the top. And String class somewhere below. You have to draw the connection yourself.  Instead of taking two heap dumps, take two class histograms, like as described above; Then compare the class histograms and see the classes that are increasing. See if you can relate the Java classes to your application classes. This will give a pretty good hint. Here is a pythons script that can help you compare two  jmap histogram dumps. histogramparser.py Finally tools like JConolse and VisualVm are essential to see the memory growth over time, and see if there is a memory leak. Finally sometimes your problem may not be a memory leak , but high memory usage.For this enable GC logging;use a more advanced and new compacting GC like G1GC; and you can use jdk tools like jstat to see the GC behaviour live Other referecences to google for -jhat, jmap, Full GC, Humongous allocation, G1GC', 'questionId': '40119', 'answerId': '31018959'}
{'answer': 'Your best bet is probably to refactor it slowly as you go along.  Few us of have the resources that would be required to completely start from scratch with something that has so many business rules buried in it.  Management really hates it when you spend months on developing an app that has more bugs than the one you replaced. If you have the opportunity to build any separate apps from scratch, use all of the best practices there and use it to demonstrate how effective they are.  When you can, incorporate those ideas gradually into the old application.', 'questionId': '40242', 'answerId': '40262'}
{'answer': 'In my experience, the "elegance" of an app typically has more to do with the database design than anything.  If you have a great database design, including a well-defined stored procedure interface, good application code tends to follow no matter what platform you use.  If you have poor database design, no matter what platform you use you\'ll have a very difficult time building elegant application code, as you\'ll be constantly compensating for the database. Of course, there\'s plenty of room between great and poor, but my point is that if you want good application code, start by making sure your database is up to snuff.', 'questionId': '40242', 'answerId': '40274'}
{'answer': "This is harder to do in applications that are only in maintenance mode because it is hard to convince management that rewriting something that is already 'working' is worth doing. I would start by applying the principles of MVC to any new code that you are able to work on (ie. move business logic to something akin to a model, put all your layout/view code in one place) As you gain experience with new code in MVC you can start seeing opportunities to change the existing code subtly so that it also falls in line. It can be a very slow process, but if you can show the benefits of this way of doing it then you will be able to convince others and get the entire team on board.", 'questionId': '40242', 'answerId': '40280'}
{'answer': "I would agree with the slow refactoring approach; for example, take that copy-and-pasted code and extract it into whatever the appropriate Java paradigm is (a class, perhaps? or better yet, use an existing library?). When your code is really clean and terse, yet still lacking in overall architectural strategy, then you'll be able to make things fit into an overall architecture much more easily.", 'questionId': '40242', 'answerId': '40286'}
{'answer': "The best way is to print out the code, crumple it up, and throw it out. Don't even recycle the paper. You've got an application that is written in 1,000+ line long JSPs. It probably has a god-awful Domain Model (if it even has one at all) and doesn't just MIX presentation with business logic, it BLENDS it and sits there and keeps stirring for hours. There is no way to take out the code that is crappy and move into an MVC Controller class and still be doing the right thing, you'll just end up with a MVC app with an anemic domain model or one that has stuff like Database calls in Controller code, you're still failing.  You could try a new app that does the right thing and then have the two apps talk to each other, but that's new complexity in itself. Also you're likely going to be doing the same amount of work that you were going to do if you just started from scratch, but you might have an easier time trying to convince your bosses that this is  a better approach.", 'questionId': '40242', 'answerId': '40381'}
{'answer': "First pick up a copy of Michael Feather's Working Effectively with Legacy Code.  Then  identify how best to test the existing code.  The worst case is that you are stuck with just some high level regression tests (or nothing at all) and If you are lucky there will be unit tests.  Then it is a case of slow steady refactoring hopefully while adding new business functionality at the same time.", 'questionId': '40242', 'answerId': '40762'}
{'answer': 'Iteratively refactor.  Also look for new features that can be done completely in the new framework as a way to show the value of the new framework.', 'questionId': '40242', 'answerId': '65645'}
{'answer': "My suggestion would be to find the rare pages that do not require an import of other JSPs, or have very few imports.  Treat each JSP imported as a black box, and refactor these pages around them (iteratively, testing each change and making sure it works before continuing).  Once these are cleaned up, you can continue finding pages with more and more imports, until finally you have refactored the imports. When refactoring, note the parts that try to access resources not given to the page and try to take this out to a controller.  For instance, anything that accesses the database should be inside a controller, let the JSP handle the display of the information the controller gives to it via a forward.  In this way you will develop several servlets, or things like servlets, for each page.  I would suggest using a front-controller based framework for this refactoring (from personal experience I recommend Spring and its Controller interface), so that each controller isn't a separate Servlet but is rather delegated to from a single servlet that is mapped appropriately. For the controller, it is better to do database hits all at once rather than attempt them piecemeal.  Users can and generally do tolerate a page load, but the page output will be much faster if all the database data is given to the rendering code rather than the rendering code hanging and not giving data to the client while it is trying to read yet another piece of data from the database. I feel your pain and wish you luck in this endeavor.  Now, when you have to maintain an application that abuses Spring Webflow, that's another story :)", 'questionId': '40242', 'answerId': '69121'}
{'answer': 'Perhaps Runtime#addShutdownHook ?', 'questionId': '40376', 'answerId': '40390'}
{'answer': "The JVM responds to signals on its own. Some will cause the JVM to shutdown gracefully, which includes running shutdown hooks. Other signals will cause the JVM to abort without running shutdown hooks. Shutdown hooks are added using Runtime.addShutdownHook(Thread). I don't think the JDK provides an official way to handle signals within your Java application. However, I did find this IBM article, which describes using some undocumented sun.misc.Signal class to do exactly that. The article dates from 2002 and uses JDK 1.3.1, but I've confirmed that the sun.misc.Signal class still exists in JDK 1.6.0.", 'questionId': '40376', 'answerId': '41157'}
{'answer': "Based on the info here, I'd recommend going with HashMap.  I think the biggest advantage is that Java will prevent you from modifying it while you are iterating over it, unless you do it through the iterator.", 'questionId': '40471', 'answerId': '40483'}
{'answer': "Hashtable is synchronized, whereas HashMap isn't. That makes Hashtable slower than Hashmap. For non-threaded apps, use HashMap since they are otherwise the same in terms of functionality.", 'questionId': '40471', 'answerId': '40512'}
{'answer': 'Hashtable is similar to the HashMap and has a similar interface. It is recommended that you use HashMap, unless you require support for legacy applications or you need synchronisation, as the Hashtables methods are synchronised. So in your case as you are not multi-threading, HashMaps are your best bet.', 'questionId': '40471', 'answerId': '40522'}
{'answer': 'In addition to what izb said, HashMap allows null values, whereas the Hashtable does not. Also note that Hashtable extends the Dictionary class, which as the Javadocs state, is obsolete and has been replaced by the Map interface.', 'questionId': '40471', 'answerId': '40548'}
{'answer': 'For threaded apps, you can often get away with ConcurrentHashMap- depends on your performance requirements.', 'questionId': '40471', 'answerId': '40848'}
{'answer': "There are several differences between HashMap and Hashtable in Java: Hashtable is synchronized, whereas HashMap is not.  This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones. Hashtable does not allow null keys or values.  HashMap allows one null key and any number of null values. One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap.  This wouldn't be as easy if you were using Hashtable. Since synchronization is not an issue for you, I'd recommend HashMap. If synchronization becomes an issue, you may also look at ConcurrentHashMap.", 'questionId': '40471', 'answerId': '40878'}
{'answer': "HashMap: An implementation of the Map interface that uses hash codes to index an array. Hashtable: Hi, 1998 called. They want their collections API back. Seriously though, you're better off staying away from Hashtable altogether. For single-threaded apps, you don't need the extra overhead of syncrhonisation. For highly concurrent apps, the paranoid synchronisation might lead to starvation, deadlocks, or unnecessary garbage collection pauses. Like Tim Howland pointed out, you might use ConcurrentHashMap instead.", 'questionId': '40471', 'answerId': '40894'}
{'answer': 'Note, that a lot of the answers state that Hashtable is synchronised.  In practice this buys you very little.  The synchronization is on the accessor / mutator methods will stop two threads adding or removing from the map concurrently, but in the real world you will often need additional synchronisation. A very common idiom is to "check then put" - i.e. look for an entry in the Map, and add it if it does not already exist.  This is not in any way an atomic operation whether you use Hashtable or HashMap.   An equivalently synchronised HashMap can be obtained by: But to correctly implement this logic you need additional synchronisation of the form: Even iterating over a Hashtable\'s entries (or a HashMap obtained by Collections.synchronizedMap) is not thread safe unless you also guard the Map from being modified through additional synchronization. Implementations of the ConcurrentMap interface (for example ConcurrentHashMap) solve some of this by including thread safe check-then-act semantics such as:', 'questionId': '40471', 'answerId': '41454'}
{'answer': "No one's mentioned the fact that Hashtable is not part of the Java Collections Framework - it just provides a similar API. Also, Hashtable is considered legacy code. There's nothing about Hashtable that can't be done using HashMap or derivations of HashMap, so for new code, I don't see any justification for going back to Hashtable.", 'questionId': '40471', 'answerId': '1041798'}
{'answer': 'Another key difference between hashtable and hashmap is that Iterator in the HashMap is  fail-fast  while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally  by adding or removing any element except Iterator\'s own remove()  method. But this is not a guaranteed behavior and will be done by JVM on best effort." My source: http://javarevisited.blogspot.com/2010/10/difference-between-hashmap-and.html', 'questionId': '40471', 'answerId': '7344090'}
{'answer': 'This question is often asked in interview to check whether candidate understands correct usage of collection classes and is aware of alternative solutions available. The HashMap class is roughly equivalent to Hashtable, except that it is non synchronized and permits nulls. (HashMap allows null values as key and value whereas Hashtable doesn\'t allow nulls). HashMap does not guarantee that the order of the map will remain constant over time. HashMap is non synchronized whereas Hashtable is synchronized. Iterator in the HashMap is  fail-safe while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally  by adding or removing any element except Iterator\'s own remove()  method. But this is not a guaranteed behavior and will be done by JVM on best effort. Note on Some Important Terms     Synchronized means only one thread can modify a hash table at one point of time. Basically, it means that any thread before performing an update on a hashtable will have to acquire a lock on the object while others will wait for lock to be released. Fail-safe is relevant from the context of iterators. If an iterator has been created on a collection object and some other thread tries to modify the collection object "structurally", a concurrent modification exception will be thrown. It is possible for other threads though to invoke "set" method since it doesn\'t modify the collection "structurally". However, if prior to calling "set", the collection has been modified structurally, "IllegalArgumentException" will be thrown. Structurally modification means deleting or inserting element which could effectively change the structure of map. HashMap can be synchronized by Map m = Collections.synchronizeMap(hashMap); Map provides Collection views instead of direct support for iteration  via Enumeration objects. Collection views greatly enhance the  expressiveness of the interface, as discussed later in this section.  Map allows you to iterate over keys, values, or key-value pairs;  Hashtable does not provide the third option. Map provides a safe way  to remove entries in the midst of iteration; Hashtable did not.  Finally, Map fixes a minor deficiency in the Hashtable interface.  Hashtable has a method called contains, which returns true if the  Hashtable contains a given value. Given its name, you\'d expect this  method to return true if the Hashtable contained a given key, because  the key is the primary access mechanism for a Hashtable. The Map  interface eliminates this source of confusion by renaming the method  containsValue. Also, this improves the interface\'s consistency   containsValue parallels containsKey. The Map Interface', 'questionId': '40471', 'answerId': '7644118'}
{'answer': 'Beside all the other important aspects already mentioned here, Collections API (e.g. Map interface) is being modified all the time to conform to the "latest and greatest" additions to Java spec. For example, compare Java 5 Map iterating: versus the old Hashtable approach: In Java 1.8 we are also promised to be able to construct and access HashMaps like in good old scripting languages: Update: No, they won\'t land in 1.8... :( Are Project Coin\'s collection enhancements going to be in JDK8?', 'questionId': '40471', 'answerId': '8832544'}
{'answer': " HashTable is synchronized, if you are using it in a single thread you can use HashMap, which is an unsynchronized version. Unsynchronized objects are often a little more performant. By the way if multiple threads access a HashMap concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally.  Youn can wrap a unsynchronized map in a synchronized one using : HashTable can only contain non-null object as a key or as a value. HashMap can contain one null key and null values. The iterators returned by Map are fail-fast, if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Whereas the Enumerations returned by Hashtable's keys and elements methods are not fail-fast.  HashTable and HashMap are member of the Java Collections Framework (since Java 2 platform v1.2, HashTable was retrofitted to implement the Map interface). HashTable is considered legacy code, the documentation advise to use ConcurrentHashMap in place of Hashtable if a thread-safe highly-concurrent implementation is desired. HashMap doesn't guarantee the order in which elements are returned. For HashTable I guess it's the same but I'm not entirely sure, I don't find ressource that clearly state that.", 'questionId': '40471', 'answerId': '10372667'}
{'answer': 'HashMaps gives you freedom of synchronization and debugging is lot more easier', 'questionId': '40471', 'answerId': '11883473'}
{'answer': 'Take a look at this chart. It provides comparisons between different data structures along with HashMap and Hashtable. The comparison is precise, clear and easy to understand. Java Collection Matrix', 'questionId': '40471', 'answerId': '13467173'}
{'answer': 'HashMap and Hashtable have significant algorithmic differences as well. No one has mentioned this before so that\'s why I am bringing it up. HashMap will construct a hash table with power of two size, increase it dynamically such that you have at most about eight elements (collisions) in any bucket and will stir the elements very well for general element types. However, the Hashtable implementation provides better and finer control over the hashing if you know what you are doing, namely you can fix the table size using e.g. the closest prime number to your values domain size and this will result in better performance than HashMap i.e. less collisions for some cases. Separate from the obvious differences discussed extensively in this question, I see the Hashtable as a "manual drive" car where you have better control over the hashing and the HashMap as the "automatic drive" counterpart that will generally perform well.', 'questionId': '40471', 'answerId': '13797704'}
{'answer': "1)Hashtable is synchronized whereas hashmap is not. 2)Another difference is that iterator in the HashMap is fail-safe while the enumerator for the Hashtable isn't. If you change the map while iterating, you'll know. 3)HashMap permits null values in it, while Hashtable doesn't.", 'questionId': '40471', 'answerId': '14452144'}
{'answer': 'HashMap:- It is a class available inside java.util package and it is used to store the element in key and value format. Hashtable:-It is a legacy class which is being recognized inside collection framework', 'questionId': '40471', 'answerId': '14627155'}
{'answer': "HashTable is a legacy class in the jdk that shouldn't be used anymore. Replace usages of it with ConcurrentHashMap. If you don't require thread safety, use HashMap which isn't threadsafe but faster and uses less memory.", 'questionId': '40471', 'answerId': '16018266'}
{'answer': 'HashMap is emulated and therefore usable in GWT client code whereas Hashtable is not.', 'questionId': '40471', 'answerId': '17651399'}
{'answer': "HashMap is a class  used to store the element in key and value format.it is not thread safe. because it is not synchronized .where as Hashtable is synchronized.Hashmap permits null but hastable doesn't permit null.", 'questionId': '40471', 'answerId': '17815037'}
{'answer': "There are 5 basic differentiations with HashTable and HashMaps.  Maps allows you to iterate and retrieve keys, values, and both key-value pairs as well, Where HashTable don't have all this capability.  In Hashtable there is a function contains(), which is very confusing to use. Because the meaning of contains is slightly deviating. Whether it means contains key or contains  value? tough to understand. Same thing in Maps we have ContainsKey() and ContainsValue() functions, which are very easy to understand.  In hashmap you can remove element while iterating, safely. where as it is not possible in hashtables. HashTables are by default synchronized, so it can be used with multiple threads easily. Where as HashMaps are not synchronized by default, so can be used with only single thread.  But you can still convert HashMap to synchronized by using Collections util class's synchronizedMap(Map m) function. HashTable won't allow null keys or null values. Where as HashMap allows one null key, and multiple null values.", 'questionId': '40471', 'answerId': '20519518'}
{'answer': "Since Hashtable in Java is a subclass of Dictionary class which is now obsolete due to the existance of Map Interface it is not used anymore. Moreover there isn't anything you can't do with a class that implements the Map Interface that you can do with a Hashtable.", 'questionId': '40471', 'answerId': '22253585'}
{'answer': 'My small contribution : First and most significant different between Hashtable and HashMap is that, HashMap is not thread-safe  while Hashtable is a thread-safe collection. Second important difference between Hashtable and HashMap is performance, since HashMap is not synchronized it perform better than Hashtable. Third difference on Hashtable vs HashMap is that Hashtable is obsolete class and you should be using ConcurrentHashMap in place of Hashtable in Java.', 'questionId': '40471', 'answerId': '22491742'}
{'answer': 'Keep in mind that HashTable was legacy class before Java Collections Framework (JCF) was introduced and was later retrofitted to implement the Map interface. So was Vector and Stack.  Therefore, always stay away from them in new code since there always better alternative in the JCF as others had pointed out. Here is the Java collection cheat sheet that you will find useful. Notice the gray block contains the legacy class HashTable,Vector and Stack.', 'questionId': '40471', 'answerId': '22629569'}
{'answer': 'HashMap and HashTable  Some important points about HashMap and HashTable.    please read below details. 1) Hashtable and Hashmap implement the java.util.Map interface 2) Both Hashmap and Hashtable is the hash based collection. and working on hashing. so these are similarity of HashMap and HashTable.     What is the difference between HashMap and HashTable? 1) First difference is HashMap is not thread safe While HashTable is ThreadSafe 2) HashMap is performance wise better because it is not thread safe. while Hashtable performance wise is not better because it is thread safe. so multiple thread can not access Hashtable at the same time.', 'questionId': '40471', 'answerId': '24583680'}
{'answer': 'Old and classic topic, just want to add this helpful blog that explains this: http://blog.manishchhabra.com/2012/08/the-5-main-differences-betwen-hashmap-and-hashtable/ Blog by Manish Chhabra The 5 main differences betwen HashMap and Hashtable HashMap and Hashtable both implement java.util.Map interface but there   are some differences that Java developers must understand to write   more efficient code. As of the Java 2 platform v1.2, Hashtable class   was retrofitted to implement the Map interface, making it a member of   the Java Collections Framework. One of the major differences between HashMap and Hashtable is that HashMap is non-synchronized whereas Hashtable is synchronized, which   means Hashtable is thread-safe and can be shared between multiple   threads but HashMap cannot be shared between multiple threads without   proper synchronization. Java 5 introduced ConcurrentHashMap which is   an alternative of Hashtable and provides better scalability than   Hashtable in Java.Synchronized means only one thread can modify a hash   table at one point of time. Basically, it means that any thread before   performing an update on a hashtable will have to acquire a lock on the   object while others will wait for lock to be released. The HashMap class is roughly equivalent to Hashtable, except that it permits nulls. (HashMap allows null values as key and value whereas   Hashtable doesnt allow nulls). The third significant difference between HashMap vs Hashtable is that Iterator in the HashMap is a fail-fast iterator while the   enumerator for the Hashtable is not and throw   ConcurrentModificationException if any other Thread modifies the map   structurally by adding or removing any element except Iterators own   remove() method. But this is not a guaranteed behavior and will be   done by JVM on best effort. This is also an important difference   between Enumeration and Iterator in Java. One more notable difference between Hashtable and HashMap is that because of thread-safety and synchronization Hashtable is much slower   than HashMap if used in Single threaded environment. So if you dont   need synchronization and HashMap is only used by one thread, it out   perform Hashtable in Java. HashMap does not guarantee that the order of the map will remain constant over time. Note that HashMap can be synchronized by In Summary there are significant differences between Hashtable and   HashMap in Java e.g. thread-safety and speed and based upon that only   use Hashtable if you absolutely need thread-safety, if you are running   Java 5 consider using ConcurrentHashMap in Java.', 'questionId': '40471', 'answerId': '25348157'}
{'answer': "1.Hashmap and HashTable both store key and value.  2.Hashmap can store one key as null. Hashtable can't store null. 3.HashMap is not synchronized but Hashtable is synchronized.  4.HashMap can be synchronized with Collection.SyncronizedMap(map)", 'questionId': '40471', 'answerId': '25526024'}
{'answer': '1.HashMap is non-synchronized whereas Hashtable is synchronized. 2.HashMap does not guarantee that the order of the map will remain constant over time. 3.One more notable difference between Hashtable and HashMap is that because of thread-safety and synchronization Hashtable is much slower than HashMap if used in Single threaded environment.', 'questionId': '40471', 'answerId': '27293997'}
{'answer': 'Hashtable: Hashtable is a data structure that retains values of key-value pair. It doesnt allow null for both the keys and the values. You will get a NullPointerException if you add null value. It is synchronized. So it comes with its cost. Only one thread can access HashTable at a particular time. Example : HashMap: HashMap is like Hashtable but it also accepts key value pair. It allows null for both the keys and the values. Its performance better is better than HashTable, because it is unsynchronized. Example:', 'questionId': '40471', 'answerId': '28426488'}
{'answer': 'Difference between HashMap and HashTable / HashMap vs HashTable  Synchronization or Thread Safe :  This is the most important difference between two . HashMap is non synchronized and not thread safe.On the other hand, HashTable is thread safe and synchronized. When to use HashMap ?  answer is if your application do not require any multi-threading task, in other words hashmap is better for non-threading applications. HashTable should be used in multithreading applications. Null keys and null values :  Hashmap allows one null key and any number of null values, while Hashtable do not allow null keys and null values in the HashTable object. Iterating the values:  Hashmap object values are iterated by using iterator .HashTable is the only class other than vector which uses enumerator to iterate the values of HashTable object. Fail-fast iterator  : The iterator in Hashmap is fail-fast iterator while the enumerator for Hashtable is not. According to Oracle Docs,  if the Hashtable is structurally modified at any time after the iterator is created in any way except the iterator\'s own remove method , then the iterator will throw ConcurrentModification Exception. Structural modification means adding or removing elements from the Collection object (here hashmap or hashtable) . Thus the enumerations returned by the Hashtable keys and elements methods are not fail fast.We have already explained the difference between iterator and enumeration. Performance :  Hashmap is much faster and uses less memory than Hashtable as former is unsynchronized . Unsynchronized objects are often much better in performance in compare to synchronized  object like Hashtable in single threaded environment. Superclass and Legacy :  Hashtable is a subclass of Dictionary class which is now obsolete in Jdk 1.7 ,so ,it is not used anymore. It is better off externally synchronizing a HashMap or using a ConcurrentMap implementation (e.g ConcurrentHashMap).HashMap is the subclass of the AbstractMap class. Although Hashtable and HashMap has different superclasses but they both are implementations of the "Map"  abstract data type.', 'questionId': '40471', 'answerId': '30108941'}
{'answer': 'Synchronization or Thread Safe : Hash Map is not synchronized hence it is not thred safe and it cannot be shared between multiple threads without proper synchronized block whereas, Hashtable is synchronized and hence it is thread safe. Null keys and null values : HashMap allows one null key and any number of null values.Hashtable does not allow null keys or values.  Iterating the values: Iterator in the HashMap is a fail-fast iterator while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally by adding or removing any element except Iterators own remove() method. Superclass and Legacy : HashMap is subclass of AbstractMap class whereas Hashtable is subclass of Dictionary class. Performance : As HashMap is not synchronized it is faster as compared to Hashtable. Refer http://modernpathshala.com/Article/1020/difference-between-hashmap-and-hashtable-in-java for examples and interview questions and quiz related to  Java collection', 'questionId': '40471', 'answerId': '34618895'}
{'answer': 'Apart from the differences already mentioned, it should be noted that since Java 8, HashMap dynamically replaces the Nodes (linked list) used in each bucket with TreeNodes (red-black tree), so that even if high hash collisions exist, the worst case when searching is O(log(n)) for HashMap Vs O(n) in Hashtable. *The aforementioned improvement has not been applied to Hashtable yet, but only to HashMap, LinkedHashMap, and ConcurrentHashMap. FYI, currently, TREEIFY_THRESHOLD = 8 : if a bucket contains more than 8 nodes, the linked list is transformed into a balanced tree. UNTREEIFY_THRESHOLD = 6 : when a bucket becomes too small (due to removal or resizing) the tree is converted back to linked list.', 'questionId': '40471', 'answerId': '37031553'}
{'answer': 'Differences between HashMap and Hashtable in Java: 1) Thread Safe HashTable is internally synchronized.   Therefore, it is very much safe to use HashTable in multi threaded applications.   Where as HashMap is not internally synchronized.   Therefore, it is not safe to use HashMap in multi threaded applications without external synchronization.   You can externally synchronize HashMap using Collections.synchronizedMap() method. 2) Inherited From Though both HashMap and HashTable implement Map interface, but they extend two different classes. HashMap extends AbstractMap class where as HashTable extends Dictionary class which is the legacy class in java. 3) Null Keys And Null Values HashMap allows maximum one null key and any number of null values.  Where as HashTable doesnt allow even a single null key and null value. 4) Traversal HashMap returns only Iterators which are used to traverse over the elements of HashMap. HashTable returns Iterator as well as Enumeration which can be used to traverse over the elements of HashTable. 5) Fail-Fast Vs Fail-Safe Iterator returned by HashMap are fail-fast in nature i.e they throw ConcurrentModificationException if the HashMap is modified  after the creation of Iterator other than iterators own remove() method.  On the other hand, Enumeration returned by the HashTable are fail-safe in nature i.e they dont throw any exceptions if the HashTable is modified after the creation of Enumeration. 6) Performance As HashTable is internally synchronized, this makes HashTable slightly slower than the HashMap. 7) Legacy Class HashTable is a legacy class. It is almost considered as due for deprecation.  Since JDK 1.5, ConcurrentHashMap is considered as better option than the HashTable. 8) Member Of Java Collection Framework HashMap is a member of Java Collection Framework right from the beginning of its introduction in JDK 1.2.  But, HashTable was there before JDK 1.2. From JDK 1.2, it has been made to implement Map interface, making it a member of collection framework. Which is more efficient for non-threaded applications? Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.', 'questionId': '40471', 'answerId': '39785829'}
{'answer': "There is many good answer already posted. I'm adding few new points and summarizing it. HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys. But there are many differences between HashMap and Hashtable classes that are given below. HashMap  1) HashMap is non synchronized. It is not-thread safe and can't be shared between many threads without proper synchronization code. 2) HashMap allows one null key and multiple null values. 3) HashMap is a new class introduced in JDK 1.2. 4) HashMap is fast. 5) We can make the HashMap as synchronized by calling this code Map m = Collections.synchronizedMap(HashMap); 6) HashMap is traversed by Iterator. 7) Iterator in HashMap is fail-fast. 8) HashMap inherits AbstractMap class.     Hashtable 1) Hashtable is synchronized. It is thread-safe and can be shared with many threads. 2) Hashtable doesn't allow any null key or value. 3) Hashtable is a legacy class. 4) Hashtable is slow. 5) Hashtable is internally synchronized and can't be unsynchronized. 6) Hashtable is traversed by Enumerator and Iterator. 7) Enumerator in Hashtable is not fail-fast. 8) Hashtable inherits Dictionary class. Further reading What is difference between HashMap and Hashtable in Java?", 'questionId': '40471', 'answerId': '42622789'}
{'answer': 'HashTable is obsolete in Java 1.7 and it is recommended to use ConcurrentMap implementation', 'questionId': '40471', 'answerId': '43312462'}
{'answer': 'The Hashtable class is synchronized, that is, it is designed to be used by applications that handle multiple or multithreaded process. Synchronized classes are less efficient in the classical case of an application to a process, so the Hashmap class is faster in general. The HashTable class does not accept the Null value, either for keys or for values, while the HashMap class allows a single key with Null and as many as null as possible.', 'questionId': '40471', 'answerId': '43546846'}
{'answer': 'Java is always pass by value, with no exceptions, ever. So how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java never provides direct access to the values of objects themselves, in any circumstances. The only access to objects is through a reference to that object. Because Java objects are always accessed through a reference, rather than directly, it is common to talk about fields and variables and method arguments as being objects, when pedantically they are only references to objects. The confusion stems from this (strictly speaking, incorrect) change in nomenclature. So, when calling a method For primitive arguments (int, long, etc.), the pass by value is the actual value of the primitive (for example, 3). For objects, the pass by value is the value of the reference to the object. So if you have doSomething(foo) and public void doSomething(Foo foo) { .. } the two Foos have copied references that point to the same objects. Naturally, passing by value a reference to an object looks very much like (and is indistinguishable in practice from) passing an object by reference.', 'questionId': '40480', 'answerId': '40499'}
{'answer': "Java passes references by value. So you can't change the reference that gets passed in.", 'questionId': '40480', 'answerId': '40501'}
{'answer': 'Basically, reassigning Object parameters doesn\'t affect the argument, e.g., will print out "Hah!" instead of NULL. The reason this works is because bar is a copy of the value of baz, which is just a reference to "Hah!". If it were the actual reference itself, then foo would have redefined baz to null.', 'questionId': '40480', 'answerId': '40507'}
{'answer': 'Java passes references to objects by value.', 'questionId': '40480', 'answerId': '40514'}
{'answer': 'Java is always pass-by-value. Unfortunately, they decided to call the location of an object a "reference".  When we pass the value of an object, we are passing the reference to it.  This is confusing to beginners. It goes like this: In this example aDog.getName() will still return "Max". The value aDog within main is not changed in the function foo with the Dog "Fifi" as the object reference is passed by value. If it were passed by reference, then the aDog.getName() in main would return "Fifi" after the call to foo. Likewise: In the above example, FiFi is the dog\'s name after call to foo(aDog) because the object\'s name was set inside of foo(...). Any operations that foo performs on d are such that, for all practical purposes, they are performed on aDog itself (except when d is changed to point to a different Dog instance like d = new Dog("Boxer")).', 'questionId': '40480', 'answerId': '40523'}
{'answer': "To make a long story short, Java objects have some very peculiar properties. In general, Java has primitive types (int, bool, char, double, etc) that are passed directly by value. Then Java has objects (everything that derives from java.lang.Object). Objects are actually always handled through a reference (a reference being a pointer that you can't touch). That means that in effect, objects are passed by reference, as the references are normally not interesting. It does however mean that you cannot change which object is pointed to as the reference itself is passed by value. Does this sound strange and confusing? Let's consider how C implements pass by reference and pass by value. In C, the default convention is pass by value. void foo(int x) passes an int by value. void foo(int *x) is a function that does not want an int a, but a pointer to an int: foo(&a). One would use this with the & operator to pass a variable address. Take this to C++, and we have references. References are basically (in this context) syntactic sugar that hide the pointer part of the equation: void foo(int &x) is called by foo(a), where the compiler itself knows that it is a reference and the address of the non-reference a should be passed. In Java, all variables referring to objects are actually of reference type, in effect forcing call by reference for most intends and purposes without the fine grained control (and complexity) afforded by, for example, C++.", 'questionId': '40480', 'answerId': '40630'}
{'answer': 'The distinction, or perhaps just the way I remember as I used to be under the same impression as the original poster is this: Java is always pass by value. All objects( in Java, anything except for primitives) in Java are references. These references are passed by value.', 'questionId': '40480', 'answerId': '42392'}
{'answer': 'As many people mentioned it before, Java is always pass-by-value Here is another example that will help you understand the difference (the classic swap example): Prints:   Before: a = 2, b = 3   After: a = 2, b = 3 This happens because iA and iB are new local reference variables that have the same value of the passed references (they point to a and b respectively). So, trying to change the references of iA or iB will only change in the local scope and not outside of this method.', 'questionId': '40480', 'answerId': '42455'}
{'answer': 'I always think of it as "pass by copy". It is a copy of the value be it primitive or reference. If it is a primitive it is a copy of the bits that are the value and if it is an Object it is a copy of the reference. output of java PassByCopy: name= Maxx   name= Fido Primitive wrapper classes and Strings are immutable so any example using those types will not work the same as other types/objects.', 'questionId': '40480', 'answerId': '49857'}
{'answer': 'I have created a thread devoted to these kind of questions for any programming languages here. Java is also mentioned. Here is the short summary: Java passes it parameters by value "by value" is the only way in java to pass a parameter to a method using methods from the object given as parameter will alter the object as the references point to the original objects. (if that method itself alters some values)', 'questionId': '40480', 'answerId': '49863'}
{'answer': 'I just noticed you referenced my article. The Java Spec says that everything in Java is pass-by-value. There is no such thing as "pass-by-reference" in Java. The key to understanding this is that something like is not a Dog; it\'s actually a pointer to a Dog. What that means, is when you have you\'re essentially passing the address of the created Dog object to the foo method. (I say essentially because Java pointers aren\'t direct addresses, but it\'s easiest to think of them that way) Suppose the Dog object resides at memory address 42. This means we pass 42 to the method. if the Method were defined as let\'s look at what\'s happening. the parameter someDog is set to the value 42 at line "AAA" someDog is followed to the Dog it points to (the Dog object at address 42) that Dog (the one at address 42) is asked to change his name to Max at line "BBB" a new Dog is created. Let\'s say he\'s at address 74 we assign the parameter someDog to 74  at line "CCC" someDog is followed to the Dog it points to (the Dog object at address 74) that Dog (the one at address 74) is asked to change his name to Rowlf then, we return Now let\'s think about what happens outside the method: Did myDog change? There\'s the key. Keeping in mind that myDog is a pointer, and not an actual Dog, the answer is NO. myDog still has the value 42; it\'s still pointing to the original Dog (but note that because of line "AAA", its name is now "Max" - still the same Dog; myDog\'s value has not changed.) It\'s perfectly valid to follow an address and change what\'s at the end of it; that does not change the variable, however. Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, you cannot change where that pointer points. In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed. If Java had pass-by-reference semantics, the foo method we defined above would have changed where myDog was pointing when it assigned someDog on line BBB. Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.', 'questionId': '40480', 'answerId': '73021'}
{'answer': 'Just to show the contrast, compare the following C++ and Java snippets: In C++: Note: Bad code - memory leaks!  But it demonstrates the point. In Java,  Java only has the two types of passing: by value for built-in types, and by value of the pointer for object types.', 'questionId': '40480', 'answerId': '85711'}
{'answer': "It's a bit hard to understand, but Java always copies the value - the point is, normally the value is a reference. Therefore you end up with the same object without thinking about it...", 'questionId': '40480', 'answerId': '436924'}
{'answer': 'The crux of the matter is that the word reference in the expression "pass by reference" means something completely different from the usual mening of the word reference in Java.  Usually in Java reference means a a reference to an object. But the technical terms pass by reference/value from programming language theory is talking about a reference to the memory cell holding the variable, which is someting completely different.', 'questionId': '40480', 'answerId': '436969'}
{'answer': "You can never pass by reference in Java, and one of the ways that is obvious is when you want to return more than one value from a method call. Consider the following bit of code in C++: Sometimes you want to use the same pattern in Java, but you can't; at least not directly. Instead you could do something like this: As was explained in previous answers, in Java you're passing a pointer to the array as a value into getValues. That is enough, because the method then modifies the array element, and by convention you're expecting element 0 to contain the return value. Obviously you can do this in other ways, such as structuring your code so this isn't necessary, or constructing a class that can contain the return value or allow it to be set. But the simple pattern available to you in C++ above is not available in Java.", 'questionId': '40480', 'answerId': '623155'}
{'answer': 'As far as I know, Java only knows call by value. This means for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects. However I think there are some pitfalls; for example, this will not work: This will populate Hello World and not World Hello because in the swap function you use copys which have no impact on the references in the main. But if your objects are not immutable you can change it for example: This will populate Hello World on the command line. If you change StringBuffer into String it will produce just Hello because String is immutable. For example: However you could make a wrapper for String like this which would make it able to use it with Strings: edit: i believe this is also the reason to use StringBuffer when it comes to "adding" two Strings because you can modifie the original object which u can\'t with immutable objects like String is.', 'questionId': '40480', 'answerId': '707416'}
{'answer': 'A few corrections to some posts. C does NOT support pass by reference. It is ALWAYS pass by value. C++ does support pass by reference, but is not the default and is quite dangerous. It doesn\'t matter what the value is in Java: primitive or address(roughly) of object, it is ALWAYS passed by value. If a Java object "behaves" like it is being passed by reference, that is a property of mutability and has absolutely nothing to do with passing mechanisms. I am not sure why this is so confusing, perhaps because so many Java "programmers" are not formally trained, and thus do not understand what is really going on in memory?', 'questionId': '40480', 'answerId': '1964260'}
{'answer': 'Java copies the reference by value. So if you change it to something else (e.g, using new) the reference does not change outside the method. For native types, it is always pass by value.', 'questionId': '40480', 'answerId': '1964361'}
{'answer': 'Have a look at this code. This code will not throw NullPointerException... It will print "Vinay" If Java is pass by reference then it should have thrown NullPointerException as reference is set to Null.', 'questionId': '40480', 'answerId': '3439923'}
{'answer': 'I can\'t believe that nobody mentioned Barbara Liskov yet. When she designed CLU in 1974, she ran into this same terminology problem, and she invented the term call by sharing (also known as call by object-sharing and call by object) for this specific case of "call by value where the value is a reference".', 'questionId': '40480', 'answerId': '3663123'}
{'answer': 'In my opinion, "pass by value" is a terrible way to singularly describe two similar but different events.  I guess they should have asked me first. With primitives we are passing the actual value of the primitive into the method (or constructor), be it the integer "5", the character "c", or what have you.  That actual value then becomes its own local primitive.  But with objects, all we are doing is giving the same object an additional reference (a local reference), so that we now have two references pointing to the same object. I hope this simple explanation helps.', 'questionId': '40480', 'answerId': '6462053'}
{'answer': 'This will give you some insights of how Java really works to the point that in your next discussion about Java passing by reference or passing by value you\'ll just smile :-) Step one please erase from your mind that word that starts with \'p\' "_ _ _ _ _ _ _", especially if you come from other programming languages. Java and \'p\' cannot be written in the same book, forum, or even txt. Step two remember that when you pass an Object into a method you\'re passing the Object reference and not the Object itself. Student: Master, does this mean that Java is pass-by-reference? Master: Grasshopper, No. Now think of what an Object\'s reference/variable does/is: A variable holds the bits that tell the JVM how to get to the referenced Object in memory (Heap). When passing arguments to a method you ARE NOT passing the reference variable, but a copy of the bits in the reference variable. Something like this: 3bad086a. 3bad086a represents a way to get to the passed object. So you\'re just passing 3bad086a that it\'s the value of the reference. You\'re passing the value of the reference and not the reference itself (and not the object). This value is actually COPIED and given to the method.  In the following (please don\'t try to compile/execute this...): What happens? The variable person is created in line #1 and it\'s null at the beginning. A new Person Object is created in line #2, stored in memory, and the variable person is given the reference to the Person object. That is, its address. Let\'s say 3bad086a. The variable person holding the address of the Object is passed to the function in line #3. In line #4 you can listen to the sound of silence  Check the comment on line #5 A method local variable -anotherReferenceToTheSamePersonObject- is created and then comes the magic in line #6: The variable/reference person is copied bit-by-bit and passed to anotherReferenceToTheSamePersonObject inside the function. No new instances of Person are created. Both "person" and "anotherReferenceToTheSamePersonObject" hold the same value of 3bad086a. Don\'t try this but person==anotherReferenceToTheSamePersonObject would be true. Both variables have IDENTICAL COPIES of the reference and they both refer to the same Person Object, the SAME Object on the Heap and NOT A COPY. A picture is worth a thousand words: Note that the anotherReferenceToTheSamePersonObject arrows is directed towards the Object and not towards the variable person! If you didn\'t get it then just trust me and remember that it\'s better to say that Java is pass by value. Well, pass by reference value. Oh well, even better is pass-by-copy-of-the-variable-value! ;) Now feel free to hate me but note that given this there is no difference between passing primitive data types and Objects when talking about method arguments. You always pass a copy of the bits of the value of the reference! If it\'s a primitive data type these bits will contain the value of the primitive data type itself. If it\'s an Object the bits will contain the value of the address that tells the JVM how to get to the Object. Java is pass-by-value because inside a method you can modify the referenced Object as much as you want but no matter how hard you try you\'ll never be able to modify the passed variable that will keep referencing (not p _ _ _ _ _ _ _) the same Object no matter what! The changeName function above will never be able to modify the actual content (the bit values) of the passed reference. In other word changeName cannot make Person person refer to another Object. Of course you can cut it short and just say that  Java is pass-by-value!', 'questionId': '40480', 'answerId': '7034719'}
{'answer': 'Everything is passed by value. Primitives and Object references. But objects can be changed, if their interface allows it. When you pass an object to a method, you are passing a reference, and the object can be modified by the method implementation.  The reference of the object itself, is passed by value: you can reassign the parameter, but the change is not reflected back: As matter of effect, "p" is reference (pointer to the object) and can\'t be changed.  Primitive types are passed by value. Object\'s reference can be considered a primitive type too.  To recap, everything is passed by value.', 'questionId': '40480', 'answerId': '10236169'}
{'answer': 'It\'s really quite, quite simple: For a variable of primitive type (eg. int, boolean, char, etc...), when you use its name for a method argument, you are passing the value contained in it (5, true, or \'c\'). This value gets "copied", and the variable retains its value even after the method invocation. For a variable of reference type (eg. String, Object, etc...), when you use its name for a method argument, you are passing the value contained in it (the reference value that "points" to the object). This reference value gets "copied", and the variable retains its value even after the method invocation. The reference variable keeps "pointing" to the same object. Either way, you\'re always passing stuff by value. Compare this to say C++ where you can have a method to take an int&, or in C# where you could have take a ref int (although, in this case, you also have to use the ref modifier when passing the variable\'s name to the method.)', 'questionId': '40480', 'answerId': '11764499'}
{'answer': 'Java always passes arguments by value NOT by reference. Let me explain this through an example: I will explain this in steps: Declaring a reference named f of type Foo and assign it to a new object of type Foo with an attribute "f". From the method side, a reference of type Foo with a name a is declared and it\'s initially assigned to null. As you call the method changeReference, the reference a will be assigned to the object which is passed as an argument. Declaring a reference named b of type Foo and assign it to a new object of type Foo with an attribute "b". a = b is re-assigning the reference a NOT f to the object whose its attribute is "b". As you call modifyReference(Foo c) method, a reference c is created and assigned to the object with attribute "f". c.setAttribute("c"); will change the attribute of the object that reference c points to it, and it\'s same object that reference f points to it. I hope you understand now how passing objects as arguments works in Java :)', 'questionId': '40480', 'answerId': '12429953'}
{'answer': "No, it's not pass by reference. Java is pass by value according to the Java Language Specification: When the method or constructor is invoked (15.12), the values of the actual argument expressions initialize newly created parameter variables, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the formal parameter.", 'questionId': '40480', 'answerId': '12851599'}
{'answer': 'Java is pass by constant reference where a copy of the reference is passed which means that it is basically a pass by value. You might change the contents of the reference if the class is mutable but you cannot change the reference itself. In other words the address can not be changed since it is passed by value but the content that is pointed by the address can be changed. In case of immutable classes, the content of the reference cannot be changed either.', 'questionId': '40480', 'answerId': '14105447'}
{'answer': 'Java is a pass-by-value, when you pass a primitive\\wrapper you will pass its inner value, and when you pass an object (a reference) you will pass its value (which is the address of the object it references in the memory). Check the comments to understand what happens in execution; follow numbers as they show the flow of execution ..', 'questionId': '40480', 'answerId': '16880062'}
{'answer': "In an attempt to add even more to this, I thought I'd include the SCJP Study Guide section on the topic. This is from the guide that is made to pass the Sun/Oracle test on the behaviour of Java so it's a good source to use for this discussion. Passing Variables into Methods (Objective 7.3) 7.3 Determine the effect upon object references and primitive values when they are passed into methods that perform assignments or other modifying operations on the parameters. Methods can be declared to take primitives and/or object references. You need to know how (or if) the caller's variable can be affected by the called method. The difference between object reference and primitive variables, when passed into methods, is huge and important. To understand this section, you'll need to be comfortable with the assignments section covered in the first part of this chapter. Passing Object Reference Variables When you pass an object variable into a method, you must keep in mind that you're passing the object reference, and not the actual object itself. Remember that a reference variable holds bits that represent (to the underlying VM) a way to get to a specific object in memory (on the heap). More importantly, you must remember that you aren't even passing the actual reference variable, but rather a copy of the reference variable. A copy of a variable means you get a copy of the bits in that variable, so when you pass a reference variable, you're passing a copy of the bits representing how to get to a specific object. In other words, both the caller and the called method will now have identical copies of the reference, and thus both will refer to the same exact (not a copy) object on the heap. For this example, we'll use the Dimension class from the java.awt package: When we run this class, we can see that the modify() method was indeed able to modify the original (and only) Dimension object created on line 4. Notice when the Dimension object on line 4 is passed to the modify() method, any changes to the object that occur inside the method are being made to the object whose reference was passed. In the preceding example, reference variables d and dim both point to the same object. Does Java Use Pass-By-Value Semantics? If Java passes objects by passing the reference variable instead, does that mean Java uses pass-by-reference for objects? Not exactly, although you'll often hear and read that it does. Java is actually pass-by-value for all variables running within a single VM. Pass-by-value means pass-by-variable-value. And that means, pass-by-copy-of- the-variable! (There's that word copy again!) It makes no difference if you're passing primitive or reference variables, you are always passing a copy of the bits in the variable. So for a primitive variable, you're passing a copy of the bits representing the value. For example, if you pass an int variable with the value of 3, you're passing a copy of the bits representing 3. The called method then gets its own copy of the value, to do with it what it likes. And if you're passing an object reference variable, you're passing a copy of the bits representing the reference to an object. The called method then gets its own copy of the reference variable, to do with it what it likes. But because two identical reference variables refer to the exact same object, if the called method modifies the object (by invoking setter methods, for example), the caller will see that the object the caller's original variable refers to has also been changed. In the next section, we'll look at how the picture changes when we're talking about primitives. The bottom line on pass-by-value: the called method can't change the caller's variable, although for object reference variables, the called method can change the object the variable referred to. What's the difference between changing the variable and changing the object? For object references, it means the called method can't reassign the caller's original reference variable and make it refer to a different object, or null. For example, in the following code fragment, reassigning g does not reassign f! At the end of the bar() method, two Foo objects have been created, one referenced by the local variable f and one referenced by   the local (argument) variable g. Because the doStuff() method has a copy of the reference variable, it has a way to get to the original Foo object, for instance to call the setName() method. But, the doStuff() method does not have a way to get to the f reference variable. So doStuff() can change values within the object f refers to, but doStuff() can't change the actual contents (bit pattern) of f. In other words, doStuff() can change the state of the object that f refers to, but it can't make f refer to a different object! Passing Primitive Variables Let's look at what happens when a primitive variable is passed to a method: In this simple program, the variable a is passed to a method called modify(),   which increments the variable by 1. The resulting output looks like this: Notice that a did not change after it was passed to the method. Remember, it was a copy of a that was passed to the method. When a primitive variable is passed to a method, it is passed by value, which means pass-by-copy-of-the-bits-in-the-variable.", 'questionId': '40480', 'answerId': '17303467'}
{'answer': 'Java has only pass by value. A very simple example to validate this.', 'questionId': '40480', 'answerId': '17563873'}
{'answer': 'Shortest answer :) Java has pass-by-value (and pass-reference-by-value.)  C# also has pass-by-reference In C# this is accomplished with the "out" and "ref" keywords.  Pass By Reference: The variable is passed in such a way that a reassignment inside the method is reflected even outside the method. Here follows an example of passing-by-reference (C#). This feature does not exist in java. See also: MSDN library (C#): passing arrays by ref and out See also: MSDN library (C#): passing by by value and by reference', 'questionId': '40480', 'answerId': '18287583'}
{'answer': "The bottom line on pass-by-value: the called method can't change the caller's variable, although for object reference variables, the called method can change the object the variable referred to. What's the difference between changing the variable and changing the object? For object references, it means the called method can't reassign the caller's original reference variable and make it refer to a different object, or null.  I took this code and explanation from a book on Java Certification and made some minor changes. I think it's a good illustration to the pass by value of an object.  In the code below,  reassigning g does not reassign f! At the end of the bar() method, two Foo objects have been created, one referenced by the local variable f and one referenced by the local (argument) variable g.  Because the doStuff() method has a copy of the reference variable, it has a way to get  to the original Foo object, for instance to call the setName() method. But, the doStuff() method does not have a way to get to the f reference variable. So doStuff() can change values within the object f refers to, but doStuff() can't change the actual contents (bit pattern) of f. In other words, doStuff() can change the state of the object that f refers to, but it can't make f refer to a different object! Note that the object reference has not changed in the console output below: Console output: Object reference for f: test.abc.Foo@62f72617 Object reference for g: test.abc.Foo@4fe5e2c3 Boo Object reference for f: test.abc.Foo@62f72617", 'questionId': '40480', 'answerId': '18623099'}
{'answer': 'I feel like arguing about "pass-by-reference vs pass-by-value" is not super-helpful. If you say, "Java is pass by whatever (reference/value)", but in either case you\'re not provide a complete answer. Here\'s some additional information that will hopefully aid in understanding what\'s happening in memory. Crash course on stack/heap before we get to the Java implementation: Values go on and off the stack in a nice orderly fashion, like a stack of plates at a cafeteria. Memory in the heap (also known as dynamic memory) is haphazard and disorganized. The JVM just finds space wherever it can, and frees it up as the variables that use it are no longer needed. Okay. First off, local primitives go on the stack. So this code: results in this: When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are racist against the word "pointer". Whatever. Just know that the address of the object goes in the stack. Like so: An array is an object, so it goes on the heap as well. And what about the objects in the array? They get their own heap space, and the address of each object goes inside the array. So, what gets passed in when you call a method? If you pass in an object, what you\'re actually passing in is the address of the object. Some might say the "value" of the address, and some say it\'s just a reference to the object. This is the genesis of the holy war between "reference" and "value" proponents. What you call it isn\'t as important as that you understand that what\'s getting passed in is the address to the object. One String gets created and space for it is allocated in the heap, and the address to the string is stored on the stack and given the identifier hisName, since the address of the second String is the same as the first, no new String is created and no new heap space is allocated, but a new identifier is created on the stack. Then we call shout(): a new stack frame is created and a new identifier, name is created and assigned the address of the already-existing String. So, value, reference? You say "potato".', 'questionId': '40480', 'answerId': '18740042'}
{'answer': 'Java passes parameters by value, but for object variables, the values are essentially references to objects. Since arrays are objects the following example code shows the difference.', 'questionId': '40480', 'answerId': '18950805'}
{'answer': 'Java is always pass by values NOT pass by reference  first of we understand what is pass by value and pass by reference pass by value means you are making a copy in memory of the actual parameter\'s value that is passed in, a copy of the contents of the actual parameter pass by reference (also called pass by address), a copy of the address of the actual parameter is stored Some time it gives illusion pass by reference.lets see how it works by example Output of this program is  changevalue lets understand step by step test t=new test(); as we all know it will create object in heap and return return reference value back to t. suppose for example value of t is 0x100234(its JVM internal value as we don\'t about it i have just consider it for example)  new Passbyvalue().changeValue(t); when passing reference t to function it will not directly pass actual reference value of object test but it will create copy of t and then it pass to function ( as it pass by value it passes copy of variable not actual reference of it) . As we consider value of t will be0x100234 . so in this way both t and f will have same value and hence they will point to same object so if you change any thing in function using reference f it will modify existing contain of object that why we were getting output "changevalue" which is updated in function to understand this more clearly consider following example will it give null pointer no because it passes only copy of reference .In case of by reference it could have given nullpointer exception  Hopefully this will help', 'questionId': '40480', 'answerId': '19421107'}
{'answer': 'The Java programming language passes arguments only by value, that is, you cannot change the argument value in the calling method from within the called method. However, when an object instance is passed as an argument to a method, the value of the argument is not the object itself but a reference to the object. You can change the contents of the object in the called method but not the object reference. To many people, this looks like pass-by-reference, and behaviorally, it has much in common with pass-by-reference. However, there are two reasons this is inaccurate. Firstly, the ability to change the thing passed into a method only applies to objects, not primitive values.  Second, the actual value associated with a variable of object type is the reference to the object, and not the object itself. This is an important distinction in other ways, and if clearly understood, is entirely supporting of the point that the Java programming language passes arguments by value.', 'questionId': '40480', 'answerId': '19970416'}
{'answer': "In java everything is reference, so when you have something like:     Point pnt1 = new Point(0,0); Java does following: Creates new Point object Creates new Point reference and initialize that reference to point (refer to) on previously created Point object. From here, through Point object life, you will access to that object through pnt1  reference. So we can say that in Java you manipulate object through its reference. Java doesn't pass method arguments by reference; it passes them by value. I will use example from this site:  Flow of the program: Creating two different Point object with two different reference associated. As expected output will be: On this line 'pass-by-value' goes into the play...  References pnt1 and pnt2 are passed by value to the tricky method, which means that now yours references pnt1 and pnt2 have their copies named arg1 and arg2.So pnt1 and arg1 points to the same object. (Same for the pnt2 and arg2) In the tricky method: Next in the tricky method Here, you first create new temp Point reference which will point on same place like arg1 reference. Then you move reference arg1 to point to the same place like arg2 reference. Finally arg2 will point to the same place like temp. From here scope of tricky method is gone and you don't have access any more to the references: arg1, arg2, temp. But important note is that everything you do with these references when they are 'in life' will permanently affect object on which they are point to.  So after executing method tricky, when you return to main, you have this situation: So now, completely execution of program will be:", 'questionId': '40480', 'answerId': '20125921'}
{'answer': 'Java passes references to objects by value. So if any modification is done to the Object to which the reference argument points it will be reflected back on the original object. But if the reference argument point to another Object still the original reference will point to original Object.', 'questionId': '40480', 'answerId': '20346109'}
{'answer': 'In java actually we pass arguments as  value of , reference object. Due to this term, some people mislead that Java is strictly pass by reference.   In case of primitive types, we pass only values.  But in case of class objects, we pass a copy of address of reference object. Hence whatever changes we made to the value in that duplicate address of original reference, will affect the whole program.', 'questionId': '40480', 'answerId': '20437881'}
{'answer': 'A reference is always a value when represented, no matter what language you use. Getting an outside of the box view, let\'s look at Assembly or some low level memory management. At the CPU level a reference to anything immediately becomes a value if it gets written to memory or to one of the CPU registers. (That is why pointer is a good definition. It is a value, which has a purpose at the same time). Data in memory has a Location and at that location there is a value (byte,word, whatever). In Assembly we have a convenient solution to give a Name to certain Location (aka variable), but when compiling the code, the assembler simply replaces Name with the designated location just like your browser replaces domain names with IP addresses. Down to the core it is technically impossible to pass a reference to anything in any language without representing it (when it immediately becomes a value). Lets say we have a variable Foo, its Location is at the 47th byte in memory and its Value is 5. We have another variable Ref2Foo which is at 223rd byte in memory, and its value will be 47. This Ref2Foo might be a technical variable, not explicitly created by the program. If you just look at 5 and 47 without any other information, you will see just two Values. If you use them as references then to reach to 5 we have to travel: This is how jump-tables work.  If we want to call a method/function/procedure with Foo\'s value, there are a few possible way to pass the variable to the method, depending on the language and its several method invocation modes: 5 gets copied to one of the CPU registers (ie. EAX). 5 gets PUSHd to the stack. 47 gets copied to one of the CPU registers 47 PUSHd to the stack. 223 gets copied to one of the CPU registers. 223 gets PUSHd to the stack. In every cases above a value - a copy of an existing value - has been created, it is now upto the receiving method to handle it. When you write "Foo" inside the method, it is either read out from EAX, or automatically  dereferenced, or double dereferenced, the process depends on how the language works and/or what the type of Foo dictates. This is hidden from the developer until she circumvents the dereferencing process. So a reference is a value when represented, because a reference is a value that has to be processed (at language level). Now we have passed Foo to the method: in case 1. and 2. if you change Foo (Foo = 9) it only affects local scope as you have a copy of the Value. From inside the method we cannot even determine where in memory the original Foo was located. in case 3. and 4. if you use default language constructs and change Foo (Foo = 11), it could change Foo globally (depends on the language, ie. Java or like Pascal\'s procedure findMin(x, y, z: integer;var m: integer);). However if the language allows you to circumvent the dereference process, you can change 47, say to 49. At that point Foo seems to have been changed if you read it, because you have changed the local pointer to it. And if you were to modify this Foo inside the method (Foo = 12) you will probably FUBAR the execution of the program (aka. segfault) because you will write to a different memory than expected, you can even modify an area that is destined to hold executable program and writing to it will modify running code (Foo is now not at 47). BUT Foo\'s value of 47 did not change globally, only the one inside the method, because 47 was also a copy to the method. in case 5. and 6. if you modify 223 inside the method it creates the same mayhem as in 3. or 4. (a pointer, pointing to a now bad value, that is again used as a pointer) but this is still a local problem, as 223 was copied. However if you are able to dereference Ref2Foo (that is 223), reach to and modify the pointed value 47, say, to 49, it will affect Foo globally, because in this case the methods got a copy of 223  but the referenced 47 exists only once, and changing that to 49 will lead every Ref2Foo double-dereferencing to a wrong value. Nitpicking on insignificant details, even languages that do pass-by-reference will pass values to functions, but those functions know that they have to use it for dereferencing purposes. This pass-the-reference-as-value is just hidden from the programmer because it is practically useless and the terminology is only pass-by-reference. Strict pass-by-value is also useless, it would mean that a 100 Mbyte array should have to be copied every time we call a method with the array as argument, therefore Java cannot be stricly pass-by-value. Every language would pass a reference to this huge array (as a value) and either employs copy-on-write mechanism if that array can be changed locally inside the method or allows the method (as Java does) to modify the array globally (from the caller\'s view) and a few languages allows to modify the Value of the reference itself. So in short and in Java\'s own terminology, Java is pass-by-value where value can be: either a real value or a value that is a representation of a reference.', 'questionId': '40480', 'answerId': '20566453'}
{'answer': 'Mr @Scott Stanchfield wrote an excellent answer. Here is the class that would you to verify exactly what he meant: So, we pass from main() a dog called Rover, then we assign a new address to the pointer that we passed, but at the end, the name of the dog is not Rover, and not Fifi, and certainly not Rowlf, but Max.', 'questionId': '40480', 'answerId': '21288385'}
{'answer': "I thought I'd contribute this answer to add more details from the Specifications. First, What's the difference between passing by reference vs. passing by value? Passing by reference means the called functions' parameter will be the   same as the callers' passed argument (not the value, but the identity   - the variable itself).  Pass by value means the called functions' parameter will be a copy of   the callers' passed argument. Or from wikipedia, on the subject of pass-by-reference In call-by-reference evaluation (also referred to as   pass-by-reference), a function receives an implicit reference to a   variable used as argument, rather than a copy of its value. This   typically means that the function can modify (i.e. assign to) the   variable used as argumentsomething that will be seen by its caller. And on the subject of pass-by-value In call-by-value, the argument expression is evaluated, and the   resulting value is bound to the corresponding variable in the function [...].    If the function or procedure is able to assign values to its   parameters, only its local copy is assigned [...]. Second, we need to know what Java uses in its method invocations. The Java Language Specification states When the method or constructor is invoked (15.12), the values of the   actual argument expressions initialize newly created parameter   variables, each of the declared type, before execution of the body of   the method or constructor. So it assigns (or binds) the value of the argument to the corresponding parameter variable.  What is the value of the argument? Let's consider reference types, the Java Virtual Machine Specification states There are three kinds of reference types: class types, array types,   and interface types. Their values are references to dynamically   created class instances, arrays, or class instances or arrays that   implement interfaces, respectively. The Java Language Specification also states The reference values (often just references) are pointers to these objects, and a special null reference, which refers to no object. The value of an argument (of some reference type) is a pointer to an object. Note that a variable, an invocation of a method with a reference type return type, and an instance creation expression (new ...) all resolve to a reference type value. So all bind the value of a reference to a String instance to the method's newly created parameter, param. This is exactly what the definition of pass-by-value describes. As such, Java is pass-by-value. The fact that you can follow the reference to invoke a method or access a field of the referenced object is completely irrelevant to the conversation. The definition of pass-by-reference was This typically means that the function can modify (i.e. assign to) the   variable used as argumentsomething that will be seen by its caller. In Java, modifying the variable means reassigning it. In Java, if you reassigned the variable within the method, it would go unnoticed to the caller. Modifying the object referenced by the variable is a different concept entirely.  Primitive values are also defined in the Java Virtual Machine Specification, here. The value of the type is the corresponding integral or floating point value, encoded appropriately (8, 16, 32, 64, etc. bits).", 'questionId': '40480', 'answerId': '24546764'}
{'answer': "Understand it in 2 Steps:  You can't change the reference to the object itself but you can work with this passed parameter as a reference to the object. If you want to change the value behind the reference you will only declare a new variable on the stack with the same name 'd'. Look at the references with the sign @ and you will find out that the reference has been changed.", 'questionId': '40480', 'answerId': '24685542'}
{'answer': 'Throughout all the answers we see that Java pass-by-value or rather as @Gevorg  wrote: "pass-by-copy-of-the-variable-value" and this is the idea that we should have in mind all the time.  I am focusing on examples that helped me understand the idea and it is rather addendum to previous answers. From [1] In Java you always are passing arguments by copy; that is you\'re always creating a new instance of the value inside the function. But there are certain behaviors that can make you think you\'re passing by reference. Passing by copy: When a variable is passed to a method/function, a copy is made (sometimes we hear that when you pass primitives, you\'re making copies). Passing by reference: When a variable is passed to a method/function, the code in the method/function operates on the original variable (You\'re still passing by copy, but references to values inside the complex object are parts of both versions of the variable, both the original and the version inside the function. The complex objects themselves are being copied, but the internal references are being retained) Examples of Passing by copy/ by value Example from [ref 1] Example from [ref 2] shows nicely the mechanism   watch max 5 min (Passing by reference) pass-by-copy-of-the-variable-value Example from [ref 1] (remember that an array is an object) The complex objects themselves are being copied, but the internal references are being retained. Example from[ref 3] The area of the rectangle is 200 and the length=10 and width=20 Last thing I would like to share was this moment of the lecture: Memory Allocation which I found very helpful in understanding the Java passing by value or rather pass-by-copy-of-the-variable-value as @Gevorg has written. REF 1 Lynda.com REF 2 Professor Mehran Sahami watch max 5 min Memory Allocation REF 3 c4learn passing-object-as-parameter-to-method', 'questionId': '40480', 'answerId': '26028582'}
{'answer': 'There is a workaround in Java for the reference. Let me explain by this example: I hope this helps!', 'questionId': '40480', 'answerId': '26210057'}
{'answer': "Simple program From a C/C++ programmer's point of view, java uses pass by value, so for primitive data types (int, char etc) changes in the function does not reflect in the calling function. But when you pass an object and in the function you change its data members or call member functions which can change the state of the object, the calling function will get the changes.", 'questionId': '40480', 'answerId': '27608651'}
{'answer': 'Java passes everything by value!! //create an object by passing in a name and age: //Both variable2 and variable1 now reference the same object // variable1 now points to variable3 //WHAT IS OUTPUT BY THIS? if you could understand this example we r done. otherwise, please visit this webPage for detailed explanation: webPage', 'questionId': '40480', 'answerId': '28750315'}
{'answer': 'Java passes parameters by VALUE, and by value ONLY. To cut long story short: For those coming from C#: THERE IS NO "out" parameter. For those coming from PASCAL: THERE IS NO "var" parameter. It means you can\'t change the reference from the object itself, but you can always change the object\'s properties. A workaround is to use StringBuilder parameter instead String. And you can always use arrays!', 'questionId': '40480', 'answerId': '29133165'}
{'answer': 'Let me try to explain my understanding with the help of four examples. Java is pass-by-value, and not pass-by-reference /** Pass By Value In Java, all parameters are passed by value, i.e. assigning a method argument is not visible to the caller. */ Example 1: Result Example 2: /**  *   * Pass By Value  *  */ Result Example 3: /**   This \'Pass By Value has a feeling of \'Pass By Reference\' Some people say primitive types and \'String\' are \'pass by value\'   and objects are \'pass by reference\'. But from this example, we can understand that it is infact pass by value only,   keeping in mind that here we are passing the reference as the value.   ie: reference is passed by value.   That\'s why are able to change and still it holds true after the local scope.   But we cannot change the actual reference outside the original scope.   what that means is demonstrated by next example of PassByValueObjectCase2. */ Result Example 4: /** In addition to what was mentioned in Example3 (PassByValueObjectCase1.java),  we cannot change the actual reference outside the original scope." Note: I am not pasting the code for private class Student. The class definition for Student is same as Example3. */ Result', 'questionId': '40480', 'answerId': '30201678'}
{'answer': 'ACCORDING TO C++ TERMINOLOGY :  Primitive Types and their wrappers - Pass by Value Other Complex Datatypes            - Pass by Reference (Although Java is completely Pass by Value, in the second case it passes the reference to the object and in this case the value of the object if changed is reflected in the main function and so I called it Pass by Reference according to C++ Terminology.) If you are hailing from C++, then Java is pass by value for Primitive types and their Wrapper Classes like int, Integer, bool, Boolean i.e., if you pass a value of these data types, there will be no change in the original function. For all other kinds of datatypes java just passes them and if any change is made, the change can be seen in the original function(It can be called pass by reference according to c++ terminology)', 'questionId': '40480', 'answerId': '33885194'}
{'answer': 'Java always uses call by value. That means the method gets copy of all parameter values. Consider next 3 situations: 1) Trying to change primitive variable x will copy value of a and will increment x, a remains the same 2) Trying to change primitive field of an object p will copy reference value of pers and will increment age field, variables are referencing to the same object so age is changed 3) Trying to change reference value of reference variables after calling swap p1, p2 copy reference values from pers1 and pers2, are swapping with values, so pers1 and pers2 remain the same So. you can change only fields of objects in method passing copy of reference value to this object.', 'questionId': '40480', 'answerId': '34924074'}
{'answer': 'So many long answers. Let me give a simple one: Java always passes everything by value that means also references are passed by value In short, you can not modify value of any parameter passed, but you can call methods or change attributes of an object reference passed.', 'questionId': '40480', 'answerId': '36040135'}
{'answer': "I made this little diagram that shows how the data gets created and passed Note: Primitive values are passed as a value, the first reference to to that value is the method's argument That means: You can change the value of myObject inside the function But you can't change what myObject references to, inside the function, because point is not myObject Remember, both point and myObject are references, different references, however, those references point at the same new Point(0,0)", 'questionId': '40480', 'answerId': '36843568'}
{'answer': 'A lot of the confusion surrounding this issue comes from the fact that Java has attempted to redefine what "Pass by value" and "Pass by reference" mean. It\'s important to understand that these are Industry Terms, and cannot be correctly understood outside of that context. They are meant to help you as you code and are valuable to understand, so let\'s first go over what they mean.  A good description of both can be found here. Pass By Value The value the function received is a copy of the object the caller is using. It is entirely unique to the function and anything you do to that object will only be seen within the function. Pass By Reference The value the function received is a reference to the object the caller is using. Anything the function does to the object that value refers to will be seen by the caller and it will be working with those changes from that point on. As is clear from those definitions, the fact that the reference is passed by value is irrelevant. If we were to accept that definition, then these terms become meaningless and all languages everywhere are only Pass By Value. No matter how you pass the reference in, it can only ever be passed by value. That isn\'t the point. The point is that you passed a reference to your own object to the function, not a copy of it. The fact that you can throw away the reference you received is irrelevant. Again, if we accepted that definition, these terms become meaningless and everyone is always passing by value. And no, C++\'s special "pass by reference" syntax is not the exclusive definition of pass by reference. It is purely a convenience syntax meant to make it so that you don\'t need to use pointer syntax after passing the pointer in. It is still passing a pointer, the compiler is just hiding that fact from you. It also still passes that pointer BY VALUE, the compiler is just hiding that from you. So, with this understanding, we can look at Java and see that it actually has both. All Java primitive types are always pass by value because you receive a copy of the caller\'s object and cannot modify their copy. All Java reference types are always pass by reference because you receive a reference to the caller\'s object and can directly modify their object.  The fact that you cannot modify the caller\'s reference has nothing to do with pass by reference and is true in every language that supports pass by reference.', 'questionId': '40480', 'answerId': '37190132'}
{'answer': 'Thinking that way is just making things sound more and more complicated. Just simply thinks that the new keyword creates a whole new object thus, when you pass an object from a variable to another variable without the keyword new, you pass the same object. Assume the operator = means the word "is" in English : So, if you made any changes towards b, affects a, since b is a or you can think b as an alias for a. Let\'s see what happen when we change the operands into primitive variables like int, float, etc. : x is an alias for 1, whenever I say "x", it means 1. So, changes towards y will not affect x... Another analogy : Suppose that Tommy Spade, Dennis Heart and Jackie Diamond are friends. Tommy calls Jackie "Jack" and Dennis call Jackie "Dia". Let\'s think Jack and Dia are variables. No matter what, Jackie and Dia is the same entity (object). When Tommy hit Jack\'s face, Dennis can see the bruise in Dia\'s face too of course, since Jack and Dia is the same [person]. Primitive values are just primitive. It has no component, just a value, so the above analogy doesn\'t work on this type of data. One of the main concept of OOP is abstraction. You don\'t need to know the details of how a device work to use it, you only need to know how to use it, not how it works. Unless you want to be a researcher, it is fine. Hope my answer helps.', 'questionId': '40480', 'answerId': '37315402'}
{'answer': 'There is a very simple way to understand this. Lets\'s take C++ pass by reference. What is the outcome? So, after bar() assigned a new value to a "reference" passed in, it actually changed the one which was passed in from main itself, explaining the last f.foo() call from main printing 99. Now, lets see what java says. It says: Voil, the reference of Foo in main that was passed to bar, is still unchanged! This example clearly shows that java is not the same as C++ when we say "pass by reference". Essentially, java is passing "references" as "values" to functions, meaning java is pass by value.', 'questionId': '40480', 'answerId': '37669835'}
{'answer': 'In Java only references are passed and are passed by value: Java arguments are all passed by value (the variable is copied when used by the method) : In the case of primitive types, Java behaviour is simple:  The value is copied in another instance of the primitive type. In case of Objects, this is the same:  Object variables are pointers (buckets) holding only Objects address that was created using the "new" keyword, and are copied like primitive types. The behaviour can appear different from primitive types: Because the copied object-variable contains the same address (to the same Object) Object\'s content/members might still be modified within a method and later access outside, giving the illusion that the (containing) Object itself was passed by reference.  "String" Objects appear to be a perfect counter-example to the urban legend saying that "Objects are passed by reference": In effect, within a method you will never be able, to update the value of a String passed as argument: A String Object, holds characters by an array declared final that can\'t be modified. Only the address of the Object might be replaced by another using "new".  Using "new" to update the variable, will not let the Object be accessed from outside, since the variable was initially passed by value and copied.', 'questionId': '40480', 'answerId': '38550131'}
{'answer': '', 'questionId': '40480', 'answerId': '39539167'}
{'answer': "Java does manipulate objects by reference, and all object variables are references. However, Java doesn't pass method arguments by reference; it passes them by value. Take thebadSwap()method for example: WhenbadSwap()returns, the variables passed as arguments will still hold their original values. The method will also fail if we change the arguments type frominttoObject, since Java passes object references by value as well. Now, here is where it gets tricky: If we execute thismain()method, we see the following output: X: 0 Y: 0 X: 0 Y: 0 X: 100 Y: 100 X: 0 Y: 0 The method successfully alters the value ofpnt1, even though it is passed by value; however, a swap ofpnt1andpnt2fails! This is the major source of confusion. In themain()method,pnt1andpnt2are nothing more than object references. When you passpnt1andpnt2to thetricky()method, Java passes the references by value just like any other parameter. This means the references passed to the method are actuallycopiesof the original references. Figure 1 below shows two references pointing to the same object after Java passes an object to a method. Java copies and passes thereferenceby value, not the object. Thus, method manipulation will alter the objects, since the references point to the original objects. But since the references are copies, swaps will fail. As Figure 2 illustrates, the method references swap, but not the original references. Unfortunately, after a method call, you are left with only the unswapped original references. For a swap to succeed outside of the method call, we need to swap the original references, not the copies.", 'questionId': '40480', 'answerId': '39709353'}
{'answer': 'A simple test to check whether a language supports pass-by-reference is simply writing a traditional swap. Can you write a traditional swap(a,b) method/function in Java? A traditional swap method or function takes two arguments and swaps them such that variables passed into the function are changed outside the function. Its basic structure looks like (Non-Java) Basic swap function structure If you can write such a method/function in your language such that calling actually switches the values of the variables var1 and var2, the language supports pass-by-reference. But Java does not allow such a thing as it supports passing the values only and not pointers or references.', 'questionId': '40480', 'answerId': '39767073'}
{'answer': '', 'questionId': '40480', 'answerId': '40014346'}
{'answer': ' O/p 30 40 40 20 40 So its always the pass by value but if the object instance variables are changed they get retained. If the Object itself is changed then java creates a new object so its not retained.', 'questionId': '40480', 'answerId': '40068500'}
{'answer': "The major cornerstone knowledge must be the quoted one, When an object reference is passed to a method, the reference itself   is passed by use of call-by-value. However, since the value being   passed refers to an object, the copy of that value will still refer to   the same object referred to by its corresponding argument. Java: A Beginner's Guide, Sixth Edition, Herbert Schildt", 'questionId': '40480', 'answerId': '40593867'}
{'answer': "It seems everything is call by value in java as i have tried to understand by the following program  Class-S Class-Sample Output alam alam taleev alam taleev harry As we have define class S with instance variable name with value taleev so for all the objects that we initialize from it will have the name variable with value of taleev but if we change the name's value of any objects then it is changing the name of only that copy of the class(Object) not for every class so after that also when we do System.out.println(s.name) it is printing taleev only we can not change the name's value that we have defined originally, and the value that we are changing is the object's value not the instance variable value so once we have define instance variable we are unable to change it So i think that is how it shows that java deals with values only not with the references  The memory allocation for the primitive variables can be understood by  this", 'questionId': '40480', 'answerId': '40631632'}
{'answer': 'Java, for sure, without a doubt, is "pass by value". Also, since Java is (mostly) object-oriented and objects work with references, it\'s easy to get confused and think of it to be "pass by reference" Pass by value means you pass the value to the method and if the method changes the passed value, the real entity doesn\'t change. Pass by reference, on the other hand, means a reference is passed to the method, and if the method changes it, the passed object also changes. In Java, usually when we pass an object to a method, we basically pass the reference of the object as-a-value because that\'s how Java works; it works with references and addresses as far as Object in the heap goes. But to test if it is really pass by value or pass by reference, you can use a primitive type and references: The output is: So in both cases, whatever happens inside the method doesn\'t change the real Object, because the value of that object was passed, and not a reference to the object itself. But when you pass a custom object to a method, and the method and changes it, it will change the real object too, because even when you passed the object, you passed it\'s reference as a value to the method. Let\'s try another example: In this case, the output is:', 'questionId': '40480', 'answerId': '41393112'}
{'answer': "I tried to simplify the examples above, keeping only the essense of the problem. Let me present this as a story that is easy to remember and apply correctly. The story goes like this: You have a pet dog, Jimmy, whose tail is 12 inches long. You leave it with a vet for a few weeks while you are travelling abroad. The vet doesn't like the long tail of Jimmy, so he wants to cut it by half. But being a good vet, he knows that he has no right to mutilate other people's dogs. So he first makes a clone of the dog (with the new key word) and cuts the tail of the clone. When the dog finally returns to you, it has the original 12 inch tail in tact. Happy ending ! The next time you travel, you take the dog, unwittingly, to a wicked vet.  He is also a hater of long tails, so he cuts it down to a miserable 2 inches.  But he does this to your dear Jimmy, not a clone of it. When you return, you are shocked to see Jimmy pathetically wagging a 2 inch stub. Moral of the story: When you pass on your pet, you are giving away whole and unfettered custody of the pet to the vet. He is free to play any kind of havoc with it. Passing by value, by reference, by pointer are all just technical wrangling.  Unless the vet clones it first, he ends up mutilating the original dog.", 'questionId': '40480', 'answerId': '41901960'}
{'answer': 'When C passes the data structure by reference, the pointer to the data structure does exist somewhere but it is immutable. In the code x always means the same memory location inside the method. It is set when the method is called and you cannot make it to point to some other Struct somewhere. In Java, the analog is passing object reference as the final parameter. Assigning value directly to x would be an error then. Java cannot just copy all fields of the one structure to another upon assignment. Regular parameter passing (without final) is kind of weird construct for C, but the closest construct could possibly be Here x is a pointer, and while you can use it to modify the structure, the pointer itself is passed by value (you can assign another value to it, this change will not propagate back to the calling code). You also need a different syntax to access the fields of the structure (*x).field or x->field, not x.field like in Java but this is just a language specific detail. Because of that, C programmer that sees Java reference as a pointer would normally say this pointer has been passed by value.', 'questionId': '40480', 'answerId': '42134359'}
{'answer': 'Unlike some other languages, Java does not allow you to choose pass-by-value or pass-by-reference all arguments are passed by value.  A method call can pass two types of valuesto a method copies of primitive values (e.g., values of type int and double) copies of references to objects. Objects themselves cannot be passed to methods. When a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method. This is also true for reference-type parameters. If you modify a reference-type parameter so that it refers to another object, only the parameter refers to the new objectthe reference stored in the callers variable still refers to the original object. References: Java How To Program (Early Objects), Tenth Edition', 'questionId': '40480', 'answerId': '43113746'}
{'answer': "Java is a call by value . How it works  . You always pass a copy of the bits of the value of the reference! If it's a primitive data type these bits contain the value of the primitive data type itself , That's why if we change the value of header inside the method then it's not reflect the changes outside. If it's a object data type like Foo foo=new Foo() then in this case copy of the address of the object passes like file shortcut  , suppose we have a text file abc.txt at C:\\desktop and suppose we make shortcut of same file and put this inside C:\\desktop\\abc-shortcut so when you access the file from C:\\desktop\\abc.txt and write 'Stack Overflow' and close the file and again you open the file from shortcut then you write ' is the largest online community for programmers to learn' then total file change will be 'Stack Overflow is the largest online community for programmers to learn' which means it does't matters from where you open the file , each time we were accessing the same file , here we can assume Foo as a file and suppose foo stored at 123hd7h(original address like C:\\desktop\\abc.txt ) address and 234jdid(copied address like C:\\desktop\\abc-shortcut which actually contains the original address of the file inside) .. So for better understanding make shortcut file and feel. To get more info look at this :- http://easybook4u.com/index.php/2017/06/18/is-java-pass-by-reference-or-pass-by-value/", 'questionId': '40480', 'answerId': '43290680'}
{'answer': 'Short answer. Java is always pass-by-value. When we speak about passing objects, Java passes copy of the reference to the "real" object', 'questionId': '40480', 'answerId': '45053243'}
{'answer': 'Here is an example of passing by reference: both x and t refer to the same Test object. By contrast, this shows passing by value: When you use new, you create a ref object, but when you use var like int, float or boolean, it will be passed by value.', 'questionId': '40480', 'answerId': '45354218'}
{'answer': 'Instead of using a DOMParser, use a SAXParser.  This reads from an input stream or reader so you can keep the XML on disk instead of loading it all into memory.', 'questionId': '40663', 'answerId': '40678'}
{'answer': 'Use libxml, which performs validation and has a streaming mode.', 'questionId': '40663', 'answerId': '40681'}
{'answer': 'Personally I like to use XMLStarlet which has a command line interface, and works on streams. It is a set of tools built on Libxml2.', 'questionId': '40663', 'answerId': '40956'}
{'answer': 'SAX and libXML will help, as already mentioned. You could also try increasing the maximum heap size for the JVM using the -Xmx option. E.g. to set the maximum heap size to 512MB: java -Xmx512m com.foo.MyClass', 'questionId': '40663', 'answerId': '628133'}
{'answer': "We use FindBugs and JDepend integrated with Ant. We use JUnit but we're not using any coverage tool.  I'm not using it integrated to Rational Application Developer (the IDE I'm using to develop J2EE applications) because I like how neat it looks when you run javac in the Windows console. :P", 'questionId': '4080', 'answerId': '4166'}
{'answer': "Checkstyle is another one I've used at a previous company... it's mainly for style checking, but it can do some static analysis too.  Also, Clover for code coverage, though be aware it is not a free tool.", 'questionId': '4080', 'answerId': '4492'}
{'answer': "We are using FindBugs and Checkstyle as well as Clover for Code Coverage.  I think it's important to have some kind of static analysis, supporting your development. Unfortunately it's still not widely spread that these tools are important.", 'questionId': '4080', 'answerId': '4493'}
{'answer': 'I am looking for many answers to learn about new tools and consolidate this knowledge in a one question/thread, so I doubt there will be 1 true answer to this question. My answer to my own question is that we use: Findbugs to look for common errors bad/coding - run from maven, and also integrates easily into Eclipse Cobertura for our coverage reports - run from maven Hudson also has a task-scanner plugin that will display a count of your TODO and FIXMEs, as well as show where they are in the source files. All are integrated with Maven 1.x in our case and tied into Hudson, which runs our builds on check-in as well as extra things nightly and weekly. Hudson trend graphs our JUnit tests, coverage, findbugs, as well as open tasks. There is also a Hudson plugin that reports and graphs our compile warnings. We also have several performance tests with their own graphs of performance and memory use over time using the Hudson plots plugin as well.', 'questionId': '4080', 'answerId': '6022'}
{'answer': "All of the following we use and integrate easiy in both our Maven 2.x builds and Eclipse/RAD 7: Testing - JUnit/TestNG Code analysis - FindBugs, PMD Code coverage - Clover In addition, in our Maven builds we have: JDepend Tag checker (TODO, FIXME, etc) Furthermore, if you're using Maven 2.x, CodeHaus has a collection of handy Maven plugins in their Mojo project. Note: Clover has out-of-the-box integration with the Bamboo CI server (since they're both Atlassian products). There are also Bamboo plugins for FindBugs, PMD, and CheckStyle but, as noted, the free Hudson CI server has those too.", 'questionId': '4080', 'answerId': '13277'}
{'answer': 'For static analysis tools I often use CPD, PMD, FindBugs, and Checkstyle. CPD is the PMD "Copy/Paste Detector" tool. I was using PMD for a little while before I noticed the "Finding Duplicated Code" link on the PMD web page. I\'d like to point out that these tools can sometimes be extended beyond their "out-of-the-box" set of rules. And not just because they\'re open source so that you can rewrite them. Some of these tools come with applications or "hooks" that allow them to be extended. For example, PMD comes with the "designer" tool that allows you to create new rules. Also, Checkstyle has the DescendantToken check that has properties that allow for substantial customization. I integrate these tools with an Ant-based build. You can follow the link to see my commented configuration. In addition to the simple integration into the build, I find it helpful to configure the tools to be somewhat "integrated" in a couple of other ways. Namely, report generation and warning suppression uniformity. I\'d like to add these aspects to this discussion (which should probably have the "static-analysis" tag also): how are folks configuring these tools to create a "unified" solution? (I\'ve asked this question separately here) First, for warning reports, I transform the output so that each warning has the simple format: This is often called the "Emacs format," but even if you aren\'t using Emacs, it\'s a reasonable format for homogenizing reports. For example: My warning format transformations are done by my Ant script with Ant filterchains. The second "integration" that I do is for warning suppression. By default, each tool supports comments or an annotation (or both) that you can place in your code to silence a warning that you want to ignore. But these various warning suppression requests do not have a consistent look which seems somewhat silly. When you\'re suppressing a warning, you\'re suppressing a warning, so why not always write "SuppressWarning?" For example, PMD\'s default configuration suppresses warning generation on lines of code with the string "NOPMD" in a comment. Also, PMD supports Java\'s @SuppressWarnings annotation. I configure PMD to use comments containing "SuppressWarning(PMD." instead of NOPMD so that PMD suppressions look alike. I fill in the particular rule that is violated when using the comment style suppression: Only the "SuppressWarnings(PMD." part is significant for a comment, but it is consistent with PMD\'s support for the @SuppressWarning annotation which does recognize individual rule violations by name: Similarly, Checkstyle suppresses warning generation between pairs of comments (no annotation support is provided). By default, comments to turn Checkstyle off and on contain the strings CHECKSTYLE:OFF and CHECKSTYLE:ON, respectively. Changing this configuration (with Checkstyle\'s "SuppressionCommentFilter") to use the strings "BEGINSuppressWarnings(CheckStyle." and "ENDSuppressWarnings(CheckStyle." makes the controls look more like PMD: With Checkstyle comments, the particular check violation (HiddenField) is significant because each check has its own "BEGIN/END" comment pair. FindBugs also supports warning generation suppression with a @SuppressWarnings annotation, so no further configuration is required to achieve some level of uniformity with other tools. Unfortunately, Findbugs has to support a custom @SuppressWarnings annotation because the built-in Java @SuppressWarnings annotation has a SOURCE retention policy which is not strong enough to retain the annotation in the class file where FindBugs needs it. I fully qualify FindBugs warnings suppressions to avoid clashing with Java\'s @SuppressWarnings annotation: These techniques makes things look reasonably consistent across tools. Note that having each warning suppression contain the string "SuppressWarnings" makes it easy to run a simple search to find all instances for all tools over an entire code base.', 'questionId': '4080', 'answerId': '79845'}
{'answer': "I've had good luck with Cobertura.  It's a code coverage tool which can be executed via your ant script as part of your normal build and can be integrated into Hudson.", 'questionId': '4080', 'answerId': '80009'}
{'answer': 'I use the static analysis built into IntelliJ IDEA. Perfect integration. I use the code coverage built into Intellij IDEA (based on EMMA). Again, perfect integration. This integrated solution is reliable, powerful, and easy-to-use compared to piecing together tools from various vendors.', 'questionId': '4080', 'answerId': '83955'}
{'answer': "Our team use PMD and Cobertura, actually our projects are maven projects and there is very simple to include plug ins for code analysis. The real question would be for specific project which analysis you need to use, my opinion is that it's you couldn't use the same plugins for each project.", 'questionId': '4080', 'answerId': '84013'}
{'answer': 'I use a combination of Cobertura, Checkstyle, (Ecl)Emma and Findbugs. EclEmma is an awesome Eclipse plugin that shows the code coverage by coloring the java source in the editor (screenshot) - the coverage is generated by running a JUnit test. This is really useful when you are trying to figure out which lines are covered in a particular class, or if you want to see just which lines are covered by a single test. This is much more user friendly and useful than generating a report and then looking through the report to see which classes have low coverage. The Checkstyle and Findbugs Eclipse plugins are also useful, they generate warnings in the editor as you type. Maven2 has report plugins that work with the above tools to generate reports at build time. We use this to get overall project reports, which are more useful when you want aggregate numbers. These are generated by our CI builds, which run using Continuum.', 'questionId': '4080', 'answerId': '247984'}
{'answer': 'in our project we use Sonar in front of checkstyle, pmd.... together with the CI (Bamboo, Hudson) we get also a nice history of our source quality and what directing we go. I do like Sonar, because you one central tool in the CI Stack that does it for you, and you can easy customize the rules for each project.', 'questionId': '4080', 'answerId': '3594285'}
{'answer': 'Structure 101 is good at code analysis and finding the cyclic package dependencies.', 'questionId': '4080', 'answerId': '7453067'}
{'answer': "I've used JDEE on several projects.  It handles Code Completion.  I've never used it for debugging or browsing docs, but it's a big step up from a basic text editor.", 'questionId': '41056', 'answerId': '41063'}
{'answer': "I've had good success with jdibug for debugging Java code with Emacs.", 'questionId': '41056', 'answerId': '2123448'}
{'answer': 'For javadoc I found http://javadochelp.sourceforge.net/index.html to be the best.  Exuberant ctags is your best friend when it comes to navigation.', 'questionId': '41056', 'answerId': '2535018'}
{'answer': 'Algorithm To generate a random string, concatenate characters drawn randomly from the set of acceptable symbols until the string reaches the desired length. Implementation Here\'s some fairly simple and very flexible code for generating random identifiers. Read the information that follows for important application notes. Usage examples Create an insecure generator for 8-character identifiers: Create a secure generator for session identifiers: Create a generator with easy-to-read codes for printing. The strings are longer than full alphanumeric strings to compensate for using fewer symbols: Use as session identifiers Generating session identifiers that are likely to be unique is not good enough, or you could just use a simple counter. Attackers hijack sessions when predictable identifiers are used. There is tension between length and security. Shorter identifiers are easier to guess, because there are fewer possibilities. But longer identifiers consume more storage and bandwidth. A larger set of symbols helps, but might cause encoding problems if identifiers are included in URLs or re-entered by hand. The underlying source of randomness, or entropy, for session identifiers should come from a random number generator designed for cryptography. However, initializing these generators can sometimes be computationally expensive or slow, so effort should be made to re-use them when possible. Use as object identifiers Not every application requires security. Random assignment can be an efficient way for multiple entities to generate identifiers in a shared space without any coordination or partitioning. Coordination can be slow, especially in a clustered or distributed environment, and splitting up a space causes problems when entities end up with shares that are too small or too big. Identifiers generated without taking measures to make them unpredictable should be protected by other means if an attacker might be able to view and manipulate them, as happens in most web applications. There should be a separate authorization system that protects objects whose identifier can be guessed by an attacker without access permission. Care must be also be taken to use identifiers that are long enough to make collisions unlikely given the anticipated total number of identifiers. This is referred to as "the birthday paradox." The probability of a collision, p, is approximately n2/(2qx), where n is the number of identifiers actually generated, q is the number of distinct symbols in the alphabet, and x is the length of the identifiers. This should be a very small number, like 250 or less. Working this out shows that the chance of collision among 500k 15-character identifiers is about 252, which is probably less likely than undetected errors from cosmic rays, etc. Comparison with UUIDs According to their specification, UUIDs are not designed to be unpredictable, and should not be used as session identifiers. UUIDs in their standard format take a lot of space: 36 characters for only 122 bits of entropy. (Not all bits of a "random" UUID are selected randomly.) A randomly chosen alphanumeric string packs more entropy in just 21 characters. UUIDs are not flexible; they have a standardized structure and layout. This is their chief virtue as well as their main weakness. When collaborating with an outside party, the standardization offered by UUIDs may be helpful. For purely internal use, they can be inefficient.', 'questionId': '41107', 'answerId': '41156'}
{'answer': "Here it is in Java: Here's a sample run:", 'questionId': '41107', 'answerId': '41177'}
{'answer': 'Java supplies a way of doing this directly. If you don\'t want the dashes, they are easy to strip out. Just use uuid.replaceAll("-", "") Output:', 'questionId': '41107', 'answerId': '41762'}
{'answer': 'I found this solution that generates a random hex encoded string.  The provided unit test seems to hold up to my primary use case.  Although, it is slightly more complex than some of the other answers provided.', 'questionId': '41107', 'answerId': '41772'}
{'answer': "If you're happy to use Apache classes, you could use org.apache.commons.lang.RandomStringUtils (commons-lang).", 'questionId': '41107', 'answerId': '43496'}
{'answer': '', 'questionId': '41107', 'answerId': '157202'}
{'answer': 'Hi this is Amar (mailz4amar@yahoo.com) from Hyderabad. I have developed an application to develop an auto generated alphanumberic string for my project. In this string the first three chars are alphabets and the next seven are integers. the code is  public class AlphaNumericGenerator {', 'questionId': '41107', 'answerId': '1016930'}
{'answer': 'In one line: http://mynotes.wordpress.com/2009/07/23/java-generating-random-string/', 'questionId': '41107', 'answerId': '1439556'}
{'answer': 'using Dollar should be simple as: it outputs something like that:', 'questionId': '41107', 'answerId': '2178588'}
{'answer': '', 'questionId': '41107', 'answerId': '6530353'}
{'answer': 'You mention "simple", but just in case anyone else is looking for something that meets more stringent security requirements, you might want to take a look at jpwgen.  jpwgen is modeled after pwgen in Unix, and is very configurable.', 'questionId': '41107', 'answerId': '7367588'}
{'answer': '', 'questionId': '41107', 'answerId': '7816591'}
{'answer': " So what this does is just add's the password into the string and ... yeah works good check it out... very simple. I wrote it", 'questionId': '41107', 'answerId': '10177396'}
{'answer': "A short and easy solution, but uses only lowercase and numerics: The size is about 12 digits to base 36 and can't be improved further, that way. Of course you can append multiple instances.", 'questionId': '41107', 'answerId': '10189194'}
{'answer': 'Best Random String Generator Method', 'questionId': '41107', 'answerId': '10361524'}
{'answer': 'You can use Apache library for this: RandomStringUtils', 'questionId': '41107', 'answerId': '11577455'}
{'answer': 'Here it is a Scala solution:', 'questionId': '41107', 'answerId': '11629612'}
{'answer': 'Random 10 letter string between upper and lower cases', 'questionId': '41107', 'answerId': '12576779'}
{'answer': '', 'questionId': '41107', 'answerId': '12792917'}
{'answer': 'using apache library it can be done in one line here is doc http://commons.apache.org/lang/api-2.3/org/apache/commons/lang/RandomStringUtils.html', 'questionId': '41107', 'answerId': '12891357'}
{'answer': 'Surprising no-one here has suggested it but:  Easy.  Benefit of this is UUIDs are nice and long and guaranteed to be almost impossible to collide. Wikipedia has a good explanation of it:  " ...only after generating 1 billion UUIDs every second for the next 100 years, the probability of creating just one duplicate would be about 50%." http://en.wikipedia.org/wiki/Universally_unique_identifier#Random_UUID_probability_of_duplicates The first 4 bits are the version type and 2 for the variant so you get 122 bits of random. So if you want to you can truncate from the end to reduce the size of the UUID. It\'s not recommended but you still have loads of randomness, enough for your 500k records easy.', 'questionId': '41107', 'answerId': '13072330'}
{'answer': 'You can use following code , if your password mandatory contains numbers alphabetic special characters:', 'questionId': '41107', 'answerId': '13171599'}
{'answer': '', 'questionId': '41107', 'answerId': '13678355'}
{'answer': "Lots of use of StringBuilder above.  I guess it's easy, but requires a function call per char, growing an array, etc... If using the stringbuilder, a suggestion is to specify the required capacity of the string ie., Here's a version that doesn't use a StringBuilder or String appending, and no dictionary.", 'questionId': '41107', 'answerId': '13686133'}
{'answer': '', 'questionId': '41107', 'answerId': '14021567'}
{'answer': 'You can create a character array which includes all the letters and numbers, then you can randomly select from this char array and create your own string password.', 'questionId': '41107', 'answerId': '14241303'}
{'answer': 'You can use this simple java function:', 'questionId': '41107', 'answerId': '14433887'}
{'answer': "You can use the UUID class with its getLeastSignificantBits() message to get 64bit of Random data, then convert it to a radix 36 number (i.e. a string consisting of 0-9,A-Z): This yields a String up to 13 characters long. We use Math.abs() to make sure there isn't a minus sign sneaking in.", 'questionId': '41107', 'answerId': '17926222'}
{'answer': ' Change String characters as per as your requirements. String is immutable. Here StringBuilder.append is more efficient than string concatenation.', 'questionId': '41107', 'answerId': '21604071'}
{'answer': 'You can make it the hard way:', 'questionId': '41107', 'answerId': '22047890'}
{'answer': '', 'questionId': '41107', 'answerId': '25447172'}
{'answer': 'An alternative in Java 8 is:', 'questionId': '41107', 'answerId': '27120868'}
{'answer': 'Yet another solution..', 'questionId': '41107', 'answerId': '27350150'}
{'answer': '', 'questionId': '41107', 'answerId': '30210458'}
{'answer': 'Using UUIDs is insecure, because parts of the UUID arn\'t random at all. The procedure of @erickson is very neat, but does not create strings of the same length. The following snippet should be sufficient: Why choosing length*5. Let\'s assume the simple case of a random string of length 1, so one random character. To get a random character containing all digits 0-9 and characters a-z, we would need a random number between 0 and 35 to get one of each character. BigInteger provides a constructor to generate a random number, uniformly distributed over the range 0 to (2^numBits - 1). Unfortunately 35 is no number which can be received by 2^numBits - 1. So we have two options: Either go with 2^5-1=31 or 2^6-1=63. If we would choose 2^6 we would get a lot of "unnecesarry" / "longer" numbers. Therefore 2^5 is the better option, even if we loose 4 characters (w-z). To now generate a string of a certain length, we can simply use a 2^(length*numBits)-1 number. The last problem, if we want a string with a certain length, random could generate a small number, so the length is not met, so we have to pad the string to it\'s required length prepending zeros.', 'questionId': '41107', 'answerId': '31214709'}
{'answer': 'Maybe this is helpful', 'questionId': '41107', 'answerId': '38776878'}
{'answer': "Here is the one line code by AbacusUtil Random doesn't mean it must be unique. to get unique strings, using:", 'questionId': '41107', 'answerId': '40852832'}
{'answer': 'This is easily achievable without any external libraries. 1. Secure Random Generation First you need a good random source. Java has SecureRandom for that typically uses the best random source on the machine. Note: SecureRandom is the slowest, but most secure way in Java of generating random bytes. I do however recommend NOT considering performance here since it usually has no real impact on your application unless you have to generate millions of tokens per second - in this case your entropy cache will probably run out. 2. Required Space of Possible Values Next you have to decide "how unique" your token needs to be. The whole and only point of considering entropy is to make sure that the system can resist brute force attacks: the space of possible values must be so large that any attacker could only try a negligible proportion of the values in non-ludicrous time1. Unique identifiers such as random UUID have 122bit of entropy (ie. 2^122 = 5.3x10^36) - the chance of collision is "*(...) for there to be a one in a billion chance of duplication, 103 trillion version 4 UUIDs must be generated2". We will choose 128 bit since it fits exactly into 16 bytes and is seen as highly sufficient for being unique for basically every, but the most extreme, use cases and you don\'t have to think about duplicates. Here is a simple comparison table of entropy including simple analysis of the birthday problem. For simple requirements 8 or 12 byte length might suffice, but with 16 bytes you are on the "safe side". And that\'s basically it. Last thing is to think about encoding so it can be represented as a printable text (read, a String). 3. Byte Encoding Typical encodings include: Base64 every character encodes 6bit creating a 33% overhead. Unfortunatly there is no standard implementation in the JDK (there is in Android). But numerous libraries exist that add this. The downside is, that Base64 is not safe for eg. urls and as filename in most file systems requiring additional encoding (e.g. url encoding). Example encoding 16 bytes with padding: XfJhfv3C0P6ag7y9VQxSbw== Base32 every character encodes 5bit creating a 40% overhead. This will use A-Z and 2-7 making it reasonably space efficient while being case-insensitive alpha-numeric. Like with Base64 there is no standard implementation in JDK. Example encoding 16 bytes without padding: WUPIL5DQTZGMF4D3NX5L7LNFOY Base16 (hex) every character encodes 4bit requiring 2 characters per byte (ie. 16 byte create a string of length 32). Therefore hex is less space efficient than Base32 but is safe to use in most cases (url) since it only uses 0-9 and A to F. Example encoding 16 bytes: 4fa3dd0f57cb3bf331441ed285b27735. See a SO discussion about converting to hex here. Additional encodings like Base85 and the exotic Base122 exist with better/worse space efficiency. You can create your own encoding (which basically most answers in this thread do) but I would advise against it, if you don\'t have very specific requirements. 4. Summary and Example Use SecureRandom Use 16 bytes of possible values Encode according to your requirements (usually hex or base32 if you need it to be alpha-numeric) Don\'t ... use your home brew encoding: better maintainable and readable for others if they see what standard encoding you use instead of weird for loops creating chars at a time. ... use UUID: you are wasting 6bits of entropy and have verbose string representation Example: Hex Token Generator', 'questionId': '41107', 'answerId': '44227131'}
{'answer': 'Also you can generate any lower or UPPER case Letters or even special chars thought data from ASCII table. For example, generate upper case letters from A (DEC 65) to Z (DEC 90): Generated output for generateRandomStr(65, 90, 100));:', 'questionId': '41107', 'answerId': '44866347'}
{'answer': 'The wiki lists some more wrappers: Java wrapper (around a SWIG interface): http://tk-software.home.comcast.net/ A good tutorial to use JDBC driver for SQLite. (it works at least !) http://www.ci.uchicago.edu/wiki/bin/view/VDS/VDSDevelopment/UsingSQLite Cross-platform JDBC driver which uses embedded native SQLite libraries on Windows, Linux, OS X, and falls back to pure Java implementation on other OSes: https://github.com/xerial/sqlite-jdbc (formerly zentus) Another Java - SWIG wrapper. It only works on Win32. http://rodolfo_3.tripod.com/index.html sqlite-java-shell: 100% pure Java port of the sqlite3 commandline shell built with NestedVM. (This is not a JDBC driver). SQLite JDBC Driver for Mysaifu JVM: SQLite JDBC Driver for Mysaifu JVM and SQLite JNI Library for Windows (x86) and Linux (i386/PowerPC).', 'questionId': '41233', 'answerId': '41241'}
{'answer': "I found your question while searching for information with SQLite and Java. Just thought I'd add my answer which I also posted on my blog. I have been coding in Java for a while now. I have also known about SQLite but never used it Well I have used it through other applications but never in an app that I coded. So I needed it for a project this week and it's so simple use! I found a Java JDBC driver for SQLite. Just add the JAR file to your classpath and import java.sql.* His test app will create a database file, send some SQL commands to create a table, store some data in the table, and read it back and display on console. It will create the test.db file in the root directory of the project.  You can run this example with java -cp .:sqlitejdbc-v056.jar Test.", 'questionId': '41233', 'answerId': '593137'}
{'answer': 'I understand you asked specifically about SQLite, but maybe HSQL database would be a better fit with Java. It is written in Java itself, runs in the JVM, supports in-memory tables etc. and all that features make it quite usable for prototyping and unit-testing.', 'questionId': '41233', 'answerId': '594511'}
{'answer': "There is a new project SQLJet that is a pure Java implementation of SQLite. It doesn't support all of the SQLite features yet, but may be a very good option for some of the Java projects that work with SQLite databases.", 'questionId': '41233', 'answerId': '1257831'}
{'answer': "Bernie's post is very helpful. Couldn't vote up (don't have enough reputation :( ). But it Helped a lot. Just to reiterate! http://www.zentus.com/sqlitejdbc/ Here you can find the latest SQLite JDBC jar. Just add the jar into you classpath and you are done! :) You can run Bernie's sample code to test if everything is fine.  http://souptonuts.sourceforge.net/readme_sqlite_tutorial.html http://www.sqlite.org/lang.html Here you can find some help on SQL syntax for SQLite. Cheers to SQLite :)", 'questionId': '41233', 'answerId': '5360661'}
{'answer': "The example code leads to a memory leak in Tomcat (after undeploying the webapp, the classloader still remains in memory) which will cause an outofmemory eventually. The way to solve it is to use the sqlite-jdbc-3.7.8.jar; it's a snapshot, so it doesn't appear for maven yet.", 'questionId': '41233', 'answerId': '8797310'}
{'answer': 'Typo: java -cp .:sqlitejdbc-v056.jar Test should be: java -cp .:sqlitejdbc-v056.jar; Test notice the semicolon after ".jar" i hope that helps people, could cause a lot of hassle', 'questionId': '41233', 'answerId': '9046459'}
{'answer': 'When you compile and run the code, you should set the classpath options value. Just like the following: Please pay attention to "." and the sparate ";"(win, the linux is ":")', 'questionId': '41233', 'answerId': '9426806'}
{'answer': "David Crawshaw project(sqlitejdbc-v056.jar) seems out of date and last update was Jun 20, 2009,  source here I would recomend Xerials fork of Crawshaw sqlite wrapper.  I replaced sqlitejdbc-v056.jar  with Xerials sqlite-jdbc-3.7.2.jar file without any problem.  Uses same syntax as in Bernie's answer and is much faster and with latest sqlite library. What is different from Zentus's SQLite JDBC? The original Zentus's SQLite JDBC driver   http://www.zentus.com/sqlitejdbc/ itself is an excellent utility for   using SQLite databases from Java language, and our SQLiteJDBC library   also relies on its implementation. However, its pure-java version,   which totally translates c/c++ codes of SQLite into Java, is   significantly slower compared to its native version, which uses SQLite   binaries compiled for each OS (win, mac, linux). To use the native version of sqlite-jdbc, user had to set a path to   the native codes (dll, jnilib, so files, which are JNDI C programs) by   using command-line arguments, e.g., -Djava.library.path=(path to the   dll, jnilib, etc.), or -Dorg.sqlite.lib.path, etc. This process was   error-prone and bothersome to tell every user to set these variables.   Our SQLiteJDBC library completely does away these inconveniences. Another difference is that we are keeping this SQLiteJDBC libray   up-to-date to the newest version of SQLite engine, because we are one   of the hottest users of this library. For example, SQLite JDBC is a   core component of UTGB (University of Tokyo Genome Browser) Toolkit,   which is our utility to create personalized genome browsers. EDIT : As usual when you update something, there will be problems in some obscure place in your code(happened to me). Test test test =)", 'questionId': '41233', 'answerId': '12278261'}
{'answer': 'sqlitejdbc code can be downloaded using git from https://github.com/crawshaw/sqlitejdbc.  Note: Makefile requires curl binary to download sqlite libraries/deps.', 'questionId': '41233', 'answerId': '13273626'}
{'answer': "Not Java per-se, but you may run into issues where you have written something to a file, but it hasn't been actually written yet - it might be in a cache somewhere, and reading from the same file may not actually give you the new information. Short version - use flush() or whatever the relevant system call is to ensure that your data is actually written to the file. Note I am not talking about the OS level disk cache - if your data gets into here, it should appear in a read() after this point.  It may be that the language itself caches writes, waiting until a buffer fills up or file is flushed/closed.", 'questionId': '4149', 'answerId': '4188'}
{'answer': "I've never tried it, but you should write a test case to see if reading from a stream after you have hit the end will work, regardless of if there is more data written to the file. Is there a reason you can't use a piped input/output stream?  Is the data being written and read from the same application (if so, you have the data, why do you need to read from the file)? Otherwise, maybe read till end of file, then monitor for changes and seek to where you left off and continue... though watch out for race conditions.", 'questionId': '4149', 'answerId': '4206'}
{'answer': 'The answer seems to be "no" ... and "yes". There seems to be no real way to know if a file is open for writing by another application. So, reading from such a file will just progress until content is exhausted. I took Mike\'s advice and wrote some test code: Writer.java writes a string to file and then waits for the user to hit enter before writing another line to file. The idea being that it could be started up, then a reader can be started to see how it copes with the "partial" file. The reader I wrote is in Reader.java. Writer.java Reader.java No guarantees that this code is best practice. This leaves the option suggested by Mike of periodically checking if there is new data to be read from the file. This then requires user intervention to close the file reader when it is determined that the reading is completed. Or, the reader needs to be made aware the content of the file and be able to determine and end of write condition. If the content were XML, the end of document could be used to signal this.', 'questionId': '4149', 'answerId': '4498'}
{'answer': 'You might also take a look at java channel for locking a part of a file. http://java.sun.com/javase/6/docs/api/java/nio/channels/FileChannel.html This function of the FileChannel might be a start An invocation of this method will block until the region can be locked', 'questionId': '4149', 'answerId': '38133'}
{'answer': "Could not get the example to work using FileChannel.read(ByteBuffer) because it isn't a blocking read. Did however get the code below to work: Of course the same thing would work as a timer instead of a thread, but I leave that up to the programmer. I'm still looking for a better way, but this works for me for now. Oh, and I'll caveat this with: I'm using 1.4.2. Yes I know I'm in the stone ages still.", 'questionId': '4149', 'answerId': '154588'}
{'answer': 'Look into using the Tailer from Apache Commons IO. It handles most of the edge cases.', 'questionId': '4149', 'answerId': '10803105'}
{'answer': 'There are a Open Source Java Graphic Tail that does this. https://stackoverflow.com/a/559146/1255493', 'questionId': '4149', 'answerId': '28818516'}
{'answer': "I totally agree with Joshua's response, Tailer is fit for the job in this situation. Here is an example : It writes a line every 150 ms in a file, while reading this very same file every 2500 ms", 'questionId': '4149', 'answerId': '32783641'}
{'answer': 'If you want to read a file while it is being written and only read the new content then following will help you achieve the same. To run this program you will launch it from command prompt/terminal window and pass the file name to read. It will read the file unless you kill the program. java FileReader c:\\myfile.txt As you type a line of text save it from notepad and you will see the text printed in the console.', 'questionId': '4149', 'answerId': '32851944'}
{'answer': "You can't read a file which is opened from another process using FileInputStream, FileReader or RandomAccessFile. But using FileChannel directly will work:", 'questionId': '4149', 'answerId': '34576387'}
{'answer': "If I read the spec correctly the automatic serialVersionUID shouldn't change if you change the value of a static of transient field. Take a look at Chapter 5.6 of the Spec. However, if you think about this a bit - you start by serializing an object that has static int MYINT = 3, when you then deserialize the class you expect to get the same object back, that is, with MYINT = 3. So, if you change the static initialization you would expect the serialVersionUID to change because you can't get the same object back again. Anyways, keep this in all your serializable classes and you can control the serialVersionUID:", 'questionId': '41499', 'answerId': '41515'}
{'answer': 'I updated the question to be more clear. I understand why initialization with a literal changes the serialVersionUID but not why dynamic initialization changes it. If you initialize with a method, the value, of course, may always be different.   Setting the serialVersionUID explicitly is fine in a subsequent version of the class only if you are sure that it is a safe change.', 'questionId': '41499', 'answerId': '41527'}
{'answer': "You can find some information about that in the bug 4365406 and in the algorithm for computing serialVersionUID. Basically, when changing the initialization of your static member with System.getProperty(), the compiler introduces a new static property in your class referencing the System class (I assume that the System class was previously unreferenced in your class), and since this property introduced by the compiler is not private, it takes part in the serialVersionUID computation. Morality: always use explicit serialVersionUID, you'll save some CPU cycles and some headaches :)", 'questionId': '41499', 'answerId': '42674'}
{'answer': 'Automatic serialVersionUID is calculated based on members of a class. These can be shown for a class file using the javap tool in the Sun JDK. In the case mentioned in the question, the member that is added/removed is the static initialiser. This appears as ()V in class files. The contents of the method can be disassembled using javap -c. You should be able to make out the System.getProperty("foo") call and assignment to MYSTRING. However an assignment with a string literal (or any compile-time constant as defined by the Java Language Specification) is supported directly by the class file, so removing the need for a static initialiser. A common case for code targeting J2SE 1.4 (use -source 1.4 -target 1.4) or earlier is static fields to old Class instances which appear as class literals in source code (MyClass.class). The Class instance is looked up on demand with Class.forName, and the stored in a static field. It is this static field that disrupts the serialVersionUID. From J2SE 5.0, a variant of the ldc opcode gives direct support for class literals, removing the need for the synthetic field. Again, all this can be shown with javap -c.', 'questionId': '41499', 'answerId': '46043'}
{'answer': "I usually have In work with Visual Studio, I'm not sure if this works the same in the java world. But i usually put stuff in different project folders in src. For each source project there's a separate test project. Build files go in the main project directory. I usually put a README there too documenting how to setup the project if it needs more than just checking out. EDIT: This is the structure for a single working checkout of the project. It will be duplicated for each branch/tag in your revision control system (remember, in most SVN system, copies are cheap). The above example under Subversion would look like:", 'questionId': '41513', 'answerId': '41524'}
{'answer': 'I found some old questions here on SO that might be interesting for you: Whats a good standard code layout for a php application Contains a link to an article on Scalable and Flexible Directory Structure for Web Applications (focus on PHP, though) How to structure a java application, in other words: where do I put my classes? Structure of Projects in Version Control', 'questionId': '41513', 'answerId': '41536'}
{'answer': 'I use Eclipse for creating J2EE web applications and this will create the following project structure: I would then create an SVN folder on our trunk called WebAppNameProject. Within this folder I would create folders called WebAppNameSource, Documentation etc. Within the WebAppNameSource folder I would place the project source generated by Eclipse. Thus I would have the following folder structure in SVN: Hope this helps.', 'questionId': '41513', 'answerId': '41539'}
{'answer': "To expand on what Mendelt Siebenga suggested, I would also add a web directory (for JSP files, WEB-INF, web.xml, etc).  Tests should go in a folder named test that is a sibling of the main src folder - this way your unit test classes can have the same package name as the source code being tested (to ease with situations where you want to test protected methods or classes, for example... see the JUnit FAQ for this, and this question also on Where should I put my test files?). I haven't had much use for it myself, but a Maven project will also create a resources folder alongside the src folder for non-source code that you want to package/deploy along with the main source code - things such as properties files, resources bundles, etc. Your mileage may vary on this one.", 'questionId': '41513', 'answerId': '41571'}
{'answer': "Have you considered using the Spring framework for this? That way, your beans don't get any extra cruft, and spring handles the configuration setup for you.", 'questionId': '41659', 'answerId': '41767'}
{'answer': 'I think that you will have to add an associated bootstrap class which takes a reference to a ServletConfig (or ServletContext) and transcribes those values to the Factory class. At least this way you can package it separately. @toolkit : Excellent, most humbled - This is something that I have been trying to do for a while', 'questionId': '41659', 'answerId': '41777'}
{'answer': 'One way you could do this is: And then have the following in your web.xml If your application is running in a web container, then the listener will be invoked by the container once the context has been created. In which case, the _servletContextProperties will be replaced with any context-params specified in the web.xml. If your application is running outside a web container, then _servletContextProperties will be empty.', 'questionId': '41659', 'answerId': '41814'}
{'answer': "Are you sure that the image isn't coming through garbled or that you aren't dropping some packets on the way in.", 'questionId': '41686', 'answerId': '41694'}
{'answer': "I don't know what difference it makes, but there seems to be a mismatch of method signatures.  The getBytes() method called in your doPost() method has only one argument: while the method source you included has two arguments: Hope that helps.", 'questionId': '41686', 'answerId': '41748'}
{'answer': 'Can you perform a checksum on your original file, and the uploaded file and see if there is any immediate differences? If there are then you can look at performing a diff, to determine the exact part(s) of the file that are missing changed. Things that pop to mind is beginning or end of stream, or endianness.', 'questionId': '41686', 'answerId': '41753'}
{'answer': "One thing I don't like is here in this block from StreamUtils.getBytes(): At line 6, it writes the entire buffer, no matter how many bytes are read in.  I am not convinced this will always be the case.  It would be more correct  like this: Note the 'else' on line 5, along with the two additional parameters (array index start position and length to copy) on line 6. I could imagine that for larger files, like images, the buffer returns before it is filled (maybe it is waiting for more).  That means you'd be unintentionally writing old data that was remaining in the tail end of the buffer.  This is almost certainly happening most of the time at EoF, assuming a buffer > 1 byte, but extra data at EoF is probably not the cause of your corruption...it is just not desirable.", 'questionId': '41686', 'answerId': '42202'}
{'answer': "I'd just use commons io Then you could just do an IOUtils.copy(InputStream, OutputStream); It's got lots of other useful utility methods.", 'questionId': '41686', 'answerId': '42470'}
{'answer': 'Try this: Of course, this only works if you\'re running from the main thread.  Unfortunately I don\'t think there\'s a system property you can query to find this out. Edit: Pulling in @John Meagher\'s comment, which is a great idea: To expand on @jodonnell you can also   get all stack traces in the system   using Thread.getAllStackTraces(). From   this you can search all the stack   traces for the "main" Thread to   determine what the main class is. This   will work even if your class is not   running in the main thread.', 'questionId': '41894', 'answerId': '41904'}
{'answer': 'Also from the command line you could run the jps tool. Sounds like a  will get you what you want.', 'questionId': '41894', 'answerId': '42082'}
{'answer': 'To expand on @jodonnell you can also get all stack traces in the system using Thread.getAllStackTraces(). From this you can search all the stack traces for the main Thread to determine what the main class is. This will work even if your class is not running in the main thread.', 'questionId': '41894', 'answerId': '42938'}
{'answer': "Or you could just use getClass().  You can do something like: And then PROGNAME will be available anywhere inside Foo.  If you're not in a static context, it gets easier as you could use this:", 'questionId': '41894', 'answerId': '2421152'}
{'answer': "Try this : Java classes have static instance of their own class (java.lang.Class type). That means if we have a class named Main. Then we can get its class instance by Main.class If you're interested in name only then, String className = Main.class.getName();", 'questionId': '41894', 'answerId': '7201901'}
{'answer': 'For access to the class objects when you are in a static context Obviously here all 3 calls will return  but you get the picture;', 'questionId': '41894', 'answerId': '8883260'}
{'answer': 'This is the code I came up with when using the combined responses of jodonnell and John Meagher.  It stores the main class in a static variable to reduce overhead of repeated calls:', 'questionId': '41894', 'answerId': '12031392'}
{'answer': '', 'questionId': '41894', 'answerId': '12989117'}
{'answer': "When I run into these sort of situations I prefer to use what is a bit of a hack.  I might instead expose a protected method such as reinitialize(), then invoke this from the test to effectively set the factory back to its initial state.  This method only exists for the test cases, and I document it as such. It is a bit of a hack, but it's a lot easier than other options and you won't need a 3rd party lib to do it (though if you prefer a cleaner solution, there probably are some kind of 3rd party tools out there you could use).", 'questionId': '42102', 'answerId': '42108'}
{'answer': 'You can use Reflection to set myClassImpl by calling instantiateMyClass() again. Take a look at this answer to see example patterns for playing around with private methods and variables.', 'questionId': '42102', 'answerId': '42130'}
{'answer': "This question might be old but since this was the nearest answer I found when I had this problem I though I'd describe my solution. Using JUnit 4 Split your tests up so that there is one test method per class (this solution only changes classloaders between classes, not between methods as the parent runner gathers all the methods once per class) Add the @RunWith(SeparateClassloaderTestRunner.class) annotation to your test classes. Create the SeparateClassloaderTestRunner to look like this: Note I had to do this to test code running in a legacy framework which I couldn't change. Given the choice I'd reduce the use of statics and/or put test hooks in to allow the system to be reset.  It may not be pretty but it allows me to test an awful lot of code that would be difficult otherwise. Also this solution breaks anything else that relies on classloading tricks such as Mockito.", 'questionId': '42102', 'answerId': '9192126'}
{'answer': "If executing Junit via the Ant task you can set fork=true to execute every class of tests in it's own JVM. Also put each test method in its own class and they will each load and initialise their own version of MyClass. It's extreme but very effective.", 'questionId': '42102', 'answerId': '17805809'}
{'answer': 'Below you can find a sample that does not need a separate JUnit test runner and works also with classloading tricks such as Mockito.', 'questionId': '42102', 'answerId': '34154189'}
{'answer': 'Use the <applet> tag.  For more info: http://java.sun.com/docs/books/tutorial/deployment/applet/html.html', 'questionId': '42153', 'answerId': '42162'}
{'answer': "Here is an example from sun's website:", 'questionId': '42153', 'answerId': '42163'}
{'answer': "Although you didn't say so, just in case you were using JSPs, you also have the option of the jsp:plugin tag?", 'questionId': '42153', 'answerId': '42176'}
{'answer': 'I hate to give a non-answer, but I think the only definitive way to answer a performance question like this might be for you to code both approaches, benchmark the two, and compare the results.', 'questionId': '42383', 'answerId': '42403'}
{'answer': "These days, object creation is pretty dang fast, and the concept of object pooling is kind of obsolete (at least in general; connection pooling is of course still valid). Avoid premature optimization.  Create your nodes when you need them when doing your copies, and then see if that becomes prohibitively slow.  If so, then look into some techniques to speed it up.  But unless you already know that what you've got isn't fast enough, I wouldn't go introducing all the complexity you're going to need to get pooling going.", 'questionId': '42383', 'answerId': '42410'}
{'answer': "I'm a little confused about what you're trying to do in the first place.  You want all of the nodes to be immutable AND you want to pool them?  Aren't these 2 ideas mutually exclusive?  When you pull an object out of the pool, won't you have to invoke a setter to link up the children? I think that using immutable nodes is probably not going to give you the kind of thread-safety you need in the first place.  What happens if 1 thread is iterating over the nodes (a search or something), while another thread is adding/removing nodes?  Won't the results of the search be invalid?  I'm not sure if you can avoid explicitly synchronizing certain methods in order to make sure everything is thread-safe.", 'questionId': '42383', 'answerId': '42450'}
{'answer': "@Outlaw Programmer When you pull an object out of the   pool, won't you have to invoke a   setter to link up the children? Each node needn't be immutable internally to the package, only to the outward-facing interface. node.addChild() would be an immutable function with public visibility and return a Document, wheras node.addChildInternal() would be be a normal, mutable function with package visibility. But since it is internal to the package, it can only be called as a descendent of addChild() and the structure as a whole is guarenteed to be thread safe (provided I synchronize access to the object pool). Do you see a flaw in this...? If so, please tell me! I think that using immutable nodes is probably not going to give you the kind of thread-safety you need in the first place. What happens if 1 thread is iterating over the nodes (a search or something), while another thread is adding/removing nodes? The tree as a whole will be immutable. Say I have Thread1 and Thread2, and tree dom1. Thread1 starts a read operation on dom1, while, concurrently, Thread2 starts a write operation on dom1. However, all the changes Thread2 makes will actually be made to a new object, dom2, and dom1 will be immutable. It is true that the values read by Thread1 will be (a few microseconds) out of date, but it won't crash on an IndexOutOfBounds or NullPointer exception or something like it would if it was reading a mutable object that was being written to. Then, Thread2 can fire an event containing dom2 to Thread1 so that it can do its read again and update its results, if necessary. Edit: clarified", 'questionId': '42383', 'answerId': '42500'}
{'answer': "I think @Outlaw has a point. The structure of the DOM tree resides in the nodes itself, having a node pointing to its children. To modify the structure of a tree you have to modify the node, so you can't have it pooled, you have to create a new one. Try to think in a higher level. You have an IMMUTABLE tree (that is basically a set of nodes pointing to its children). You want to insert a node in it. Then, there's no way out: you have to create a new WHOLE tree.  Yes, the immutable tree is thread-safe, but it will impact performance. Object creation may be fast, but not faster then NO object creation. :)", 'questionId': '42383', 'answerId': '42537'}
{'answer': " I'm not sure if you can avoid explicitly synchronizing certain methods in order to make sure everything is thread-safe. One specific case you need to synchronize one side or the other of making a newly created node available to other threads as otherwise you risk the VM/CPU re-ordering the writes of the fields past the write of the reference to the shared node, exposing a party constructed object. Try to think in a higher level. You have an IMMUTABLE tree (that is basically a set of nodes pointing to its children). You want to insert a node in it. Then, there's no way out: you have to create a new WHOLE tree. If you choose to implement the tree as a set of nodes pointing to the children, then you would have to create new nodes along the path of the changed node to the root. The others have the same value as before, and normally are shared. So you need to create a partial new tree, which usually would mean (depth of edited node) parent nodes.   If you can cope with a less direct implementation, you should be able to get away with only creating parts of nodes, using techniques similar to those described in Purely Functional Data Structures to either reduce the average cost of the creation, or you can by-pass it using semi-functional approaches (such as creating an iterator which wraps an existing iterator, but returns the new node instead of the old, together with a mechanism to repair such patches in the structure as time goes on). An XPath style api might be better than a DOM api in that case - it might you decouple the nodes from the tree a bit more, and treat the mutated tree more intelligently.", 'questionId': '42383', 'answerId': '42888'}
{'answer': "Java autoboxing/unboxing doesn't go to the extent to allow you to dereference a primitive, so your compiler prevents it. Your compiler still knows myInt as a primitive.  There's a paper about this issue at jcp.org. Autoboxing is mainly useful during assignment or parameter passing -- allowing you to pass a primitive as an object (or vice versa), or assign a primitive to an object (or vice versa). So unfortunately, you would have to do it like this: (kudos Patrick, I switched to your way)", 'questionId': '4242', 'answerId': '4247'}
{'answer': 'Ditto on what Justin said, but you should do this instead: It saves an allocation or two and is more readable.', 'questionId': '4242', 'answerId': '4256'}
{'answer': ' seems like a shortcoming of the   specification to me There are more shortcomings and this is a subtle topic. Check this out: Here "long" would be printed (haven\'t checked it myself), because the compiler choses widening over autoboxing. Be careful when using autoboxing or don\'t use it at all!', 'questionId': '4242', 'answerId': '4384'}
{'answer': "One other way to do it is to use: This method is overloaded for every primitive type and Object. This way you don't even have to think about the type you're using. Implementations of the method will call the appropriate method of the given type for you, e.g. Integer.toString(myInt). See http://java.sun.com/javase/6/docs/api/java/lang/String.html.", 'questionId': '4242', 'answerId': '7083'}
{'answer': 'In C#, integers are neither reference types nor do they have to be boxed in order for ToString() to be called. They are considered objects in the Framework (as a ValueType, so they have value semantics), however. In the CLR, methods on primitives are called by "indirectly" loading them onto the stack (ldind).', 'questionId': '4242', 'answerId': '55352'}
{'answer': "The valid syntax closest to your example is When the compiler finishes, that's equivalent to However, this doesn't perform as well as the conventional usage, String.valueOf(myInt), because, except in special cases, it creates a new Integer instance, then immediately throws it away, resulting in more unnecessary garbage. (A small range of integers are cached, and access by an array access.) Perhaps language designers wanted to discourage this usage for performance reasons. Edit: I'd appreciate it if the downvoter(s) would comment about why this is not helpful.", 'questionId': '4242', 'answerId': '128153'}
{'answer': 'As everyone has pointed out, autoboxing lets you simplify some code, but you cannot pretend that primitives are complex types. Also interesting: "autoboxing is a compiler-level hack" in Java. Autoboxing is basically a strange kludge added onto Java. Check out this post for more details about how strange it is.', 'questionId': '4242', 'answerId': '2123426'}
{'answer': "It would be helpful if Java defined certain static methods to operate on primitive types and built into the compiler some syntactic sugar so that would be equivalent to I don't think such a feature would cause incompatibility with any code that compiles under the current rules, and it would help reduce syntactic clutter in many cases.  If Java were to autobox primitives that were dereferenced, people might assume that it was mapping the dereferencing syntax to static method calls (which is effectively what happens in .NET), and thus that operations written in that form were no more costly than would be the equivalent static method invocations.  Adding a new language feature that would encourage people to write bad code (e.g. auto-boxing dereferenced primitives) doesn't seem like a good idea, though allowing dereferencing-style methods might be.", 'questionId': '4242', 'answerId': '21469629'}
{'answer': "It's a bit more low-level than classic monkey patching, and from what I read, the classes already loaded into the VM are not updated. It only supports saving it to class files again, not modifying run time classes.", 'questionId': '42452', 'answerId': '42477'}
{'answer': "From BCEL's FAQ: Q: Can I create or modify classes   dynamically with BCEL? A: BCEL contains useful classes in the   util package, namely ClassLoader and   JavaWrapper.Take a look at the   ProxyCreator example. But monkeypatching is... uhm... controversial, and you probably shouldn't use it if your language doesn't support it. If you have a good use case for it, may I suggest embbededing Jython?", 'questionId': '42452', 'answerId': '42745'}
{'answer': 'You might look at it as monkey patching. I prefer not to use it (maybe I never faced a good use case for it?), but be familiar with it (to have an idea how Spring and Hibenrate use it and why).', 'questionId': '42452', 'answerId': '43445'}
{'answer': 'See this realworld example: Jawk  - Compiler Module. BCEL is useful for "compilation" ur custom language.', 'questionId': '42452', 'answerId': '2196272'}
{'answer': 'BCEL does not support monkey patching, it just manipulates with bytecode and possibly loads it in a custom classloader. However you can implement monkeypatching on JVM using library like BCEL and Java agent. The Java agent (loaded by -javaagent argument) can access the Instrumentation API and modify loaded classes. It is not hard to implement it via some bridges. But remember: I am not sure if having to use -javaagent is something you want. In any language, monkey patching can lead to badly predictable behavior. You can modify a method. In theory, you can also add some method, but you need to compile the project against modified (patched) classes. I think this would cause a lot of pain and it is not worth of it. There are alternative languages that support it (e.g. Groovy) or suppport something similar (e.g. implicit conversions in Scala). It is better to design your API well than to use monkey patching. It may be rather useful for third party libraries.', 'questionId': '42452', 'answerId': '14424643'}
{'answer': 'PostScript RIPs often convert circles to curves and curves to a series of straight line segments. The number of segments depends on the flatness setting which defaults to one suitable for the raster display resolution. A thick line or thick line segments can be converted to a skinny filled polygon.', 'questionId': '42546', 'answerId': '42592'}
{'answer': 'I\'ve never done this, but here are a couple things you could try. First, you could implement a custom Stroke that creates skinny trapezoids. The width of the end caps would be a function of the pressure at the end points. If that works, you could try to make the line segments look more natural by using Bezier curves to form "curvy trapezoids". You might be able to use QuadCurve2D to help.', 'questionId': '42546', 'answerId': '42646'}
{'answer': "There's a more general solution available at least. The feature was added to Inkscape based on a recent algorithm. You can see it applied directly to your problem in some screenshots. It can extrude any shape brush along the path to mimic a paintbrush for example, but you'd have to port it to Java from the algorithm in the first link or from the Inkscape sources. Also, it's covered by patents so you'd have to release your code under the GPL (the author gives explicit permission) or buy a patent license.", 'questionId': '42546', 'answerId': '111556'}
{'answer': "For debugging Lucene, the best tool to use is Luke, which lets you poke around in the index itself to see what got indexed, carry out searches, etc. I recommend downloading it, pointing it at your index, and seeing what's in there.", 'questionId': '42575', 'answerId': '42734'}
{'answer': 'The section on "Why am I getting no hits?" in the Lucene FAQ has some suggestions you might find useful.  You\'re using Field.Index.UN_TOKENIZED, so no Analyzer will be used for indexing (I think).  If you\'re using an Analyzer when you\'re searching then that might be the root of your problem - the indexing and searching Analyzers should be the same to make sure you get the right hits.', 'questionId': '42575', 'answerId': '43530'}
{'answer': 'Another simple thing to do would be to use a debugger or logging statement to check the value of  StringUtils.objectToString(currClip.get("market_local")) to make sure it is what you think it is.', 'questionId': '42575', 'answerId': '43546'}
{'answer': 'Luke is bundled with Lucene, but you can tell Luke to use another version of Lucene. Say "lucene-core-2.1.0.jar" contains Lucene 2.1.0 that you want to use and "luke.jar" contains Luke with Lucene 2.3.0. Then you can start Luke with the following command. java -classpath lucene-core-2.1.0.jar;luke.jar org.getopt.luke.Luke (The trick is to put your version of Lucene before Luke on the classpath. Also, This is on Windows. On Unix, replace ";" with ":".) As you can check in Luke, +( market_local:Local ) gets rewritten to market_local:Local if the rewrite(IndexReader) method of the Query object is called. The two queries should be equivalent so there might be a bug in 2.1. If you have to use 2.1, you can try to manually call that method before passing the Query object to the IndexSearcher.', 'questionId': '42575', 'answerId': '150939'}
{'answer': "have you looked into using facelets? It lets you get rid of the whole JSF / JSP differences (it's an alternate and superior view controller). It also supports great design-time semantics with the jsfc tag... gets translated internally to the correct JSF stuff, so you can work with your existing tools.", 'questionId': '42828', 'answerId': '43549'}
{'answer': "To solve this one I'd probably create a JSF fragment that only includes your form, then use a  tag to include it in my JSF page.   That solution is probably a little fragile depending on your environment though. EDIT: See Chris Hall's answer, FacesContext is not available outside the FacesServlet.", 'questionId': '42828', 'answerId': '63883'}
{'answer': 'Create a custom JSP tag handler.  You can then retrieve the bean from session scope, and then initialize it on the fly.  See this tutorial for more details.', 'questionId': '42828', 'answerId': '69050'}
{'answer': "Actually, I've resolved this by removing bean from session, so it has to be generated again when jsf page is called. Then I pick up get parameters from a request in constructor.", 'questionId': '42828', 'answerId': '71584'}
{'answer': "You can retrieve a managed bean inside of a tag library using something like this: However, you'd need to use the tag library from one of your JSF pages.  FacesContext.getCurrentInstance() returns null when it's called outside of the FacesServlet.", 'questionId': '42828', 'answerId': '72213'}
{'answer': "I'm not familiar with Java regex but documentation for the Pattern Class would suggest you could use (?!X) for a non-capturing zero-width negative lookahead (it looks for something that is not X at that postision, without capturing it as a backreference). So you could do: Update: Apocalisp's right, you want negative lookbehind. (you're checking that what the .* matches doesn't end with bar)", 'questionId': '42990', 'answerId': '43010'}
{'answer': "As other commenters said, you need a negative lookahead. In Java you can use this pattern: ^ - ensures that string starts with first_string \\z - ensures that string ends with second_string (?!.?second_string) - means that first_string can't be followed by second_string", 'questionId': '42990', 'answerId': '43016'}
{'answer': 'I think in this case you want negative lookbehind, like so:', 'questionId': '42990', 'answerId': '43017'}
{'answer': "Verified @Apocalisp's answer using: This output the the right answers:", 'questionId': '42990', 'answerId': '43030'}
{'answer': 'I think this will work, but make sure to test it... minor "improvement", but it might be a bit of a cost at readability.', 'questionId': '43157', 'answerId': '43163'}
{'answer': 'PipedInputStream and PipedOutputStream may be of some use, as you can connect one to the other.', 'questionId': '43157', 'answerId': '43168'}
{'answer': "There's no way to do this a lot easier with JDK methods, but as Apocalisp has already noted, you're not the only one with this idea: You could use IOUtils from Jakarta Commons IO, it also has a lot of other useful things, that IMO should actually be part of the JDK...", 'questionId': '43157', 'answerId': '43478'}
{'answer': "As WMR mentioned, org.apache.commons.io.IOUtils from Apache has a method called copy(InputStream,OutputStream) which does exactly what you're looking for. So, you have: ...in your code. Is there a reason you're avoiding IOUtils?", 'questionId': '43157', 'answerId': '51753'}
{'answer': 'PipedInputStream and PipedOutputStream should only be used when you have multiple threads, as noted by the Javadoc. Also, note that input streams and output streams do not wrap any thread interruptions with IOExceptions... So, you should consider incorporating an interruption policy to your code: This would be an useful addition if you expect to use this API for copying large volumes of data, or data from streams that get stuck for an intolerably long time.', 'questionId': '43157', 'answerId': '540772'}
{'answer': "Another possible candidate are the Guava I/O utilities: http://code.google.com/p/guava-libraries/wiki/IOExplained I thought I'd use these since Guava is already immensely useful in my project, rather than adding yet another library for one function.", 'questionId': '43157', 'answerId': '13814318'}
{'answer': "I think it's better to use a large buffer, because most of the files are greater than 1024 bytes. Also it's a good practice to check the number of read bytes to be positive.", 'questionId': '43157', 'answerId': '18788720'}
{'answer': 'Simple Function If you only need this for writing an InputStream to a File then you can use this simple function:', 'questionId': '43157', 'answerId': '18793899'}
{'answer': "If you are using Java 7, Files (in the standard library) is the best approach: Edit: Of course it's just useful when you create one of InputStream or OutputStream from file. Use file.toPath() to get path from file. To write into an existing file (e.g. one created with File.createTempFile()), you'll need to pass the REPLACE_EXISTING copy option (otherwise FileAlreadyExistsException is thrown):", 'questionId': '43157', 'answerId': '19194580'}
{'answer': "Use Commons Net's Util class:", 'questionId': '43157', 'answerId': '19915774'}
{'answer': 'you can use this method', 'questionId': '43157', 'answerId': '22223001'}
{'answer': "Using Guava's ByteStreams.copy():", 'questionId': '43157', 'answerId': '22657697'}
{'answer': '', 'questionId': '43157', 'answerId': '29420264'}
{'answer': 'Using Java7 and try-with-resources, comes with a simplified and readable version.', 'questionId': '43157', 'answerId': '32136196'}
{'answer': 'A IMHO more minimal snippet (that also more narrowly scopes the length variable): As a side note, I don\'t understand why more people don\'t use a for loop, instead opting for a while with an assign-and-test expression that is regarded by some as "poor" style.', 'questionId': '43157', 'answerId': '34191665'}
{'answer': "Here comes how I'm doing with simplest for loop.", 'questionId': '43157', 'answerId': '39070240'}
{'answer': 'Java 9 Since Java 9, InputStream provides a method called transferTo with the following signature: As the documentation states, transferTo will: Reads all bytes from this input stream and writes the bytes to the   given output stream in the order that they are read. On return, this   input stream will be at end of stream. This method does not close   either stream.  This method may block indefinitely reading from the   input stream, or writing to the output stream. The behavior for the   case where the input and/or output stream is asynchronously closed, or   the thread interrupted during the transfer, is highly input and output   stream specific, and therefore not specified So in order to write contents of a Java InputStream to an OutputStream, you can write:', 'questionId': '43157', 'answerId': '39440936'}
{'answer': 'The JDK uses the same code so it seems like there is no "easier" way without clunky third party libraries (which probably don\'t do anything different anyway). The following is directly copied from java.nio.file.Files.java:', 'questionId': '43157', 'answerId': '40019374'}
{'answer': 'For those who use Spring framework there is a useful StreamUtils class: The above does not close the streams. If you want the streams closed after the copy, use FileCopyUtils class instead:', 'questionId': '43157', 'answerId': '42004909'}
{'answer': "Everything seems to be correct. Are you really sure getPassword() returns garbage? Isn't it someone else (your editor, OS, database,...) that doesn't know that it's a unicode string when it displays it to you while the password may be perfectly okay? What exactly makes you think it's a garbage? I would also make sure there's no strange encoding set in the .application config file", 'questionId': '43199', 'answerId': '43508'}
{'answer': 'I found the problem. Tomcat was mangling the parameters before Tapestry or my page class even had a crack at it. Creating a servlet filter that enforced the desired character encoding fixed it. CharacterEncodingFilter.java web.xml', 'questionId': '43199', 'answerId': '47149'}
{'answer': 'Try this:', 'questionId': '43802', 'answerId': '43806'}
{'answer': 'In brief: See SimpleDateFormat javadoc for more. And to turn it into a Calendar, do:', 'questionId': '43802', 'answerId': '43807'}
{'answer': 'The DateFormat class has a parse method. See http://java.sun.com/j2se/1.4.2/docs/api/java/text/DateFormat.html for more information.', 'questionId': '43802', 'answerId': '43812'}
{'answer': "The highly regarded Joda Time library is also worth a look.  This is basis for the new date and time api that is pencilled in for Java 7.  The design is neat, intuitive, well documented and avoids a lot of the clumsiness of the original java.util.Date / java.util.Calendar classes.   Joda's DateFormatter can parse a String to a Joda DateTime.", 'questionId': '43802', 'answerId': '44012'}
{'answer': 'tl;dr java.time Java 8 and later has a new java.time framework that makes these other answers outmoded. This framework is inspired by Joda-Time, defined by JSR 310, and extended by the ThreeTen-Extra project. See the Tutorial. The old bundled classes, java.util.Date/.Calendar, are notoriously troublesome and confusing. Avoid them. LocalDate Like Joda-Time, java.time has a class LocalDate to represent a date-only value without time-of-day and without time zone.  ISO 8601 If your input string is in the standard ISO 8601 format of yyyy-MM-dd, you can ask that class to directly parse the string with no need to specify a formatter.  The ISO 8601 formats are used by default in java.time, for both parsing and generating string representations of date-time values. Formatter If you have a different format, specify a formatter from the java.time.format package. You can either specify your own formatting pattern or let java.time automatically localize as appropriate to a Locale specifying a human language for translation and cultural norms for deciding issues such as period versus comma. Formatting pattern Read the DateTimeFormatter class doc for details on the codes used in the format pattern. They vary a bit from the old outmoded java.text.SimpleDateFormat class patterns. Note how the second argument to the parse method is a method reference, syntax added to Java 8 and later. Dump to console. localDate: 2015-01-02 Localize automatically Or rather than specify a formatting pattern, let java.time localize for you. Call DateTimeFormatter.ofLocalizedDate, and be sure to specify the desired/expected Locale rather than rely on the JVMs current default which can change at any moment during runtime(!). Dump to console.  input: January 2, 2015 | localDate: 2015-01-02', 'questionId': '43802', 'answerId': '33405474'}
{'answer': 'Why not just have the sequence as increment by 100 all the time? each "nextval" gives you 100 sequence numbers to work with A note on your example.. Watch out for DDL.. It will produce an implicit commit Example of commit produced by DDL', 'questionId': '43808', 'answerId': '43830'}
{'answer': "Matthew has the correct approach here.  In my opinion, it is very unusual for an application to reset a sequence's current value after every use.  Much more conventional to set the increment size to whatever you need upfront. Also, this way is much more performant.  Selecting nextval from a sequence is a highly optimised operation in Oracle, whereas running ddl to alter the sequence is much more expensive. I guess that doesn't really answer the last point in your edited question...", 'questionId': '43808', 'answerId': '43991'}
{'answer': "Why do you need to fetch the sequence IDs in the first place?  In most cases you would insert into a table and return the ID. It sounds like you are trying to pre-optimize the processing. If you REALLY need to pre-fetch the IDs then just call the sequence 100 times.  The entire point of a sequence is that it manages the numbering.  You're not supposed to assume that you can get 100 consecutive numbers.", 'questionId': '43808', 'answerId': '44457'}
{'answer': 'For when you don\'t want a fixed size increment, sequences aren\'t really what you are after, all they really guarantee is that you will be getting a unique number always bigger than the last one you got. There is always the possibility that you\'ll end up with gaps, and you can\'t really adjust the increment amount on the fly safely or effectively.  I can\'t really think of any case where I\'ve had to do this kind of thing, but likely the easiest way is just to store the "current" number somewhere and update it as you need it. Something like this.', 'questionId': '43808', 'answerId': '45011'}
{'answer': "I'm not sure there's any easy way to parse a date and work out its pattern, but I would have thought that the pattern for the one you posted would be: EEE MMM dd HH:mm:ss zzz yyyy", 'questionId': '43842', 'answerId': '43849'}
{'answer': 'Are you just asking for the pattern for that given date?  If so, I think this should do it: Or are you trying to take any formatted date, and infer the format, and parse it?', 'questionId': '43842', 'answerId': '43850'}
{'answer': "The format to pass to SimpleDateFormat could be looked up at http://java.sun.com/javase/6/docs/api/java/text/SimpleDateFormat.html As for your second question, I don't know of any Java library to figure out a date format and parse it without knowing in advance what the format is.", 'questionId': '43842', 'answerId': '43852'}
{'answer': "As others have said, the pattern looks like it should be As for parsing an arbitrary format date, I'm not aware of any library which does this in Java. If you were keen to develop such a thing, I would start by looking at the perl str2time function.", 'questionId': '43842', 'answerId': '43867'}
{'answer': 'How about: EEE MMM dd HH:mm:ss zzz yyyy Just pass the string into the constructor of SimpleDateFormat. To use the object, just call the parse method passing in the string you want converted to a Date. You could take a look at: http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html', 'questionId': '43842', 'answerId': '43869'}
{'answer': 'If you want to do anything other than parse or format a date there is not much out there for handling the patterns themselves. Sometime ago I was writing a Swing component for entering dates into a formatted text field. You supplied a pattern and it moved the text entry cursor through the elements of that pattern, only allowing valid values. As part of that I wrote a DateFormatParser available here as part of the OpenHarmonise open source project. Parsing a date into a pattern would be an extremely interesting problem to tackle. You would have to make certain assumptions (e.g. use of : in time not date) but you would face the eternal problems of 2 digit years and day/month or month/day arrangements.', 'questionId': '43842', 'answerId': '43884'}
{'answer': 'This isn\'t really the same, but you might want to look at something like JChronic, which can do natural language processing on dates.  So, the input date could be something like "tomorrow", or "two weeks from next tuesday".   This may not help at all for your application, but then again, it might.', 'questionId': '43842', 'answerId': '43913'}
{'answer': 'I must say i find the other question very interesting. There is one serious problem though - parse this: 08/07/06! If you limit yourself on a subset of expected formats, you could probably solve problem by playing around with regexps, you could build up bunch of expected patterns, and then break Strings on spaces or whatever, and match part by part.', 'questionId': '43842', 'answerId': '44816'}
{'answer': 'It\'s worth knowing that the date format you have given is not an arbitrary one. It is the output of the built-in Date.toString() method (at least in the UK and US locales). Not coincidentally, it is also the format of the unix \'date\' command (at least on linux, and I believe in other implementations too) - though to be pedantic, Date.toString() pads one-digit day numbers with a zero while unix date does not. What this means is that you are likely to receive this input format when you output an unformatted date into a user-modifiable field (e.g. an HTML INPUT field) and receive it back unmodified. So just because input is coming in this format, doesn\'t mean the users will type in a thousand other arbitrary formats. Of course, they still might. The way I handle date inputs in general is with a bunch of try/catch blocks, where I try it against one format, then another, then another. Our standard framework is now up to about 20 different formats by default. Of course it is still not perfect; I found someone the other day entering "03 Sept" as the date (a non-standard month abbreviation, and with no year) and we hadn\'t handled that scenario.', 'questionId': '43842', 'answerId': '45035'}
{'answer': "See Apache Commons' DateUtils. There's a parseDate method that takes your String and multiple patterns to try and spits out a Date instance.", 'questionId': '43842', 'answerId': '45167'}
{'answer': 'The POJava date parser org.pojava.datetime.DateTime is an immutable, and robust parser that supports multiple languages, time zones, and formats.  Best of all, the parser is heuristic and does not require a pre-existing format to work.  You just pass it a date/date-time text string and get out a java.util.Date!', 'questionId': '43842', 'answerId': '1102356'}
{'answer': "There is an example on Laurent Schneider's blog of using the DBMS_XA package inside Oracle to permit multiple sessions to work in the same transaction.  So it would be possible to have Java and C++ sessions participating in the same transaction without needing any sort of additional coordinator.   Alternately, you might consider using Workspace Manager.  That was originally designed to support extremely long-running transactions (i.e. manipulating lots of spatial data for a proposed development).  Essentially, you can create a workspace, which in your case would be roughly equivalent to a named transaction.  Both the Java and C++ code could enter that workspace (from separate sessions) and both could manipulate and commit data in that workspace.  When the transaction was complete, you could then merge the workspace to the LIVE workspace, which is equivalent to doing a commit in a normal transaction. On the other hand, I would strongly agree with your initial assessment that coordinating transactions between processes is very likely to be a bad idea from a performance, stability, simplicity, and maintenance standpoint.  On the other hand, it may well be a legitimate business requirement depending on how the C++ code is going to be retired (i.e. whether it is possible to replace code in such a way that transactions can be either exclusively Java or exclusively C++)", 'questionId': '44005', 'answerId': '87500'}
{'answer': 'I believe JBoss Transaction Manager supports 2pc tx propagation across web service calls.  You could, I suppose integrate your systems that way, but the performance would stink.', 'questionId': '44005', 'answerId': '122702'}
{'answer': 'I have been using Hazlecast Messaging and Distributed memory locks to solve some of these concerns, however using such a tool would require that you  redisign your software in those parts where you touch the same data. C++ client docs here Java client here Oracle also has a similar product called Oracle Coherence that may help you, see locking in the dev guide.   Also the database contains a MQ system called  Oracle Streams Advanced queueing ( transactional persistent queues) that might help you in some situations. Oracle AQ integrates well with Oracle triggers.  Additionally there is the Database Change Notification that may help you update caches or notify processes of updates, this can be used together with the Optimistic Offline Lock pattern.  See also Software transactional memory  Apache Zookeeper can also help you with distributed locking.', 'questionId': '44005', 'answerId': '29487446'}
{'answer': "You should be able to do everything related to Oracle using JDBC, so make sure you bone up on that API.  Other than that, it depends on the type of application.  Standalone apps may use Swing (the Java UI toolkit) or in the future JavaFX, which is supposed to make Swing obsolete and may do so in a few years.  Web/enterprisey apps will make use of Java Enterprise Edition, so take a look at the servlet API, and if the app uses Enterprise JavaBeans, look at the Java Persistence API, which you would probably be using instead of JDBC. I haven't used JDeveloper, but I haven't found anything wrong with the free IDEs like Eclipse or Netbeans, and my personal favorite is JetBrains's IntelliJ IDEA.", 'questionId': '44224', 'answerId': '44230'}
{'answer': "There's really nothing specific you need to learn to be an oracle devloper per se.  Obviously you need to learn oracle sql syntax, and all the standard rdbms theory that goes along with database programming in general.  The Java libs for database support are pretty easy to pick up and run with.  I'm sure you can find a tutorial on the web by a quick google search. As for IDE I'd recommend Eclipse.  It's a bit cumbersome at times, but the number of plug-ins available is staggering, and it has great refactoring and code completion support.", 'questionId': '44224', 'answerId': '44235'}
{'answer': "You're question is a little bit too vague in order to give a proper answer...  If you plan to query the Oracle Database from an External Java Program (Either within a Swing Application or an Application Server) then you need to learn 2 core APIs: JDBC (Java Database Connectivity) JPA (Java Persistence API) JDBC is the core API that allows a Java Program to interact with any RDBMS so you should at least know how it works so whenever you have to dig into low-level code, you will actually know what's happening. JPA is the latest Java API for Persistence which basically allows one to map Plain Old Java Object (AKA PoJo) to RDBMS Table Structures. There are multiple known implementation available but I would recommend Hibernate or TopLink as good starting points. After that, you can start to dig into other known frameworks like the Spring Framework for  some other RDBMS related APIs.", 'questionId': '44224', 'answerId': '44251'}
{'answer': 'You can use JDeveloper and try to find some tutorials for it (I actually had some from my university). It integrates well with rest of Oracle stack (db and application server). Down site is that although you can download some developers editions to run for personal usage, running Oracle db + Oracle application server + JDeveloper on a machine that has less then 4GB of ram and one core is not really peasant experience.', 'questionId': '44224', 'answerId': '44259'}
{'answer': 'Expert Oracle JDBC Programming is a book aimed directly at developers who want to use Java with Oracle.  Before you make even that small monetary investment though, you might want to check out the JDBC tutorial published by Sun.', 'questionId': '44224', 'answerId': '44271'}
{'answer': "To become an Oracle Developer there is a bit more to learn than jdbc. You should take a look at the Oracle web site. It is kind of slow and not very intuitive but has a lot of good information. There are OUGs that have good info as well. If you just want to access Oracle via JAVA then you should use a framework such as Spring. Takes away the pain of jdbc. Lets you write sql and map it to objects. If you don't know PL/SQL it might be good to learn what it is.  My two cents from working with Oracle for the past 7 yrs.", 'questionId': '44224', 'answerId': '45989'}
{'answer': "Your question is very simple so I have listed a few simple steps to start developing a Java application using Oracle technologies. Install Oracle XE Database. Install [JDeveloper]. Choose the install with Weblogic if you are developing a J2EE application. Build and run a jdbc application using the [sample code] or use the wizard in JDeveloper. Install SQL Developer for writing stored procedures. Steps 3. and 4. are optional. You now have everything you need to build either a proof of concept or an enterprise grade database application, using simple wizards and without re-inventing the wheel. You mentioned developing an Oracle Application. It's best to leave the development of Oracle's packaged Application to Oracle itself but if you want to integrate your custom java application with Oracle's packaged application then use Oracle's SOA Suite. Cheers KB", 'questionId': '44224', 'answerId': '2010374'}
{'answer': 'Would having the sources for the dependency help? You can tell the eclipse plugin to download those (and refer to them in the .classpath) with -DdownloadSources=true', 'questionId': '44396', 'answerId': '44405'}
{'answer': 'From the Maven Eclipse Plugin FAQ The following example shows how to do   this in the command-line: or in your pom.xml:', 'questionId': '44396', 'answerId': '97168'}
{'answer': 'You might consider just avoiding this problem completely by installing the javadoc jar into your local repository manually using the install-file goal and passing in the -Dclassifier=javadoc option.  Once you do that the .classpath that mvn generates should be correct. If you use a remote repo as a proxy to central you could also deploy the javadocs to that repo and then everyone else who uses that proxy will now get the javadocs automatically as well.', 'questionId': '44396', 'answerId': '142968'}
{'answer': "I'm running STS 2.8.1 which is basically eclipse + spring tools; In an existing maven project, I right clicked on the project -> maven -> Download Sources and Download JavaDocs", 'questionId': '44396', 'answerId': '9176224'}
{'answer': 'As mentioned in How to download sources and javadoc artifacts with Maven Eclipse plugin from other repository?, you can do this: In Eclipse go to Windows-> Preferences-> Maven. Check the box that says "Download Artifact Javadoc." That has worked well for me.', 'questionId': '44396', 'answerId': '24314931'}
{'answer': 'Generally Javadocs are not primarily used as dependency . Because these are neither required at compile nor runtime. Its just to help the developer while developing or debugging. Assuming using the java IDE Eclipse we can use the java docs as referenced. Following are the approaches we can associate the javadocs/sources with the respective jars. 1.    If its non-maven project : Download the javadocs jar or zipped file, whatever available and placed it in some directory. Right click on the application project in the IDE Eclipse, click Properties and  choose Java Build Path then select tab Libraries under the Java  Build Path.  Now expand the jar you want to link with java docs/source.  Select the Javadoc location link and click on Edit button, a new window appears where we need to choose the javadocs jar path. Click OK and we have linked the javadoc/source with the respective jars. 2.    If its a maven project If we are using the Maven project then  go to jar files under the Maven dependency under the project in Project Explorer view as shown below. Now right click on the jar file you want to add the Javadoc/source,   choose Maven then click on Javadoc or Source you want to link with the project. Now IDE will automatically download the required javadoc/source and will link it with the respective jar in the project.  You can verify this by right click on the project in the IDE and click on Java Build Path and select the Libraries tab under the Java Build Path and then expand the desired jar, here when you click the Edit button you will see the linked path of the Javadoc/Source with the respective jar as shown below in the image. 3.    If  its Maven project and we are setting the default behavior: Eclipse will aquatically download the javadoc/source  along with the main required jar at the starting. By default setting instruction to Maven to download the Javadoc/sources for all the jars linked in the project. Click Windows  preferences  select Maven and click the checkbox Download Artifact Javadoc as shown below  Now click on apply and save it and  now when you create new Maven project , by default the Javadocs will get downloaded and linked with all the dependent jars in the project. You can verify by right click on the project and Properties and under Java Build path can see the javadocs are linked with all the jars as shown below.   If your project is Maven project then  Its always best to use 2nd approach  because by using this approach the IDE and Maven,  takes care of downloading the correct version of the Javadoc/source and linked it with the relative jar as well. Approach 3rd is bit costly because the javadoc/sources will be downloaded for-all the dependent jars, may be you are not interested for javadocs/sources for all the dependent jars.', 'questionId': '44396', 'answerId': '43304553'}
{'answer': "Zeroconf and other discovery protocols are similarly referred to as the greatest thing since sliced bread; it's just that the flavor keeps changing.", 'questionId': '44824', 'answerId': '44828'}
{'answer': "Things have definitely quited down for the idea.  Which is strange since you'd think its goals are even more relevant now. http://www.jini.org/wiki/Category:News", 'questionId': '44824', 'answerId': '44901'}
{'answer': "Check out GigaSpaces. It's a quite successful Jini/Javaspaces implementation. I think Jini has a great model, but it is stuck with Java. Web-services is more appealing because it works with standarized protocols, even though Jini service discovery is more natural.", 'questionId': '44824', 'answerId': '46191'}
{'answer': "The jewel in the crown of Jini was it's JavaSpaces service IMO. Sad that Sun seem to have abandoned it. It still exists as Apache River though, however I'm not sure if it's under active development.", 'questionId': '44824', 'answerId': '1041963'}
{'answer': 'My two cents...  Jini was/is nice, but I think it tried to be a Java-centric CORBA back in the day when corporations were beginning to be reluctant regarding paying the big bucks for what CORBA brought to the table.  WS-* specs began to acquire the "accepted-solution" mind-share in the industry.  I think there was a small window where Jini could have grabbed substantial market share, but it never happened.  Sun wanted too much money for what Jini brought to the table compared to other alternatives.  I would love to hear from folks that disagree!  My opinion is that Jini is sound tech, but business-wise has no future in the enterprise.  It may find a niche elsewhere, depending on what Oracle decides to do with it.', 'questionId': '44824', 'answerId': '1041967'}
{'answer': 'Jini was an amazing technology. The only reason pushed EJB systems was that it allowed Sun to sell more hardware as EJB ran best on highpowered machines (due to shared state and database access). At the time (1999) Jini allowed much better scalability which ran well on commodity hardware, so it made sense for Sun to not promote Jini. Its a shame as I kept wondering when someone would release an Open Source easy to use Jini server like JBoss did with J2EE. I did however save companies alot of time and money by using the Jini techniques (based on Linda TupleSpaces) and applying them to writing software systems by using Tuple Spaces implemented in other ways.', 'questionId': '44824', 'answerId': '2177820'}
{'answer': 'old question, but JINI has been given to Apache and is now the Apache River project: http://river.apache.org', 'questionId': '44824', 'answerId': '9028579'}
{'answer': 'It looks like this has been reported as a Java bug.  It appears to be caused by using annotations from a 3rd party library (like JUnit) and not including the jar with that annotation in the javadoc invocation.   If that is the case, just use the -classpath option on javadoc and include the extra jar files.', 'questionId': '44853', 'answerId': '44870'}
{'answer': "I have some idea regarding this problem but this not exact solution to get. If you give single comment line \\\\\\\\ before annotation and try to run the javadoc once again. This problem will solve Eg: sample.java File Makes changes in Try to run javadoc command once again. Now Class Cast Exception won't occur", 'questionId': '44853', 'answerId': '2030179'}
{'answer': 'I got this problem too. I can compile properly without any errors or warnings. But when I generating javadoc , I got below error. [javadoc] java.lang.ClassCastException: com.sun.tools.javadoc.ClassDocImpl cannot be cast to com.sun.javadoc.AnnotationTypeDoc Here is my classpath loading for my third-party-libs ... At my java compile target .. And at my javadoc target... So , I added classpathref="build.classpath" option to <javadoc tag. Now It is fine for me.', 'questionId': '44853', 'answerId': '23737003'}
{'answer': "There is another way to get a ClassCastException (1.8.0_101 is failing currently): java.lang.ClassCastException: com.sun.tools.javadoc.MethodDocImpl cannot be cast to com.sun.tools.javadoc.AnnotationTypeElementDocImpl It will happen when javadoc encounters a reference to a annotation method in javadoc text before processing the same annotation for the first time used in code. Take these two classes: The bug is order dependent. If javadoc processes TestClass1 first, the ClassCastException will be thrown. If javadoc processes TestClass2 first, it will complete fine. The bug is reported as JDK-8170444. As a workaround, don't link to annotation methods in your documentation text.", 'questionId': '44853', 'answerId': '40803470'}
{'answer': 'Short story: no.          Introduction The newest version of the Microsoft Visual J++ development environment   supports a language construct called delegates or bound method   references. This construct, and the new keywords delegate and   multicast introduced to support it, are not a part of the JavaTM   programming language, which is specified by the Java Language   Specification and amended by the Inner Classes Specification included   in the documentation for the JDKTM 1.1 software.  It is unlikely that the Java programming language will ever include   this construct. Sun already carefully considered adopting it in 1996,   to the extent of building and discarding working prototypes. Our   conclusion was that bound method references are unnecessary and   detrimental to the language. This decision was made in consultation   with Borland International, who had previous experience with bound   method references in Delphi Object Pascal.  We believe bound method references are unnecessary because another   design alternative, inner classes, provides equal or superior   functionality. In particular, inner classes fully support the   requirements of user-interface event handling, and have been used to   implement a user-interface API at least as comprehensive as the   Windows Foundation Classes.  We believe bound method references are harmful because they detract   from the simplicity of the Java programming language and the   pervasively object-oriented character of the APIs. Bound method   references also introduce irregularity into the language syntax and   scoping rules. Finally, they dilute the investment in VM technologies   because VMs are required to handle additional and disparate types of   references and method linkage efficiently.', 'questionId': '44912', 'answerId': '44916'}
{'answer': "Not really, no. You may be able to achieve the same effect by using reflection to get Method objects you can then invoke, and the other way is to create an interface with a single 'invoke' or 'execute' method, and then instantiate them to call the method your interested in (i.e. using an anonymous inner class). You might also find this article interesting / useful : A Java Programmer Looks at C# Delegates", 'questionId': '44912', 'answerId': '44928'}
{'answer': 'While it is nowhere nearly as clean, but you could implement something like C# delegates using a Java Proxy.', 'questionId': '44912', 'answerId': '45009'}
{'answer': 'I have implemented callback/delegate support in Java using reflection.  Details and working source are available on my website. How It Works There is a principle class named Callback with a nested class named WithParms.  The API which needs the callback will take a Callback object as a parameter and, if neccessary, create a Callback.WithParms as a method variable.  Since a great many of the applications of this object will be recursive, this works very cleanly. With performance still a high priority to me, I didn\'t want to be required to create a throwaway object array to hold the parameters for every invocation - after all in a large data structure there could be thousands of elements, and in a message processing scenario we could end up processing thousands of data structures a second. In order to be threadsafe the parameter array needs to exist uniquely for each invocation of the API method, and for efficiency the same one should be used for every invocation of the callback; I needed a second object which would be cheap to create in order to bind the callback with a parameter array for invocation.  But, in some scenarios, the invoker would already have a the parameter array for other reasons.  For these two reasons, the parameter array does not belong in the Callback object.  Also the choice of invocation (passing the parameters as an array or as individual objects) belongs in the hands of the API using the callback enabling it to use whichever invocation is  best suited to its inner workings. The WithParms nested class, then, is optional and serves two purposes, it contains the parameter object array needed for the callback invocations, and it provides 10 overloaded invoke() methods (with from 1 to 10 parameters) which load the parameter array and then invoke the callback target. What follows is an example using a callback to process the files in a directory tree.  This is an initial validation pass which just counts the files to process and ensure none exceed a predetermined maximum size. In this case we just create the callback inline with the API invocation.  However, we reflect the target method out as a static value so that the reflection is not done every time. IoUtil.processDirectory(): This example illustrates the beauty of this approach - the application specific logic is abstracted into the callback, and the drudgery of recursively walking a directory tree is tucked nicely away in a completely reusable static utility method.  And we don\'t have to repeatedly pay the price of defining and implementing an interface for every new use. Of course, the argument for an interface is that it is far more explicit about what to implement (it\'s enforced, not simply documented) - but in practice I have not found it to be a problem to get the callback definition right. Defining and implementing an interface is not really so bad (unless you\'re distributing applets, as I am, where avoiding creating extra classes actually matters), but where this really shines is when you have multiple callbacks in a single class. Not only is being forced to push them each into a separate inner class added overhead in the deployed application, but it\'s downright tedious to program and all that boiler-plate code is really just "noise".', 'questionId': '44912', 'answerId': '2075606'}
{'answer': 'Have you read this : Delegates are a useful construct in event-based systems. Essentially   Delegates are objects that encode a method dispatch on a specified   object. This document shows how java inner classes provide a more   generic solution to such problems. What is a Delegate? Really it is very similar to a pointer to member   function as used in C++. But a delegate contains the target object   alongwith the method to be invoked. Ideally it would be nice to be   able to say: obj.registerHandler(ano.methodOne);  ..and that the method methodOne would be called on ano when some specific event was received. This is what the Delegate structure achieves. Java Inner Classes  It has been argued that Java provides this   functionality via inner classes and thus does not need the additional   Delegate construct. At first glance this seems correct but at the same time a nuisance.   Because for many event processing examples the simplicity of the   Delegates syntax is very attractive. General Handler  However, if event-based programming is used in a more   pervasive manner, say, for example, as a part of a general   asynchronous programming environment, there is more at stake. In such a general situation, it is not sufficient to include only the   target method and target object instance. In general there may be   other parameters required, that are determined within the context when   the event handler is registered. In this more general situation, the java approach can provide a very   elegant solution, particularly when combined with use of final   variables: final * final * final  Got your attention? Note that the final variables are accessible from within the anonymous   class method definitions. Be sure to study this code carefully to   understand the ramifications. This is potentially a very powerful   technique. For example, it can be used to good effect when registering   handlers in MiniDOM and in more general situations. By contrast, the Delegate construct does not provide a solution for   this more general requirement, and as such should be rejected as an   idiom on which designs can be based.', 'questionId': '44912', 'answerId': '3953773'}
{'answer': "No, but they're fakeable using proxies and reflection: The nice thing about this idiom is that you can verify that the delegated-to method exists, and has the required signature, at the point where you create the delegator (although not at compile-time, unfortunately, although a FindBugs plug-in might help here), then use it safely to delegate to various instances. See the karg code on github for more tests and implementation.", 'questionId': '44912', 'answerId': '9232634'}
{'answer': 'No, but it has similar behavior, internally. In C# delegates are used to creates a separate entry point and they work much like a function pointer. In java there is no thing as function pointer (on a upper look) but internally Java needs to do the same thing in order to achieve these objectives. For example, creating threads in Java requires a class extending Thread or implementing Runnable, because a class object variable can be used a memory location pointer.', 'questionId': '44912', 'answerId': '9870470'}
{'answer': "Depending precisely what you mean, you can achieve a similar effect (passing around a method) using the Strategy Pattern. Instead of a line like this declaring a named method signature: declare an interface: For concrete implementations of the method, define a class that implements the behaviour: Then wherever you would have had a SomeFunction delegate in C#, use an ISomeBehaviour reference instead: With anonymous inner classes, you can even avoid declaring separate named classes and almost treat them like real delegate functions. This should probably only be used when the implementation is very specific to the current context and wouldn't benefit from being reused. And then of course in Java 8, these do become basically lambda expressions:", 'questionId': '44912', 'answerId': '10137808'}
{'answer': "Java doesn't have delegates and is proud of it :). From what I read here I found in essence 2 ways to fake delegates: 1. reflection; 2. inner class Reflections are slooooow! Inner class does not cover the simplest use-case: sort function. Do not want to go into details, but the solution with inner class basically is to create a wrapper class for an array of integers to be sorted in ascending order and an class for an array of integers to be sorted in descending order.", 'questionId': '44912', 'answerId': '13739321'}
{'answer': 'I know this post is old, but Java 8 has added lambdas, and the concept of a functional interface, which is any interface with only one method.  Together these offer similar functionality to C# delegates.  See here for more info, or just google Java Lambdas. http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html', 'questionId': '44912', 'answerId': '21788518'}
{'answer': 'Yes & No, but delegate pattern in Java could be thought of this way. This video tutorial is about data exchange between activity - fragments, and it has great essence of delegate sorta pattern using interfaces.', 'questionId': '44912', 'answerId': '23485571'}
{'answer': "Well, there are a few minor improvements we could make. ;) I would use a Timer to make sure callers don't have to wait for the method to return. And preventing more than one flashing operation at a time on a given window would be nice too.", 'questionId': '45075', 'answerId': '45234'}
{'answer': "There are two common ways to do this: use JNI to set urgency hints on the taskbar's window, and create a notification icon/message. I prefer the second way, since it's cross-platform and less annoying. See documentation on the TrayIcon class, particularly the displayMessage() method. The following links may be of interest: New System Tray Functionality in Java SE 6 Java Programming - Iconified window blinking TrayIcon for earlier versions of Java", 'questionId': '45075', 'answerId': '45248'}
{'answer': 'A quick Google turned up this for a toolkit. While I have never used it, it seems to be quite popular and solid. Not exactly a package, and not really rolling your own, but sort of in the middle.', 'questionId': '45086', 'answerId': '45089'}
{'answer': "Take a look at Apache's Axis project. It's well supported on C++ (and Java) and if you have the good fortune to start with a good WSDL for the target service you'll be home-free.", 'questionId': '45086', 'answerId': '45159'}
{'answer': "I'll vote up darkhelmet since gSoap would also be my recommendation. We're mostly a Java shop but with some C++ bits and gSoap has been our preferred SOAP integration way. It is indeed more work than your typical Java stacks but it seems solid.", 'questionId': '45086', 'answerId': '45359'}
{'answer': "We went with gSOAP rather than Axis to avoid having a dependency on both a JRE and Axis just for building a C++ project.  It's worked ok, which is good since the gSOAP code is horrible and makes it very daunting to fix any bugs in it. A warning about gSOAP linking though: you can never use more than one WSDL in a single link object (executable, dll, shared object).  This is because some of the generated WSDL-specific functions have general names (e.g. soap_getfault()). Worse, with Unix ELF linking, these names will cause cross-linking between shared objects, so a FooService fault might be processed by the soap_getfault() for BarService, corrupting memory if the fault detail structures are different. The workaround for that is to make sure that nothing gSOAP-related is exposed outside the SO they are linked into.  This can be solved by giving gcc these definitions _both when linking the gSOAP library itself and linking your code: I solved it by putting them into a header file and forcing gcc to include that before anything else with -include fixsoaplink.h. A better way if you can take the effort might to change the default ELF visibility to hidden, and only export the symbols you want to (like dllimport/dllexport in VC).", 'questionId': '45086', 'answerId': '84771'}
{'answer': "When I saw the generated code from gSOAP, I about had a heart attack. The fact that the user is required to do all of the memory management for each object just boggled my mind.  So, I sat down and did something probably stupid in the long term, but fairly satisfying in the short term... I wrote a program that wraps the gSOAP code with my own CPP classes that make the interface look more like I'd like it to look. I used Scoped Guards within each service method to hold onto memory, and since I'm dealing with all sorts of different types, I used a std::list<boost::any> to do it.  I have functions that make each object type that I need, and they put the actual memory into my list<any>.  It's had a few problems - mostly just configuration changes.  I'm generating thousands of classes now, talking to dozens of web services. I'm not sure I'd recommend my same path to anyone else...  I should probably bite the bullet and start trying to contribute to gSOAP, rather than maintain my own tool which is dependent on the output of gSOAP...", 'questionId': '45086', 'answerId': '92256'}
{'answer': "Here's another issue with gSOAP we just discovered the hard way: it uses select() for all polling, so once you've got 1024 file descriptors open (64 on Windows?) it will trash the stack.  That results in either spurious errors where it is unable to send messages, to complete crashes of the application. The workaround, unless you're prepared to patch gSOAP itself, is to write your own network code and hook it in with soap->fconnect, ->fsend, ->frecv etc.", 'questionId': '45086', 'answerId': '148822'}
{'answer': "What version of Tomcat are you using? To me this sounds like a bug in Tomcat, I can't think of any reason why your doFilter method should be called with a response that's already been committed (if that filter is the only one in the chain, are you sure about this?).", 'questionId': '45361', 'answerId': '45420'}
{'answer': "I have tried using Tomcat 6.16 and 6.18. This is definitely is the only filter in the chain. It seems that something is keeping a reference to the servlet outputStream. I wrapped the ServletOutputStream in my own OutputStream and then made sure the reference is destroyed. This fixed the issue so that I no longer see a committed response passed in. This is an odd side effect of holding a reference. But I don't think it qualifies as a Tomcat bug. More likely a bug in ImageIO.createImageOutputStream() that I suspect is holding the reference.", 'questionId': '45361', 'answerId': '46330'}
{'answer': "I can only assume it's a bug in Eclipse. It only happens with @see tags, it happens also for all 3 builtin code formatter settings. There are some interesting bugs reported already in the neighbourhood, but I couldn't find this specific one. See for example a search for @see in the Eclipse Bugzilla.", 'questionId': '45414', 'answerId': '45550'}
{'answer': "Strict XML specifications require that the self closing tags should have a space before the closing slash like so: I can only assume, like Bart said, that there is a bug in Eclipse's reformatter that thinks the closing tag is actually a self-closing tag. Another idea: Can you verify that your a tags are balanced (i.e. no unclosed tags higher up in the document)?", 'questionId': '45414', 'answerId': '45574'}
{'answer': "This could be a bug in Eclipse 3.4.  I'm using 3.3 (M20080221-1800), and do not observe this behavior.", 'questionId': '45414', 'answerId': '76196'}
{'answer': ' will do the trick. INPUT constant is defined in Action interface itself. It indicates that action needs more input. By calling page if you meant the page that took you to the action input page, then your input page will have to store HTTP header "Referer" in the request scope for the Action.', 'questionId': '45424', 'answerId': '45595'}
{'answer': 'You can use  a dynamic result in struts.xml. For instance: Then in your action, you create a field called next. So to invoke the action you will pass the name of the page that you want to forward to next. The action then returns "next" and struts will know which page to go to. There is a nicer explanation on this post: Stack Overflow', 'questionId': '45424', 'answerId': '202693'}
{'answer': "I prefer the way when you navigating users by particular actions.  http://domain.com/myAction.action You could use some parameter as indicator, that you want to change current design: i.e. http://domain.com/myAction.action?changeDesign=silver_theme So then, you write some struts 2 interceptor, which logic is to check the presence of such parameter 'changeDesign', and this interceptor will do nessesary work of changing design and will control workflow. With interceptor you decouple your actions from crosscutting logic.", 'questionId': '45424', 'answerId': '229951'}
{'answer': 'My solution would involve one interface and one interceptor.  You implement the following interface for all actions to which you are likely to want to redirect: The interceptor simply ensures that the target is set, if required: From then on, once these two bits are in place and your actions implement the TargetAware interface (if you expect to have to redirect to them), then you have access to a target parameter in your JSPs whenever you need it.  Pass that parameter on to your VisualizationAction (which might as well implement also the TargetAware interface!), and on SUCCESS, redirect as explained by Vincent Ramdhanie: I did not try every single detail of this strategy.  In particular, beware of the notation surrounding the redirect result type (depending on your specific version of Struts2: 2.0.x and 2.1.x may differ on this...).', 'questionId': '45424', 'answerId': '447845'}
{'answer': "ok, in your class it.___.web.actions.VisualizationAction, you must return a string value containing INPUT, then, on struts.xml you have to set something like this: this will lead you to the page you want. This should work, I've been working on struts2 along 2 months", 'questionId': '45424', 'answerId': '447914'}
{'answer': 'can you  use response.setStatus(403) ?', 'questionId': '45546', 'answerId': '45568'}
{'answer': 'Quickie If you are using plain JSP views (as is most common), then simply add somewhere in your view file. At the top is a nice place. Detail In MVC, i would always set this in the view, and in most cases with Spring-MVC, use the SimpleMappingExceptionResolver to present the correct view in response to a thrown runtime Exception.  For example: create and throw a PermissionDeniedException in your controller or service layer and have the exception resolver point to a view file permissionDenied.jsp. This view file sets the 403 status and shows the user an appropriate message. In your Spring bean XML file: If you need to implement a user login mechanism, take a look at Spring Security (formerly Acegi Security).', 'questionId': '45546', 'answerId': '45585'}
{'answer': 'Using an ExceptionResolver is a great way to go, but if you just want this to be view-independent, you could certainly make a call to response.sendError(HttpServletResponse.SC_FORBIDDEN, "AdditionalInformationIfAvailable"); in your Controller.', 'questionId': '45546', 'answerId': '45620'}
{'answer': 'Create an Exception annotated with @ResponseStatus e.g. like this: Now just throw that Exception in your handler method and the response will have status 403.', 'questionId': '45546', 'answerId': '28883524'}
{'answer': 'You can also just throw This returns a 403 in the response header.', 'questionId': '45546', 'answerId': '38467064'}
{'answer': 'This might be what you are looking for? From Groovy in Action An appropriate use of Binding will allow you to maintain state?', 'questionId': '45582', 'answerId': '46115'}
{'answer': "I am not sure about what you mean about declared classes not existing between evals, the following two scripts work as expected when evaled one after another: ...  However methods become bound to the class that declared them, and GroovyShell creates a new class for each instance.  If you do not need the return value of any of the scripts and they are truly scripts (not classes with main methods) you can attach the following to the end of every evaluated scrips. If you depend on the return value you can hand-manage the evaluation and run the script as part of your parsing (warning, untested code follows, for illustrative uses only)... There is one last caveat I am sure you are aware of.  Statically typed variables are not kept between evals as they are not stored in the binding.  So in the previous script the variable 'klass' will not be kept between script invocations and will disappear.  To rectify that simply remove the type declarations on the first use of all variables, that means they will be read and written to the binding.", 'questionId': '45582', 'answerId': '64063'}
{'answer': 'Ended up injecting code before each script compilation. End goal is that the user written script has a domain-specific-language available for use.', 'questionId': '45582', 'answerId': '1380478'}
{'answer': "If you can afford the threading, try this (keep in mind I've left out some details like exception handling and playing nice with threads). You may want to look into SocketChannels and/or NIO async sockets / selectors. This should get you started.", 'questionId': '45623', 'answerId': '45630'}
{'answer': "I'd need to go back to the basics for this one too. I'd recommend O'Reilly's excellent Java in a Nutshell that includes code examples for just such a case (available online as well). See Chapter 7 for a pretty good overview of the decisions you'd want to make early on.", 'questionId': '45623', 'answerId': '45678'}
{'answer': 'As for connecting to a Blackberry, this is problematic since in most cases the Blackberry won\'t have a public IP address and will instead be behind a WAP gateway or wireless provider access point server. RIM provides the Mobile Data Server (MDS) to get around this and provide "Push" data which uses ServerSocket semantics on the Blackberry. The MDS is available with the Blackberry Enterprise Server (BES) and the Unite Server. Once set up data can be sent to a particular unit via the MDS using the HTTP protocol. There is an excellent description of the Push protocol here with LAMP source code. The parameter PORT=7874 in pushout.pl connects to the Blackberry Browser Push server socket. By changing that parameter the payload can be sent to an arbitrary port where your own ServerSocket is accepting connections.', 'questionId': '45623', 'answerId': '83460'}
{'answer': "If your socket code has to run on a BlackBerry, you cannot using standard Java sockets. You have to use the J2ME Connector.open API for creating both types of sockets (those that initiate connections from the BlackBerry, and those that listen for connections/pushes on the BlackBerry). Have a look at the examples that come with RIM's JDE.", 'questionId': '45623', 'answerId': '88354'}
{'answer': 'You can return null from the getPreviousPage() method in your wizard page implementation.', 'questionId': '45865', 'answerId': '45870'}
{'answer': "From a UI perspective this seems rather bad.  Your users are going to get frustrated if they make a mistake and want to go back and correct it and you don't let them.  I think it would be much better to change the application to allow going back rather than looking for ways to prevent it.", 'questionId': '45865', 'answerId': '45877'}
{'answer': 'There is no way to do this using standard JFace wizard APIs.  My team accomplished this by writing a custom WizardDialog.  We did this on an Eclipse RCP application and not on an eclipse plugin.  Disabling the back button is breaking convention, but our business analysts really wanted the functionality.', 'questionId': '45865', 'answerId': '92383'}
{'answer': "Expanding on jodonell's answer: Disabling the back button is harder than it should be, due to non-intuitive behavior in the default implementation of WizardPage.getPreviousPage().  You can call setPreviousPage( null ), and getPreviousPage() still returns the previous page.  You need to override the implementation of getPreviousPage() in order to disable the back button: See my blog post for a few more JFace wizard tips and tricks: http://nsawadsky.blogspot.com/2011/07/jface-wizard-tips-and-tricks.html", 'questionId': '45865', 'answerId': '6780595'}
{'answer': "The string approach is amusing, but almost certainly a bad way to do it. Getting the int value of an Integer, and creating a new one will be very fast, where as parseInt would be fairly expensive to call. Overall, I'd agree with your original approach (which, as others have pointed out, can be done without so much clutter if you have autoboxing as introduced in Java 5).", 'questionId': '45964', 'answerId': '45973'}
{'answer': "With Java 5's autoboxing, you can simply do:", 'questionId': '45964', 'answerId': '45975'}
{'answer': "Keep away from the second approach, best bet would be the autoboxing if you're using java 1.5, anything earlier your first example would be best.", 'questionId': '45964', 'answerId': '45980'}
{'answer': 'The solution using the String method is not so good for a variety of reasons. Some are aesthetic reasons others are practical.  On a practical front more objects get created by the String version than the more normal form (as you have expressed in your first example). On an aesthetic note, I think that the second version obscures the intent of the code and that is nearly as important as getting it to produce the result you want.', 'questionId': '45964', 'answerId': '45981'}
{'answer': 'The problem with the second way is the way Strings are handled in Java: "0" is converted into a constant String object at compile time. Each time this code is called, s is constructed as a new String object, and javac converts that code to String s = new StringBuilder().append(integerObj.toString()).append("0").toString() (StringBuffer for older versions).  Even if you use the same integerObj, i.e., String s1 = integerObj + "0";  String s2 = integerObj + "0"; (s1 == s2) would be false, while s1.equals(s2) would be true. Integer.parseInt internally calls new Integer() anyway, because Integer is immutable. BTW, autoboxing/unboxing is internally the same as the first method.', 'questionId': '45964', 'answerId': '46424'}
{'answer': "toolkit's answer above is correct and the best way, but it doesn't give a full explanation of what is happening. Assuming Java 5 or later: What you need to know is that this is the exact same as doing: By performing the operation (in this case *=) on the object 'a', you are not changing the int value inside the 'a' object, but actually assigning a new object to 'a'. This is because 'a' gets auto-unboxed in order to perform the multiplication, and then the result of the multiplication gets auto-boxed and assigned to 'a'. Integer is an immutable object. (All wrapper classes are immutable.) Take for example this piece of code: The output will be: You can see the memory address for 'i' is changing (your memory addresses will be different). Now lets do a little test with reflection, add this onto the end of the test() method: The additional output will be: You can see that the memory address for 'i' did not change, even though we changed its value using reflection. (DO NOT USE REFLECTION THIS WAY IN REAL LIFE!!)", 'questionId': '45964', 'answerId': '24281194'}
{'answer': ' Got these from some blog. Someone good w/ regexes should be able to come up with a single regex for all IPv6 address types.  Actually, I guess you could have a single regex that matches both IPv4 and IPv6.', 'questionId': '46146', 'answerId': '46168'}
{'answer': "Here's a regex to match IPv4 addresses: You'll need to escape the backslashes when you specify it as a string literal in Java:", 'questionId': '46146', 'answerId': '46171'}
{'answer': "Another good option for processing IPs is to use Java's classes Inet4Address and Inet6Address, which can be useful in a number of ways, one of which is to determine the validity of the IP address. I know this doesn't answer the question directly, but just thought it's worth mentioning.", 'questionId': '46146', 'answerId': '1210965'}
{'answer': 'The regex allows the use of leading zeros in the IPv4 parts. Some Unix and Mac distros convert those segments into octals. I suggest using 25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d as an IPv4 segment.', 'questionId': '46146', 'answerId': '1573032'}
{'answer': 'Regexes for ipv6 can get really tricky when you consider addresses with embedded ipv4 and addresses that are compressed. The open-source IPAddress Java library will validate all standard representations of IPv6 and IPv4 and also supports prefix-length (and validation of such).  Disclaimer: I am the project manager of that library. Code example:', 'questionId': '46146', 'answerId': '42605542'}
{'answer': "How long are your strings?  Unless you choose an int representation that's longer than the string, collisions will always be possible no matter what conversion you're using.  So if you're using a 32 bit integer, you can only uniquely represent strings of up to 4 bytes.", 'questionId': '46160', 'answerId': '46178'}
{'answer': "Can't you just start with a hash code, and if the hash codes match, do a character by character comparison?", 'questionId': '46160', 'answerId': '46182'}
{'answer': 'How big are your strings? Arbitrarily long strings cannot be compressed into 32/64 bit format.', 'questionId': '46160', 'answerId': '46183'}
{'answer': "If you don't want collisions, try something insane like SHA-512. I can't guarantee there won't be collisions, but I don't think they have found any yet.", 'questionId': '46160', 'answerId': '46188'}
{'answer': 'Assuming "alphanumeric" means letters and numbers, you could treat each letter/number as a base-36 digit. Unfortunately, large strings will cause the number to grow rapidly and you\'d have to resort to big integers, which are hardly efficient. If your strings are usually different when you make the comparison (i.e. searching for a specific string) the hash might be your best option. Once you get a potential hit, you can do the string comparison to be sure. A well-designed hash will make collisions exceedingly rare.', 'questionId': '46160', 'answerId': '46199'}
{'answer': 'It would seem that an MD5 hash would work fine.  The risk of a hash collision would be extremely unlikely.  Depending on the length of your string, a hash that generates an int/long would run into max value problems very quickly.', 'questionId': '46160', 'answerId': '46204'}
{'answer': "Why don't you do something like 1stChar + (10 x 2ndChar) + 100 x (3rdChar) ...., where you use the simple integer value of each character, i.e. a = 1, b = 2 etc, or just the integer value if it's not a letter. This will give a unique value for each string, even for 2 strings that are just the same letters in a different order. Of course if gets more complicated if you need to worry about Unicode rather than just ASCII and the numbers could get large if you need to use long string. Are the standard Java string comparison functions definitely not efficient enough?", 'questionId': '46160', 'answerId': '46209'}
{'answer': "How long are the strings? If they are very short, then a unique ID can be generated by considering the characters as digits in base 36 (26 + 10) that form a n-digits number where n is the length of the string. On the other hand, if the strings are short enough to allow this, direct comparison won't be an issue anyway. Otherwise you'll have to generate a collision-free hash and this can only be done when the complete problem space is known in advance (i.e. if you know all strings that can possibly occur). You will want to have a look at perfect hashing, although the only feasible algorithm to find a perfect hash function that I know is probabilistic so collisions are still theoretically possible. There might be other ways to find such a function. Knuth called this a rather amusing puzzle in TAoCP but he doesn't give an algorithm either. In general, you give way too few information to find an algorithm that doesn't require probing the whole problem space in some manner. This does invariably mean that the problem has exponential running time but could be solved using machine-learning heuristics. I'm not sure if this is advisable in your case.", 'questionId': '46160', 'answerId': '46210'}
{'answer': 'Perhaps:', 'questionId': '46160', 'answerId': '46211'}
{'answer': "A few questions in the beginning: Did you test that simple string comparison is too slow?  How the comparison looks like ('ABC' == 'abc' or 'ABC' != 'abc')?   How many string do you have to compare?  How many comparison do you have to do? How your strings look like (the length, letter case)? As far as I remember String in Java is an object and two identical strings point to the same object. So, maybe it would be enough to compare objects (probably string comparison is already implemented in this way). If it doesn't help you can try to use Pascal implementation of string object when first element is length and if your strings have various length this should save some CPU time.", 'questionId': '46160', 'answerId': '46215'}
{'answer': "Unless your string is limited in length, you can't avoid collisions.  There are 4294967296 possible values for an integer (2^32). If you have a string of more than 4 ASCII characters, or more than two unicode characters, then there are more possible string values than possible integer values. You can't have a unique integer value for every possible 5 character string. Long values have more possible values, but they would only provide a unique value for every possible string of 8 ASCII characters. Hash codes are useful as a two step process: first see if the hash code matches, then check the whole string. For most strings that don't match, you only need to do the first step, and it's really fast.", 'questionId': '46160', 'answerId': '46216'}
{'answer': " String length may vary, but let's say 10 characters for now. In that case, in order to guarantee uniqueness you'd have to use some sort of big integer representation.  I doubt that doing comparisons on big integers would be substantially faster than doing string comparisons in the first place.  I'll second what other's have said here, use some sort of hash, then in the event of a hash match check the original strings to weed out any collisions. In any case, If your strings are around 10 characters, I doubt that comparing, say, a bunch of 32 bit hashes will be all that much faster than direct string comparisons.  I think you have to ask yourself if it's it really worth the additional complexity.", 'questionId': '46160', 'answerId': '46224'}
{'answer': "At the end of the day, a single alphanumeric character has at least 36 possible values.  If you include punctuation, lower case, etc then you can easily pass 72 possible values. A non-colliding number that allows you to quickly compare strings would necessarily grow exponentially with the length of the string. So you first must decide on the longest string you are expecting to compare.  Assuming it's N characters in length, and assuming you ONLY need uppercase letters and the numerals 0-9 then you need to have an integer representation that can be as high as 36^N For a string of length 25 (common name field) then you end up needing a binary number with  130 bits. If you compose that into 32 bit numbers, you'll need 4.  Then you can compare each number (four integer compares should take no time, compared to walking the string).  I would recommend a big number library, but for this specialized case I'm pretty sure you can write your own and get better performance. If you want to handle 72 possible values per character (uppercase, lowercase, numerals, punctuation...) and you need 10 characters, then you'll need 62 bits - two 32 bit integers (or one 64 bit if you're on a system that supports 64 bit computing) If, however, you are not able to restrict the numbers in the string (ie, could be any of the 256 letters/numbers/characters/etc) and you can't define the size of the string, then comparing the strings directly is the only way to go, but there's a shortcut. Cast the pointer of the string to a 32 bit unsigned integer array, and compare the string 4 bytes at a time (or 64 bits/8bytes at a time on a 64 bit processor).  This means that a 100 character string only requires 25 compares maximum to find which is greater. You may need to re-define the character set (and convert the strings) so that the characters with higher precedence are assigned values closer to 0, and lower precedence values closer to 255 (or vice versa, depending on how you are comparing them). Good luck! -Adam", 'questionId': '46160', 'answerId': '46247'}
{'answer': "As long as it's a hash function, be it String.hashCode(), MD5 or SHA1, collision is unavoidable unless you have a fixed limit on the string's length.  It is mathematically impossible to have one-to-one mapping from an infinite group to a finite group. Stepping back, is collision avoidance absolutely necessary?", 'questionId': '46160', 'answerId': '47000'}
{'answer': "I'm not sure if this would be handled exactly the same way for webstart, but we ran into this situation in a desktop application when dealing with a set of native libraries (dlls in our case). Loading libA before libB should work, unless one of those libraries has a dependency that is unaccounted for and not in the path. My understanding is that once it gets to a system loadLibrary call (i.e. Java has found the library in its java.library.path and is now telling the OS to load it) - it is completely dependent on the operating system to find any dependent libraries, because at that point it is the operating system that is loading the library for the process, and the OS only knows how to look in the system path. That seems hard to set in the case of a Webstart app, but there is a way around this that does not involve static compiling. You may be able to shuffle where your libraries are - I am unsure  If you use a custom classloader, you can override loadLibrary and findLibrary so that it can locate your libraries from within a jar in your classpath, and if you also make it aware of your native library dependencies (i.e. libB depends on libA depends on libX, then when loading libB you can catch yourself and ensure you load libA first, and in checking that notice and load libX first. Then the OS doesn't try to find a library that isn't in your path. It's klunky and a bit painful, but ensuring Java finds them and loads them all in the correct order can work.", 'questionId': '4630', 'answerId': '5042'}
{'answer': 'Are both native libraries packaged into a signed jar which is listed as In the JNLP file?', 'questionId': '4630', 'answerId': '80551'}
{'answer': 'Static compilation proved to be the only way to webstart multiple dependent native libraries.', 'questionId': '4630', 'answerId': '478658'}
{'answer': "Findbugs dumps its results into an XML file in your workspace's .metadata folder. Look for the subfolder that's named something like findbugs. You can also download a standalone version of Findbugs that will save the results wherever you like. Once you have the results file, you might be able to import from XML to Excel and filter there. Alternatively, you can use XSLT to transform to several CSV files and open them in Excel.", 'questionId': '46389', 'answerId': '46966'}
{'answer': 'I had the same problem with findbugs some versions ago. I updated the plugin today to version 1.3.8 and found out that you can now export and even import reports as XML directly.  All you have to do is right-click on a project either in the package explorer or in the findbugs "Bug explorer" and select "Findbugs->Save XML" or "Findbugs->Load XML". Finely a proper export and import functionality for a fantastic tool. Btw, I use Eclipse 3.3.2.', 'questionId': '46389', 'answerId': '701377'}
{'answer': 'I\'m curious to hear what your alternative to labels is.  I think this is pretty much going to boil down to the argument of "return as early as possible" vs. "use a variable to hold the return value, and only return at the end." Labels are pretty standard when you have nested loops.  The only way they really decrease readability is when another developer has never seen them before and doesn\'t understand what they mean.', 'questionId': '46496', 'answerId': '46517'}
{'answer': "I never use labels in my code. I prefer to create a guard and initialize it to null or other unusual value. This guard is often a result object. I haven't seen any of my coworkers using labels, nor found any in our repository. It really depends on your style of coding. In my opinion using labels would decrease the readability as it's not a common construct and usually it's not used in Java.", 'questionId': '46496', 'answerId': '46534'}
{'answer': 'Many algorithms are expressed more easily if you can jump across two loops (or a loop containing a switch statement). Don\'t feel bad about it. On the other hand, it may indicate an overly complex solution. So stand back and look at the problem. Some people prefer a "single entry, single exit" approach to all loops. That is to say avoiding break (and continue) and early return for loops altogether. This may result in some duplicate code. What I would strongly avoid doing is introducing auxilary variables. Hiding control-flow within state adds to confusion. Splitting labeled loops into two methods may well be difficult. Exceptions are probably too heavyweight. Try a single entry, single exit approach.', 'questionId': '46496', 'answerId': '46579'}
{'answer': "Labels are like goto's: Use them sparingly, and only when they make your code faster and more importantly, more understandable,  e.g., If you are in big loops six levels deep and you encounter a condition that makes the rest of the loop pointless to complete, there's no sense in having 6 extra trap doors in your condition statements to exit out the loop early. Labels (and goto's) aren't evil, it's just that sometimes people use them in bad ways. Most of the time we are actually trying to write our code so it is understandable for you and the next programmer who comes along. Making it uber-fast is a secondary concern (be wary of premature optimization). When Labels (and goto's) are misused they make the code less readable, which causes grief for you and the next developer. The compiler doesn't care.", 'questionId': '46496', 'answerId': '46581'}
{'answer': 'I\'ve never seen labels used "in the wild" in Java code. If you really want to break across nested loops, see if you can refactor your method so that an early return statement does what you want. Technically, I guess there\'s not much difference between an early return and a label. Practically, though, almost every Java developer has seen an early return and knows what it does. I\'d guess many developers would at least be surprised by a label, and probably be confused. I was taught the single entry / single exit orthodoxy in school, but I\'ve since come to appreciate early return statements and breaking out of loops as a way to simplify code and make it clearer.', 'questionId': '46496', 'answerId': '46911'}
{'answer': 'I think with the new for-each loop, the label can be really clear. For example: I think that looks really clear by having your label the same as your variable in the new for-each.  In fact, maybe Java should be evil and add implicit labels for-each variables heh', 'questionId': '46496', 'answerId': '130390'}
{'answer': "I'd argue in favour of them in some locations, I found them particularly useful in this example:", 'questionId': '46496', 'answerId': '479629'}
{'answer': 'There are few occasions when you need labels and they can be confusing because they are rarely used. However if you need to use one then use one. BTW: this compiles and runs.', 'questionId': '46496', 'answerId': '481514'}
{'answer': 'I have use a Java labeled loop for an implementation of a Sieve method to find prime numbers (done for one of the project Euler math problems) which made it 10x faster compared to nested loops. Eg if(certain condition) go back to outer loop. I asked a C++ programmer how bad labeled loops are, he said he would use them sparingly, but they can occasionally come in handy. For example, if you have 3 nested loops and for certain conditions you want to go back to the outermost loop. So they have their uses, it depends on the problem you were trying to solve.', 'questionId': '46496', 'answerId': '2676495'}
{'answer': 'Yes, you should avoid using label unless there\'s a specific reason to use them (the example of it simplifying implementation of an algorithm is pertinent). In such a case I would advise adding sufficient comments or other documentation to explain the reasoning behind it so that someone doesn\'t come along later and mangle it out of some notion of "improving the code" or "getting rid of code smell" or some other potentially BS excuse.   I would equate this sort of question with deciding when one should or shouldn\'t use the ternary if. The chief rationale being that it can impede readability and unless the programmer is very careful to name things in a reasonable way then use of conventions such as labels might make things a lot worse. Suppose the example using \'nextCondition\' and \'nextItem\' had used \'loop1\' and \'loop2\' for his label names.   Personally labels are one of those features that don\'t make a lot of sense to me, outside of Assembly or BASIC and other similarly limited languages. Java has plenty of more conventional/regular loop and control constructs.', 'questionId': '46496', 'answerId': '36525519'}
{'answer': 'I found labels to be sometimes useful in tests, to separate the usual setup, excercise and verify phases and group related statements. For example, using the BDD terminology: Your formatting choices may vary but the core idea is that labels, in this case, provide a noticeable distinction between the logical sections comprising your test, better than comments can. I think the Spock library just builds on this very feature to declare its test phases.', 'questionId': '46496', 'answerId': '40549383'}
{'answer': 'Most application servers provide a JMX interface, so you could invoke that.', 'questionId': '46568', 'answerId': '46576'}
{'answer': 'I would suggest that your unlikely to find an appserver agnostic way.  And while I don\'t pretend to know your reqs, I might question a design that requires the application to restart itself, other than an installer that is deploying a new version.  Finally, I would suggest that for any nontrivial purpose "any" appserver will not work.  You should have a list of supported app servers and versions, documented in your release notes, so you can test on all of those and dont have to worry about supporting clients on a non-conforming server/version. From experience, there are always subtle differences between, for example, Apache Tomcat and BEA WebLogic, and these differences are often undocument and hard to determine until you run into them.', 'questionId': '46568', 'answerId': '46695'}
{'answer': "I'd suggest using servicewrapper to manage the application server, and then use its api methods for requesting a restart of the service.  There would be some configuration involved and its hard to know if this would work in your particuar environment, but thats the only solution that I know of which is even reasonably cross-server compatible.", 'questionId': '46568', 'answerId': '46804'}
{'answer': 'JProfiler is a really good one.  It integrates with all the major IDEs and application servers.', 'questionId': '46642', 'answerId': '46659'}
{'answer': 'SmartInspect is a profiler and logger.  Not specific to memory, but you might want to take a look.  It works with a variety of languages too, including Delphi, Java and .NET.  Includes other more advanced features.', 'questionId': '46642', 'answerId': '46776'}
{'answer': "I've used YourKit Java Profiler 7.5 and was reasonably happy with it. Java has some pretty good tools included with recent releases that are worth looking into. (e.g., jmap -histo <pid>)", 'questionId': '46642', 'answerId': '46821'}
{'answer': "I use Netbeans Profiler: alt text http://www.netbeans.org/images/v6/1/features/profiler-java-cut.png Its free, has task based profiling, a heap walker, allows the insertion of profiling points, tracks memory usage and threading, but best of all it allows you to profile remote JVM's.  You can even attach to ones which are already running. Oh, and it works really well if you've a maven build for your project too.", 'questionId': '46642', 'answerId': '47313'}
{'answer': 'I like to use SAP Memory Analyzer, which is based in Eclipse. It works very well, also for large heap dumps!', 'questionId': '46642', 'answerId': '47458'}
{'answer': 'The Eclipse Memory Analyzer is the best tool for analysing the memory usage of java applications', 'questionId': '46642', 'answerId': '181786'}
{'answer': 'For initial investigation, you can start jconsole and attach it to a running process.  This will allow you to see memory usage over time even in production, including garbage collections without the full impact of a profiler setup.', 'questionId': '46642', 'answerId': '440335'}
{'answer': "An easy route would be to have the gmail account configured/enabled for POP3 access. This would allow you to send out via normal SMTP through the gmail servers.    Then you'd just send through smtp.gmail.com (on port 587)", 'questionId': '46663', 'answerId': '46676'}
{'answer': 'Something like this (sounds like you just need to change your SMTP server):', 'questionId': '46663', 'answerId': '46681'}
{'answer': "First download the JavaMail API and make sure the relevant jar files are in your classpath. Here's a full working example using GMail. Naturally, you'll want to do more in the catch blocks than print the stack trace as I did in the example code above.  (Remove the catch blocks to see which method calls from the JavaMail API throw exceptions so you can better see how to properly handle them.) Thanks to @jodonnel and everyone else who answered.  I'm giving him a bounty because his answer led me about 95% of the way to a complete answer.", 'questionId': '46663', 'answerId': '47452'}
{'answer': "Even though this question is closed, I'd like to post a counter solution, but now using Simple Java Mail (Open Source JavaMail smtp wrapper):", 'questionId': '46663', 'answerId': '886689'}
{'answer': 'This is what I do when i want to send email with attachment, work fine. :)', 'questionId': '46663', 'answerId': '935714'}
{'answer': 'Other people have good answers above, but I wanted to add a note on my experience here.  I\'ve found that when using Gmail as an outbound SMTP server for my webapp, Gmail only lets me send ~10 or so messages before responding with an anti-spam response that I have to manually step through to re-enable SMTP access.  The emails I was sending were not spam, but were website "welcome" emails when users registered with my system.  So, YMMV, and I wouldn\'t rely on Gmail for a production webapp.  If you\'re sending email on a user\'s behalf, like an installed desktop app (where the user enters their own Gmail credentials), you may be okay. Also, if you\'re using Spring, here\'s a working config to use Gmail for outbound SMTP:', 'questionId': '46663', 'answerId': '1013676'}
{'answer': '', 'questionId': '46663', 'answerId': '3970608'}
{'answer': 'My complete code as below is working well:', 'questionId': '46663', 'answerId': '14191227'}
{'answer': 'The posted code solutions may cause problems when you need to set up multiple SMTP sessions anywhere within the same JVM. The JavaMail FAQ recommends using instead of because the getDefault will only use the properties given the first time it is invoked. All later uses of the default instance will ignore property changes. See http://www.oracle.com/technetwork/java/faq-135477.html#getdefaultinstance', 'questionId': '46663', 'answerId': '20550855'}
{'answer': 'Hi try this code....', 'questionId': '46663', 'answerId': '21800051'}
{'answer': 'The minimum required:', 'questionId': '46663', 'answerId': '27402060'}
{'answer': "Here's an easy-to-use class for sending emails with Gmail. You need to have the JavaMail library added to your build path or just use Maven. Example usage:", 'questionId': '46663', 'answerId': '31224370'}
{'answer': 'If you want to use outlook with Javamail API then use  as a host for more and complete working code Check out this answer.', 'questionId': '46663', 'answerId': '41347492'}
{'answer': "One thing you can try is find a Java bytecode compiler for the language you're talking about (there are JVM compilers for all kinds of languages) and then decompile the bytecode back into Java using a decompiler like Jad.   This is fraught with peril.  The regenerated code will suck and will probably be unreadable.", 'questionId': '46758', 'answerId': '46790'}
{'answer': 'Google: ANTLR', 'questionId': '46758', 'answerId': '48609'}
{'answer': 'ADA to Java can be done with a find-and-replace!', 'questionId': '46758', 'answerId': '48898'}
{'answer': "If you just want to use some legacy C/Pascal code, you could also use JNI to call it from Java.  If you want to run it in a Java applet or similar constrained environment, and it does not have to be very efficient, you can use NestedVM (which is a MIPS to Java bytecode converter) in conjunction with a gcc cross-compiler that compiles to MIPS). But don't expect to get readably Java code from that.", 'questionId': '46758', 'answerId': '790624'}
{'answer': 'The language conversion is fairly simple, but you will find the libraries are different. This is likely to be most of your work.', 'questionId': '46758', 'answerId': '790659'}
{'answer': "Any of those tools might help only if your non java code is not huge enough.  If its huge non java code and if you want to seriously translate it to java, then few things need to be thought of, its not just hundreds of lines of code, there is a design beneath it, there are few decisions taken by people beneath the code due to which certain problems might have been solved and few things have been working there. and investing time on any good translator won't be worth as it won't exist, it's not just syntax translation from one language to another. If its not so huge code, its better to re write in java, as it has so many APIs packages out of box, it might not be big deal, hiring few interns for this also might help.", 'questionId': '46758', 'answerId': '1879119'}
{'answer': "Source-to-source migrations fall under the umbrella of Program Transformation. Program-Transformation.org tracks a bunch of tools that are useful for language recognition, analysis, and transformation. Here are few that are capable of source-to-source migrations: ASF+SDF Meta-Environment - As noted, there is no new development on this tool. Instead, the developers are focusing on Rascal. Rascal Meta Programming Language Stratego /XT TXL DMS Software Reengineering Toolkit (commercial) If you spend any time with one of the open source tools, you'll notice that even though they include source-to-source migration as a feature, it's hard to find working examples. I imagine this is because there's no such thing as a one-size-fits-all migration. Each project/team makes unique use of a language and can vary by libraries used, type complexity, idioms, style, etc. It makes sense to define some transformations per migration. This means a project must reach some critical mass before automatic migration is worth the effort. A few related documents: An introduction to Rascal - includes a migration between the toy language Pico and Assembly starting at page 94. Cracking the 500 Language Problem An Experiment in Automatic Conversion of Legacy Java Programs to C# (gated) - uses TXL", 'questionId': '46758', 'answerId': '4381267'}
{'answer': 'Yes, the order depends on the specific Map implementation.   @ScArcher2 has the more elegant Java 1.5 syntax.  In 1.4, I would do something like this:', 'questionId': '46898', 'answerId': '46905'}
{'answer': '', 'questionId': '46898', 'answerId': '46908'}
{'answer': "In theory, the most efficient way will depend on which implementation of Map. The official way to do this is to call map.entrySet(), which returns a set of Map.Entry, each of which contains a key and a value (entry.getKey() and entry.getValue()). In an idiosyncratic implementation, it might make some difference whether you use map.keySet(), map.entrySet() or something else. But I can't think of a reason why anyone would write it like that. Most likely it makes no difference to performance what you do. And yes, the order will depend on the implementation - as well as (possibly) the order of insertion and other hard-to-control factors. [edit] I wrote valueSet() originally but of course entrySet() is actually the answer.", 'questionId': '46898', 'answerId': '46912'}
{'answer': "Typical code for iterating over a map is: HashMap is the canonical map implementation and doesn't make guarantees (or though it should not change order if no mutating operation are performed on it). SortedMap will return entries based on the natural ordering of the keys, or a Comparator, if provided. LinkedHashMap will either return entries in insertion-order or access-order depending upon how it has been constructed. EnumMap returns entries in natural order of keys. Note, IdentityHashMap entrySet iterator currently has a peculiar implementation which returns the same Map.Entry instance for every item in the entrySet! However, every time a new the iterator advances the Map.Entry is updated.", 'questionId': '46898', 'answerId': '46926'}
{'answer': "This is a two part question: How to iterate over the entries of a Map - @ScArcher2 has answered that perfectly. What is the order of iteration - if you are just using Map, then strictly speaking, there are no ordering guarantees.  So you shouldn't really rely on the ordering given by any implementation.  However, the SortedMap interface extends Map and provides exactly what you are looking for - implementations will aways give a consistent sort order. NavigableMap is another useful extension - this is a SortedMap with additional methods for finding entries by their ordered position in the key set.  So potentially this can remove the need for iterating in the first place - you might be able to find the specific entry you are after using the higherEntry, lowerEntry, ceilingEntry, or floorEntry methods.  The descendingMap method even gives you an explicit method of reversing the traversal order.", 'questionId': '46898', 'answerId': '46989'}
{'answer': "FYI, you can also use map.keySet() and map.values() if you're only interested in keys/values of the map and not the other.", 'questionId': '46898', 'answerId': '47004'}
{'answer': 'The correct way to do this is to use the accepted answer as it is the most efficient. I find the following code looks a bit cleaner.', 'questionId': '46898', 'answerId': '48720'}
{'answer': 'Example of using iterator and generics:', 'questionId': '46898', 'answerId': '1295383'}
{'answer': 'Try this with Java 1.4:', 'questionId': '46898', 'answerId': '2190043'}
{'answer': ' OR', 'questionId': '46898', 'answerId': '10632923'}
{'answer': 'With Eclipse Collections (formerly GS Collections), you would use the forEachKeyValue method on the MapIterable interface, which is inherited by the MutableMap and ImmutableMap interfaces and their implementations. With Java 8 lambda syntax, you can write the code as follows: Note: I am a committer for Eclipse Collections.', 'questionId': '46898', 'answerId': '13943066'}
{'answer': "Yes, as many people agreed this is the best way to iterate over MAP. But there are chances to throw nullpointerexception if map is null.Don't forget to put null .check", 'questionId': '46898', 'answerId': '15556457'}
{'answer': 'You can do it using generics:', 'questionId': '46898', 'answerId': '17404976'}
{'answer': 'In Java 8 you can do it clean and fast using the new lambdas features: The type of k and v will be inferred by the compiler and there is no need to use Map.Entry anymore. Easy-peasy!', 'questionId': '46898', 'answerId': '19491759'}
{'answer': 'If you have a generic untyped Map you can use:', 'questionId': '46898', 'answerId': '20286334'}
{'answer': 'There are the several way to iterate a map please refer the following code  When you iterate a map using iterator Interface you must to go with Entry or entrySet() look like this', 'questionId': '46898', 'answerId': '20903678'}
{'answer': "In Map one can Iteration over keys and/or values and/or both (e.g., entrySet)  depends on one's interested in_ Like: 1.) Iterate through the keys -> keySet() of the map: 2.) Iterate through the values -> values() of the map: 3.) Iterate through the both -> entrySet() of the map: Moreover, there are 3 difference ways to Iterate Through a HashMap. They are as below_", 'questionId': '46898', 'answerId': '21431305'}
{'answer': 'There are several ways to iterate over map. Here is comparison of their performances for a common data set stored in map by storing a million key value pairs in map and will iterate over map. 1) Using entrySet() in for each loop 50 milliseconds 2) Using keySet() in for each loop 76 milliseconds 3) Using entrySet() and iterator 50 milliseconds 4) Using keySet() and iterator 75 milliseconds I have referred this link.', 'questionId': '46898', 'answerId': '21570332'}
{'answer': ' The best way is entrySet() though.', 'questionId': '46898', 'answerId': '22012489'}
{'answer': '', 'questionId': '46898', 'answerId': '22513787'}
{'answer': 'JAVA 8 You can use Lambda Expressions. For more information follow this.', 'questionId': '46898', 'answerId': '25116661'}
{'answer': 'I copied the data of a map to another with this code:', 'questionId': '46898', 'answerId': '25436802'}
{'answer': "It doesn't quite answer the OP's question, but might be useful to others who find this page: If you only need the values and not the keys, you can do this: Ktype, Vtype are pseudocode.", 'questionId': '46898', 'answerId': '27871427'}
{'answer': "Here is a generic; type-safe method which can be called to dump any given Map. Example Here is an example of it's use. Notice that they type of the Map is inferred by the method. Output", 'questionId': '46898', 'answerId': '30215019'}
{'answer': 'This is the easiest way of doing it I believe...', 'questionId': '46898', 'answerId': '30550239'}
{'answer': 'If your reason for iterating trough the Map, is to do an operation on the value and write to a resulting Map. I recommend using the transform-methods in the Google Guava Maps class. After you have added the Maps to your imports, you can use Maps.transformValues and Maps.transformEntries on your maps, like this:', 'questionId': '46898', 'answerId': '32288690'}
{'answer': 'In Java 8 we have got forEach method that accepts a lambda expression. We have also got stream APIs. Consider a map: Iterate over keys: Iterate over values: Iterate over entries (Using forEach and Streams): The advantage with streams is they can be parallelized easily in case we want to. We simply need to use parallelStream() in place of stream() above.', 'questionId': '46898', 'answerId': '32343110'}
{'answer': ' Lambda Expression Java 8 In Java 1.8 (Java 8) this has become lot easier by using forEach method from Aggregate operations(Stream operations) that looks similar to iterators from Iterable Interface.  Just copy paste below statement to your code and rename the HashMap variable from hm to your HashMap variable to print out key-value pair. Below is the sample code that i tried using Lambda Expression. This stuff is so cool. Must try. Also one can use Spliterator for the same. UPDATE Including documentation links to Oracle Docs. For more on Lambda go to this link and must read Aggregate Operations and for Spliterator go to this link.', 'questionId': '46898', 'answerId': '32973406'}
{'answer': 'If you want to iterate through the map in the order that the elements were added, use LinkedHashMap as opposed to just Map. This approach has worked for me in the past: Output:', 'questionId': '46898', 'answerId': '33375492'}
{'answer': 'Summarize other answers and what I known, I found 10 main ways to do this (see below). And I wrote some performance tests (see results below), for example, if we want to find sum of all keys and values of map, we can write : Using iterator and Map.Entry Using foreach and Map.Entry Using forEach from Java 8 Using keySet and foreach Using keySet and iterator Using for and Map.Entry Using Java 8 Stream Api Using Java 8 Stream Api parallel Using IterableMap of Apache Collections Using MutableMap of Eclipse (CS) collections Perfomance tests (mode = AverageTime, system = Win 8.1 64-bit, Intel i7-4790 3.60GHz 3.60GHz, 16 GB) 1) For small map (100 elements),  score 0.308 is the best 2) For map with 10000 elements,  score 37.606 is the best 3) For map with 100000 elements,  score 1184.767 is the best Graphs (perfomance tests depending on map size) Table (perfomance tests depending on map size) All test in github', 'questionId': '46898', 'answerId': '35558955'}
{'answer': '', 'questionId': '46898', 'answerId': '36591840'}
{'answer': 'The ordering will always depend on the specific map implementation. Using Java8 you can use either of these: Or: The result will be the same (same order). The entrySet backed by the map so you are getting the same order. The second one is handy as it allows you to use lambdas, e.g. if you want only to print only Integer objects that are greater than 5: The code below shows iteration through LInkedHashMap and normal HashMap (example). You will see difference in the order: LinkedHashMap (1):  10 (#=10):10, 9 (#=9):9, 8 (#=8):8, 7 (#=7):7, 6 (#=6):6, 5 (#=5):5, 4 (#=4):4, 3 (#=3):3, 2 (#=2):2, 1 (#=1):1, 0 (#=0):0,  LinkedHashMap (2):  10 : 10, 9 : 9, 8 : 8, 7 : 7, 6 : 6, 5 : 5, 4 : 4, 3 : 3, 2 : 2, 1 : 1, 0 : 0,  HashMap (1):  0 (#:0):0, 1 (#:1):1, 2 (#:2):2, 3 (#:3):3, 4 (#:4):4, 5 (#:5):5, 6 (#:6):6, 7 (#:7):7, 8 (#:8):8, 9 (#:9):9, 10 (#:10):10,  HashMap (2):  0 : 0, 1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 : 8, 9 : 9, 10 : 10,', 'questionId': '46898', 'answerId': '40260450'}
{'answer': '', 'questionId': '46898', 'answerId': '43247492'}
{'answer': 'Any dynamic languages, of course -- Python, Ruby, Smalltalk, Javascript, etc.', 'questionId': '47009', 'answerId': '47018'}
{'answer': " but I think thats what I'm asking for..or is it? I frankly don't know what you're asking. Java apparently has the same support for return-type covariance as C#, so if whatever you're looking for is lacking in C#, it's lacking in Java also.", 'questionId': '47009', 'answerId': '47038'}
{'answer': " Basically what I'm asking is what languages support what I'm trying to do here. Does C# let you specify different data types for the get() and set() methods? If not, I would split them into actual Leg get_leg() and set_leg(DogLeg) functions. Otherwise one of two things will happen: 1) overspecification of get_leg() 2) underspecification of set_leg().", 'questionId': '47009', 'answerId': '47053'}
{'answer': 'C++ supports covariant return types.', 'questionId': '47009', 'answerId': '47061'}
{'answer': ' C++ Java REALbasic Eiffel Sather Modula-3', 'questionId': '47009', 'answerId': '47306'}
{'answer': 'Java added support for this in 1.5.  It will not compile in earlier versions.', 'questionId': '47009', 'answerId': '49577'}
{'answer': 'As pointed out by Ivan Hamilton and Mat Noguchi, C++ supports the feature. But note that covariant return types are broken for template classes which inherit from some base in MSVC 7.X through 9.X (and probably 6 also). You get error C2555.', 'questionId': '47009', 'answerId': '70491'}
{'answer': ' See format and its syntax', 'questionId': '47045', 'answerId': '47049'}
{'answer': '@erickson. Strings are immutable types. You cannot modify them, only return new string instances. Because of that, "foo".format() makes little sense, as it would have to be called like The original java authors (and .NET authors), decided that a static method made more sense in this situation, as you are not modifying "foo", but instead calling a format method and passing in an input string. EDIT: Heh, this site can be so amusing sometimes. I got downvoted for mentioning the fact that strings are immutable types. Here is an example of why Format() would be dumb as an instance method. In .NET (and probably in Java), Replace() is an instance method. You can do this: However, nothing happens, because Strings are immutable. Replace tries to return a new string, but it is assigned to nothing. This causes lots of common rookie mistakes like: Again, nothing happens, instead you have to do : Now, if you understand that strings are immutable, that makes perfect sense. If you don\'t, then you are just confused. The proper place for Replace, would be where Format is, as a static method of String: Now there is no question as to whats going on. The real question is, why did the authors of these frameworks decide that one should be an instance method, and the other static? In my opinion, both are more elegantly expressed as static methods, but erickson seems to think both belong as instance methods. Regardless of your opinion, the truth is that you are less prone to make a mistake using the static version, and the code is easier to understand (No Hidden Gotchas). Of course there are some methods that are perfect as instance methods, take String.Length() In this situation, its obvious we are not trying to modify "123", we just inspecting it, and returning its length...This is a perfect candidate for an instance method. My simple rules for Instance Methods on Immutable Objects: If you need to return a new instance of the same type, use a static method. Otherwise, use an instance method.', 'questionId': '47045', 'answerId': '198356'}
{'answer': "Both solutions workto simulate printf, but in a different way. For instance, to convert a value to a hex string, you have the 2 following solutions: with format(), closest to sprintf(): with replace(char oldchar , char newchar), somewhat faster but pretty limited: There is a third solution consisting of just adding the char to ret one by one (char are numbers that add to each other!) such as in: ...but that'd be really ugly.", 'questionId': '47045', 'answerId': '31405706'}
{'answer': 'Write custom appenders for log4j', 'questionId': '47145', 'answerId': '47148'}
{'answer': 'May I suggest that you leverage the existing SyslogAppender?', 'questionId': '47145', 'answerId': '717055'}
{'answer': "For disk space, if you have Java 6, you can use the getTotalSpace and getFreeSpace methods on File. If you're not on Java 6, I believe you can use Apache Commons IO to get some of the way there. I don't know of any cross platform way to get CPU usage or Memory usage I'm afraid.", 'questionId': '47177', 'answerId': '47191'}
{'answer': 'The following supposedly gets you CPU and RAM. See ManagementFactory for more details.', 'questionId': '47177', 'answerId': '47199'}
{'answer': "Along the lines of what I mentioned in this post. I recommend you use the SIGAR API.  I use the SIGAR API in one of my own applications and it is great.  You'll find it is stable, well supported, and full of useful examples.  It is open-source with a GPL 2 Apache 2.0 license.  Check it out.  I have a feeling it will meet your needs. Using Java and the Sigar API you can get Memory, CPU, Disk, Load-Average, Network Interface info and metrics, Process Table information, Route info, etc.", 'questionId': '47177', 'answerId': '47290'}
{'answer': 'A lot of this is already available via JMX.  With Java 5, JMX is built-in and they include a JMX console viewer with the JDK. You can use JMX to monitor manually, or invoke JMX commands from Java if you need this information in your own run-time.', 'questionId': '47177', 'answerId': '48116'}
{'answer': 'The following code is Linux (maybe Unix) only, but it works in a real project.', 'questionId': '47177', 'answerId': '835213'}
{'answer': 'Make a batch file "Pc.bat" as, typeperf -sc 1 "\\mukit\\processor(_Total)\\%% Processor Time" You can use the class MProcess, public class MProcessor { public MProcessor() {     String s;     try {         Process ps = Runtime.getRuntime().exec("Pc.bat");         BufferedReader br = new BufferedReader(new InputStreamReader(ps.getInputStream()));         while((s = br.readLine()) != null) {             System.out.println(s);         }     }     catch( Exception ex ) {         System.out.println(ex.toString());     } } } Then after some string manipulation, you get the CPU use. You can use the same process for other tasks. --Mukit Hasan', 'questionId': '47177', 'answerId': '2841055'}
{'answer': 'Have a look at this very detailled article: http://nadeausoftware.com/articles/2008/03/java_tip_how_get_cpu_and_user_time_benchmarking#UsingaSuninternalclasstogetJVMCPUtime To get the percentage of CPU used, all you need is some simple maths: Note: You must import com.sun.management.OperatingSystemMXBean and not java.lang.management.OperatingSystemMXBean.', 'questionId': '47177', 'answerId': '3095779'}
{'answer': 'In JDK 1.7, you can get system CPU and memory usage via com.sun.management.OperatingSystemMXBean.  This is different than java.lang.management.OperatingSystemMXBean.', 'questionId': '47177', 'answerId': '13034111'}
{'answer': '', 'questionId': '47177', 'answerId': '21772609'}
{'answer': 'This works for me perfectly without any external API, just native Java hidden feature :)', 'questionId': '47177', 'answerId': '27282046'}
{'answer': 'DbUnit will meet your needs. One thing to watch out for is that they have switched to using SLF4J as their logging facade instead of JCL. You can configure SLF4J to forward the logging to JCL but be warned if you are using Maven DbUnit sucks in their Nop log provider by default so you will have to use an exclusion, I blogged about this conflict recently.', 'questionId': '47524', 'answerId': '47534'}
{'answer': "Is it your intent to test the view which generates the deltas, or to test that your code correctly adds, deletes and updates in response to the view? If you want to test the view, you could use a tool like DBUnit to populate your feed and data tables with various data whose delta you've manually calculated.  Then, for each test  you would verify that the view returns a matching set. If you want to test how your code responds to diffs detected by the view, I would try to abstract away database access.  I imagine an java method to which you can pass a result set (or list of POJO/DTO's) and returns a list of parameter Object arrays (again, or POJO's) to be added.  Other methods would parse the diff list for items to be removed and updated.  You could then create a mock result set or pojo's, pass them to your code and verify the correct parameters are returned.  All without touching a database. I think the key is to break your process into parts and test each of those as independently as possible.", 'questionId': '47524', 'answerId': '47540'}
{'answer': 'I use DbUnit, but also I work very hard to not to have to test against the DB. Tests that go against the database should only exist for the purpose of testing the database interface. So I have Mock Db Connections that I can set the data for use in all the rest of my tests.', 'questionId': '47524', 'answerId': '76048'}
{'answer': 'If you are using Maven, one option is to use the sql-maven-plugin. It allows you to run database initialization/population scripts during the maven build cycle.', 'questionId': '47524', 'answerId': '200218'}
{'answer': 'Apart from the already suggested DBUnit, you may want to look into Unitils. It uses DBUnit, but provides more than that (quoting from the site): Automatic maintenance of databases, with support for incremental,   repeatable and post processing scripts Automatically disable constraints and set sequences to a minimum value  Support for Oracle, Hsqldb, MySql, DB2, Postgresql, MsSql and Derby Simplify test database connection setup Simple insertion of test data with DBUnit  * Run tests in a transaction  JPA entity manager creation and injection for hibernate, toplink and *   Hibernate SessionFactory creation and   session  Automatically test the mapping of JPA entities / hibernate mapped   objects with the database', 'questionId': '47524', 'answerId': '252852'}
{'answer': "We converted a home-grown web framework to stripes in about a week. We're using it in production at this time and it's a great framework. The community is extremely helpful, and the framework doesn't get in your way. It can be extended in many places to change the behavior as you see fit. The url binding feature is awesome as well. We implemented a robust security framework using annotations and interceptors. We're using spring for dependency injection and stripes has excellent support for that. I'd definitely use the new 1.5 release if you're going to use it. I'm a huge fan of the framework. I came from a struts background and it's the exact framework I was looking for. The other developers on our team really enjoy using the stripes framework. I just bought the stripes beta book from the pragmatic programmer's site. It's a great resource on Stripes 1.5.", 'questionId': '47555', 'answerId': '47721'}
{'answer': "We use stripes now on all our production sites, and have been for about a year now. It is an awesome product compared to struts, which we used to use before that. Just the fact that there are literally no XML config files and that you can set it all up with a minimal amount of classes and annotations is awesome. In terms of scaling & speed it actually seems to be better than struts, and my guess would be because there are less layers involved. The code you end up with is a lot cleaner as well, because you don't have to go off to seperate XML files to find out where redirects are going. We use it with an EJB3 backend, and the two seem to work really well together, because you can use your EJB POJO inside your actionBean object, without needing a form object like in struts. In our evaluation we considered an alpha version of struts (that supported annotations) and a lot of other frameworks, but stripes won because of it's superior documentation, stability and clean-ness. Couldn't figure out how to leave a comment: so to answer your second question we haven't encountered a single bug in Stripes that I know of. This is quite impressive for an open source framework. I haven't tried the latest version (1.5) yet, but 1.4.x is very stable.", 'questionId': '47555', 'answerId': '58304'}
{'answer': 'I also came from a Struts and JSF background into Stripes.  I went from a large enterprise environment that used mostly struts and JSF on newer projects, to a smaller environment that did all their J2EE in Stripes.   Seems like Stripes gives you what you want in a Web Framework without getting in the way too much.  Not much configuration is necessary, as others have already mentioned.  Very quick development and allows you to focus on presentation etc. instead of hassling with the framework.   If I had to start a fresh new project and I had my say, I would choose either Stripes or JSF.  I might have been scared away from Stripes if I had to make the decision to switch to it, because it kind of looks/feels like a sourceforge basement project instead of a enterprise-grade framework, but it seems to be fairly solid.  We use Stripernate for easy ORM. However, it reminds me of Fruit Stripe gum, which lost its flavor WAY TOO FAST.', 'questionId': '47555', 'answerId': '234768'}
{'answer': 'We have now used Stripes in multiple production projects and so far the experience has been great. Setup time is low and the configuration management issues seem to be fewer. We have webapps running with Stripes/Dojo/Hibernate and others with a mix of Stripes/Spring/JSP/Jquery etc. Adding Stripes to our existing projects was fairly simple thanks to their support for integrating existing Spring configurations. Using Stripes with JSP is fun although sometimes you do feel the need to code in Java and not have to use the JSTL so much.  Note: This is an old question, but given that it pops up pretty fast when you search for Stripes usage, I am adding a response to it.', 'questionId': '47555', 'answerId': '1533261'}
{'answer': 'Stripes is yesterdays technology, if you can pick something a little more modern like GWT.', 'questionId': '47555', 'answerId': '2658230'}
{'answer': 'We\'ve been using Stripes for about 4 years now. Our stack is Stripes/EJB3/JPA. Many use Stripes plus Stripernate as a single, full stack solution. We don\'t because we want our business logic within the EJB tier, so we simply rely on JPA Entities as combined Model and DTO. Stripes does the binding to our Entities/DTO and we shove them back in to the EJB tier for work. For most of our CRUD stuff this is very thing and straightforward, making our 80% use case trivial to work with. Yet we have the flexibility to do whatever we want for the edge cases that always come up with complicate applications. We have a very large base Action Bean which encapsulates the bulk of our CRUD operations that makes call backs in to the individual subclasses specific to the entities and forms. We also have a large internal tag file library to manage our pages, security, navigation, tasks, etc. A simple CRUD edit form is little more than a list of field names, and we get all of the chrome and menus and access controls "for free". The beauty of this is that we get to keep the HTTP request based metaphor that we like and we get to choose the individual parts of the system rather than use one fat stack. The Stripes layer is lean and mean, and never gets in our way. We have a bunch of Ajax integrating YUI and JQuery, all working against our Stripes and EJB stack painlessly. I also ported a lighter version of the stack to GAE for a sample project, basically having to do minor work to our EJB tier. So, the entire stack is very nimble and amicable to change. Stripes is a big factor of that since we let it do the few things that it does, and does very well. Then delegate the rest to other parts of the stack. As always there are parts folks would rather have different at times, but Stripes would be the last part to go in our stack, frankly. It could be better at supporting the full HTTP verb set, but I\'d rather fix Stripes to do that better than switch over to something else.', 'questionId': '47555', 'answerId': '5212707'}
{'answer': "The + operator can work between a string and a string, char, integer, double or float data type value. It just converts the value to its string representation before concatenation. The concat operator can only be done on and with strings. It checks for data type compatibility and throws an error, if they don't match. Except this, the code you provided does the same stuff.", 'questionId': '47605', 'answerId': '47615'}
{'answer': "I don't think so. a.concat(b) is implemented in String and I think the implementation didn't change much since early java machines. The + operation implementation depends on java version and compiler. Currently + is implemented using StringBuffer to make the operation as fast as possible. Maybe in future this will change. In earlier versions of java + operation on Strings was much slower as it produced intermediate results. I guess that += is implemented using + and similarly optimized.", 'questionId': '47605', 'answerId': '47624'}
{'answer': "Niyaz is correct, but it's also worth noting that the special + operator can be converted into something more efficient by the Java compiler.  Java has a StringBuilder class which represents a non-thread-safe, mutable String.  When performing a bunch of String concatenations, the Java compiler silently converts into which for large strings is significantly more efficient.  As far as I know, this does not happen when you use the concat method. However, the concat method is more efficient when concatenating an empty String onto an existing String.  In this case, the JVM does not need to create a new String object and can simply return the existing one.  See the concat documentation to confirm this. So if you're super-concerned about efficiency then you should use the concat method when concatenating possibly-empty Strings, and use + otherwise.  However, the performance difference should be negligible and you probably shouldn't ever worry about this.", 'questionId': '47605', 'answerId': '47626'}
{'answer': "No, not quite. Firstly, there's a slight difference in semantics. If a is null, then a.concat(b) throws a NullPointerException but a+=b will treat the original value of a as if it were null. Furthermore, the concat() method only accepts String values while the + operator will silently convert the argument to a String (using the toString() method for objects). So the concat() method is more strict in what it accepts. To look under the hood, write a simple class with a += b; Now disassemble with javap -c (included in the Sun JDK). You should see a listing including: So, a += b is the equivalent of The concat method should be faster. However, with more strings the StringBuilder method wins, at least in terms of performance. The source code of String and StringBuilder (and its package-private base class) is available in src.zip of the Sun JDK. You can see that you are building up a char array (resizing as necessary) and then throwing it away when you create the final String. In practice memory allocation is surprisingly fast.", 'questionId': '47605', 'answerId': '47628'}
{'answer': 'How about some simple testing? Used the code below: The "a + b" version executed in 2500ms. The a.concat(b) executed in 1200ms. Tested several times. The concat() version execution took half of the time on average. This result surprised me because the concat() method always creates a new string (it returns a "new String(result)". It\'s well known that: Why wasn\'t the compiler capable of optimize the string creation in "a + b" code, knowing the it always resulted in the same string? It could avoid a new string creation. If you don\'t believe the statement above, test for your self.', 'questionId': '47605', 'answerId': '47694'}
{'answer': "Tom is correct in describing exactly what the + operator does.  It creates a temporary StringBuilder, appends the parts, and finishes with toString(). However, all of the answers so far are ignoring the effects of HotSpot runtime optimizations.  Specifically, these temporary operations are recognized as a common pattern and are replaced with more efficient machine code at run-time. @marcio: You've created a micro-benchmark; with modern JVM's this is not a valid way to profile code. The reason run-time optimization matters is that many of these differences in code -- even including object-creation -- are completely different once HotSpot gets going.  The only way to know for sure is profiling your code in situ. Finally, all of these methods are in fact incredibly fast.  This might be a case of premature optimization.  If you have code that concatenates strings a lot, the way to get maximum speed probably has nothing to do with which operators you choose and instead the algorithm you're using!", 'questionId': '47605', 'answerId': '47716'}
{'answer': "I ran a similar test as @marcio but with the following loop instead: Just for good measure, I threw in StringBuilder.append() as well.  Each test was run 10 times, with 100k reps for each run.  Here are the results: StringBuilder wins hands down.  The clock time result was 0 for most the runs, and the longest took 16ms. a += b takes about 40000ms (40s) for each run. concat only requires 10000ms (10s) per run. I haven't decompiled the class to see the internals or run it through profiler yet, but I suspect a += b spends much of the time creating new objects of StringBuilder and then converting them back to String.", 'questionId': '47605', 'answerId': '47758'}
{'answer': 'Basically, there are two important differences between + and the concat method. If you are using the concat method then you would only be able to concatenate strings while in case of the + operator, you can also concatenate the string with any data type. For Example: In this case, the output should be 10Hello. In the above case you have to provide two strings mandatory. The second and main difference between + and concat is that: Case 1: Suppose I concat the same strings with concat operator in this way In this case total number of objects created in the pool are 7 like this: Case 2: Now I am going to concatinate the same strings via + operator In the above case total number of objects created are only 5. Actually when we concatinate the strings via + operator then it maintains a StringBuffer class to perform the same task as follows:- In this way it will create only five objects. So guys these are the basic differences between + and the concat method. Enjoy :)', 'questionId': '47605', 'answerId': '25378169'}
{'answer': "When using +, the speed decreases as the string's length increases, but when using concat, the speed is more stable, and the best option is using the StringBuilder class which has stable speed in order to do that. I guess you can understand why. But the totally best way for creating long strings is using StringBuilder() and append(), either speed will be unacceptable.", 'questionId': '47605', 'answerId': '28428596'}
{'answer': "For the sake of completeness, I wanted to add that the definition of the '+' operator can be found in the JLS SE8 15.18.1: If only one operand expression is of type String, then string   conversion (5.1.11) is performed on the other operand to produce a   string at run time. The result of string concatenation is a reference to a String object   that is the concatenation of the two operand strings. The characters   of the left-hand operand precede the characters of the right-hand   operand in the newly created string. The String object is newly created (12.5) unless the expression is a   constant expression (15.28). About the implementation the JLS says the following: An implementation may choose to perform conversion and concatenation   in one step to avoid creating and then discarding an intermediate   String object. To increase the performance of repeated string   concatenation, a Java compiler may use the StringBuffer class or a   similar technique to reduce the number of intermediate String objects   that are created by evaluation of an expression. For primitive types, an implementation may also optimize away the   creation of a wrapper object by converting directly from a primitive   type to a string. So judging from the 'a Java compiler may use the StringBuffer class or a similar technique to reduce', different compilers could produce different byte-code.", 'questionId': '47605', 'answerId': '43030370'}
{'answer': "How about an evironment variable? Set developers machines with the tomcat name and production with the Weblogic name. You can even set your code to use a default one (WebLogic) in case the variable don't exist.", 'questionId': '47676', 'answerId': '48172'}
{'answer': 'My application also had a similar problem and this is how I solved it: 1) WEB-INF/classes/application.properties contains the entry: 2) On the WLS machine, I have an entry in the /etc/sysenv file: 3) I configured spring to lookup the JNDI vis the property ${ds.jndi}, using a PropertyPlaceholderConfigurer bean with classpath:application.properties and file:/etc/sysenv as locations. I also set the ignoreResourceNotFound to true so that developers need not have /etc/sysenv on their machines. 4) I run an integration test using Cargo+Jetty and I could not properly set up a JNDI environment there. So I have a fallback BasicDataSource configured too using the defaultObject property of JndiObjectFactoryBean.', 'questionId': '47676', 'answerId': '50552'}
{'answer': 'JndiLocatorSupport has a property resourceRef. When setting this true, "java:comp/env/" prefix will be prepended automatically. So I believe it would be correct to differentiate this parameter when moving from Tomcat to Weblogic.', 'questionId': '47676', 'answerId': '444367'}
{'answer': 'How are you referencing the resource in spring? This is what we have for tomcat: context: spring: The jee namespace comes from: http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd', 'questionId': '47676', 'answerId': '444553'}
{'answer': "I've managed the trick with Tomcat and WebLogic using Spring.  Here is a description of how it worked for me.", 'questionId': '47676', 'answerId': '1017300'}
{'answer': "How to use a single JNDI name in your web app I've struggled with this for a few months myself. The best solution is to make your application portable so you have the same JNDI name in both Tomcat and Weblogic. In order to do that, you change your web.xml and spring-beans.xml to point to a single jndi name, and provide a mapping to each vendor specific jndi name. I've placed each file below. You need: A <resource-ref /> entry in web.xml for your app to use a single name A file WEB-INF/weblogic.xml to map your jndi name to the resource managed by WebLogic A file META-INF/context.xml to map your jndi name to the resource managed by Tomcat This can be either in the Tomcat installation or in your app. As a general rule, prefer to have your jndi names in your app like jdbc/MyDataSource and jms/ConnFactory and avoid prefixing them with java:comp/env/. Also, data sources and connection factories are best managed by the container and used with JNDI. It's a common mistake to instantiate database connection pools in your application. spring web.xml weblogic.xml META-INF/context.xml (for Tomcat)", 'questionId': '47676', 'answerId': '4270169'}
{'answer': 'Setting up DataSource in the application itself is not that crazy :) I would say that is even mandatory if application is meant to be deployed on a grid. River, GigaSpaces, or similar.  Note: I do not say connection settings have to be hardcoded inside of WAR, they need to be supplied at deployment time/runtime. This simplifies management of cloud instances since there is only on place to configure. Configuring resources at the container makes sense only if multiple applications are deployed there and they can use shared resource.  Again, in cloud type of deployments there is only one application per servlet container instance.', 'questionId': '47676', 'answerId': '4820808'}
{'answer': "The following config works in Tomcat and Weblogic for me. In Spring: In Weblogic Admin Console create a JDBC resource named jdbc/AgriShare. Under 'Targets', MAKE SURE YOU TARGET THE DATASOURCE TO THE SERVER YOU ARE DEPLOYING YOUR APP TO!. This particular point cost me some time just now...", 'questionId': '47676', 'answerId': '7001749'}
{'answer': 'You should implement in your client code javax.jms.ExceptionListener.  You will need a method called onException.  When the client\'s connection is lost, you should get a JMSException, and this method will be called automatically.  The only thing you have to look out for is if you are intentionally disconnecting from JBossMQ-- that will also throw an exception. Some code might look like this: In your "establishConnection" code, you would then implement a while(!initialized) construct that contains a try/catch inside of it.  Until you are sure you have connected and subscribed properly, stay inside the while loop catching all JMS/Naming/etc. exceptions. We\'ve used this method for years with JBossMQ and it works great. We have never had a problem with our JMS clients not reconnecting after bouncing JBossMQ or losing our network connection.', 'questionId': '47683', 'answerId': '47963'}
{'answer': "I'd highly recommend you use the Spring abstractions for JMS such as the MessageListenerContainer to deal with reconnection, transactions and pooling for you. You just need to supply a MessageListener and configure the MessageListenerContainer with the ConnectionFactory and the container does the rest.", 'questionId': '47683', 'answerId': '72859'}
{'answer': 'If you\'re purely a listener and do no other JMS calls other than connection setup, then the "onException() handler" answer is correct. If you do any JMS calls in your code, just using onException() callback isn\'t sufficient.  Problems are relayed from the JMS provider to the app either via an exception on a JMS method call or through the onException() callback.  Not both. So if you call any JMS methods from your code, you\'ll also want to invoke that reconnection logic if you get any exceptions on those calls.', 'questionId': '47683', 'answerId': '117503'}
{'answer': "Piece of advice from personal experience.  Upgrade to JBoss Messaging.  I've seen it in production for 4 months without problems.  It has fully transparent failover - amongst many other features. Also, if you do go with Spring, be very careful with the JmsTemplate.", 'questionId': '47683', 'answerId': '118477'}
{'answer': 'The examples you provided are reason enough to not use flow-control from finally. Even if there\'s a contrived example where it\'s "better," consider the developer who has to maintain your code later and who might not be aware of the subtleties.  That poor developer might even be you....', 'questionId': '48088', 'answerId': '48096'}
{'answer': 'Adding control structures and returns to finally{} blocks are just another example of "just because you can" abuses which are scattered throughout virtually all development languages.  Jason was right in suggesting it could easily become a maintenance nightmare - the arguments against early returns from functions apply more-so to this case of "late returns". Finally blocks exist for one purpose, to allow you to completely tidy up after yourself, no matter what happened in all the preceeding code. Principally this is closing / releasing file pointers, database connections etc., though I could see it being stretched to say adding in bespoke auditing. Anything that affects the return of the function should lie in the try{} block.  Even if you had a method whereby you checked an external state, did a time consuming operation, then checked that state again in case it became invalid, you would still want the second check inside the try{} - if it sat inside finally{} and the long operation failed, you would then be checking that state a second time needlessly.', 'questionId': '48088', 'answerId': '48106'}
{'answer': 'javac will warn of return in finally if you use the -Xlint:finally. Originally javac emitted no warnings - if something is wrong with the code, it should fail to compile. Unfortunately backwards compatibility means that unanticipated ingenious foolishness cannot be prohibited. Exceptions can be thrown from finally blocks, but in that case the exhibited behaviour is almost certainly what you want.', 'questionId': '48088', 'answerId': '48444'}
{'answer': "I had a REALLY hard time to track down a bug years ago that was caused by this. The code was something like: What happened is that the exception was thrown down in some other code. It was being caught and logged and rethrown within the somethingThatThrewAnException() method. But the exception wasn't being propagated up past problemMethod(). After a LONG time of looking at this we finally tracked it down to the return method. The return method in the finally block was basically stopping the exception that happened in the try block from propagating up even though it wasn't caught. Like others have said, while it is legal to return from a finally block according to the Java spec, it is a BAD thing and shouldn't be done.", 'questionId': '48088', 'answerId': '48740'}
{'answer': 'A simple Groovy Test: Output: Question: One interesting point for me was to see how Groovy deals with implicit returns. In Groovy it is possible to "return" from a method simply leaving a value at the end (without return). What do you think happens, if you uncomment the runningThreads.remove(..) line in the finally statement - will this overwrite the regular return value ("OK") and cover the exception?!', 'questionId': '48088', 'answerId': '5196685'}
{'answer': "I think you just answered your own question: platform independence. Platform-independent bytecode is produced and distributed to its target platform. When executed it's quickly compiled to native code either before execution begins, or simultaneously (Just In Time). The Java JVM and presumably the .NET runtimes operate on this principle.", 'questionId': '48144', 'answerId': '48147'}
{'answer': 'Bytecode creates an extra level of indirection. The advantages of this extra level of indirection are: Platform independence Can create any number of programming languages (syntax) and have them compile down to the same bytecode. Could easily create cross language converters x86, x64, and IA64 no longer need to be compiled as seperate binaries. Only the proper virtual machine needs to be installed. Each OS simply needs to create a virtual machine and it will have support for the same program. Just in time compilation allows you to update a program just by replacing a single patched source file.  (Very beneficial for web pages) Some of the disadvantages: Performance Easier to decompile', 'questionId': '48144', 'answerId': '48151'}
{'answer': 'Hank Shiffman from SGI said (a long time ago, but it\'s till true): There are three advantages of Java   using byte code instead of going to   the native code of the system: Portability: Each kind of computer has its unique instruction   set. While some processors include the   instructions for their predecessors,   it\'s generally true that a program   that runs on one kind of computer   won\'t run on any other. Add in the   services provided by the operating   system, which each system describes in   its own unique way, and you have a   compatibility problem. In general, you   can\'t write and compile a program for   one kind of system and run it on any   other without a lot of work. Java gets   around this limitation by inserting   its virtual machine between the   application and the real environment   (computer + operating system). If an   application is compiled to Java byte   code and that byte code is interpreted   the same way in every environment then   you can write a single program which   will work on all the different   platforms where Java is supported.   (That\'s the theory, anyway. In   practice there are always small   incompatibilities lying in wait for   the programmer.) Security: One of Java\'s virtues is its integration into the Web. Load   a web page that uses Java into your   browser and the Java code is   automatically downloaded and executed.   But what if the code destroys files,   whether through malice or sloppiness   on the programmer\'s part? Java   prevents downloaded applets from doing   anything destructive by disallowing   potentially dangerous operations.   Before it allows the code to run it   examines it for attempts to bypass   security. It verifies that data is   used consistently: code that   manipulates a data item as an integer   at one stage and then tries to use it   as a pointer later will be caught and   prevented from executing. (The Java   language doesn\'t allow pointer   arithmetic, so you can\'t write Java   code to do what we just described.   However, there is nothing to prevent   someone from writing destructive byte   code themselves using a hexadecimal   editor or even building a Java byte   code assembler.) It generally isn\'t   possible to analyze a program\'s   machine code before execution and   determine whether it does anything   bad. Tricks like writing   self-modifying code mean that the evil   operations may not even exist until   later. But Java byte code was designed   for this kind of validation: it   doesn\'t have the instructions a   malicious programmer would use to hide   their assault. Size: In the microprocessor world RISC is generally preferable   over CISC. It\'s better to have a small   instruction set and use many fast   instructions to do a job than to have   many complex operations implemented as   single instructions. RISC designs   require fewer gates on the chip to   implement their instructions, allowing   for more room for pipelines and other   techniques to make each instruction   faster. In an interpreter, however,   none of this matters. If you want to   implement a single instruction for the   switch statement with a variable   length depending on the number of case   clauses, there\'s no reason not to do   so. In fact, a complex instruction set   is an advantage for a web-based   language: it means that the same   program will be smaller (fewer   instructions of greater complexity),   which means less time to transfer   across our speed-limited network. So when considering byte code vs native, consider which trade-offs you want to make between portability, security, size, and execution speed. If speed is the only important factor, go native. If any of the others are more important, go with bytecode. I\'ll also add that maintaining a series of OS and architecture-targeted compilations of the same code base for every release can become very tedious. It\'s a huge win to use the same Java bytecode on multiple platforms and have it "just work."', 'questionId': '48144', 'answerId': '48153'}
{'answer': "Ideally you would have portable bytecode that compiles Just In Time to native code.  I think the reason bytecode interpreters exist without JIT is due primarily to the practical fact that native code compilation adds complexity to a virtual machine.  It takes time to build, debug, and maintain that additional component.  Not everyone has the time or resources to make that commitment. A secondary factor is safety.  It's much easier to verify an interpreter won't crash than to guarantee the same for native code. Third is performance.  It can often take more time to generate machine code than to interpret bytecode for small pieces of code that only run once.", 'questionId': '48144', 'answerId': '48156'}
{'answer': 'The performance of essentially any program will improve if it is compiled, executed with profiling, and the results fed back into the compiler for a second pass. The code paths which are actually used will be more aggressively optimized, loops unrolled to exactly the right degree, and the hot instruction paths arranged to maximize I$ hits. All good stuff, yet it is almost never done because it is annoying to go through so many steps to build a binary. This is the advantage of running the bytecode for a while before compiling it to native code: profiling information is automatically available. The result after Just-In-Time compilation is highly optimized native code for the specific data the program is processing. Being able to run the bytecode also enables more aggressive native optimization than a static compiler could safely use. For example if one of the arguments to a function is noted to always be NULL, all handling for that argument can simply be omitted from the native code. There will be a brief validity check of the arguments in the function prologue, if that argument is not NULL the VM aborts back to the bytecode and starts profiling again.', 'questionId': '48144', 'answerId': '48159'}
{'answer': 'Here: http://slashdot.org/developers/02/01/31/013247.shtml Go see what the geeks of Slashdot have to say about it! Little dated, but very good comments!', 'questionId': '48144', 'answerId': '48160'}
{'answer': 'All good answers, but my hot-button has been hit - performance. If the code being run spends all its time calling library/system routines - file operations, database operations, sending windows messages, then it doesn\'t matter very much if it\'s JITted, because most of the clock time is spent waiting for those lower-level operations to complete. However, if the code contains things we usually call "algorithms", that have to be fast and don\'t spend much time calling functions, and if those are used often enough to be a performance problem, then JIT is very important.', 'questionId': '48144', 'answerId': '418221'}
{'answer': 'Portability and platform independence are probably the most notable advantages of bytecode over native code.', 'questionId': '48144', 'answerId': '16200636'}
{'answer': "Are you sure that JMF is right for you?  Unfortunately, it is not in particularly good shape.  Unless you are already committed to JMF, you very well may want to investigate alternatives. Wikipedia has a decent overview at en.wikipedia.org/wiki/Java_Media_Framework Many JMF developers have complained that it supports few codecs and formats in modern use. Its all-Java version, for example, cannot play MPEG-2, MPEG-4, Windows Media, RealMedia, most QuickTime movies, Flash content newer than Flash 2, and needs a plug-in to play the ubiquitous MP3 format.  While the performance packs offer the ability to use the native platform's media library, they're only offered for Linux, Solaris and Windows. Furthermore, Windows-based JMF developers can unwittingly think JMF provides support for more formats than it does, and be surprised when their application is unable to play those formats on other platforms. Another knock against JMF is Sun's seeming abandonment of it. The API has not been touched since 1999, and the last news item on JMF's home page was posted in November 2004. While JMF is built for extensibility, there are few such third-party extensions. Furthermore, editing functionality in JMF is effectively non-existent, which makes a wide range of potential applications impractical.", 'questionId': '48179', 'answerId': '48210'}
{'answer': "There seems to be a few examples out there that are far better than what I was going to send you. See http://krishnabhargav.blogspot.com/2008/02/processing-videos-in-java.html. I'd agree with Stu, however. If you can find a way to get what you want using some command-line tools (and run them using Commons-Exec), you might have a better overall solution than depending on what is essentially the Sanskrit of Java extensions.", 'questionId': '48179', 'answerId': '48404'}
{'answer': "@marcio - My own server-side app shells out to FFmpeg to do encoding.  I'm 98.42% sure FFmpeg does snapshots, too.  (It is an all singing, all dancing beast of a program.  The command line options alone could fill a book.) Check it out: ffmpeg.mplayerhq.hu", 'questionId': '48179', 'answerId': '50013'}
{'answer': "Well, since you're not stuck with JMF, have you considered Xuggler?  Xuggler is a Java API that uses FFmpeg under the covers to do all video decoding and encoding. It's free and LGPL licensed. In fact, we have a tutorial that shows How to Make Thumbnails of an Existing File", 'questionId': '48179', 'answerId': '1756478'}
{'answer': 'I tried Xuggler and JCodec; Both can generate the frame snapshot; However, they cannot extract the orientation of the video properly (portrait video became landscape image); Anyone could help about this?? JCodec: http://jcodec.org/  Xuggler: http://www.javacodegeeks.com/2011/02/xuggler-tutorial-frames-capture-video.html', 'questionId': '48179', 'answerId': '29669598'}
{'answer': 'The distro which is most developer friendly, in my opinion, is Gentoo. Since you compile everything from scratch, you choose exactly what makes up your system. Java can be installed very easily, so you could potentially just have a window environment and Java installed (aside from the standard tool chain.)', 'questionId': '48203', 'answerId': '48213'}
{'answer': 'A real Sun geek would chime in here about the virtues of using Solaris as a Java development platform, but I am much more ambivalent. Developing with Java is about the same on any linux distro; you are going to wind up having to install the JDK and tools of your choosing (Eclipse, Sun Studio, Tomcat, etc) so you may as well choose a distro on other criteria... perhaps how comfortable you are with it, how easy package management is, and if the look & feel suit your development habits are all big factors. So, to answer your question more directly, a Java developer would do well with any major linux distro that they are comfortable with using in general. If you want some Java goodness out of the box, Fedora 9 and Ubuntu 8.04 have OpenJDK (and NetBeans) according to a recent announcement.', 'questionId': '48203', 'answerId': '48217'}
{'answer': "Solaris :) On a serious note, there is no Linux distro dedicated to Java, so it would be about the same.  OpenSolaris on the other hand (in my very humble experience) would be a bit faster, and you would have bonus of Dtrace as a tool. (Not that you can't find similar tools in Linux, but Dtrace should be somewhat more advanced).", 'questionId': '48203', 'answerId': '48241'}
{'answer': 'I am very heavy into Java development and I personally use Ubuntu, so I agree with Sean on this one.  The package manager allows you to easily install the various SDKs (the SUN one, or even the upcoming OpenJDK 7). Regards, Arjen', 'questionId': '48203', 'answerId': '48258'}
{'answer': 'I have used Ubuntu 8.04 and Fedora 9 with success.    For Ubuntu, the community forums were very helpful and if I remember correctly one of the repositories provided apt packages for Sun\'s Java6 distribution.   On Fedora 9, the Sun rpms work alright. In either case, alternative/galternative is your friend to make sure that you point "java" and "javac" at the Sun install.  I\'ve been using Netbeans 6.1 and Eclipse 3.4 both on Fedora 9_x64 with no problems.', 'questionId': '48203', 'answerId': '48846'}
{'answer': 'While not really a distribution, there is a virtual machine available for Tomcat.  It could be adapted pretty easily for other Java based deployments (available for several virtualization technologies).   There are also several Java App Server VMs available from VMWare (VMWare only, of course).', 'questionId': '48203', 'answerId': '49048'}
{'answer': 'I had a pleasant experience with Mandriva power pack 2008. Select something like development->"java tools" and everything is installed for you. Everything being Sun JRE, JDK, and eclispe. Solaris did install a 64bit kernel by default though.....', 'questionId': '48203', 'answerId': '50870'}
{'answer': 'Either SUSE or RH, both have official support.  http://www.java.com/en/download/help/5000010500.xml', 'questionId': '48203', 'answerId': '698058'}
{'answer': 'Dont listen to any of these noobs suggesting one distro over another.  Java is Java and just about all distros can install java as such: If the question was about creating RPM\'s, then obviously RH/CentOS/Fedora would be desirable over deb distros, source distros, or whatever other format you love.  However, due to the nature of Java, a specific distro to use is only relevant if the OP cant formulate their own opinion and must follow whatever other people are doing. To reiterate There is no java distro , use whatever will have you hit the ground running.   ... that being said ... I personally use Archlinux.  Archlinux works on rolling releases so it is more likely to have a more recent JDK version then the "sudo apt-get dist-upgrade && sleep 6 months" distros of the world. Also, I am fully prepared to get downvoted, but please, leave me above 50 so i can comment still, thanks!', 'questionId': '48203', 'answerId': '698093'}
{'answer': 'Just be careful with your distro\'s java installation. Most install gcj by default. For whatever reason, typing "java" into bash on most linux distros will not invoke a Sun JVM without some futzing.  Usually, there needs to be a bunch of soft-linking from /usr/local/bin -> $JDK_HOME/bin/* to get things working as I typically expect them.', 'questionId': '48203', 'answerId': '700133'}
{'answer': 'For a start: most -if not all- linux distribution allow you to "easily" install (that is: using the distribution\'s package manager) jdk\'s and jre\'s. The choice essentialy is more about what aspect of the distribution is most relevant to your personal taste. Personnaly, I\'ve come to value overall distribution stability (as in: upgrades to the base system are more or less guaranteed-not-to-hose-my-workstation-one-day-before-delivery-date) more, which made me stick with debian for the past few years. The price to pay for that is either "sudo apt-get dist-upgrade && sleep 6 months" as theman_on_vista points out, or just install relevant stuff yourself in /opt. After all, installing some jdk\'s, maven or ant and eclipse|netbeans is easy enough (hell, there even is documentation somewhere I\'m sure :) )', 'questionId': '48203', 'answerId': '700396'}
{'answer': 'I have never heard of a Java-developer-specific Linux distro. If you need a Linux distro for work purposes (not for personal home use) then the choice of distro is not really affected by the fact that you need to install a JDK, but other factors:  how quickly can it be installed? how easy is it to maintain (updates etc)? how fully-featured is it out-of-the-box? how well supported is it? (commercial support if you need it, otherwise how good is community support?) My suggestions for work-purposes: Ubuntu and Suse have been good for me.  I have no experience with the others mentioned (eg: Fedora). Basically, get a distro that "just plain works".  Everything you need (JDK, IDE, etc) will almost certainly be easily installed from there.', 'questionId': '48203', 'answerId': '702744'}
{'answer': 'Latest Ubuntu version. It is easy enough and have packaged Sun Java, Eclipse, NetBeans, GlassFish, TomCat and other Java development related software so you have no worries installing and configuring it from scratch.', 'questionId': '48203', 'answerId': '715420'}
{'answer': 'You can choose any of the distro available bcoz dere is no linux distro specifically for java development. Personally I have worked on RHEL 5, Fedora 9, Mandriva with considerable success.  Working on java is same on any linux distribution after the installation of jdk, tomcat, eclipse, etc.', 'questionId': '48203', 'answerId': '715518'}
{'answer': 'As Nick Stinemates mentioned, Gentoo is an excellent distro for developing Java.  It is one of the few Distros that I know of that has a very active Java maintainer group and almost everything that people use regularly is already packaged. Be warned, Gentoo is not a drop dead simple distro to use Ubuntu -- you have to understand a bit about how the OS works -- but it does provide an excellent developerment environment.', 'questionId': '48203', 'answerId': '1766808'}
{'answer': 'I think the motive for this question is focused on the convenience of setup: Is there any distro that has Eclipse and the full Sun Java package (JRE, JDK, and DOCS) already "baked in" so that a manual install process (and deinstall of OpenJDK) is not required?  Having an "out-of-the-box" standardized environment for a development team is a huge time saver. If you don\'t already have access to a Java-experienced Linux SysAdmin to guide you through the process of rolling your own automated install, learning enough to do it yourself is definitely frustrating. Few Developers enjoy spending their time wrenching around with OS internals to get tools like Glassfish, Derby, Groovy, Grails, GWT, etc. all working together. They prefer to go directly to writing code and inventing stuff inside a personal sandbox that exploits a pre-existing ecosystem of built-in services... On the deployment side, having a common Linux install that requires no system-level configuration for end-users except for installing their favorite Java applications\' .JAR file would be another big win.  There\'s definitely a market for someone to provide this, but most folks are simply gritting their teeth and doing it for themselves.', 'questionId': '48203', 'answerId': '2800145'}
{'answer': "Oracle JVM from their website is going to have the same speed on debian, archlinux and slackware (and probably their derivatives). Your best bet is to tweak the JVM arguments for the web servers/IDEs you might be using. Remember that java for x64 architectures will consume more memory due to larger native pointers, so you would do well to tweak your heap size accordingly. Especially if you don't want your server to stop with an OutOfMemoryError exception.", 'questionId': '48203', 'answerId': '10275591'}
{'answer': 'You can try Webrenderer or Ice Browser', 'questionId': '48249', 'answerId': '48260'}
{'answer': 'I believe JWebPane is going to be the official way to embed a browser into a java app. Its based on the open sourced engine - WebKit, which is used in Apples Safari and Googles Chrome browsers.See this blog for details.', 'questionId': '48249', 'answerId': '48265'}
{'answer': "You could use SWT for your GUI.  Its Browser control allows you to embed IE, Mozilla or Safari (depending on the platform you're running in) with little pain.", 'questionId': '48249', 'answerId': '49532'}
{'answer': "I have successfully opened a browser from Java using SWT.  You can find code examples of how to use SWT to open a Browser window.  It's very easy to do.", 'questionId': '48249', 'answerId': '694090'}
{'answer': "By far the most robust embeddable browser I am familiar with is the one in SWT. In fact, it is so flexible that the JavaDoc hover you can see in Eclipse is actually a browser, and the JavaDoc view actually supports things like animation! The only risk with using SWT is that there are different versions of the SWT library for different platforms. I'm not sure if there is a singl jar you could include to cover everyone.", 'questionId': '48249', 'answerId': '694101'}
{'answer': "You can embed a browser in a Swing/AWT GUI using the JDIC API. I don't see any mention of OS X, so it may not be of use to you.", 'questionId': '48249', 'answerId': '697862'}
{'answer': 'Take a look at  https://xhtmlrenderer.dev.java.net/', 'questionId': '48249', 'answerId': '700953'}
{'answer': 'You may try this: https://jdic.dev.java.net/ Or this: http://lobobrowser.org/java-browser.jsp alt text http://lobobrowser.org/images/google-news.jpg', 'questionId': '48249', 'answerId': '716294'}
{'answer': 'If you need a pure Java solution then you can try JWebEngine. It render HTML 4 very good. You can use it in an applet, Java webstart and on any platform. The using is very simple.', 'questionId': '48249', 'answerId': '2245764'}
{'answer': "JxBrowser has not been mentionned yet. It embed either Mozilla Firefox (Gecko), Apple Safari (WebKit) or Internet Explorer. Programmer's Guide", 'questionId': '48249', 'answerId': '3137746'}
{'answer': 'You could also try the JWebBrowser from DJ Native Swing: http://djproject.sourceforge.net/ns', 'questionId': '48249', 'answerId': '4810847'}
{'answer': 'Since JavaFX 2.0 you can use now webview', 'questionId': '48249', 'answerId': '8945638'}
{'answer': "You could try a JEditorPane, it doesn't interpret advanced HTML, nor Javascript, nor advanced CSS, but you can write that part yourself, called the EditorKit. That is the class/object that is consulted by the JEditorPane or how it has to display its content. I know its possible, because I tried and failed (:P), but it could be outdated or deprecated by now, I don't know.", 'questionId': '48249', 'answerId': '10381446'}
{'answer': 'If you look at The Minecraft launcher (the old one), look through LoginForm or LauncherFrame, you may be able to find out that method. There is a tutorial by kippykip on youtube on how to decompile and edit it: here', 'questionId': '48249', 'answerId': '17706645'}
{'answer': 'Maybe Chromium Embedded Framework is an option for you. Specific to Java there is javacef for SWT: https://github.com/wjywbs/javacef java-cef for AWT: https://bitbucket.org/chromiumembedded/java-cef', 'questionId': '48249', 'answerId': '41712922'}
{'answer': 'Jeff\'s mechanism was to create some sort of cached object which ASP.Net would automatically recreate at some sort of interval - It seemed to be an ASP.Net specific solution, so probably won\'t help you (or me) much in Java world. See https://stackoverflow.fogbugz.com/default.asp?W13117 Atwood: Well, I originally asked on Twitter, because I just wanted something light weight.  I really didn\'t want to like write a windows service.  I felt like that was out of band code. Plus the code that actually does the work is a web page in fact, because to me that is a logical unit of work on a website is a web page.  So, it really is like we are calling back into the web site, it\'s just like another request in the website, so I viewed it as something that should stay inline, and the little approach that we came up that was recommended to me on Twitter was to essentially to add something to the application cache with a fixed expiration, then you have a call back so when that expires it calls a certain function which does the work then you add it back in to the cache with the same expiration.  So, it\'s a little bit, maybe "ghetto" is the right word. My approach has always been to have to OS (i.e. Cron or the Windows task scheduler) load a specific URL at some interval, and then setup a page at that URL to check it\'s queue, and perform whatever tasks were required, but I\'d be interested to hear if there\'s a better way. From the transcript, it looks like FogBugz uses the windows service loading a URL approach also. Spolsky: So we have this special page called heartbeat.asp.  And that page, whenever you hit it, and anybody can hit it at anytime: doesn\'t hurt.  But when that page runs it checks a queue of waiting tasks to see if there\'s anything that needs to be done.  And if there\'s anything that needs to be done, it does one thing and then looks in that queue again and if there\'s anything else to be done it returns a plus, and the entire web page that it returns is just a single character with a plus in it.  And if there\'s nothing else to be done, the queue is now empty, it returns a minus.  So, anybody can call this and hit it as many times, you can load up heartbeat.asp in your web browser you hit Ctrl-R Ctrl-R Ctrl-R Ctrl-R until you start getting minuses instead of pluses.  And when you\'ve done that FogBugz will have completed all of its maintenance work that it needs to do.  So that\'s the first part, and the second part is a very, very simple Windows service which runs, and its whole job is to call heartbeat.asp and if it gets a plus, call it again soon, and if it gets a minus call it again, but not for a while.  So basically there\'s this Windows service that\'s always running, that has a very, very, very simple task of just hitting a URL, and looking to see if it gets a plus or a minus and, and then scheduling when it runs again based on whether it got a plus or a minus.  And obviously you can do any kind of variation you want on this theme, like for example, uh you could actually, instead of returning just a plus or minus you could say "Okay call me back in 60 seconds" or "Call me back right away I have more work to be done."  And that\'s how it works... so that maintenance service it just runs, you know, it\'s like, you know, a half page of code that runs that maintenance service, and it never has to change, and it doesn\'t have any of the logic in there, it just contains the tickling that causes these web pages to get called with a certain guaranteed frequency.  And inside that web page at heartbeat.asp there\'s code that maintains a queue of tasks that need to be done and looks at how much time has elapsed and does, you know, late-night maintenance and every seven days delete all the older messages that have been marked as spam and all kinds of just maintenance background tasks.  And uh, that\'s how that does that.', 'questionId': '48293', 'answerId': '48297'}
{'answer': 'Here is how they do it on StackOverflow.com: http://blog.stackoverflow.com/2008/07/easy-background-tasks-in-aspnet/', 'questionId': '48293', 'answerId': '48300'}
{'answer': "I think developing a custom solution for running background tasks doesn't always worth, so I recommend to use the Quartz Scheduler in Java. In your situation (need to run background tasks in a web application) you could use the ServletContextListener included in the distribution to initialize the engine at the startup of your web container. After that you have a number of possibilities to start (trigger) your background tasks (jobs), e.g. you can use Calendars or cron-like expressions. In your situation most probably you should settle with SimpleTrigger that lets you run jobs in fixed, regular intervals. The jobs themselves can be described easily too in Quartz, however you haven't provided any details about what you need to run, so I can't provide a suggestion in that area.", 'questionId': '48293', 'answerId': '48332'}
{'answer': "As mentioned, Quartz is one standard solution. If you don't care about clustering or persistence of background tasks across restarts, you can use the built in  ThreadPool support (in Java 5,6). If you use a ScheduledExecutorService you can put Runnables into the background thread pool that wait a specific amount of time before executing.  If you do care about clustering and/or persistence, you can use JMS queues for asynchronous execution, though you will still need some way of delaying background tasks (you can use Quartz or the ScheduledExecutorService to do this).", 'questionId': '48293', 'answerId': '48335'}
{'answer': 'We use jtcron for our scheduled background tasks. It works well, and if you understand cron it should make sense to you.', 'questionId': '48293', 'answerId': '48537'}
{'answer': 'About your first question... List, Map and Set serve different purposes. I suggest reading about the Java Collections Framework at http://java.sun.com/docs/books/tutorial/collections/interfaces/index.html. To be a bit more concrete: use List if you need an array-like data structure and you need to iterate over the elements use Map if you need something like a dictionary use a Set if you only need to decide if something belongs to the set or not. About your second question... The main difference between Vector and ArrayList is that the former is synchronized, the latter is not synchronized. You can read more about synchronization in Java Concurrency in Practice. The difference between Hashtable (note that the T is not a capital letter) and HashMap is similiar, the former is synchronized, the latter is not synchronized. I would say that there are no rule of thumb for preferring one implementation or another, it really depends on your needs.', 'questionId': '48442', 'answerId': '48451'}
{'answer': "I've always made those decisions on a case by case basis, depending on the use case, such as: Do I need the ordering to remain? Will I have null key/values?  Dups? Will it be accessed by multiple threads Do I need a key/value pair Will I need random access? And then I break out my handy 5th edition Java in a Nutshell and compare the ~20 or so options.  It has nice little tables in Chapter five to help one figure out what is appropriate.   Ok, maybe if I know off the cuff that a simple ArrayList or HashSet will do the trick I won't look it all up.  ;)  but if there is anything remotely complex about my indended use, you bet I'm in the book.  BTW, I though Vector is supposed to be 'old hat'--I've not used on in years.", 'questionId': '48442', 'answerId': '48452'}
{'answer': "Lists allow duplicate items, while Sets allow only one instance. I'll use a Map whenever I'll need to perform a lookup. For the specific implementations, there are order-preserving variations of Maps and Sets but largely it comes down to speed. I'll tend to use ArrayList for reasonably small Lists and HashSet for reasonably small sets, but there are many implementations (including any that you write yourself). HashMap is pretty common for Maps. Anything more than 'reasonably small' and you have to start worrying about memory so that'll be way more specific algorithmically. This page has lots of animated images along with sample code testing LinkedList vs. ArrayList if you're interested in hard numbers. EDIT: I hope the following links demonstrate how these things are really just items in a toolbox, you just have to think about what your needs are: See Commons-Collections versions of Map, List and Set.", 'questionId': '48442', 'answerId': '48457'}
{'answer': "I'll assume you know the difference between a List, Set and Map from the above answers. Why you would choose between their implementing classes is another thing. For example: List: ArrayList is quick on retrieving, but slow on inserting. It's good for an implementation that reads a lot but doesn't insert/remove a lot. It keeps its data in one continuous block of memory, so every time it needs to expand, it copies the whole array. LinkedList is slow on retrieving, but quick on inserting. It's good for an implementation that inserts/removes a lot but doesn't read a lot. It doesn't keep the entire array in one continuous block of memory. Set: HashSet doesn't guarantee the order of iteration, and therefore is fastest of the sets. It has high overhead and is slower than ArrayList, so you shouldn't use it except for a large amount of data when its hashing speed becomes a factor. TreeSet keeps the data ordered, therefore is slower than HashSet. Map: The performance and behavior of HashMap and TreeMap are parallel to the Set implementations. Vector and Hashtable should not be used. They are synchronized implementations, before the release of the new Collection hierarchy, thus slow. If synchronization is needed, use Collections.synchronizedCollection().", 'questionId': '48442', 'answerId': '48462'}
{'answer': "I found Bruce Eckel's Thinking in Java to be very helpful.  He compares the different collections very well.  I used to keep a diagram he published showing the inheritance heirachy on my cube wall as a quick reference.  One thing I suggest you do is keep in mind thread safety.  Performance usually means not thread safe.", 'questionId': '48442', 'answerId': '48471'}
{'answer': "For non-sorted the best choice, more than nine times out of ten, will be: ArrayList, HashMap, HashSet. Vector and Hashtable are synchronised and therefore might be a bit slower. It's rare that you would want synchronised implementations, and when you do their interfaces are not sufficiently rich for thier synchronisation to be useful. In the case of Map, ConcurrentMap adds extra operations to make the interface useful. ConcurrentHashMap is a good implementation of ConcurrentMap. LinkedList is almost never a good idea. Even if you are doing a lot of insertions and removal, if you are using an index to indicate position then that requires iterating through the list to find the correct node. ArrayList is almost always faster. For Map and Set, the hash variants will be faster than tree/sorted. Hash algortihms tend to have O(1) performance, whereas trees will be O(log n).", 'questionId': '48442', 'answerId': '48520'}
{'answer': 'Theoretically there are useful Big-Oh tradeoffs, but in practice these almost never matter. In real-world benchmarks, ArrayList out-performs LinkedList even with big lists and with operations like "lots of insertions near the front."  Academics ignore the fact that real algorithms have constant factors that can overwhelm the asymptotic curve.  For example, linked-lists require an additional object allocation for every node, meaning slower to create a node and vastly worse memory-access characteristics. My rule is: Always start with ArrayList and HashSet and HashMap  (i.e. not LinkedList or TreeMap). Type declarations should always be an interface (i.e. List, Set, Map) so if a profiler or code review proves otherwise you can change the implementation without breaking anything.', 'questionId': '48442', 'answerId': '48525'}
{'answer': "I really like this cheat sheet from Sergiy Kovalchuk's blog entry: More detailed is Alexander Zagniotov's flowchart from his site.", 'questionId': '48442', 'answerId': '17420706'}
{'answer': 'As suggested in other answers, there are different scenarios to use correct collection depending on use case. I am listing few points, ArrayList: Most cases where you just need to store or iterate through a "bunch of things" and later iterate through them. Iterating is faster as its index based. Whenever you create an ArrayList, a fixed amount of memory is allocated to it and once exceeeded,it copies the whole array LinkedList: It uses doubly linked list so insertion and deletion operation will be fast as it will only add or remove a node. Retrieving is slow as it will have to iterate through the nodes. HashSet: Making other yes-no decisions about an item, e.g. "is the item a word of English", "is the item in the database?" , "is the item in this category?" etc. Remembering "which items you\'ve already processed", e.g. when doing a web crawl; HashMap: Used in cases where you need to say "for a given X, what is the Y"? It is often useful for implementing in-memory caches or indexes i.e key value pairs  For example: For a given user ID, what is their cached name/User object?. Always go with HashMap to perform a lookup. Vector and Hashtable are synchronized and therefore bit slower and  If synchronization is needed, use Collections.synchronizedCollection(). Check This for sorted collections. Hope this hepled.', 'questionId': '48442', 'answerId': '44682154'}
{'answer': "Look at the alternate constructor for DatagramSocket: I'm guessing you're only specifying the port.", 'questionId': '48659', 'answerId': '48678'}
{'answer': "Chris, I'm a little confused about your circumstances. If I understand correctly, you have a both a web app (read/write) a standalone application (read-only?) using Hibernate to access a shared database. The changes you make with the web app aren't visible to the standalone app. Is that right? If so, have you considered using a different second-level cache implementation? I'm wondering if you might be able to use a clustered cache that is shared by both the web application and the standalone application. I believe that SwarmCache, which is integrated with Hibernate, will allow this, but I haven't tried it myself. In general, though, you should know that the contents of a given cache will never be aware of activity by another application (that's why I suggest having both apps share a cache). Good luck!", 'questionId': '48733', 'answerId': '48795'}
{'answer': 'A Hibernate session loads all data it reads from the DB into what they call the first-level cache. Once a row is loaded from the DB, any subsequent fetches for a row with the same PK will return the data from this cache. Furthermore, Hibernate gaurentees reference equality for objects with the same PK in a single Session.  From what I understand, your read-only server application never closes its Hibernate session. So when the DB gets updated by the read-write application, the Session on read-only server is unaware of the change. Effectively, your read-only application is loading an in-memory copy of the database and using that copy, which gets stale in due course. The simplest and best course of action I can suggest is to close and open Sessions as needed. This sidesteps the whole problem. Hibernate Sessions are intended to be a window for a short-lived interaction with the DB. I agree that there is a performance gain by not reloading the object-graph again and again; but you need to measure it and convince yourself that it is worth the pains. Another option is to close and reopen the Session periodically. This ensures that the read-only application works with data not older than a given time interval. But there definitely is a window where the read-only application works with stale data (although the design guarantees that it gets the up-to-date data eventually). This might be permissible in many applications - you need to evaluate your situation.  The third option is to use a second level cache implementation, and use short-lived Sessions. There are various caching packages that work with Hibernate with relative merits and demerits.', 'questionId': '48733', 'answerId': '50509'}
{'answer': 'From my point of view, you should change your underline Hibernate cache to that one, which supports clustered mode. It could be a JBoss Cache or a Swarm Cache. The first one has a better support of data synchronization (replication and invalidation) and also supports JTA. Then you will able to configure cache synchronization between webapp and server. Also look at isolation level if you will use JBoss Cache. I believe you should use READ_COMMITTED mode if you want to get new data on a server from the same session.', 'questionId': '48733', 'answerId': '574534'}
{'answer': "The most used practice is to have a Container-Managed Entity Manager so that two or more applications in the same container (ie Glassfish, Tomcat, Websphere) can share the same caches. But if you don't use an Application container, because you use Play! for instance, then I would build some webservices in the primary Application to read/write consistently in the cache. I think using stale data is an open door for disaster. Just like Singletons become Multitons, read-only applications are often a write sometimes. Belt and braces :)", 'questionId': '48733', 'answerId': '13579352'}
{'answer': 'I am not familiar with Apache CXF, but the following should be applicable to any Java Servlet based framework. In order to determine if a user has disconnected (stop button, closed browser, etc.) the server must attempt to send a packet.  If the TCP/IP connection has been closed, an IOException will be thrown. In theory, a Java application could send a space character at various points during processing.  An IOException would signal that the client has gone away and processing can be aborted. However, there may be a few issues with this technique: Sending characters during processing will cause the response to be "committed", so it may be impossible to set HTTP headers, cookies, etc. based on the result of the long-running serverside processing. If the output stream is buffered, the space characters will not be sent immediately, thereby not performing an adequate test.  It may be possible to use flush() as a workaround. It may be difficult to implement this technique for a given framework or view technology (JSP, etc.)  For example, the page rendering code will not be able to sent the content type after the response has been committed.', 'questionId': '48859', 'answerId': '48882'}
{'answer': 'Yes, use the GNU readline library.', 'questionId': '49075', 'answerId': '49078'}
{'answer': "I think you are looking for something like JLine but I've never used it so cannot attest to its quality. She can apparently deal with autocompletion and command line history, and the last release was recently (feb this year) so it's by no means dead.", 'questionId': '49075', 'answerId': '49144'}
{'answer': "ledit is great on linux for that sort of thing. It's probably easily compiled on solaris.  Clarification: ledit wraps the call to your other command line app, and can even be passed a file to persistently store your history.  Here's the homepage: http://cristal.inria.fr/~ddr/ledit/", 'questionId': '49075', 'answerId': '76992'}
{'answer': "There is a SourceForge project, http://java-readline.sourceforge.net/, that provides JNI-based bindings to GNU readline. I've played around with it (not used in an actual project), and it certainly covers all of the functionality.", 'questionId': '49075', 'answerId': '77676'}
{'answer': 'warning: GNU readline is subject to GPL licensing terms: Readline is free software, distributed   under the terms of the GNU General   Public License, version 2. This means   that if you want to use Readline in a   program that you release or distribute   to anyone, the program must be free   software and have a GPL-compatible   license. If you would like advice on   making your license GPL-compatible,   contact licensing@gnu.org. In other words, use of Readline spreads the GPL-ness from a library to the entire program. (Contrast with LGPL, which allows runtime linking to a library, and requires open-sourcing only for improvements to the library itself.) For those of us in the commercial world, even if we\'re not developing commercial applications, this is a show-stopper.  Anyway, the wikipedia page lists several alternatives, including JLine, which sounds promising. Just as an aside: I work for a company that designs medical products. We make zero (0) dollars off of PC software. Nearly all our software runs on the embedded systems that we design (and we don\'t make any money off sales/upgrades of this software, only the products themselves); sometimes we do have software diagnostic tools that can run on the end-users\' PCs. (design/manufacture/test software that\'s not released to customers I would think might be possible to use GPL libraries but I\'m not sure) Medical products have fairly tight controls; you basically have to prove to the FDA that it\'s safe for users, it\'s not like the end user can decide "oh, I don\'t like this software, I\'ll just tweak it or use company XYZ\'s aftermarket replacement" -- that would leave device manufacturers open to a huge liability.', 'questionId': '49075', 'answerId': '414090'}
{'answer': "Short of just including the js in every page automatically, I do not think so. It really would not be something that tags are designed to to. Without knowing what your tag is actually doing (presumably its its outputting something in the body section) then there is no way that it will be able to get at the head to put the declaration there. One solution that might (in my head) work would be to have an include that copies verbatim what you have in the head after the place in the head to import tags right up to where you want to use the tag. This is really not something that you would want to do. You would have to have multiple 'header' files to import depending on the content and where you want to use the tag. Maintenance nightmare. Just a bad idea all round. Any solution I can think of would require more work than manually just adding in the declaration. I think you are out of luck and stuck with manually putting it in. edit: Just import it in every page. It will be cached and then this problem goes away.", 'questionId': '49156', 'answerId': '49185'}
{'answer': "There is no reason you cannot have  a script tag in the body, even though it is preferable for it to be in the head. Just emit the script tag before you emit your tag's markup. The only thing to consider is that you do not want to include the script more than once if you use the jsp tag on the page more than once. The way to solve that is to remember that you have already included the script, by addng an attribute to the request object.", 'questionId': '49156', 'answerId': '49205'}
{'answer': 'Yes it is, try it out in a test.  You will see "long" printed.  It is widening because Java will choose to widen the int into a long before it chooses to autobox it to an Integer, so the hello(long) method is chosen to be called. Edit: the original post being referenced. Further Edit: The reason the second option would print Integer is because there is no "widening" into a larger primitive as an option, so it MUST box it up, thus Integer is the only option.  Furthermore, java will only autobox to the original type, so it would give a compiler error if you leave the hello(Long) and removed hello(Integer).', 'questionId': '4922', 'answerId': '4932'}
{'answer': 'In the first case, you have a widening conversion happening. This can be see when runinng the "javap" utility program (included w/ the JDK), on the compiled class: Clearly, you see the I2L, which is the mnemonic for the widening Integer-To-Long bytecode instruction. See reference here. And in the other case, replacing the "long x" with the object "Long x" signature, you\'ll have this code in the main method: So you see the compiler has created the instruction Integer.valueOf(int), to box the primitive inside the wrapper.', 'questionId': '4922', 'answerId': '5091'}
{'answer': 'Another interesting thing with this example is the method overloading. The combination of type widening and method overloading only working because the compiler has to make a decision of which method to choose. Consider the following example: It doesn\'t use the run-time type which is List, it uses the compile-time type which is Collection and thus prints "Collection".  I encourage your to read Effective Java, which opened my eyes to some corner cases of the JLS.', 'questionId': '4922', 'answerId': '5164'}
{'answer': 'You need to download and install the unlimited strength JCE policy file for your JDK. For JDK 6, it is on http://java.sun.com/javase/downloads/index.jsp at the very bottom.', 'questionId': '49226', 'answerId': '49230'}
{'answer': "I'm not a crypto expert by any means (so take this suggestion with a grain of salt), but I have used Blowfish before, and I think you can use it for what you need.  There is also a newer algorithm by the same guy called Twofish. Here is a website with a Java implementation, but be careful of the license (it says free for non-commercial use).  You can find that link also from Bruce Schneier's website (the creator of both algorithms).", 'questionId': '49226', 'answerId': '49235'}
{'answer': 'Use Advanced Encryption Standard (AES). It supports Key lengths of 128, 192, or 256 bits. The algorithm is simple. The Sun Java website has a section explaining how to do AES encryption in Java. From Wikipedia... ... the Advanced   Encryption Standard (AES), also known   as Rijndael, is a block cipher adopted   as an encryption standard by the U.S.   government. It has been analyzed   extensively and is now used worldwide,   as was the case with its   predecessor, the Data Encryption   Standard (DES)... So as a rule of thumb you are not supposed to use DES or its variants because it is being phased out. As of now, it is better to use AES. There are other options like Twofish, Blowfish etc also. Note that Twofish can be considered as an advanced version of Blowfish.', 'questionId': '49226', 'answerId': '49256'}
{'answer': 'I have had good success in the past with http://www.bouncycastle.org/ (they have a C# version as well).', 'questionId': '49226', 'answerId': '49262'}
{'answer': 'Combining 3 different replies gives what I think is the correct answer. Download encryption libraries from Bouncycastle then you need to download the "Unlimited Strength Jurisdiction Policy" from Oracle (the files are at the bottom of the download page). Make sure you read the Readme-file on how to install it.  Once you have done this, and using the sample code supplied with the Bountycastle package you should be able to encrypt your data. You can go with a tripple DES implementation, which will give you 112 bits key (often referred to as 128 bit, but only 112 of them are actually secure), or as previously stated, you can use AES. My money would be on AES.', 'questionId': '49226', 'answerId': '49315'}
{'answer': 'Thanks Michael, after trying out many things in JCE, I finally settled for bouncycastle.  JCE supports AES for encryption and PBE for password based encryption but it does not support combination of both. I wanted the same thing and that I found in bouncycastle. The example is at : http://forums.sun.com/thread.jspa?messageID=4164916', 'questionId': '49226', 'answerId': '49367'}
{'answer': "Just using  is not enough. You should do soimething like  to get inner tags rendered (example is for SimpleTag doTag method).  However, in the question's code I see that inner tag is comming from a string which is not rendered as a part of JSP, but just some random string. I do not think you can force JSP translator to parse it. You can use regexp in your case or try to redesign your code in a way to have a jsp like this: I whould go with regexp.", 'questionId': '49267', 'answerId': '49410'}
{'answer': 'I would be inclined to change the "architecture of your tagging" in that the data you wish to achieve should not be by tag on the inside of the class as it is "markup" designed for a page(though in obscurity it is possible to get the evaluating program thread of the JSP Servlet engine). What you would probably find better and more within standard procedure would be using "cooperating tags" with  BodyTagSupport class extension and return EVAL_BODY_BUFFERED in doStartTag() method to repeat process the body and/or object sharing such as storing retrived data in the application hierarchy of the session or on the session for the user. See oracle j2ee custom tags tutorial for more information.', 'questionId': '49267', 'answerId': '6538030'}
{'answer': "No matter what you do, it can be 'decompiled'. Heck, you can just disassemble it. Or look at a memory dump to find your constants. You see, the computer needs to know them, so your code will need to too. What to do about this? Try not to ship the key as a hardcoded constant in your code: Keep it as a per-user setting. Make the user responsible for looking after that key.", 'questionId': '49379', 'answerId': '49385'}
{'answer': "Disclaimer: I am not a security expert. This sounds like a bad idea: You are letting someone encrypt stuff with a 'hidden' key that you give him. I don't think this can be made secure. Maybe asymmetrical keys could work: deploy an encrypted license with a public key to decrypt let the customer create a new license and send it to you for encryption send a new license back to the client. I'm not sure, but I believe the client can actually encrypt the license key with the public key you gave him. You can then decrypt it with your private key and re-encrypt as well. You could keep a separate public/private key pair per customer to make sure you actually are getting stuff from the right customer - now you are responsible for the keys...", 'questionId': '49379', 'answerId': '49397'}
{'answer': "@jatanp: or better yet, they can decompile, remove the licensing code, and recompile.  With Java, I don't really think there is a proper, hack-proof solution to this problem.  Not even an evil little dongle could prevent this with Java. My own biz managers worry about this, and I think too much.  But then again, we sell our application into large corporates who tend to abide by licensing conditions--generally a safe environment thanks to the bean counters and lawyers.  The act of decompiling itself can be illegal if your license is written correctly.  So, I have to ask, do you really need hardened protection like you are seeking for your application?  What does your customer base look like?  (Corporates?  Or the teenage gamer masses, where this would be more of an issue?)", 'questionId': '49379', 'answerId': '49400'}
{'answer': 'As long as they have access to both the encrypted data and the software that decrypts it, there is basically no way you can make this completely secure. Ways this has been solved before is to use some form of external black box to handle encryption/decryption, like dongles, remote authentication servers, etc. But even then, given that the user has full access to their own system, this only makes things difficult, not impossible -unless you can tie your product directly to the functionality stored in the "black box", as, say, online gaming servers.', 'questionId': '49379', 'answerId': '49401'}
{'answer': 'Some of the more advanced Java bytecode obfuscators do much more than just class name mangling. Zelix KlassMaster, for example, can also scramble your code flow in a way that makes it really hard to follow and works as an excellent code optimizer... Also many of the obfuscators are also able to scramble your string constants and remove unused code. Another possible solution (not necessarily excluding the obfuscation) is to use encrypted JAR files and a custom classloader that does the decryption (preferably using native runtime library). Third (and possibly offering the strongest protection) is to use native ahead of time compilers like GCC or Excelsior JET, for example, that compile your Java code directly to a platform specific native binary. In any case You\'ve got to remember that as the saying goes in Estonian "Locks are for animals". Meaning that every bit of code is available (loaded into memory) during the runtime and given enough skill, determination and motivation, people can and will decompile, unscramble and hack your code... Your job is simply to make the process as uncomfortable as you can and still keep the thing working...', 'questionId': '49379', 'answerId': '49428'}
{'answer': 'Take a look at the JavaWorld article Cracking Java byte-code encryption by Vladimir Roubtsov. It explains why encryption of class files is mostly pointless.', 'questionId': '49379', 'answerId': '49451'}
{'answer': "If you're looking for a licensing solution, you can check out the TrueLicense API. It's based on the use of asymmetrical keys. However, it doesn't mean your application cannot be cracked. Every application can be cracked with enough effort. What really important is, as Stu answered, figuring out how strong protection you need.", 'questionId': '49379', 'answerId': '49494'}
{'answer': "I don't think there exists any effective offline antipiracy method. The videogame industry has tried to find that many times and their programs has always been cracked. The only solution is that the program must be run online connected with your servers, so that you can verify the lincense key, and that there is only one active connecion by the licensee at a time. This is how World of Warcraft or Diablo works. Even tough there are private servers developed for them to bypass the security.  Having said that, I don't believe that mid/large corporations use illegal copied software, because the cost of the license for them is minimal (perhaps, I don't know how much you are goig to charge for your program) compared to the cost of a trial version.", 'questionId': '49379', 'answerId': '49651'}
{'answer': "You can use byte-code encryption with no fear.  The fact is that the cited above paper Cracking Java byte-code encryption contains a logic fallacy. The main claim of the paper is before running all classes must be decrypted and passed to the ClassLoader.defineClass(...) method. But this is not true.  The assumption missed here is provided that they are running in authentic, or standard, java run-time environment. Nothing can oblige the protected java app not only to launch these classes but even decrypt and pass them to ClassLoader. In other words, if you are in standard JRE you can't intercept defineClass(...) method because the standard java has no API for this purpose, and if you use modified JRE with patched ClassLoader or any other hacker trick you can't do it because protected java app will not work at all, and therefore you will have nothing to intercept. And absolutely doesn't matter which patch finder is used or which trick is used by hackers. These technical details are a quite different story.", 'questionId': '49379', 'answerId': '9598442'}
{'answer': 'Q: If I encrypt my .class files and use a custom classloader to load and decrypt them on the fly, will this prevent decompilation? A: The problem of preventing Java byte-code decompilation is almost as old the language itself. Despite a range of obfuscation tools available on the market, novice Java programmers continue to think of new and clever ways to protect their intellectual property. In this Java Q&A installment, I dispel some myths around an idea frequently rehashed in discussion forums. The extreme ease with which Java .class files can be reconstructed into Java sources that closely resemble the originals has a lot to do with Java byte-code design goals and trade-offs. Among other things, Java byte code was designed for compactness, platform independence, network mobility, and ease of analysis by byte-code interpreters and JIT (just-in-time)/HotSpot dynamic compilers. Arguably, the compiled .class files express the programmer\'s intent so clearly they could be easier to analyze than the original source code. Several things can be done, if not to prevent decompilation completely, at least to make it more difficult. For example, as a post-compilation step you could massage the .class data to make the byte code either harder to read when decompiled or harder to decompile into valid Java code (or both). Techniques like performing extreme method name overloading work well for the former, and manipulating control flow to create control structures not possible to represent through Java syntax work well for the latter. The more successful commercial obfuscators use a mix of these and other techniques. Unfortunately, both approaches must actually change the code the JVM will run, and many users are afraid (rightfully so) that this transformation may add new bugs to their applications. Furthermore, method and field renaming can cause reflection calls to stop working. Changing actual class and package names can break several other Java APIs (JNDI (Java Naming and Directory Interface), URL providers, etc.). In addition to altered names, if the association between class byte-code offsets and source line numbers is altered, recovering the original exception stack traces could become difficult. Then there is the option of obfuscating the original Java source code. But fundamentally this causes a similar set of problems. Encrypt, not obfuscate? Perhaps the above has made you think, "Well, what if instead of manipulating byte code I encrypt all my classes after compilation and decrypt them on the fly inside the JVM (which can be done with a custom classloader)? Then the JVM executes my original byte code and yet there is nothing to decompile or reverse engineer, right?" Unfortunately, you would be wrong, both in thinking that you were the first to come up with this idea and in thinking that it actually works. And the reason has nothing to do with the strength of your encryption scheme.', 'questionId': '49379', 'answerId': '32651383'}
{'answer': 'It really does not matter if the API/Code is thread safe. CBC encryption in itself is not thread safe.  Some terminology - A really simple CBC implementation can look like: P1, P2, P3 = Plain text messages As you can see, the result of encrypting P1, P2 and P3 (in that order) is different from encrypting P2, P1 and P3 (in that order).  So, in a CBC implementation, order is important. Any algorithm where order is important can not, by definition, be thread safe.  You can make a Singleton factory that delivers encryption objects, but you cant trust them to be thread safe.', 'questionId': '49473', 'answerId': '49498'}
{'answer': 'The J2ME version is not thread safe.', 'questionId': '49473', 'answerId': '4345741'}
{'answer': 'I think this pair of articles by Philip J. Eby does a great job discussing the differences between the two languages (mostly about philosophy/mentality rather than specific language features).  Python is Not Java Java is Not Python, either', 'questionId': '49824', 'answerId': '49828'}
{'answer': 'One key difference in Python is significant whitespace.  This puts a lot of people off - me too for a long time - but once you get going it seems natural and makes much more sense  than ;s everywhere. From a personal perspective, Python has the following benefits over Java: No Checked Exceptions Optional Arguments Much less boilerplate and less verbose generally Other than those, this page on the Python Wiki is a good place to look with lots of links to interesting articles.', 'questionId': '49824', 'answerId': '49837'}
{'answer': "With Jython you can have both. It's only at Python 2.2, but still very useful if you need an embedded interpreter that has access to the Java runtime.", 'questionId': '49824', 'answerId': '49911'}
{'answer': ' List comprehensions.  I often find myself filtering/mapping lists, and being able to say [line.replace("spam","eggs") for line in open("somefile.txt") if line.startswith("nee")] is really nice. Functions are first class objects.  They can be passed as parameters to other functions, defined inside other function, and have lexical scope.  This makes it really easy to say things like people.sort(key=lambda p: p.age) and thus sort a bunch of people on their age without having to define a custom comparator class or something equally verbose. Everything is an object.  Java has basic types which aren\'t objects, which is why many classes in the standard library define 9 different versions of functions (for boolean, byte, char, double, float, int, long, Object, short).  Array.sort is a good example.  Autoboxing helps, although it makes things awkward when something turns out to be null. Properties.  Python lets you create classes with read-only fields, lazily-generated fields, as well as fields which are checked upon assignment to make sure they\'re never 0 or null or whatever you want to guard against, etc.\' Default and keyword arguments.  In Java if you want a constructor that can take up to 5 optional arguments, you must define 6 different versions of that constructor.  And there\'s no way at all to say Student(name="Eli", age=25) Functions can only return 1 thing.  In Python you have tuple assignment, so you can say spam, eggs = nee() but in Java you\'d need to either resort to mutable out parameters or have a custom class with 2 fields and then have two additional lines of code to extract those fields. Built-in syntax for lists and dictionaries. Operator Overloading. Generally better designed libraries.  For example, to parse an XML document in Java, you say Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse("test.xml"); and in Python you say doc = parse("test.xml") Anyway, I could go on and on with further examples, but Python is just overall a much more flexible and expressive language.  It\'s also dynamically typed, which I really like, but which comes with some disadvantages. Java has much better performance than Python and has way better tool support.  Sometimes those things matter a lot and Java is the better language than Python for a task; I continue to use Java for some new projects despite liking Python a lot more.  But as a language I think Python is superior for most things I find myself needing to accomplish.', 'questionId': '49824', 'answerId': '49953'}
{'answer': 'Apart from what Eli Courtwright said: I find iterators in Python more concise. You can use for i in something, and it works with pretty much everything. Yeah, Java has gotten better since 1.5, but for example you can iterate through a string in python with this same construct. Introspection: In python you can get at runtime information about an object or a module about its symbols, methods, or even its docstrings. You can also instantiate them dynamically. Java has some of this, but usually in Java it takes half a page of code to get an instance of a class, whereas in Python it is about 3 lines. And as far as I know the docstrings thing is not available in Java', 'questionId': '49824', 'answerId': '51512'}
{'answer': 'It is generally considered a bad idea to version control your binaries and I do not recommend doing so. But if you absolutely have to, you can use antcall combined with param to pass parameters and call a target. You can find more information about the antcall task here.', 'questionId': '49900', 'answerId': '49920'}
{'answer': 'Also check out the subant task, which lets you call the same target on multiple build files:', 'questionId': '49900', 'answerId': '49935'}
{'answer': 'Take a look at Ant macros.  They allow you to define reusable "routines" for Ant builds.  You can find an example here (item 15).', 'questionId': '49900', 'answerId': '50004'}
{'answer': 'I would suggest to work with macros over subant/antcall because the main advantage I found with macros is that you\'re in complete control over the properties that are passed to the macro (especially if you want to add new properties). You simply refactor your Ant script starting with your target: creating a macro (notice the copy/paste and replacement with the @{file}): and invoke the macros with your files: Refactoring, "the Ant way"', 'questionId': '49900', 'answerId': '65947'}
{'answer': 'You can use Gant to script your build with groovy to do what you want or have a look at the groovy ant task.', 'questionId': '49900', 'answerId': '90722'}
{'answer': 'To create a color, try this:', 'questionId': '50064', 'answerId': '50128'}
{'answer': 'Remember that in SWT you must explicitly dispose any resources that you create when you are done with them.  This includes widgets, fonts, colors, images, displays, printers, and GCs.  If you do not dispose these resources, eventually your application will reach the resource limit of your operating system and the application will cease to run. See also: SWT: Managing Operating System Resources', 'questionId': '50064', 'answerId': '75342'}
{'answer': 'For standard colors (including common colors and default colors used by the operating system) Use Display.getSystemColor(int), and pass in the SWT.COLOR_* constant for the color you want. Note that you do not need to dispose these colors because SWT created them.', 'questionId': '50064', 'answerId': '75509'}
{'answer': "The most obvious thing would be a pseudo-replacement for all those classes that just have a single method called run() or actionPerformed() or something like that.  So instead of creating a Thread with a Runnable embedded, you'd use a closure instead.  Not more powerful than what we've got now, but much more convenient and concise. So do we need closures?  No.  Would they be nice to have?  Sure, as long as they don't feel bolted on, as I fear they would be.", 'questionId': '50255', 'answerId': '50263'}
{'answer': 'I suppose for supporting core functional programming concepts, you need closures. Makes the code more elegant and composable with the support for closures. Also, I like the idea of passing around lines of code as parameters to functions.', 'questionId': '50255', 'answerId': '50265'}
{'answer': 'Java Closure Examples', 'questionId': '50255', 'answerId': '50267'}
{'answer': 'They don\'t make an Object-Oriented language better. They make practical languages more practical.  If you\'re attacking a problem with the OO hammer - represent everything as interactions between objects - then a closure makes no sense. In a class-based OO language, closures are the smoke-filled back rooms where stuff gets done but no one talks about it afterwards. Conceptually, it is abhorrent.  In practice, it\'s extremely convenient. I don\'t really want to define a new type of object to hold context, establish the "do stuff" method for it, instantiate it, and populate the context... i just want to tell the compiler, "look, see what i have access to right now? That\'s the context i want, and here\'s the code i want to use it for - hold on to this for me \'till i need it".  Fantastic stuff.', 'questionId': '50255', 'answerId': '50274'}
{'answer': 'Java has had closures since 1.1, just in a very cumbersome and limited way. They are often useful wherever you have a callback of some description. A common case is to abstract away control flow, leaving the interesting code to call an algoritm with a closure that has no external control flow. A trivial example is for-each (although Java 1.5 already has that). Whilst you can implement a forEach method in Java as it stands, it\'s far too verbose to be useful. An example which already makes sense with existing Java is implementing the "execute around" idiom, whereby resource acquisition and release is abstracted. For instance, file open and close can be done within try/finally, without the client code having to get the details right.', 'questionId': '50255', 'answerId': '50277'}
{'answer': 'As a java developer who is trying to teach themselves lisp in an attempt to become a better programmer, I would say that I would like to see the Josh Block proposal for closures implemented.  I find myself using anonymous inner classes to express things like what to do with each element of a list when aggregating some data.  To would be nice to represent that as a closure, instead of having to create an abstract class.', 'questionId': '50255', 'answerId': '50281'}
{'answer': "Java doesn't need closures, an Object oriented language can do everything a closure does using intermediate objects to store state or do actions (in Java's case inner classes).  But closures are desirable as a feature because they greatly simplify the code and increase readability and as a consequence the maintainability of the code. I'm no Java specialist but I'm using  C# 3.5 and closures are one of my favorite features of the language, for example take the following statement as an example: now take an equivalent example that doesn't use closures I know this is C# and not Java but the idea is the same, closures are useful for conciseness, and make code shorter and more readable. Behind the scenes, the closures of C# 3.5 do something that's looks very similar to example #2 meaning the compiler creates a private class behind the scenes and passes the 'filter' parameter to it. Java doesn't need closures to work, as a developer you don't need them either, but, they are useful and provide benefits so that means that they are desirable in a language that is a production language and one of it's goals is productivity.", 'questionId': '50255', 'answerId': '54180'}
{'answer': "There are some very useful 'higher order functions' which can do operations on lists using closures. Higher order functions are functions having 'function objects' as parameters. E.g. it is a very common operation to apply some transformation to every element in a list. This higher order function is commonly called 'map' or 'collect'. (See the *. spread operator of Groovy). For example to square each element in a list without closures you would probably write: Using closures and map and the proposed syntax, you could write it like that: (There is a possible performance problem here regarding boxing of primitive types.) As explained by Pop Catalin there is another higher order function called 'select' or 'filter': It can be used to get all the elements in a list complying to some condition. For example: Instead of: Instead you could write something like using the proposal. You might look at the Groovy syntax, which is an extension of the Java language to support closures right now. See the chapter on collections of the Groovy User Guide for more examples what to do with closures. A remark: There is perhaps some clarification needed regarding the term 'closure'. What I've shown above are strictly spoken no closures. They are just 'function objects'.  A closure is everything which can capture - or 'close over' - the (lexical) context of the code surrounding it. In that sense there are closures in Java right now, i.e. anonymous classes:", 'questionId': '50255', 'answerId': '63879'}
{'answer': 'When closures finally arrive in Java, I will gleefully get rid of all my custom comparator classes. ...looks a helluva lot better than...', 'questionId': '50255', 'answerId': '509851'}
{'answer': "Not only that benjismith, but I love how you can just do... myArray.sort{ it.myProperty } You only need the more detailed comparator you've shown when the natural language comparison of the property doesn't suit your needs. I absolutely love this feature.", 'questionId': '50255', 'answerId': '716642'}
{'answer': ' I\'ve been reading a lot lately about the next release of Java possibly supporting closures. I feel like I have a pretty firm grasp on what closures are, but I can\'t think of a solid example of how they would make an Object-Oriented language "better." Well, most people who use the term "closure" actually mean "function object", and in this sense, function objects make it possible to write simpler code in certain circumstances such as when you need custom comparators in a sort function.   For example, in Python: This sorts the list a in reverse order by passing the custom comparison functoin reversecmp.  The addition of the lambda operator makes things even more compact: Java does not have function objects, so it uses "functor classes" to simulate them.  In Java you do the equivalent operation by implementing a custom version of the Comparator class, and passing that to the sort function: As you can see, it gives the same effect as closures, but is clumsier and more verbose.  However, the addition of anonymous inner classes obviates most of the pain: So I would say that the combination of functor classes + anonymous inner classes in Java is sufficient to compensate for the lack of true function objects, making their addition unnecessary.', 'questionId': '50255', 'answerId': '716716'}
{'answer': "As a Lisp programmer I would wish that the Java community understands the following difference: functions as objects vs. closures. a) functions can be named or anonymous. But they can also be objects of themselves. This allows functions to be passed around as arguments, returned from functions or stored in data structures. This means that functions are first class objects in a programming language. Anonymous functions don't add much to the language, they just allow you to write functions in a shorter way. b) A closure is a function plus a binding environment. Closures can be passed downwards (as parameters) or returned upwards (as return values). This allows the function to refer to variables of its environment, even if the surrounding code is no longer active. If you have a) in some language, then the question comes up what to do about b)? There are languages that have a), but not b). In the functional programming world a) (functions) and b (functions as closures) is nowadays the norm. Smalltalk had a) (blocks are anonymous functions) for a long time, but then some dialects of Smalltalk added support for b) (blocks as closures). You can imagine that you get a slightly different programming model, if you add functions and closures to the language.  From a pragmatic view, the anonymous function adds some short notation, where you pass or invoke functions. That can be a good thing. The closure (function plus binding) allows you for example to create a function that has access to some variables (for example to a counter value). Now you can store that function in an object, access it and invoke it. The context for the function object is now not only the objects it has access to, but also the variables it has access to via bindings. This is also useful, but you can see that variable bindings vs. access to object variables now is an issue: when should be something a lexical variable (that can be accessed in a closure) and when should it be a variable of some object (a slot). When should something be a closure or an object? You can use both in the similar ways. A usual programming exercise for students learning Scheme (a Lisp dialect) is to write a simple object system using closures. The result is a more complicated programming language and a more complicated runtime model. Too complicated?", 'questionId': '50255', 'answerId': '716763'}
{'answer': 'Closures in an imperative language (examples: JavaScript, C#, the forthcoming C++ refresh) are not the same as anonymous inner classes. They need to be able to capture modifiable references to local variables. Java\'s inner classes can only capture local final variables. Almost any language feature can be criticised as non-essential: for, while, do are all just syntactic sugar over goto/if. Inner classes are syntactic sugar over classes with a field pointing to the outer class. Generics are syntactic sugar over casts. Exactly the same "non-essential" argument should have blocked the inclusion of all the above features.', 'questionId': '50255', 'answerId': '716783'}
{'answer': 'A few people have said, or implied, that closures are just syntactic sugar - doing what you could already do with anonymous inner classes and making it more convenient to pass parameters in. They are syntactic sugar in the same sense that Java is syntactic sugar for assembler (that "assembler" could be bytecode, for sake of argument). In other words they raise they level of abstraction, and this is an important concept. Closures promote the concept of the function-as-object to a first class entity - one that increases the expressiveness of code, rather than cluttering it with even more boilerplate. An example that\'s close to my heart has already been mentioned by Tom Hawtin - implementing the Execute Around idiom, which is just about the only way to get RAII into Java. I wrote a blog entry on exactly that subject a couple of years ago when I first heard closures might be coming. Ironically, I think the very reason that closures would be good for Java (more expressiveness with less code) may be what rattles many Java advocates. Java has a mindset of "spell everything out the long way". That and the fact that closures are a nod towards a more functional way of doing things - which I also see as a Good Thing, but may water down the pure OO message that many in the Java community hold dear.', 'questionId': '50255', 'answerId': '716804'}
{'answer': "What about readability and maintainability...one-liner closures are harder to understand and debug, imo Software has looong life and you can get people with rudimentary knowledge of the language to maintain it...So spread out logic better than one-liners for easy maintenance...You generally don't have a software star looking after software after its release...", 'questionId': '50255', 'answerId': '2472965'}
{'answer': "You might want to look at Groovy, a language that's mostly compatible with Java, and runs on the JRE, but supports Closures.", 'questionId': '50255', 'answerId': '4665228'}
{'answer': 'I have been thinking a lot about the topic of this very interesting question in the last few days. First of all, if I have understood correctly, Java already has some basic notion of closures (defined through anonymous classes) but the new feature that is going to be introduced is the support for closures based on anonymous functions. This extension will definitely make the language more expressive but I am not sure if it really fits with the rest of the language. Java has been designed as an object-oriented language with no support for functional programming: Will the new semantics be easy to understand? Java 6 does not even have functions, will Java 7 have anonymous functions but no "normal" functions? My impression is that as new programming styles or paradigms like functional programming become more popular, everyone wants to use them in their favourite OOP language. This is understandable: one wants to continue to use a language they\'re familiar with while adopting new features. But in this way a language can become really complex and lose coherence. So my attitude at the moment is to stick to Java 6 for OOP (I hope Java 6 will still be supported for a while) and, in case I really get interested in doing OOP + FP, to take a look at some other language like Scala (Scala was defined to be multi- paradigm from the beginning and can be well integrated with Java) rather than switching to Java 7. I think Java owes its success to the fact that it combines a simple language with very powerful libraries and tools, and I do not think that new features like closures will make it a better programming language.', 'questionId': '50255', 'answerId': '6455738'}
{'answer': 'Now that JDK8 is about to be released there is more information available that can enrich the answers to this question. Bria Goetz, language architect at Oracle, has published a series of papers (yet drafts) on the current state of lambda expressions in Java. It does also cover closures as they are planning to release them in the upcoming JDK, which should be code complete around January 2013 and should be released around midyear 2013. The State of Lambda: in the first page or two this article attempts to answer the question presented here. Although I still found it short in arguments, but is is full of examples. The State of Lambda - Libraries Edition: this is also very interesting because it covers advantages like lazy evaluation and parallelism. The Translation of Lambda Expressions: which basically explains the desugaring process done by the Java compiler.', 'questionId': '50255', 'answerId': '10572241'}
{'answer': 'The lack of binding in anonymous function [i.e. if the variables (and method arguments if there is an enclosing method) of the outer context are declared final then they are available but not otherwise], I don\'t quite understand what that restriction actually buys. I use "final" profusely anyways. So, if my intent was to use the same objects inside the closure, I would indeed declare those objects final in the enclosing scope. But what would be wrong in letting the "closure [java a.i.c.]" just get a copy of the reference as if passed via a constructor (well that in fact is how it is done). If the closure wants to overwrite the reference, so be it; it will do so without changing the copy that the enclosing scope sees. If we argue that that would lead to unreadable code (e.g. maybe it\'s not straight-forward to see what the object reference is at the time of the constructor call for the a.i.c.), then how about at least making the syntax less verbose? Scala? Groovy?', 'questionId': '50255', 'answerId': '15277773'}
{'answer': "If it's short, I think you're better off re-writing the code in java.  Downloading one 50Mb runtime is bad enough.", 'questionId': '50398', 'answerId': '50406'}
{'answer': "I would rewrite it if it's not too much trouble. The web service would work, but it seems like that would be a lot of overhead just to reuse a little code.", 'questionId': '50398', 'answerId': '50408'}
{'answer': 'You would use the Java Native Interface to call your C# code compiled into a DLL. If its a small amount of C#, it would be much easier to port it to Java. If its a lot, this might be a good way to do it. Here is a highlevel overview of it: http://en.wikipedia.org/wiki/Java_Native_Interface Your other option would be to create a COM assembly from the C# code and use J-Interop to invoke it. http://sourceforge.net/projects/j-interop/', 'questionId': '50398', 'answerId': '50424'}
{'answer': "There is an IL to Java Bytecode compiler GrassHopper which may be of use to you.  I've never tried it though. I'd look at rewriting your code in Java though EDIT: Note that Grasshopper seems to be no longer available.", 'questionId': '50398', 'answerId': '50440'}
{'answer': 'If you do not want to rewrite hadle it as an Inter-process communication and choose one of following: Named pipes Sockets  SOAP', 'questionId': '50398', 'answerId': '50676'}
{'answer': 'We used JNBridge for this, and it worked great.  It handles Java->.NET and vice versa, all in-proc.', 'questionId': '50398', 'answerId': '52577'}
{'answer': "http://www.infoq.com/articles/in-process-java-net-integration suggests running CLR and JVM in the same process space and passing calls back and forth. It sounds very efficient. I'm going to give it a try and integrate it into Jace if it works well.", 'questionId': '50398', 'answerId': '774505'}
{'answer': "I am author of jni4net, open source intraprocess bridge between JVM and CLR. It's build on top of JNI and PInvoke. No C/C++ code needed. I hope it will help you.", 'questionId': '50398', 'answerId': '1655173'}
{'answer': 'If it is a piece of code that is exposable as a command line utility, I just make the other host language use a system call to execute the utility. If your C# app needs to call Java, compile a special Java main that takes appropriate command line args and returns text output. It the oldest, simplest method.', 'questionId': '50398', 'answerId': '2400059'}
{'answer': 'It means that the grouping is atomic, and it throws away backtracking information for a matched group. So, this expression is possessive; it won\'t back off even if doing so is the only way for the regex as a whole to succeed. It\'s "independent" in the sense that it doesn\'t cooperate, via backtracking, with other elements of the regex to ensure a match.', 'questionId': '50524', 'answerId': '50567'}
{'answer': "If you have foo(?>(co)*)co, that will never match. I'm sure there are practical examples of when this would be useful, try O'Reilly's book.", 'questionId': '50524', 'answerId': '394291'}
{'answer': '(?>X[?/*/+]) is the same as (?:X)[?/*/+]+.', 'questionId': '50524', 'answerId': '28663993'}
{'answer': 'From this thread, there are different ways to do this: The DecimalFormat() seems to be the most dynamic way to do it, and it is also very easy to understand when reading others code.', 'questionId': '50532', 'answerId': '50543'}
{'answer': 'You and String.format() will be new best friends! http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax', 'questionId': '50532', 'answerId': '50544'}
{'answer': 'Use DecimalFormat.', 'questionId': '50532', 'answerId': '50548'}
{'answer': 'Round numbers, yes. This is the main example source.', 'questionId': '50532', 'answerId': '50556'}
{'answer': 'There are two approaches in the standard library. One is to use java.text.DecimalFormat. The other more cryptic methods (String.format, PrintStream.printf, etc) based around java.util.Formatter should keep C programmers happy(ish).', 'questionId': '50532', 'answerId': '50557'}
{'answer': 'Be aware that classes that descend from NumberFormat (and most other Format descendants) are not synchronized. It is a common (but dangerous) practice to create format objects and store them in static variables in a util class. In practice, it will pretty much always work until it starts experiencing significant load.', 'questionId': '50532', 'answerId': '50892'}
{'answer': "As Robert has pointed out in his answer: DecimalFormat is neither synchronized nor does the API guarantee thread safety (it might depend on the JVM version/vendor you are using).  Use Spring's Numberformatter instead, which is thread safe.", 'questionId': '50532', 'answerId': '22401832'}
{'answer': 'Try this: Simple and efficient.', 'questionId': '50532', 'answerId': '25929742'}
{'answer': ' For instance, if the double value passed into the formatDouble() method is 345.9372, the following will  be the result: 345.937 Similarly, if the value .7697 is passed to the method, the following will be the result: .770', 'questionId': '50532', 'answerId': '45898683'}
{'answer': "You can only tell whether the current thread holds a normal lock (Thread.holdsLock(Object)). You can't get a reference to the thread that has the lock without native code. However, if you're doing anything complicated with threading, you probably want to familiarize yourself with the java.util.concurrent packages. The ReentrantLock does allow you to get its owner (but its a protected method, so you'd have to extend this). Depending on your application, it may well be that by using the concurrency packages, you'll find that you don't need to get the lock's owner after all. There are non-programmatic methods to find the lock owners, such as signaling the JVM to issue a thread dump to stderr, that are useful to determine the cause of deadlocks.", 'questionId': '50561', 'answerId': '50573'}
{'answer': "Run jconsole.  It is included in the Java SDK and is run from the command line.  I'm not sure what OS you are using, but on windows you can just pass it the PID of the java process.  It should help you find the thread that is causing the problem.  Or, you can use a commercial profiler like YourKit or any number of other profilers.", 'questionId': '50561', 'answerId': '51178'}
{'answer': "You can, from 1.6, use JMX to do all sorts of interesting things including finding held locks. You can't get the actual object, but you do get the class and identity hash value (which is not unique). There's an example in one of my weblogs.", 'questionId': '50561', 'answerId': '51601'}
{'answer': "In 1.5, you can find all the threads and get each one's state, eg like this: Thread.getState gives you info about whether the thread is BLOCKED, WAITING etc, see jdk api ThreadState", 'questionId': '50561', 'answerId': '51620'}
{'answer': 'You can get at the locks held by threads with reflection. This only works with java 1.6. On each of these ThreadInfo objects there are LockInfo objects which you can use the identityHashCode on them to compare to the lock in question.', 'questionId': '50561', 'answerId': '1377751'}
{'answer': 'You can use a variable to hold the current thread when you take the lock, then print it if someone else is trying to use it.', 'questionId': '50561', 'answerId': '8379402'}
{'answer': 'You can check the lock on the particular object by calling wait() or notify() method on that object. If the object does not hold the lock, then it will throw llegalMonitorStateException . 2- By calling holdsLock(Object o) method. This will return the boolean value.', 'questionId': '50561', 'answerId': '15265132'}
{'answer': 'if it is re -entrant lock u can can check if it is held by current thread', 'questionId': '50561', 'answerId': '31359345'}
{'answer': "I have used Eclipse as a framework base but it was mostly just using SWT-- we didn't really use much of the RCP. It really depends on what you're writing, but from what I have learned from using Eclipse it is really only suited for writing an app that involves you editing data using various views (just like editing code). Anything more random that than can cause you to start pushing the framework in a direction it wasn't designed and causing massive fail.", 'questionId': '51002', 'answerId': '51008'}
{'answer': "You'll use Swing to develop your application because any other windowing framework is useful only if you have a previous knowledge or the appropriate background.  You can rely on http://www.javadocking.com/ to streamline you application.  If your application requirements are highly focused on the user interface, maybe you can look in another direction like Adobe Air.", 'questionId': '51002', 'answerId': '51009'}
{'answer': " Easy to use:  I have experience developing on Eclipse and I have to say it's not easy to understand its development model. Sure for basic stuff it has some wizards that make easier, but for something a little more complex it's just difficult. I don't know about Netbeans, but I heard its easier. Consistent API: I think Eclipse wins in this aspect. It runs over OSGI (brings some complexity though) and has plugins extensions for pretty much everything. It seems to be the platform of choice for plugin development, so I can assume it's reliable. Documentation: Eclipse wins by far. The help from eclipse site is excelent and the mailing list has plenny of users questions.", 'questionId': '51002', 'answerId': '51020'}
{'answer': "I can't say enough about the Eclipse RCP platform. I would recommend it for any Java desktop app development.  It's free, has great tutorials, and allows cross-platform development of rich desktop applications that use native OS windowing toolkit, meaning that your application will look native in any platform. It also has a clean API that stays out of your way, and makes deploying to any platform a piece of cake.  If your interested check out this book: http://www.amazon.com/Eclipse-Rich-Client-Platform-Applications/dp/0321334612", 'questionId': '51002', 'answerId': '51024'}
{'answer': 'RCP has a bigger learning curve, but once you learn the basics the Eclipse IDE itself supports building RCP applications very well. I have only built a plugin for NetBeans (not build a full-fledged application), and the learning curve was lesser than for the RCP application. The book Eclipse Rich Client Platform: Designing, Coding, and Packaging Java(TM) Applications provides a detailed introduction to building RCP applications.', 'questionId': '51002', 'answerId': '51067'}
{'answer': 'Please see some of the open source applications at http://www.eclipse.org/community/rcp.php before opining that RCP is only for building a text editor. Thanks.', 'questionId': '51002', 'answerId': '51374'}
{'answer': 'Introduction to Eclipse RCP.', 'questionId': '51002', 'answerId': '69812'}
{'answer': 'I\'ve done a little work with both, but only on relatively simple applications. Both seem to have roughly equal capabilities. I personally prefer the Netbeans platform as it makes more sense to me. You should also consider JSR-296, the Swing Application Framework. It provides a basic framework for building Swing Applications, managing application resources, state, etc, but without as much "baggage" as Netbeans and Eclipse. Netbeans IDE has a number of tools for building applications on the SAF. See https://appframework.dev.java.net/ for more info. Without knowing more about your application, it\'s hard to point you at the appropriate strengths/weaknesses of the two platforms.', 'questionId': '51002', 'answerId': '103855'}
{'answer': "I have a similar task and I am also considering different frameworks. I have some experience with Eclipse (~4 months developing RCP) and now Netbeans (played around for a couple of days). IMHO these frameworks are too complicated. You just end up debugging into Eclipse-specific plugin loaders trying to figure out why you get a ClassNotFoundException or a NullPointer. The same story with NetBeans: somehow somewhere somewhat reads out xml config files and creates UI from that, cool, as long as you follow the tutorial. And of course you can't develop and Eclipse-based RCP using some other IDE, NB is also very jealous about its usage (unless you do some hacks like I did). What I'm lacking is a clear way to debug my threads from main to action performed. Instead I'm always told what I have to do to avoid exceptions. And so I have to keep my fingers crossed each time I'm trying to pull something new. And it never works out the first time. Now I thought about the features I need and I looked out for smaller projects that aim at specific functionality like plugin management eg. And there are plenty. Just compile a list of the functionality you need and start adding smaller frameworks by integrating them into your project. This also makes sense since your project should consume less RAM in the end.", 'questionId': '51002', 'answerId': '373314'}
{'answer': 'I would use eclipse RCP when you really need a platform to built on top, not just "widgetery" like swing or swt. RCP is rock solid and consistent, modular and very flexible. Once you master it, you get huge benefits. Being a platform it give you the most commonly used things - preference, configurations, automatic updates, layout management, branding and things like that. You build a product, not an app. But learning curve is pretty steep in the beginning. Swing on the other hand is not a platform, you will re-invent the wheel by writing your own things I mentioned above. But yes, swing is faster to learn and get started. I think it fits better for smaller applications with shorter life span.', 'questionId': '51002', 'answerId': '760416'}
{'answer': 'If you really want to avoid crossplatform maintainance then work with Swing.  This buys you all platforms.  RCP requires native libraries for each platform. We have had good experiences with Swing.', 'questionId': '51002', 'answerId': '3620735'}
{'answer': 'Look some of the open source applications at http://www.eclipse.org/community/rcp.php before opening that RCP is only for building a stuff.', 'questionId': '51002', 'answerId': '20087011'}
{'answer': "you could write a small webapp that hooks up to the Weblogic JMX and displays the list of deployed webapps and deploy that one at '/'", 'questionId': '51157', 'answerId': '64787'}
{'answer': 'You need to scale sideways and out. Maybe something like a message queue could be the backend between the frontend and the crunching.', 'questionId': '51266', 'answerId': '51277'}
{'answer': 'The first thing I would do is construct a model of the system to map the data flow and try to understand precisely where the bottleneck lies.  If you can model your system as a pipeline, then you should be able to use the theory of constraints (most of the literature is about optimising business processes but it applies equally to software) to continuously improve performance and eliminate the bottleneck. Next I would collect some hard empirical data that accurately characterises the performance of your system. It is something of a clich that you cannot manage what you cannot measure, but I have seen many people attempt to optimise a software system based on hunches and fail miserably. Then I would use the Pareto Principle (80/20 rule) to choose the small number of things that will produce the biggest gains and focus only on those. To scale a Java application horizontally, I have used Oracle Coherence extensively.  Although some dismiss it as a very expensive distributed hashtable, the functionality is much richer than that and you can, for example, directly access data in the cache from C++ code . Other alternatives for horizontally scaling your Java code would be Giga Spaces, IBM Object Grid or Gemstone Gemfire. If your C++ code is stateless and is used purely for number crunching, you could look at distributing the process using ICE Grid which has bindings for all of the languages you are using.', 'questionId': '51266', 'answerId': '51427'}
{'answer': "Andrew, (in addition to modeling as a pipeline etc), measuring things is important.  Have you ran a profiler over the code and got metrics of where most of the time is spent? For the database code, how often does it change ?  Are you looking at caching at the moment ?  I assume you have looked at indexes etc over the data to speed up the Db ? What levels of traffic do you have on the front end ?  Are you caching web pages ?  (It isn't too hard to say use a JMS type api to communicate between components.  You can then put Web Page component on one machine (or more), and then put the integration code (c++) on another, and for many JMS products there are usually native C++ api's ie. ActiveMQ comes to mind), but it really helps to know how much of the time is in Web (JSP ?) , C++, Database ops.   Is the database storing business data, or is it being also used to pass data between Java and C++ ?  You say you are using shared mem not JNI ?  What level of multi-threading currently exists in the APP?  Would you describe the code as being synchronous in nature or async?  Is there a physical relationship between the Solaris code and the devices that must be maintained (ie. do all the devices register with the c++ code, or can that be specified).  ie. if you were to put a web load balancer on the frontend, and just put 2 machines up today is the relationhip of which devices are managed by a box initialized up front or in advance?  What are the HA requirements ? ie. just state info ? Can the HA be done just in the web tier by clustering Session data ? Is the DB running on another machine ? How big is the DB ? Have you optimized your queries ie. tried using explicit inner/outer joins sometimes helps versus nested sub queries (sometmes). (again look at the sql stats).", 'questionId': '51266', 'answerId': '51736'}
{'answer': 'Memory performance or CPU performance? Or are they the same these days? My only evidence is anecdotal and on a different platform: after porting a bunch of CPU-hungry apps to C# (.NET 2.0), I did not notice substantial loss in performance (I do not consider 10% substantial). Well written code seems to perform well on a variety of architectures. Most apps spend/waste time with: IO operations that will not benefit from static (compile-time) analysis. Bad Algorithms that will not benefit from static analysis. Bad Memory layouts in critical CPU inner loops. While it is technically possible that compilers help us here, I have yet to see a real compiler do anything interesting. So based upon my experience, unless you are writing a video codec, there is no benefit to compiling Java apps vs. just relying upon the hotspot compilers.', 'questionId': '51276', 'answerId': '51293'}
{'answer': 'There was a similar discussion here recently, for the question What are advantages of bytecode over native code?. You can find interesting answers in that thread.', 'questionId': '51276', 'answerId': '51373'}
{'answer': "Some more anecdotal evidence. I've worked on a few performance critical real-time trading financial applications. I agree with Frank, nearly every time your problem is not the lack of being compiled, it is your algorithm or data structure. Modern hot-spot compilers are very good with the right code, for example the CERN Colt library is within 90% of compiled, optimised Fortran for numerical work. If you are worried about speed I'd really recommend a good profiler and get evidence as to where your bottlenecks are - I use YourKit and have been very pleased. We have only resorted to native compiled code for speed in one instance in the last few years, and that was so we could use CUDA and get some serious GPU performance.", 'questionId': '51276', 'answerId': '51558'}
{'answer': 'Your question is a little large, the answer vary a lot If you are using Just In Time compilation (JIT) or not When you are using,, if your process is executed for a long time or not All recent JVM use JIT, but on old JVM the java code is several time slower that native code. If you have a server that run for a long period of time or batch that execute the same code again and again, the difference and up being very low. We wrote the same batch both in C++ and in Java and run it with different dataset, the result differ for about 3 second, with dataset taking from 5 minutes to several hours. But be careful, they are special case that there will be an important difference, for example the batch that need a lot memory.', 'questionId': '51276', 'answerId': '53089'}
{'answer': 'Tried Hello-World in with six different implementations just to check the overhead and the difference was staggering. Java was off the charts while the compiled languages did equally well. I could proved all the evidence (in a reproducible) if needed.', 'questionId': '51276', 'answerId': '18665561'}
{'answer': 'Of course there is a PATH environment variable in Windows. %PATH%     This variable contains a semicolon-delimited list of directories in which the command interpreter will search for executable files. Equivalent to the UNIX $PATH variable.', 'questionId': '51320', 'answerId': '51327'}
{'answer': 'Windows does indeed have a PATH environment variable. It has a different syntax from the Unix one because it uses semicolon (;) as a separator instead of colon (:) and you have to watch for quoted strings that might contain spaces. But, it\'s there. If this other program\'s installer adds its own directory to the PATH environment variable, then you could rely on that. However, as you mention, Windows installers typically do not need to add the application path to the PATH because they install a start menu shortcut or something else instead. For drive letters in Java, one approach would be to try them all, there are only going to be at most 24 (C through Z) that are of any use. Or, you could shell out and run "net use" and parse the results, though that is a bit messier.', 'questionId': '51320', 'answerId': '51330'}
{'answer': 'http://docs.oracle.com/javase/7/docs/api/java/io/File.html#listRoots() google: list drives java, first hit:-)', 'questionId': '51320', 'answerId': '51331'}
{'answer': 'Looking "everywhere" can be very messy. Look at a CD-rom drive, and it spins up. That can be very noisy. Look at a network drive, and it may be very slow. Maybe the server is down, and you may need to wait for minutes until it times out. Maybe (for Windows-machines) you should just look in the start-menu. If nothing there points at OOo, it\'s probably not installed. If it is, the user is probably an advanced user, that will have no problems pointing out the location manually.', 'questionId': '51320', 'answerId': '255980'}
{'answer': 'Use JNI. This is perfect for c++ code.  Not only you can list all drives but also get the corresponding drive type (removable,local disk, or cd-rom,dvd-rom...etc)', 'questionId': '51320', 'answerId': '2092379'}
{'answer': "1) There might not be that much data available to read (the other end of the pipe might not have sent that much data yet), and the implementing class might be non-blocking (i.e. it will just return what it can, rather than waiting for enough data to fulfil the request). I don't know if any implementations actually behave in this way, however, but the interface is designed to permit it. Another option is simply that the file gets closed part-way through the read. 2) Either readFully() (which will always wait for enough input or else fail) or call skipBytes() in a loop.  I think the former is probably better, unless the array is truly vast.", 'questionId': '51380', 'answerId': '51393'}
{'answer': 'Josh Bloch has publicised this recently. It is consistent in that InputStream.read is not guaranteed to read as many bytes as it could. However, it is utterly pointless as an API method. InputStream should probably also have readFully.', 'questionId': '51380', 'answerId': '51613'}
{'answer': 'It turns out that readFully() adds more performance overhead than I was willing to put up with. In the end I compromised: I call skipBytes() once, and if that returns fewer than the right number of bytes, I call readFully() for the remaining bytes.', 'questionId': '51380', 'answerId': '51828'}
{'answer': 'I came across this problem today.  It was reading off a network connection on a virtual machine so I imagine there could be a number of reasons for this happening. I solved it by simply forcing the input stream to skip bytes until it had skipped the number of bytes I wanted it to:', 'questionId': '51380', 'answerId': '3977877'}
{'answer': "I wonder how widespread the JVM actually is? In the case of Flash, IE5 preinstalled it, giving it a large automatic user base. But unless the JVM was included with the OS install, users wouldn't have it. I suppose as a developer you target the largest install base, meaning choosing Flash over Java. There are Java applets here and there; definitely not widespread though.", 'questionId': '51390', 'answerId': '51394'}
{'answer': "i believe it's their ugliness that kept them away from the modern web. flash brought the design, javascript brought a convenient way to make some cool things on a client. being a box inside a browser (just like a flash, though, but much uglier) applet technology was put away. actually, the only thing that might be missed is the possibility to have a 'client-server' type of communication inside the web, because java applet could have a stateful connection. on the other hand, you would have to put some server on the other side and open a port for it, which just was too much house-work for shared hosting environments. applets still live in some different areas, like control centers for roads, tunnels, power plants and stuff like that.", 'questionId': '51390', 'answerId': '51395'}
{'answer': 'People still use applets. But you are right, there are tons of different solutions out there. For example, take a look at javafx', 'questionId': '51390', 'answerId': '51396'}
{'answer': "I think compatibility issues were a big problem.  Most notably with IE and Microsoft's Java VM which wasn't as standards compliant as it might have been. Even with the Sun JVM you could have problems.  I've had fun where I've had two 3rd-party Applets requiring different versions of Java which causes all sorts of problems.  Sun have tried to solve this problem by replacing Applets with Java Web Start which gives you a link in the browser that launches the application in it's own window instead of inside the browser.  (In theory with JWS you can have different applications using different VMs but it never seems to work for me as well as it should.) Advancements with JavaScript have also made it possible to developer much richer web pages so a lot of things in the past that you could only do in Applets can now be done simply with AJAX.", 'questionId': '51390', 'answerId': '51397'}
{'answer': "I see them a lot in acedemic settings (hosted on department or faculty sites), but you're right in that they are not very popular. However, remember that Java's big promise has been achieved. We have Flash, Java Applets, Silverlight, and ever-improving JavaScript frameworks. Now if I made add a personal opinion - I think that Java applets are inelegant. They tend to look ugly, the Java runtime makes its presence in the OS far too known (in terms of runtime visuals, updates, and the ugly installer). Flash is much better with its rich media environment and its transparent (and ubiquitous) deployment.", 'questionId': '51390', 'answerId': '51398'}
{'answer': "I think Java applets were overshadowed by Flash and ActionScript (pun unintended), being much easier to use for what Java Applets were being used at the time (animations + stateful applications).  Flash's success in this respect in turn owes to its much smaller file sizes, as well as benefiting from the Sun vs. Microsoft suit that resulted in Microsoft removing the MSJVM from Internet Explorer, at a time of Netscape's demise and IE's heavy dominance.", 'questionId': '51390', 'answerId': '51399'}
{'answer': "By the time Java's GUI API stopped totally sucking, everyone was using Flash. And even today, Java is no where near as good as Flash at doing fancy graphics.", 'questionId': '51390', 'answerId': '51402'}
{'answer': "The JVM is very widespread, especially in the coorporate world, at least where I've worked, there was always a JVM installed. I'm currently working on a Java Applet, but in general, I would never an applet unless I had to. But then again, I wouldn't use Flash or Silverlight, either. Applets have a slow load time, and look out of place in webpages. Also, Macromedia/Adobe have outmarketed the good ol' applets.", 'questionId': '51390', 'answerId': '51403'}
{'answer': 'I assume it\'s because java is a "real", ie. general purpose language. To make an applet, you have to write code, and there aren\'t any shortcuts. Now that flash etc have come along, you can pretty much just drap and drop your way through making a cool animation for your website. This is a much lower barrier for entry - you don\'t have to know how to program in order to get a flash animation working. So flash proliferates, and java applets are hardly used anymore.', 'questionId': '51390', 'answerId': '51405'}
{'answer': 'I think applets are collateral damage in the battle between Microsoft and Sun. At first, the JVM was very slow to load and demanded too much memory. Then, when increase in computing power made the JVM possible, Sun played hard as it attempted to control all things Java: As part of another private antitrust lawsuit filed against Microsoft by Sun in March, Sun sought a preliminary injunction requiring Microsoft to include a current Java virtual machine (JVM) in the Windows XP operating system. Microsoft said the decision to include the JVM this week is a direct result of the latest legal entanglement with Sun, but Microsoft plans to disband support for Java in Windows following Jan. 1, 2004. Microsoft Reverses Course, Will Include Java VM In Windows XP--For Now', 'questionId': '51390', 'answerId': '51406'}
{'answer': '1) AWT made for horrid UIs. Swing improved on that but it was too late, because... 2) Microsoft dropped support for Java in the browser (its propietary MSJVM), and before it did, it would only support the last version it released, which was roughly JDK 1.1 compatible. 3) So today you cannot be sure that an applet will run on the majority of non-developer machines, unlike flash.    Same can be said of ActiveX by the way.', 'questionId': '51390', 'answerId': '51410'}
{'answer': 'They took forever to load up and get going in the browser, and then for a lot of people they didn\'t work. When they finally did load, the interfaces were ugly and clunky. I think the poor user experience was a big step towards making applets obsolete. So to answer the original question I have a question of my own - you ask "Why don\'t sites use java applets anymore", and my response is "why would anyone want to?"', 'questionId': '51390', 'answerId': '52279'}
{'answer': "For what it's worth, Sun is pouring money and resources into applets again.  They've made some really significant improvements in JDK 1.6.10 to mitigate a lot of the 'clunkiness' applets used to exhibit.  For instance, with this update, you can display your own custom loading image/animation while your applet loads, and the plugin has been put on a major diet to improve performance. They've also embarked upon an initiative to directly compete with Flash and Silverlight - JavaFX. Whether or not the market will respond to any of this remains to be seen, but it's certainly a fascinating move on Sun's part given Flash's dominance in the market place.", 'questionId': '51390', 'answerId': '302917'}
{'answer': 'First, they not gone. You can still find lot of applets on the Web, lot of people use them particularly to demonstrate algorithms and such. Advantages: can leverage existing libraries (math, physics, sorting, graph, etc.) and it is faster than Flash. Inconvenience: it might be risky to target a recent JVM (although Sun did a good job on automatic updates, looks like lot of people are using Java 1.6 already), load time is a bit slow (even though great progress have been made there). You can still find lot of game applets too, like Bookworm, with the added advantage, perhaps, to have part of work already done to run them on mobile phones... Second, I can predict a regain of interest with JavaFX. Applets on steroids, able to break legend of "applets are ugly"... :-) Last, a library like Processing makes super easy to create graphical intensive applets, and you can find lot of them on the Net, eg. on OpenProcessing where the worst (beginners in programming) is near the best!', 'questionId': '51390', 'answerId': '602014'}
{'answer': 'People are still using applets, at least for the company that I am working with. The applets are used mainly by internal users. I feel that applets have their benefits, as companies which employ Java at the server side, most probably will have a large pool of talents who are better skilled at Java.  Although perhaps other technologies like Javascript, HTML/CSS or flash are more popular or more fanciful, but the talent pool could be better employed to create web apps with Java applets as it is a language that they are already familiar with through their work with the server end stuff. It could be faster for the Java talent pool to deliver a change request with Java applet solutions at a higher accuracy than any other technologies. Sometimes, the most important thing in a technology solution is its functionality and how fast people who need to provide support for them can react to changes.', 'questionId': '51390', 'answerId': '18901399'}
{'answer': "Unfortunately, does not work, since this use of URL leaves a file locked, so that, for example, it is undeletable. However, you have this: and also the following, which has the advantage of going beyond mere use of file extension, and takes  a peek at content However, as suggested by the comment above, the built-in table of mime-types is quite limited, not including, for example, MSWord and PDF. So, if you want to generalize, you'll need to go beyond the built-in libraries, using, e.g., Mime-Util (which is a great library, using both file extension and content).", 'questionId': '51438', 'answerId': '847849'}
{'answer': 'The JAF API is part of JDK 6. Look at javax.activation package. Most interesting classes are javax.activation.MimeType - an actual MIME type holder - and javax.activation.MimetypesFileTypeMap - class whose instance can resolve MIME type as String for a file:', 'questionId': '51438', 'answerId': '1902146'}
{'answer': 'From roseindia:', 'questionId': '51438', 'answerId': '6899179'}
{'answer': 'In Java 7 you can now just use Files.probeContentType(path).', 'questionId': '51438', 'answerId': '8973468'}
{'answer': "I tried several ways to do it, including the first ones said by @Joshua Fox. But some don't recognize frequent mimetypes like for PDF files, and other could not be trustable with fake files (I tried with a RAR file with extension changed to TIF). The solution I found, as also is said by @Joshua Fox in a superficial way, is to use MimeUtil2, like this:", 'questionId': '51438', 'answerId': '12534954'}
{'answer': "If you're an Android developer, you can use a utility class android.webkit.MimeTypeMap which maps MIME-types to file extensions and vice versa.  Following code snippet may help you.", 'questionId': '51438', 'answerId': '13889946'}
{'answer': 'Apache Tika offers in tika-core a mime type detection based based on magic markers in the stream prefix. tika-core does not fetch other dependencies, which makes it as lightweight as the currently unmaintained Mime Type Detection Utility. Simple code example (Java 7), using the variables theInputStream and theFileName Please note that MediaType.detect(...) cannot be used directly (TIKA-1120). More hints are provided at https://tika.apache.org/0.10/detection.html.', 'questionId': '51438', 'answerId': '16626396'}
{'answer': " I was just wondering how most people fetch a mime type from a file in Java?  I've published my SimpleMagic Java package which allows content-type (mime-type) determination from files and byte arrays. It is designed to read and run the Unix file(1) command magic files that are a part of most ~Unix OS configurations. I tried Apache Tika but it is huge with tons of dependencies, URLConnection doesn't use the bytes of the files, and MimetypesFileTypeMap also just looks at files names. With SimpleMagic you can do something like:", 'questionId': '51438', 'answerId': '17302243'}
{'answer': 'If you are stuck with java 5-6 then this utility class from servoy open source product  https://github.com/Servoy/servoy-client/blob/e7f5bce3c3dc0f0eb1cd240fce48c75143a25432/servoy_shared/src/com/servoy/j2db/util/MimeTypes.java#L34 You only need this function  It probes the first bytes of the content and returns the content types based on that content and not by file extension.', 'questionId': '51438', 'answerId': '18640199'}
{'answer': 'It is better to use two layer validation for files upload.  First you can check for the mimeType and validate it.  Second you should look to convert the first 4 bytes of your file to hexadecimal and then compare it with the magic numbers. Then it will be a really secure way to check for file validations.', 'questionId': '51438', 'answerId': '25379881'}
{'answer': 'if you work on linux OS ,there is a command line file --mimetype:  Then', 'questionId': '51438', 'answerId': '27342079'}
{'answer': 'in spring MultipartFile file; org.springframework.web.multipart.MultipartFile file.getContentType();', 'questionId': '51438', 'answerId': '36863737'}
{'answer': 'After trying various other libraries I settled with mime-util.', 'questionId': '51438', 'answerId': '37461034'}
{'answer': '', 'questionId': '51438', 'answerId': '40765798'}
{'answer': 'With Apache Tika you need ony three lines of code: If you have a groovy console, just paste and run this code to play with it: Keep in mind that its APIs are rich, it can parse "anything". As of tika-core 1.14, you have: See the apidocs for more information.', 'questionId': '51438', 'answerId': '42229928'}
{'answer': 'This is the simplest way I found for doing this:', 'questionId': '51438', 'answerId': '42418284'}
{'answer': "Could you clarify a bit?  Do you mean IPC in a single JVM? (Multiple threads, yes, but at an OS-level only one process.)  Or do you mean multiple JVMs?  (And truly OS-level inter process communications.) If it is the first, then maybe something out of java.util.concurrent, like ConcurrentLinkedQueue would do the trick.  (I pass message around inbetween my threads with classes from java.util.concurrent with success.) If the later, then I'm going to just guess and suggest taking a look at RMI, although I don' think it qualifies as fully reliable--you'd have to manage that a bit more 'hands on' like.", 'questionId': '51452', 'answerId': '51479'}
{'answer': 'I recommend looking into the entire java.util.concurrent package, which have multiple classes for dealing with concurrency and different communication means between threads. All depends on what you want to achieve, as your question is pretty general.', 'questionId': '51452', 'answerId': '51493'}
{'answer': 'Assuming the scenario 1 JVM, multiple threads then indeed java.util.concurrent is the place to look, specifically the various Queue implementations. However an abstraction on top of that may be nice and there Jetlang looks very interesting, lightweight Java message passing.', 'questionId': '51452', 'answerId': '51543'}
{'answer': 'You should use a producer/consumer queue. By doing that you avoid the pitfalls of multithreaded programming: race-conditions and deadlocks. Plus it is not just easier and cleaner, but also much faster if you use a lock-free queue like Disruptor or MentaQueue. I wrote a blog article where I talk about this in detail and show how to get < 100 nanoseconds latencies: Inter-thread communication with 2-digit nanosecond latency.', 'questionId': '51452', 'answerId': '13576414'}
{'answer': "I've just added MappedBus on github (http://github.com/caplogic/mappedbus) which is an efficient IPC library that enable several Java processes/JVMs to communicate by exchaning messages and it uses a memory mapped file for the transport. The troughput has been measured to 40 million messages/s.", 'questionId': '51452', 'answerId': '30255157'}
{'answer': "For visualization our group had some success with prefuse.  We extended it to handle architectural floorplates and bubble diagraming, and it didn't complain too much.  They have a new Flex toolkit out too called Flare that uses a very similar API. UPDATE: I'd have to agree with the comment, we ended up writing a lot of custom functionality/working around prefuse limitations.  I  can't say that starting from scratch would have been better though as we were able to demonstrate progress from day 1 by using prefuse.  On the other hand if we were doing a second implementation of the same stuff, I might skip prefuse since we'd understand the requirements a lot better.", 'questionId': '51574', 'answerId': '51609'}
{'answer': 'In a university project I toyed around with yFiles by yWorks and found it had pretty good API.', 'questionId': '51574', 'answerId': '51628'}
{'answer': "If you are actually looking for Charting libraries and not for Node/Edge Graph libraries I would suggest splurging on Big Faceless Graph library (BFG).  It's way easier to use than JFreeChart, looks nicer, runs faster, has more output options, really no comparison.", 'questionId': '51574', 'answerId': '51631'}
{'answer': "JUNG is a good option for visualisation, and also has a fairly good set of available graph algorithms, including several different mechanisms for random graph creation, rewiring, etc. I've also found it to be generally fairly easy to extend and adapt where necessary.", 'questionId': '51574', 'answerId': '51657'}
{'answer': "I don't know if I'd call it production-ready, but there's jGABL.", 'questionId': '51574', 'answerId': '51978'}
{'answer': 'Check out JGraphT for a very simple and powerful Java graph library that is pretty well done and, to allay any confusion, is different than JGraph. Some sample code:', 'questionId': '51574', 'answerId': '52062'}
{'answer': "If you were using JGraph, you should give a try to JGraphT which is designed for algorithms.  One of its features is visualization using the JGraph library. It's still developed, but pretty stable. I analyzed the complexity of JGraphT algorithms some time ago.  Some of them aren't the quickest, but if you're going to implement them on your own and need to display your graph, then it might be the best choice.  I really liked using its API, when I quickly had to write an app that was working on graph and displaying it later.", 'questionId': '51574', 'answerId': '52691'}
{'answer': "JDSL (Data Structures Library in Java) should be good enough if you're into graph algorithms - http://www.cs.brown.edu/cgc/jdsl/", 'questionId': '51574', 'answerId': '579116'}
{'answer': 'Summary: JGraphT if you are more interested in data structures and algorithms. JGraph if your primary focus is visualization. Jung, yWorks, and BFG are other things people tried using. Prefuse is a no no since one has to rewrite most of it. Google Guava if you need good datastructures only. Apache Commons Graph. Currently dormant, but provides implementations for many algorithms. See https://issues.apache.org/jira/browse/SANDBOX-458 for a list of implemented algorithms, also compared with Jung, GraphT, Prefuse, jBPT', 'questionId': '51574', 'answerId': '854877'}
{'answer': 'Try Annas its an open source graph package which is easy to get to grips with http://annas.googlecode.com', 'questionId': '51574', 'answerId': '961683'}
{'answer': 'http://neo4j.org/ is a graph database that contains many of graph algorithms and scales better than most in-memory libraries.', 'questionId': '51574', 'answerId': '2506409'}
{'answer': 'http://incubator.apache.org/hama/ is a distributed scientific package on Hadoop for massive matrix and graph data.', 'questionId': '51574', 'answerId': '2844481'}
{'answer': 'JGraph from http://mmengineer.blogspot.com/2009/10/java-graph-floyd-class.html Provides a powerfull software to work with graphs (direct or undirect). Also generates Graphivz code, you can see graphics representations. You can put your own code algorithms into pakage, for example: backtracking code. The package provide some algorithms: Dijkstra, backtracking minimun path cost, ect..', 'questionId': '51574', 'answerId': '2980129'}
{'answer': 'Apache Commons offers commons-graph. Under  http://svn.apache.org/viewvc/commons/sandbox/graph/trunk/ one can inspect the source. Sample API usage is in the SVN, too. See https://issues.apache.org/jira/browse/SANDBOX-458 for a list of implemented algorithms, also compared with Jung, GraphT, Prefuse, jBPT Google Guava if you need good datastructures only. JGraphT is a graph library with many Algorithms implemented and having  (in my oppinion) a good graph model. Helloworld Example. License: LGPL+EPL. JUNG2 is also a BSD-licensed library with the data structure similar to JGraphT. It offers layouting algorithms, which are currently missing in JGraphT. The most recent commit is from 2010 and packages hep.aida.* are LGPL (via the colt library, which is imported by JUNG). This prevents JUNG from being used in projects under the umbrella of ASF and ESF. Maybe one should use the github fork and remove that dependency. Commit f4ca0cd is mirroring the last CVS commit. The current commits seem to remove visualization functionality. Commit d0fb491c adds a .gitignore. Prefuse stores the graphs using a matrix structure, which is not memory efficient for sparse graphs. License: BSD Eclipse Zest has built in graph layout algorithms, which can be used independently of SWT. See org.eclipse.zest.layouts.algorithms. The graph structure used is the one of Eclipse Draw2d, where Nodes are explicit objects and not injected via Generics (as it happens in Apache Commons Graph, JGraphT, and JUNG2).', 'questionId': '51574', 'answerId': '16699707'}
{'answer': 'If you need performance, you might take a look at Grph. The library is developed in the French University and CNRS/Inria. http://www.i3s.unice.fr/~hogie/grph/ The project is active and reactive support is provided!', 'questionId': '51574', 'answerId': '19005810'}
{'answer': 'Instructional graph algorithm implementations in java could be found here (by prof. Sedgewick et al.): http://algs4.cs.princeton.edu/code/ I was introduced to them while attending these exceptional algorithm courses on coursera (also taught by prof. Sedgewick): https://www.coursera.org/course/algs4partI https://www.coursera.org/course/algs4partII', 'questionId': '51574', 'answerId': '21218206'}
{'answer': "It's also good to be convinced that a Graph can be represented as simply as :  and implement most the algorithms you find interesting by yourself. If you fall on this question in the middle of some practice/learning session on graphs, that's the best lib to consider. ;) You can also prefer adjacency matrix for most common algorithms :  or a matrix for some operations :", 'questionId': '51574', 'answerId': '21348339'}
{'answer': 'check out Blueprints: Blueprints is a collection of interfaces, implementations, ouplementations, and test suites for the property graph data model. Blueprints is analogous to the JDBC, but for graph databases.  Within the TinkerPop open source software stack, Blueprints serves as the foundational technology for: Pipes: A lazy, data flow framework Gremlin: A graph traversal language Frames: An object-to-graph mapper Furnace: A graph algorithms package Rexster: A graph server', 'questionId': '51574', 'answerId': '21487933'}
{'answer': 'I could only make it working like this:', 'questionId': '51582', 'answerId': '51603'}
{'answer': "The method I've always used is below. It is a pain and a bit ugly, but I haven't found a better one. You have to pass the class type through on construction, as when Generics are compiled class information is lost.", 'questionId': '51582', 'answerId': '51615'}
{'answer': 'An instance of Test has no information as to what E is at runtime. So, you need to pass a Class<E> to the constructor of Test. If you want an "instanceof" relationship, use Class.isAssignableFrom instead of the Class comparison. Note, E will need to be a non-generic type, for the same reason Test needs the Class object. For examples in the Java API, see java.util.Collections.checkedSet and similar.', 'questionId': '51582', 'answerId': '51623'}
{'answer': 'I was just trying to do the same thing, and one neat trick i just realized is that you can can try a cast, and if the cast fails, ClassCastException will be thrown.  You can can catch that, and do whatever.   so your sameClassAs method should look like:', 'questionId': '51582', 'answerId': '765241'}
{'answer': 'What is your codebase? Java or C++? alt text http://www.soyatec.com/euml2/images/product_euml2_110x80.png eUML2 for Java is a powerful UML modeler designed for Java developper   in Eclipse. The free edition can be used for commercial use. It   supports the following features: CVS and Team Support Designed for large project with multiple and customizable model views Helios Compliant Real-time code/model synchronization UML2.1 compliant and support of OMG XMI JDK 1.4 and 1.5 support The commercial edition provides: Advanced reversed engineering Powerful true dependency analyze tools UML Profile and MDD Database tools Customizable template support', 'questionId': '51786', 'answerId': '51864'}
{'answer': "Something very simillar has been asked before.   By far the best tool I have used for reverse engineering, and round tripping java -> UML is Borland's Together.  It is based on Eclipse (not just a single plugin) and really works well.", 'questionId': '51786', 'answerId': '114412'}
{'answer': "I would recommend EclipseUML from Omondo for general usage, although I did experience some problems a few months back, with my web projects. They had a free edition at one point in time, but that is supposedly no longer promoted. If you are really keen on reverse engineering sequence diagrams from source code, I would recommend jTracert. As far as Eclipse projects themselves are concerned, the Eclipse UML2 Tools project might support reverse engineering, although I've have never seen its use in practice. The MoDisco (Model Discovery) project Eclipse GMT project seems to be clearer in achieving your objective. The list of technology specific tools would be a good place to start with.", 'questionId': '51786', 'answerId': '732247'}
{'answer': "You could also give the netbeans UML modeller a try. I have used it to generate javacode that I used in my eclipse projects. You can even import eclipse projects in netbeans and keep the eclipse settings synced with the netbeans project settings. I tried several UML modellers for eclipse and wasn't satisfied with them. They were either unstable, complicated or just plain ugly. ;-)", 'questionId': '51786', 'answerId': '824221'}
{'answer': "How about PlantUML? It's not for reverse engineering!!! It's for engineering before you code.", 'questionId': '51786', 'answerId': '4007561'}
{'answer': "You can use the 30 days evaluation build of EclipseUML for Eclipse 3.5 : http://www.uml2.org/eclipse-java-galileo-SR2-win32_eclipseUML2.2_package_may2010.zip This is not the latest 3.6 build but pretty good and don't need to buy it for testing reverse engineering. Reverse engineering : http://www.forum-omondo.com/documentation_eclipseuml_2008/reverse/reverse/reverse_engineering_example.html Live flash demo: http://www.ejb3.org/reverse.swf EclipseUML Omondo is the best tool in the world for Java. Only eUML seems to compete with him on this live java synchronization market but eUML add model tags in the code which is really very very bad and a definitive no go for me.", 'questionId': '51786', 'answerId': '4884743'}
{'answer': 'I found Green plugin very simple to use and to generate class diagram from source code. Give it a try :). Just copy the plugin to your plugin dir.', 'questionId': '51786', 'answerId': '5818760'}
{'answer': 'ObjectAid UML Explorer Is what I used. It is easily installed from the repository: And produces quite nice UML diagrams: Description from the website: The ObjectAid UML Explorer is different from other UML tools. It uses   the UML notation to show a graphical representation of existing code   that is as accurate and up-to-date as your text editor, while being   very easy to use. Several unique features make this possible: Your source code and libraries are the model that is displayed, they are not reverse engineered into a different format. If you update your code in Eclipse, your diagram is updated as well; there is no need to reverse engineer source code. Refactoring updates your diagram as well as your source code. When you rename a field or move a class, your diagram simply reflects the   changes without going out of sync. All diagrams in your Eclipse workspace are updated with refactoring changes as appropriate. If necessary, they are checked out of your   version control system. Diagrams are fully integrated into the Eclipse IDE. You can drag Java classes from any other view onto the diagram, and diagram-related   information is shown in other views wherever applicable.', 'questionId': '51786', 'answerId': '8751193'}
{'answer': "EDIT: If you're a designer then Papyrus is your best choice it's very advanced and full of features, but if you just want to sketch out some uml diagrams and easy installation then ObjectAid  is pretty cool and it doesn't require any plugins I just installed it over Eclipse-Java EE  and works great !. UPDATE Oct 11th 2013 My original post was in June 2012 alot of things have changed many tools has grown and others didn't. Since I'm going back to do some modeling and also getting some replies to the post I decided to install papyrus again, and will investigate other possible uml modeling solutions again. Uml generation (with synchronization feature) is really important not to software designer but to the average developer. I wish papyrus had straightforward way to Reverse Engineer classes into UML class diagram and It would be super cool if that reverse engineering had a synchronization feature, but unfortunately papyrus project is full of features and I think developers there have already much at hand since also many actions you do over papyrus might not give you any response and just nothing happens but that's out of this question scope anyway. The Answer (Oct 11th 2013) Tools Downloaded Eclipse Kepler Modeling Help-> Install modeling components-> papyrus After installation finishes restart Again Help -> Install modeling components -> Modisco Steps In your java project (assume it's called MyProject) create a folder e.g UML Right click over the project name -> Discovery -> Discoverer -> Discover Java and inventory model from java project, a file called MyProject_kdm.xmi will be generated. Right click project name file --> new --> papyrus model -> and call it MyProject. Move the three generated files MyProject.di , MyProject.notation, MyProject.uml to the UML folder Right click on MyProject_kdm.xmi -> Discovery -> Discoverer -> Discover UML model from KDM code again you'll get a property dialog set the serialization prop to TRUE to generate a file named MyProject.uml  Move generated MyProject.uml which was generated at root, to UML folder, Eclipse will ask you If you wanted to replace it click yes. What we did in here was that we replaced an empty model with a generated one. ALT+W -> show view -> papyrus -> model explorer In that view you'll find your classes like in the picture  In the view Right click root model -> New diagram  Then start grabbing classes to the diagram from the view Some features To show the class elements (variables, functions etc) Right click on any class -> Filters -> show/hide contents  Voila !! You can have default friendly color settings from Window -> pereferences -> papyrus -> class diagram one very important setting is Arrange when you drop the classes they get cramped right click on any empty space at class diagram and click Arrange All Arrows in the model explorer view can be grabbed to the diagram to show generalization, realization etc After all of that your settings will show diagrams like  Since Synchronization isn't available as far as I know you'll need to manually import any new classes. That's all, And don't buy commercial products unless you really need it, papyrus is actually great and sophisticated instead donate or something. Disclaimer: I've no relation to the papyrus people infact i didn't like papyrus at first until I did lots of research and experienced it with some patience. And will get back to this post again when I try other free tools.", 'questionId': '51786', 'answerId': '10966290'}
{'answer': 'I suggest PlantUML. this tools is very usefull and easy to use. PlantUML have a plugin for Netbeans that you can create UML diagram from your java code. you can install PlantUML plugin in the netbeans by this method: Netbeans Menu -> Tools -> Plugin Now select Available Plugins and then find PlantUML and install it. For more information go to website: www.plantuml.com', 'questionId': '51786', 'answerId': '31780857'}
{'answer': "I developed a maven plugin that can both, be run from CLI as a plugin goal, or import as dependency and programatically use the parser, @see Main#main() to get the idea on how.  It renders PlantUML src code of desired packages recursively that you can edit manually if needed (hopefully you won't). Then, by pasting code in plantUML page, or by downloading plant's jar you can render the UML diagram as a png image.   Check it out here https://github.com/juanmf/Java2PlantUML Example output diagram: Any contribution is more than welcome. It has a set of filters that customize output but I didn't expose these yet in the plugin CLI params. It's important to note that it's not limited to your *.java files, it can render UML diagrams src from you maven dependencies as well. This is very handy to understand libraries you depend on. It actually inspects compiled classes with reflection so no source needed  Be the 1st to star it at github :P", 'questionId': '51786', 'answerId': '39018106'}
{'answer': 'Using IntelliJ IDEA. To generate class diagram select package and press Ctrl + Alt + U: By default, it displays only class names and not all dependencies. To change it: right click -> Show Categories... and Show dependencies: To genarate dependencies diagram (UML Deployment diagram) and you use maven go View -> Tool Windows -> Maven Projects and press Ctrl + Alt + U: The result: Also it is possible to generate more others diagrams. See documentation.', 'questionId': '51786', 'answerId': '45166435'}
{'answer': 'http://www.zenuml.com does not generate UML diagrams from Java code directly, but its DSL is Java-like. BTW I created zenuml :)', 'questionId': '51786', 'answerId': '45239269'}
{'answer': "You want SVNKit.  It's dual-licensed, so you have to pay only if you're doing commercial work with it.", 'questionId': '52112', 'answerId': '52114'}
{'answer': 'Your HttpServletRequest object has a getParameter(String paramName) method that can be used to get parameter values.  http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)', 'questionId': '5222', 'answerId': '5224'}
{'answer': 'POST variables should be accessible via the request object: HttpRequest.getParameterMap(). The exception is if the form is sending multipart MIME data (the FORM has enctype="multipart/form-data"). In that case, you need to parse the byte stream with a MIME parser. You can write your own or use an existing one like the Apache Commons File Upload API.', 'questionId': '5222', 'answerId': '5227'}
{'answer': "Here's a simple example. I didn't get fancy with the html or the servlet, but you should get the idea. I hope this helps you out. Now for the Servlet", 'questionId': '5222', 'answerId': '11042'}
{'answer': 'The previous answers are correct but remember to use the name attribute in the input fields (html form) or you won\'t get anything. Example:     <input type="text" id="username" /> <!-- won\'t work -->     <input type="text" name="username" /> <!-- will work -->     <input type="text" name="username" id="username" /> <!-- will work too --> All this code is HTML valid, but using getParameter(java.lang.String) you will need the name attribute been set in all parameters you want to receive.', 'questionId': '5222', 'answerId': '40784913'}
{'answer': "I'm guessing you are using a native-codebased database driver (JDBC driver type 1 or 2). And I'm guessing that driver is buggy. If you could provide more information about the driver and your datasource configuration or connection string, it might help determine some answers.", 'questionId': '52343', 'answerId': '52350'}
{'answer': "JVMTI is the debugging and profiling protocol. So, I'm guessint it's something peculiar to the environment you are attempting to run your application in.", 'questionId': '52343', 'answerId': '52458'}
{'answer': "I'm with Tom on this one, it looks like your debugger / JVMTI agent is passing a NULL value to the JVM through the JVMTI interface.  This particular error is probably not a problem with your application code.", 'questionId': '52343', 'answerId': '78624'}
{'answer': "I doubt you want to do it programmatically unless you just want to do it once and store it for future use.  It's a costly thing to do.  There's no sizeof() operator in Java, and even if there was, it would only count the cost of the references to other objects and the size of the primitives. One way you could do it is to serialize the thing to a File and look at the size of the file, like this: Of course, this assumes that each object is distinct and doesn't contain non-transient references to anything else. Another strategy would be to take each object and examine its members by reflection and add up the sizes (boolean & byte = 1 byte, short & char = 2 bytes, etc.), working your way down the membership hierarchy.  But that's tedious and expensive and ends up doing the same thing the serialization strategy would do.", 'questionId': '52353', 'answerId': '52362'}
{'answer': "There isn't a method call, if that's what you're asking for. With a little research, I suppose you could write your own. A particular instance has a fixed sized derived from the number of references and primitive values plus instance bookkeeping data. You would simply walk the object graph. The less varied the row types, the easier. If that's too slow or just more trouble than it's worth, there's always good old-fashioned  row counting rule-of-thumbs.", 'questionId': '52353', 'answerId': '52377'}
{'answer': 'If you would just like to know how much memory is being used in your JVM, and how much is free, you could try something like this: edit: I thought this might be helpful as the question author also stated he would like to have logic that handles "read as many rows as possible until I\'ve used 32MB of memory."', 'questionId': '52353', 'answerId': '52391'}
{'answer': "You have to walk the objects using reflection.  Be careful as you do: Just allocating an object has some overhead in the JVM.  The amount varies by JVM so you might make this value a parameter.  At least make it a constant (8 bytes?) and apply to anything allocated. Just because byte is theoretically 1 byte doesn't mean it takes just one in memory. There will be loops in object references, so you'll need to keep a HashMap or somesuch using object-equals as the comparator to eliminate infinite loops. @jodonnell: I like the simplicity of your solution, but many objects aren't Serializable (so this would throw an exception), fields can be transient, and objects can override the standard methods.", 'questionId': '52353', 'answerId': '52393'}
{'answer': "You have to measure it with a tool, or estimate it by hand, and it depends on the JVM you are using. There is some fixed overhead per object. It's JVM-specific, but I usually estimate 40 bytes. Then you have to look at the members of the class. Object references are 4 (8) bytes in a 32-bit (64-bit) JVM. Primitive types are:  boolean and byte: 1 byte char and short: 2 bytes int and float: 4 bytes long and double: 8 bytes Arrays follow the same rules; that is, it's an object reference so that takes 4 (or 8) bytes in your object, and then its length multiplied by the size of its element. Trying to do it programmatically with calls to Runtime.freeMemory() just doesn't give you much accuracy, because of asynchronous calls to the garbage collector, etc. Profiling the heap with -Xrunhprof or other tools will give you the most accurate results.", 'questionId': '52353', 'answerId': '52395'}
{'answer': 'Firstly "the size of an object" isn\'t a well-defined concept in Java. You could mean the object itself, with just its members, the Object and all objects it refers to (the reference graph). You could mean the size in memory or the size on disk. And the JVM is allowed to optimise things like Strings. So the only correct way is to ask the JVM, which a good profiler (I use YourKit), which probably isn\'t what you want. However, from the description above it sounds like each row will be self-contained, and not have a big dependency tree, so the serialization method will probably be a good approximation on most JVMs. The easiest way to do this is as follows: Remember that if you have objects with common references this will not give the correct result, and size of serialization will not always match size in memory, but it is a good approximation. The code will be a bit more efficient if you initialise the ByteArrayOutputStream size to a sensible value.', 'questionId': '52353', 'answerId': '52401'}
{'answer': 'Some years back Javaworld had an article on determining the size of composite and potentially nested Java objects, they basically walk through creating a sizeof() implementation in Java. The approach basically builds on other work where people experimentally identified the size of primitives and typical Java objects and then apply that knowledge to a method that recursively walks an object graph to tally the total size. It is always going to be somewhat less accurate than a native C implementation simply because of the things going on behind the scenes of a class but it should be a good indicator. Alternatively a SourceForge project appropriately called sizeof that offers a Java5 library with a sizeof() implementation. P.S. Do not use the serialization approach, there is no correlation between the size of a serialized object and the amount of memory it consumes when live.', 'questionId': '52353', 'answerId': '52568'}
{'answer': 'You can use the java.lang.instrument package Compile and put this class in a JAR: Add the following to your MANIFEST.MF: Use getObjectSize: Invoke with:', 'questionId': '52353', 'answerId': '52682'}
{'answer': 'The java.lang.instrument.Instrumentation class provides a nice way to get the size of a Java Object, but it requires you to define a premain and run your program with a java agent. This is very boring when you do not need any agent and then you have to provide a dummy Jar agent to your application. So I got an alternative solution using the Unsafe class from the sun.misc. So, considering the objects heap alignment according to the processor architecture and calculating the maximum field offset, you can measure the size of a Java Object. In the example below I use an auxiliary class UtilUnsafe to get a reference to the sun.misc.Unsafe object.', 'questionId': '52353', 'answerId': '10587479'}
{'answer': 'You could generate a heap dump (with jmap, for example) and then analyze the output to find object sizes.  This is an offline solution, but you can examine shallow and deep sizes, etc.', 'questionId': '52353', 'answerId': '15815016'}
{'answer': 'There is also the Memory Measurer tool (formerly at Google Code, now on GitHub), which is simple and published under the commercial-friendly Apache 2.0 license, as discussed in a similar question. It, too, requires a command-line argument to the java interpreter if you want to measure memory byte consumption, but otherwise seems to work just fine, at least in the scenarios I have used it.', 'questionId': '52353', 'answerId': '18645101'}
{'answer': 'I wrote a quick test once to estimate on the fly: General concept is allocate objects and measure change in free heap space. The key being getFreeMemory(), which requests GC runs and waits for the reported free heap size to stabilize. The output of the above is: Which is what we expect, given alignment behavior and possible heap block header overhead. The instrumentation method detailed in the accepted answer here the most accurate. The method I described is accurate but only under controlled conditions where no other threads are creating/discarding objects.', 'questionId': '52353', 'answerId': '20014332'}
{'answer': ' size gives you the increase in memory usage of the jvm due to object creation and that typically is the size of the object.', 'questionId': '52353', 'answerId': '23511330'}
{'answer': 'Here is a utility I made using some of the linked examples to handle 32-bit, 64-bit and 64-bit with compressed OOP. It uses sun.misc.Unsafe. It uses Unsafe.addressSize() to get the size of a native pointer and Unsafe.arrayIndexScale( Object[].class ) for the size of a Java reference. It uses the field offset of a known class to work out the base size of an object.', 'questionId': '52353', 'answerId': '24423089'}
{'answer': "My answer is based on the code supplied by Nick. That code measures total amount of bytes which are occupied by the serialized object. So this actually measures serialization stuff + plain object memory footprint (just serialize for example int and you will see that total amount of serialized bytes is not 4). So if you want to get raw byte number used exactly for your object - you need to modify that code a bit. Like so: I've tested this solution with primitive types, String, and on some trivial classes. There may be not covered cases also. UPDATE: Example modified to support memory footprint calculation of array objects.", 'questionId': '52353', 'answerId': '26407668'}
{'answer': "This answer is not related to Object size, but when you are using array to accommodate the objects; how much memory size it will allocate for the object. So arrays, list, or map all those collection won't be going to store objects really (only at the time of primitives, real object memory size is needed), it will store only references for those objects.  Now the Used heap memory = sizeOfObj + sizeOfRef (* 4 bytes) in collection (4/8 bytes) depends on (32/64 bit) OS PRIMITIVES OBJECTS I mean to say all the object REFERENCE needs only 4 bytes of memory. It may be String reference OR Double object reference, But depends on object creation the memory needed will vary. e.g) If i create object for the below class ReferenceMemoryTest then 4 + 4 + 4 = 12 bytes of memory will be created. The memory may differ when you are trying to initialize the references. So when are creating object/reference array, all its contents will be occupied with NULL references. And we know each reference requires 4 bytes. And finally, memory allocation for the below code is 20 bytes. ReferenceMemoryTest ref1 = new ReferenceMemoryTest(); ( 4(ref1) + 12 = 16 bytes) ReferenceMemoryTest ref2 = ref1;                      ( 4(ref2) + 16 = 20 bytes)", 'questionId': '52353', 'answerId': '28825937'}
{'answer': "Much of the other answers provide shallow sizes - e.g. the size of a HashMap without any of the keys or values, which isn't likely what you want. The jamm project uses the java.lang.instrumentation package above but walks the tree and so can give you the deep memory use. https://github.com/jbellis/jamm", 'questionId': '52353', 'answerId': '28900509'}
{'answer': 'Without having to mess with instrumentation and so on, and if you don\'t need to know the byte-exact size of an object, you could go with the following approach: This way you read the used memory before and after, and calling the GC just before getting the used memory you lower the "noise" almost to 0. For a more reliable result you can run your job n times, and then divide the used memory by n, obtaining how much memory one run takes. Even more, you can run the whole thing more times and make an average.', 'questionId': '52353', 'answerId': '29431949'}
{'answer': 'Back when I worked at Twitter, I wrote a utility for calculating deep object size. It takes into account different memory models (32-bit, compressed oops, 64-bit), padding, subclass padding, works correctly on circular data structures and arrays. You can just compile this one .java file; it has no external dependencies: https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/objectsize/ObjectSizeCalculator.java', 'questionId': '52353', 'answerId': '29536817'}
{'answer': 'You should use jol, a tool developed as part of the OpenJDK project. JOL (Java Object Layout) is the tiny toolbox to analyze object layout schemes in JVMs. These tools are using Unsafe, JVMTI, and Serviceability Agent (SA) heavily to decoder the actual object layout, footprint, and references. This makes JOL much more accurate than other tools relying on heap dumps, specification assumptions, etc. To get the sizes of primitives, references and array elements, use VMSupport.vmDetails().  On Oracle JDK 1.8.0_40 running on 64-bit Windows (used for all following examples), this method returns You can get the shallow size of an object instance using ClassLayout.parseClass(Foo.class).toPrintable() (optionally passing an instance to toPrintable).  This is only the space consumed by a single instance of that class; it does not include any other objects referenced by that class.  It does include VM overhead for the object header, field alignment and padding.  For java.util.regex.Pattern: You can get a summary view of the deep size of an object instance using GraphLayout.parseInstance(obj).toFootprint().  Of course, some objects in the footprint might be shared (also referenced from other objects), so it is an overapproximation of the space that could be reclaimed when that object is garbage collected.  For the result of Pattern.compile("^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$") (taken from this answer), jol reports a total footprint of 1840 bytes, of which only 72 are the Pattern instance itself. If you instead use GraphLayout.parseInstance(obj).toPrintable(), jol will tell you the address, size, type, value and path of field dereferences to each referenced object, though that\'s usually too much detail to be useful.  For the ongoing pattern example, you might get the following.  (Addresses will likely change between runs.) The "(something else)" entries describe other objects in the heap that are not part of this object graph. The best jol documentation is the jol samples in the jol repository.  The samples demonstrate common jol operations and show how you can use jol to analyze VM and garbage collector internals.', 'questionId': '52353', 'answerId': '30021105'}
{'answer': 'I accidentally found a java class "jdk.nashorn.internal.ir.debug.ObjectSizeCalculator", already in jdk,  which is easy to use and seems quite useful for determining the size of an object. results:', 'questionId': '52353', 'answerId': '39406536'}
{'answer': 'I recommend the java-sizeof library for carrotsearch. It is very simple. You can get it in maven: It is only one code line  that return the bytes of an object: You can see the source code at https://github.com/dweiss/java-sizeof And there is a presentation from the author of the library http://www.slideshare.net/DawidWeiss/sizeofobject-how-much-memory-objects-take-on-jvms-and-when-this-may-matter?ref=http://cheremin.blogspot.com/2012/05/how-much-memory-objects-take-on-jvm-and.html', 'questionId': '52353', 'answerId': '40764295'}
{'answer': "Perhaps Motorola's own site link", 'questionId': '52701', 'answerId': '52710'}
{'answer': 'Yeah, the act of asking the question pointed me in the direction of an answer, and I found this: https://developer.motorola.com/docstools/motodevstudio/ I could still use some pointers from someone of what to expect if anyone has done this before.', 'questionId': '52701', 'answerId': '52829'}
{'answer': "I've never used Morotolla's SDK but from my limited work in JME the real hook in the 3rd party tools are the emulators. Setting up a JME dev environment quickly is something that Sun got surprisingly right. Just get NetBeans with the JME pack and there is a regular emulator right in the IDE, and then you can hook in other proprietary emulators such as those from Motorolla. Not sure what kind of apps you are looking to do, but if you're interested in games I thought Beginning Mobile Phone Game Programming was a great starting point:", 'questionId': '52701', 'answerId': '52961'}
{'answer': "I have not used the new Motorola development studio, because my experience with Motorola's development tools has not been a joyous one. When working with Motorola devices I tend to stick to the standard emulator (or sometimes the Sony Ericsson emulators as those are the best I have worked with by far). The problem with Motorola's tools is that I always seemed to spend way too much time trying to figure out how to work around them. I would run into emulator specific issues and bugs, and I honestly don't have time to waste trying to figure out why the application runs on the target device but crashes on the emulator. It should be the opposite. A good emulator is very important for mobile development though as that is where you will do 90% of your development, testing and tweaking, only periodically trying it out on the phone. Finally, I agree with bpapa...Netbeans is an excellent IDE for J2ME development and here is a book that I recommend (get the original if possible, not the second edition as the second edition focuses way too much on MIDP 2.0 and assumes you know the basics). http://www.amazon.com/J2ME-Game-Programming-Development/dp/1592001181/ref=pd_bbs_sr_3?ie=UTF8&s=books&qid=1221692983&sr=1-3", 'questionId': '52701', 'answerId': '88616'}
{'answer': 'Run a command inside a timer like pinging the server..', 'questionId': '52874', 'answerId': '52882'}
{'answer': "Wouldn't it be easier to disable the power management on the server?  It might be argued that servers shouldn't go into powersave mode?", 'questionId': '52874', 'answerId': '52885'}
{'answer': "I have a very brute-force technique of moving the mouse 1 point in the x direction and then back every 3 minutes. There may me a more elegant solution but it's a quick fix.", 'questionId': '52874', 'answerId': '52888'}
{'answer': "On Windows, use the SystemParametersInfo function.  It's a Swiss army-style function that lets you get/set all sorts of system settings. To disable the screen shutting off, for instance: Just be sure to set it back when you're done...", 'questionId': '52874', 'answerId': '52906'}
{'answer': "I'd just do a function (or download a freebie app) that moves the mouse around. Inelegant, but easy.", 'questionId': '52874', 'answerId': '52913'}
{'answer': "I use this code to keep my workstation from locking. It's currently only set to move the mouse once every minute, you could easily adjust it though. It's a hack, not an elegant solution.", 'questionId': '52874', 'answerId': '52966'}
{'answer': "Wouldn't all the suggestions moving the mouse back and forth drive the user crazy?  I know I'd remove any app that would do that as soon as I can isolate it.", 'questionId': '52874', 'answerId': '53176'}
{'answer': "I've been using pmset to control sleep mode on my Mac for awhile now, and it's pretty easy to integrate. Here's a rough example of how you could call that program from Java to disable/enable sleep mode. Note that you need root privileges to run pmset, and therefore you'll need them to run this program.", 'questionId': '52874', 'answerId': '53276'}
{'answer': "I've heard stories of people getting a large sub-woofer, then duct taping a box lid to the top. You can then put the mouse in the box and turn up the music. Preferably something with a lot of bass that will keep the mouse moving around.", 'questionId': '52874', 'answerId': '53447'}
{'answer': 'You can use the program Caffeine caffiene to keep your workstation awake.  You could run the program via the open command in os X.', 'questionId': '52874', 'answerId': '93610'}
{'answer': "Adding to scarcher2's code snippet above and moving mouse by only 1 pixel. I have moved the mouse twice so that some change occurs even if pointer is on extremes:", 'questionId': '52874', 'answerId': '10280104'}
{'answer': "This code moves the pointer to the same location where it already is so the user doesn't notice any difference.", 'questionId': '52874', 'answerId': '19349044'}
{'answer': 'On OS X, just spawn caffeinate. This will prevent the system from sleeping until caffeinate is terminated.', 'questionId': '52874', 'answerId': '30313322'}
{'answer': 'In Visual Studio create a simple form. From the toolbar, drag a Timer control onto the form. In the Init code, set the timer interval to 60 seconds (60000 ms.). Implement the timer callback with the following code "SendKeys.Send("{F15}");" Run the new program. No mouse movement needed. Edit: At least on my Army workstation, simply programmatically generating mouse and key messages isn\'t enough to keep my workstation logged in and awake.  The early posters with the Java Robot class are on the right track.  JAVA Robot works on or below the OS\'s HAL (Hardware Abstraction Layer) However I recreated and tested the Java/Robot solution and it did not work - until I added a Robot.keyPress(123) to the code.', 'questionId': '52874', 'answerId': '31192583'}
{'answer': 'this may be useful: http://code.google.com/p/openid4java', 'questionId': '53098', 'answerId': '53147'}
{'answer': 'or pick another option from: http://wiki.openid.net/Libraries they are: openid4java WSO OpenID Library joid NetMesh InfoGrid LID', 'questionId': '53098', 'answerId': '53188'}
{'answer': "You seem to be closing the connection properly - except for the case where prepStmt.close() throws a SQLException, I can't find a connection leak. What pool implementation are you using? When you close a connection, the pool need not close the underlying MySQL connection immediately - after all that is the point of a connection pool! So from MySQL side, the connections would look alive, although your app is not using any; they might simply be held by the TC connection pool. You might want to experiment with the settings of the connection pool.Ask it to shrink the pool when the system is idle. Or, ask it to refresh all connections periodically. Or, have a strict upper bound on the number of concurrent connections it ever gets from MySQL etc. One way to check if your code has a connection leak is to force the ds.getConnection() to always open a new physical connection and conn.close() to release the connection (if your connection pool has settings for those). Then if you watch the connections on MySQL side, you might be able to figure out if the code really has a connection leak or not.", 'questionId': '53128', 'answerId': '53285'}
{'answer': 'One thing that @binil missed, you are not closing the result set in the case of an exception.  Depending on the driver implementation this may cause the connection to stay open.  Move the result.close() call to the finally block.', 'questionId': '53128', 'answerId': '53912'}
{'answer': "This is a similar question - Connection Pool Settings for Tomcat  This is my response to that question and it fixed the problem for the other guy. It may help you out too. Tomcat Documentation DBCP uses the Jakarta-Commons Database Connection Pool. It relies on number of Jakarta-Commons components: I'm using the same connection pooling stuff and I'm setting these properties to prevent the same thing it's just not configured through tomcat. But if the first thing doesn't work try these.", 'questionId': '53128', 'answerId': '54095'}
{'answer': "Ok I might have this sorted. I have changed the database config resource to the following: This works well enough for now. What is happening, afaik, is that once I reach the ten connections then Tomcat is checking for abandoned connections (idle time > 3). It does this in a batch job each time that max connections is reached. The potential issue with this is if i need more than 10 queries run at the same time (not unique to me). The important thing is that removeAbandonedTimeout is less than maxWait. Is this what should be happening? ie Is this the way that the pool should operate? If it is is seems, at least to me, that you would wait until something (the connection) is broken before fixing rather than not letting it 'break' in the first place. Maybe I am still not getting it.", 'questionId': '53128', 'answerId': '58778'}
{'answer': 'I am using the same configuration as you are.  If the connection in mysql administrator(windows) shows that it is in sleep mode it only means that is pooled but not in use.  I checked this running a test program program with multiple threads making random queries to Mysql.  if it helps here is my configuration:', 'questionId': '53128', 'answerId': '1085473'}
{'answer': " The issue us that the connection does not close properly and is stuck in the 'sleep' mode This was actually only half right. The problem I ran into was actually that each app was defining a new connection to the database sever. So each time I closed all the connections App A would make a bunch of new connections as per it's WEB.xml config file and run happily. App B would do the same. The problem is that they are independent pools which try to grab up to the server defined limit. It is a kind of race condition I guess. So when App A has finished with the connections it sits waiting to to use them again until the timeout has passed while App B who needs the connection now is denied the resources even though App A has finished with the and should be back in the pool. Once the timeout has passed, the connection is freed up and B (or C etc) can get at it again. e.g. if the limit is 10 (mySQL profile limit) and each app has been configured to use a max of 10 the there will be 20 attempts at connections. Obviously this is a bad situation. The solution is to RTFM and put the connection details in the right place. This does make shared posting a pain but there are ways around it (such as linking to other xml files from the context). Just to be explicit: I put the connection details in the WEB.xml for each app and the had a fight about it.", 'questionId': '53128', 'answerId': '4121987'}
{'answer': "Unfortunately, compilers can't work on theoretical principles, and even though you may know that it is safe in your case, if they allowed it, it would have to be safe for all cases. In other words, the compiler isn't stopping just you, it's stopping everyone, including all those that don't know that it is unsafe and needs special handling. There are probably other reasons for this as well, as all languages usually have ways to do unsafe things if one knows how to deal with them. In C# .NET there are similar provisions, and the only way to declare a constructor that calls a base constructor is this: in doing so, the base constructor will be called before the body of the constructor, and you cannot change this order.", 'questionId': '5328', 'answerId': '5351'}
{'answer': "I don't know how Java is implemented internally, but if the constructor of the superclass throws an exception, then there isn't a instance of the class you extend.  It would be impossible to call the toString() or equals() methods, for example, since they are inherited in most cases. Java may allow a try/catch around the super() call in the constructor if 1. you override ALL methods from the superclasses, and 2. you don't use the super.XXX() clause, but that all sounds too complicated to me.", 'questionId': '5328', 'answerId': '5357'}
{'answer': "I can't presume to have a deep understanding of Java internals, but it is my understanding that, when a compiler needs to instantiate a derived class, it has to first create the base (and its base before that(...)) and then slap on the extensions made in the subclass.  So it is not even the danger of uninited variables or anything like that at all. When you try to do something in the subclass' constructor before the base class' constructor, you are basically asking the compiler to extend a base object instance that doesn't exist yet. Edit:In your case, MyClass becomes the base object, and MyClassMock is a subclass.", 'questionId': '5328', 'answerId': '5360'}
{'answer': "It's done to prevent someone from creating a new SecurityManager object from untrusted code.", 'questionId': '5328', 'answerId': '76957'}
{'answer': "I know this is an old question, but I liked it, and as such, I decided to give it an answer of my own. Perhaps my understanding of why this cannot be done will contribute to the discussion and to future readers of your interesting question. Let me start with an example of failing object construction. Let's define a class A, such that: Now, let's assume we would like to create an object of type A in a try...catch block. Evidently, the output of this code will be: null. Why Java does not return a partially constructed version of A? After all, by the point the constructor fails, the object's name field has already been initialized, right? Well, Java can't return a partially constructed version of A because the object was not successfully built. The object is in a inconsistent state, and it is therefore discarded by Java. Your variable A is not even initialized, it is kept as null.  Now, as you know, to fully build a new object, all its super classes must be initialized first. If one of the super classes failed to execute, what would be the final state of the object? It is impossible to determine that. Look at this more elaborate example When the constructor of C is invoked, if an exception occurs while initializing B, what would be the value of the final int variable b? As such, the object C cannot be created, it is bogus, it is trash, it is not fully initialized. For me, this explains why your code is illegal.", 'questionId': '5328', 'answerId': '10261194'}
{'answer': 'One way to get around it is by calling a private static function. The try-catch can then be placed in the function body.', 'questionId': '5328', 'answerId': '22721701'}
{'answer': "I know this question has numerous answers, but I'd like to give my little tidbit on why this wouldn't be allowed, specifically to answer why Java does not allow you to do this. So here you go... Now, keep in mind that super() has to be called before anything else in a subclass's constructor, so, if you did use try and catch blocks around your super() call, the blocks would have to look like this: If super()fails in thetryblock, it HAS to be executed first in thecatchblock, so thatsuperruns before anything in your subclasss constructor. This leaves you with the same problem you had at the beginning: if an exception is thrown, it isn't caught. (In this case it just gets thrown again in the catch block.) Now, the above code is in no way allowed by Java either. This code may execute half of the first super call, and then call it again, which could cause some problems with some super classes. Now, the reason that Java doesn't let you throw an exception instead of calling super() is because the exception could be caught somewhere else, and the program would continue without calling super() on your subclass object, and possibly because the exception could take your object as a parameter and try to change the value of inherited instance variables, which would not yet have been initialized.", 'questionId': '5328', 'answerId': '43454831'}
{'answer': 'LOB/CLOB column may not be large enough.  Hibernate has some default column sizes for LOB/CLOB that are relatively small (may depend on db).  Anyway, try something like this: Adjust the length (in bytes) based on your needs.', 'questionId': '53316', 'answerId': '53384'}
{'answer': 'Many JDBC drivers, early versions of Oracle in particular, have problems while inserting LOBs. Did you make sure that the query Hibernate fires, with the same parameters bound works successfully in your JDBC driver?', 'questionId': '53316', 'answerId': '54792'}
{'answer': "Try using: That's the finest level you'll get. If it does not show the information you want, then it's not possible.", 'questionId': '53365', 'answerId': '53419'}
{'answer': "Well, it looks like you can't. (Thanks Marcio for the suggestion, but sadly that didn't add anything useful)", 'questionId': '53365', 'answerId': '55810'}
{'answer': 'Try to set log4j.logger.org.hibernate.type=TRACE and see if that helps.', 'questionId': '53365', 'answerId': '61728'}
{'answer': 'yes, you can write a wrapper class around your connection pool, and a wraper around the connection so lets say you have: Change it to: Note the use of WrappedOracleConnection above. You need this because you need to trap the close call Hope this helps, I do something similar on a development server to catch connections that are not closed (not returned to the pool).', 'questionId': '53379', 'answerId': '53449'}
{'answer': 'If you are using JBoss, you can use a "valid-connection-checker". This class is normaly used to check the validity of the Connection. But, as it will be invoked every time the Connection pool gives the user a Connection, you can use it to set the DBMS_ APPLICATION _INFO. You declare such a class in the oracle-ds.xml like this: Your class must implement the org.jboss.resource.adapter.jdbc.ValidConnectionChecker interface. If you use Maven, you can include this interface with the following dependency: This interface has only one method: isValidConnection. I copy my implementation: Hope it helps ! Benot', 'questionId': '53379', 'answerId': '378045'}
{'answer': 'In your -ds.xml, you can set a connection property called v$session.program and the value of that property will populate the PROGRAM column of each session in the V$SESSION view created for connections originating from your connection pool. I usually set it to the jboss.server.name property. See here for an example.', 'questionId': '53379', 'answerId': '9675451'}
{'answer': 'The second requires the spring framework. The only runnable things I could find were a client in eclipse-spring-jdbc-tutorial.zip\\SpringJdbc\\src\\test\\de\\laliluna\\library\\TestClient.java and one in eclipse-spring-jdbc-tutorial.zip\\SpringJdbc\\src\\de\\laliluna\\library\\sample\\MyApplication.java. If you open it in eclipse (it is an eclipse project), and compile, provided the Spring framework is installed, you should be able to run both.', 'questionId': '53387', 'answerId': '53422'}
{'answer': 'I usually debug this by going the the manager page and making sure that all of the contexts are deployed (http://localhost:8080/manager/html).  It sounds like app2 has not been deployed properly or is not starting up because of some other error. I would look at the logs. There may be a bunch of information in there but usually it explains what is broken.', 'questionId': '53387', 'answerId': '53442'}
{'answer': 'The first zip file you mention has a .war file as part of the zip.  The second one is just the source code and it needs to be built into a .war file.   It looks like it is setup to have that done in Eclipse.  Try the File>>Export option and select War file as the export type.', 'questionId': '53387', 'answerId': '56312'}
{'answer': "Are you familiar with log4j?  Spring puts a lot of often-useful information into the logs created via log4j.  When I have a SpringMVC application that won't startup correctly or otherwise isn't running I check my log4j and potentially turn up the Spring log level to INFO or even DEBUG.", 'questionId': '53387', 'answerId': '73893'}
{'answer': 'If "/" is not accessible it means that there is no "index.html", "index.jsp" or whatever is defined in the welcome-files list of the web.xml Also no Servlet-Mapping for the context ROOT directory is present. Check the web.xml for Servlet-Mappings or try to figure out the name of the jsp/html /... file being in the context root', 'questionId': '53387', 'answerId': '85197'}
{'answer': 'The second app (the directory named WebRoot) can also be deployed correctly but you get a 404 by going to it because there is not an "index.jsp" or "index.html" file in the root directory. Try putting a file there with any of those names, and the 404 is gone. A servlet mapping in the web.xml is not strictly necessary for this to work.', 'questionId': '53387', 'answerId': '138198'}
{'answer': 'I believe you need to add the cache annotations to tell hibernate how to use the second-level cache (read-only, read-write, etc). This was the case in my app (using spring / traditional hibernate and ehcache, so your mileage may vary). Once the caches were indicated, I started seeing messages that they were in use from hibernate.', 'questionId': '53562', 'answerId': '53992'}
{'answer': 'Follow-up: in the end, after adding annotations, I have it working with EhCache, i.e.', 'questionId': '53562', 'answerId': '54415'}
{'answer': 'I think, the easiest way is a socket connection to a whois server on port 43. Send the domainname followed by a newline and read the response.', 'questionId': '53623', 'answerId': '53631'}
{'answer': "Here's the Java solution, which just opens up a shell and runs whois:", 'questionId': '53623', 'answerId': '53632'}
{'answer': 'Thomas\' answer will only work if you know which "whois" server to connect to. There are many different ways of finding that out, but none (AFAIK) that works uniformly for every domain registry. Some domain names support an SRV record for the _nicname._tcp service in the DNS, but there are issues with that because there\'s no accepted standard yet on how to prevent a subdomain from serving up SRV records which override those of the official registry (see http://tools.ietf.org/html/draft-sanz-whois-srv-00). For many TLDs it\'s possible to send your query to <tld>.whois-servers.net.  This actually works quite well, but beware that it won\'t work in all cases where there are officially delegated second level domains. For example in .uk there are several official sub-domains, but only some of them are run by the .uk registry and the others have their own WHOIS services and those aren\'t in the whois-servers.net database. Confusingly there are also "unofficial" registries, such as .uk.com, which are in the whois-servers.net database. p.s. the official End-Of-Line delimiter in WHOIS, as with most IETF protocols is CRLF, not just LF.', 'questionId': '53623', 'answerId': '177758'}
{'answer': 'I found some web services that offer this information.  This one is free and worked great for me.  http://www.webservicex.net/whois.asmx?op=GetWhoIS', 'questionId': '53623', 'answerId': '923873'}
{'answer': "I found a perfect C# example here.  It's 11 lines of code to copy and paste straight into your own application.", 'questionId': '53623', 'answerId': '1067587'}
{'answer': "I found a perfect C# example here. It's 11 lines of code to copy and paste straight into your own application. BUT FIRST you should add some using statements to ensure that the dispose methods are properly called to prevent memory leaks:", 'questionId': '53623', 'answerId': '16179401'}
{'answer': ' Write a function to swap variable values using pointers (Really poor ones will fall for this) Write a program to find the distance between two points in the XY plane. Make use of a class to store the points. Demonstrate the use of polymorphism in java using as simple program. Write a program to print the first n prime numbers. Write a program to replace a string in a file with another.', 'questionId': '53808', 'answerId': '53821'}
{'answer': "Is there any reason why it has to be on a whiteboard?  Personally, I'd rather sit them in front of a keyboard and have them write some code.  Our test used to be a simple 100 (IIRC) line Swing text editor.  We then broke it a few simple ways, some making the code not compile and some a little more subtle, and gave the candidates half and hour and a list of problems to fix. Even if you can't have them do anything hands on make sure that you do give them some explicitly technical questions.  In another round of interviews there were a surprising number of recent graduates who were  just buzzword-spouting IDE-jockeys, so they could look OKish waving their hands around in front of a whiteboard talking about Enterprise-this and SOA-that, but when given a simple Java fundamentals multiple choice exam asking things about what final and protected meant did horrifyingly badly.", 'questionId': '53808', 'answerId': '53828'}
{'answer': 'Some stuff that has showed up on SO: IsPalindrome(string s) ReverseWordsInString(string s): "I know java" --> "java know I" Other stuff that springs to mind: multiply a Vector with a Matrix (can this be done OO-Style?) echo (yes, a simple clone of the unix tool) cat (15 min should be enough, should weed out the clueless) a simple container for ints. Like ArrayList. Bonus question: Generic?', 'questionId': '53808', 'answerId': '53830'}
{'answer': "I've always thought that algorithmic questions should be language agnostic. If you want to test the java level of a student, focus on the language: its keywords (from common one like static to more exotic one, like volatile), generics, overloading, boxing/unboxing of variable, standard libraries.", 'questionId': '53808', 'answerId': '53847'}
{'answer': 'I agree with Nicolas in regards to separating the algorithmic questions from the actual language questions.  One thing that you might want to consider is giving them a couple simple algorithm questions that they can write up the pseudo code for on the white board (ex. "Explain to me the Bubble sort and show me the pseudo code for it."  Then once they have demonstrated their algorithmic knowledge you can move on to the Java questions. Since some people work better in front of a computer than in front of the whiteboard, I would give them something simple, but leveraging their knowledge of Java, that they can implement in 30 minutes or so in using the same IDE that you are using at the company. This way if they claim to know the IDE you can also get an idea of how well they know it.', 'questionId': '53808', 'answerId': '53895'}
{'answer': ' Write a function that merges two sorted lists -- stopping at limit. Look for the easy optimizations and correct boundary checks / sublist calls. Tell them T implements compareTo. public List<T> merge(List<T> one, List<T> two, int limit) Write a function that returns true if any two integers in the array sum to the given sum. Have them try to do better than n squared using some sort of set or data structure. public boolean containsSum(int[] nums, int sum)', 'questionId': '53808', 'answerId': '232290'}
{'answer': "I would avoid asking them questions that would have been covered in their undergrad classes.  I would be more curious about their ability to apply everything they've learned to solve complex technical problems.  If your business has a specific need for an IT solution you could use that as a starting point.  You could ask the candidate what technologies they would use and the pros and cons of using those technologies versus alternate technologies.  As the discussion progresses you could get a feel for their technical skills, problem solving skills, interpersonal skills, etc.  I think it is important to avoid coaching them, even in awkward moments.  This is important to weed out the BSers.", 'questionId': '53808', 'answerId': '232326'}
{'answer': "If you don't know what questions to ask them, then may be you are not the right one to interview them in Java. With all due respect, I hate when people ask me questions in interviews which they themselves don't know answers for. Answers for most of the questions can be found online by googling in a few secs. If someone has experience in Java, they will definitely know Abstract class, interface etc as they are the core building blocks. If he/she does not know 'volatile' keyword - big deal.", 'questionId': '53808', 'answerId': '1309398'}
{'answer': 'Usually when an application is in "full screen" mode it will take over the entire desktop.  For a user to get to another window they would have to alt-tab to it.  At that point windows would minimize the full screen app so that the other application could come to the front.  This sounds like it may be a bug (undocumented feature...) in windows.  It should probably not be doing this for a dual screen setup.   One option to fix this is rather than setting it to be "full screen" just make the window the same size as the screen with location (0,0).  You can get screen information from the GraphicsConfigurations on the GraphicsDevice.', 'questionId': '53820', 'answerId': '53831'}
{'answer': 'The following code works (thank you John). With no full screen and a large "always on top" window. But I still don\'t know why windows caused this stranged behavior...', 'questionId': '53820', 'answerId': '56166'}
{'answer': 'Here is an in length discussion about the topic. It includes discussion about different compilers and IDEs.', 'questionId': '53845', 'answerId': '53854'}
{'answer': 'To compile the Java program MyJavaProg.java, type: To link it, use the command: and then linking to create an executable mycxxprog.exe', 'questionId': '53845', 'answerId': '53856'}
{'answer': "This is possible with Adobe's Flash Media Server. Red5 is an open source alternative. The protocol they use for this is RTMP.", 'questionId': '54221', 'answerId': '54234'}
{'answer': "On the server side, you have three alternatives: Adobe's Flash Media Server Red5, an open source version Wowza Media Server Pro, a commercial alternative You can either run any of these on your own server or else go for a web provider (I found this list to be helpful) On the client side, you'll need a flash file for the user interface. Red5 and Wowza some with the source code for their example recorders so it's easy to customize these for your own use.", 'questionId': '54221', 'answerId': '64020'}
{'answer': 'In addition to the above choices, you can also use haxevideo (open source)', 'questionId': '54221', 'answerId': '108595'}
{'answer': 'java.util.Properties is based on Hashtable, which does not store its values in alphabetical order, but in order of the hash of each item, that is why you are seeing the behaviour you are.', 'questionId': '54295', 'answerId': '54303'}
{'answer': "java.util.Properties is a subclass of  java.util.Hashtable.  ('Hash', being the key here.)You'd have to come up with your own customer implementation based on something that keeps/defines order...like a TreeMap.", 'questionId': '54295', 'answerId': '54308'}
{'answer': 'You could sort the keys first, then loop through the items in the properties file and write them to the xml file.', 'questionId': '54295', 'answerId': '54316'}
{'answer': "You could try this: Make a new class that does what java.util.XMLUtils does but in the save method change this: to Extend properties and override the Properties class storeToXML method to call your new class's save method.", 'questionId': '54295', 'answerId': '54382'}
{'answer': 'Why do you want the XML file to be sorted in the first place?  Presumably, there is another piece of code that reads the file and puts the data in another Properties object.  Do you want to do this so you can manually find and edit entries in the XML file?', 'questionId': '54295', 'answerId': '54399'}
{'answer': 'The simplest hack would be to override keySet. A bit of a hack, and not guaranteed to work in future implementations: (Disclaimer: I have not even tested that it compiles.) Alternatively, you could use something like XSLT to reformat the produced XML.', 'questionId': '54295', 'answerId': '54402'}
{'answer': 'Here\'s a quick and dirty way to do it: Here are the caveats: The tmp Properties (an anonymous subclass) doesn\'t fulfill the contract of Properties. For example, if you got its keySet and tried to remove an element from it, an exception would be raised. So, don\'t allow instances of this subclass to escape! In the snippet above, you are never passing it to another object or returning it to a caller who has a legitimate expectation that it fulfills the contract of Properties, so it is safe. The implementation of Properties.storeToXML could change, causing it to ignore the keySet method. For example, a future release, or OpenJDK, could use the keys() method of Hashtable instead of keySet. This is one of the reasons why classes should always document their "self-use" (Effective Java Item 15). However, in this case, the worst that would happen is that your output would revert to unsorted. Remember that the Properties storage methods ignore any "default" entries.', 'questionId': '54295', 'answerId': '54454'}
{'answer': "Here's a way to produce sorted output for both store Properties.store(OutputStream out, String comments) and Properties.storeToXML(OutputStream os, String comment):", 'questionId': '54295', 'answerId': '3253071'}
{'answer': 'You can implement your LinkedProperties which is sorted instead of using the Properties of Java. The source code sample:', 'questionId': '54295', 'answerId': '10526812'}
{'answer': 'Here is another solution:', 'questionId': '54295', 'answerId': '17982586'}
{'answer': "In my testing, the other answers to this question don't work properly on AIX. My particular test machine is running this version: IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 AIX ppc64-64 jvmap6460sr9-20110624_85526 After looking through the implementation of the store method, I found that it relies upon entrySet. This method works well for me.", 'questionId': '54295', 'answerId': '23092108'}
{'answer': 'If you use DecimalFormat and specify # in the pattern it only displays the value if it is not zero. See my question How do I format a number in java? Sample Code', 'questionId': '54487', 'answerId': '54502'}
{'answer': 'Check out the DecimalFormat class, e.g. new DecimalFormat("0.##").format(99.0) will return "99".', 'questionId': '54487', 'answerId': '54509'}
{'answer': '', 'questionId': '54487', 'answerId': '54511'}
{'answer': "Show us a small section of your code. Looks like it's a problem with JComboBox being a composite component. I'd suggest avoiding such nasty UI solutions.", 'questionId': '54567', 'answerId': '54614'}
{'answer': 'I found a workaround. I thought I\'d let the next person with this problem know about.  Basically. Instead of setting the inputVerifier on the ComboBox you set it to it\'s "Editor Component".', 'questionId': '54567', 'answerId': '54799'}
{'answer': "The only way I can think of doing it is by invoking a command line application that does the job for you and then screenscraping the output (like Linux's ps and Window's tasklist).  Unfortunately, that'll mean you'll have to write some parsing routines to read the data from both.", 'questionId': '54686', 'answerId': '54696'}
{'answer': 'This is another approach to parse the the process list from the command "ps -e": If you are using Windows, then you should change the line: "Process p = Runtime.getRun..." etc... (3rd line), for one that looks like this: Hope the info helps!', 'questionId': '54686', 'answerId': '54950'}
{'answer': 'There is no platform-neutral way of doing this. In the 1.6 release of Java, a "Desktop" class was added the allows portable ways of browsing, editing, mailing, opening, and printing URI\'s. It is possible this class may someday be extended to support processes, but I doubt it. If you are only curious in Java processes, you can use the java.lang.management api for getting thread/memory information on the JVM.', 'questionId': '54686', 'answerId': '55002'}
{'answer': "YAJSW (Yet Another Java Service Wrapper) looks like it has JNA-based implementations of its org.rzo.yajsw.os.TaskList interface for win32, linux, bsd and solaris and is under an LGPL license.  I haven't tried calling this code directly, but YAJSW works really well when I've used it in the past, so you shouldn't have too many worries.", 'questionId': '54686', 'answerId': '4465630'}
{'answer': 'On Windows there is an alternative using JNA:', 'questionId': '54686', 'answerId': '9463010'}
{'answer': "Using code to parse ps aux for linux and tasklist for windows are your best options, until something more general comes along. For windows, you can reference: http://www.rgagnon.com/javadetails/java-0593.html Linux can pipe the results of ps aux through grep too, which would make processing/searching quick and easy. I'm sure you can find something similar for windows too.", 'questionId': '54686', 'answerId': '10638518'}
{'answer': ' TASKLIST /v /FI "STATUS eq running" /FO "CSV" /FI "Username eq LHPL002\\soft"  /FI "MEMUSAGE gt 10000"  /FI "Windowtitle ne N/A" /NH', 'questionId': '54686', 'answerId': '16828521'}
{'answer': 'You can easily retrieve the list of running processes using jProcesses', 'questionId': '54686', 'answerId': '35390242'}
{'answer': 'For windows I use following:', 'questionId': '54686', 'answerId': '41634959'}
{'answer': 'Finally, with Java 9 it will be possible with ProcessHandle:', 'questionId': '54686', 'answerId': '45068036'}
{'answer': 'If you are using Java 6 you can just use the open method of java.awt.Desktop to launch the file using the default application for the current platform.', 'questionId': '54861', 'answerId': '54967'}
{'answer': "Not sure if this will help you much... I use java 1.5+'s ProcessBuilder  to launch external shell scripts in a java program.  Basically I do the following: ( although this may not apply because you don't want to capture the commands output; you actually wanna fire up the document - but, maybe this will spark something that you can use )", 'questionId': '54861', 'answerId': '55018'}
{'answer': 'The issue may be the "start" command you are using, rather than your file name parsing. For example, this seems to work well on my WinXP machine (using JDK 1.5)', 'questionId': '54861', 'answerId': '55059'}
{'answer': 'You should be catching the exception in a try-catch block. That returns StackTraceElement[] that you can then interpret. Also: will...print the stacktrace.', 'questionId': '54882', 'answerId': '54887'}
{'answer': 'You cannot just do an exception.ToString() like in .NET and get everything?', 'questionId': '54882', 'answerId': '54891'}
{'answer': 'Just creating an arbitrary exception does the trick for me:', 'questionId': '54882', 'answerId': '54892'}
{'answer': "As well as what @jjnguy said, if you don't have an exception, you can also call Thread.getStackTrace().", 'questionId': '54882', 'answerId': '54896'}
{'answer': 'Thread.dumpStack();', 'questionId': '54882', 'answerId': '54944'}
{'answer': "If you want to save the stack trace into a String you can do this; Where e is, obviously, an exception. Besides, it sounds very weird to autogenerate an own Exception just to find get a stack trace for a debug. Get Eclipse and use it's debug mode, it's really awesome.", 'questionId': '54882', 'answerId': '56284'}
{'answer': "If you're using log4j will print the stacktrace to your log.", 'questionId': '54882', 'answerId': '59775'}
{'answer': 'Just because I needed it myself: As inspired by answer How do I find the caller of a method using stacktrace or reflection? , you can retrieve the call stack using  Then you process and print/log whatever you are interested in. More work than using Thread.dumpStack(), but more flexible.', 'questionId': '54882', 'answerId': '1742636'}
{'answer': 'To simply print the current stack trace to stderr, you can call: which itself just calls: To output to stdout rather than stderr, pass System.out to printStackTrace():', 'questionId': '54882', 'answerId': '36439329'}
{'answer': 'Crtl+1 is my favorite.   The quick fixes for the red-squiggles. It is also located in the Edit Menu -> Quick Fix.', 'questionId': '54886', 'answerId': '54894'}
{'answer': 'Ctrl+f then tick the "Regular expressions" checkbox.  From that, you can search with regular expressions, but even more powerfully, you can include group matches in your replacement string ($1, $2, etc, or $0 for the whole match).', 'questionId': '54886', 'answerId': '54905'}
{'answer': 'Alt + Shift + R to refactor and rename.', 'questionId': '54886', 'answerId': '54913'}
{'answer': 'Ctrl+Shift+O to organize imports, which will format them nicely, remove unneeded imports, and add missing imports.', 'questionId': '54886', 'answerId': '54920'}
{'answer': 'ctrl-shift-r and its buddy, ctrl-shift-t, to open a resource or type, respectively.  Resources includes all files in your open projects (including non-java files), and types includes java types either in your projects, or in a library included in the projects.', 'questionId': '54886', 'answerId': '54930'}
{'answer': ' CTRL-SHIFT-g : finds usages of the method or field under the cursor, absolutely necessary for understanding code CTRL-F6 : navigate between the list of open editor windows, if you just type it once and let go you toggle back to the previous editor window, doing this successively is a nice way to jump back and forth CTRL-t : on a class or method will show you the type hierarchy, very useful for finding implementations of an interface method for example', 'questionId': '54886', 'answerId': '54985'}
{'answer': 'CTRL + b: to build the project under c++ CTRL + SHIFT + f: to format your code (c++)', 'questionId': '54886', 'answerId': '54992'}
{'answer': 'Alt+Shift+Up Arrow does escalating selection. Alt+Shift+Down does the opposite.', 'questionId': '54886', 'answerId': '55005'}
{'answer': 'Save Actions rocks. There you can get your Imports organized (Ctrl+Shift+o) and formatting of code (CTRL + SHIFT + f). Besides from that i love ALt + Shift + R for refactoring. My favorite things is the plugins though:  They might cause you to use more time but most of the time they give quality (subjective I know)   Code coveragde (ECLEMMA) Static analysis on source(PMD) Static analysis on byte code(FindBugs) CheckStyle SpringIDE. Then you start to rock with the mandatory source control plugins and the maven 2 plugin.  Rock on!', 'questionId': '54886', 'answerId': '55067'}
{'answer': 'Alt-Up Arrow moves the current selection up a line, Alt-Down Arrow moves it down. I also use Alt-Shift-Up/Down Arrow all the time. Ctrl-K and Ctrl-Shift-K is quite handy, finding next/previous occurrence of the current selection (or the last Find, if nothing is selected).', 'questionId': '54886', 'answerId': '55334'}
{'answer': 'Ctrl+Alt+UP or Ctrl+Alt+DOWN to copy lines', 'questionId': '54886', 'answerId': '55761'}
{'answer': 'Alt+Up or Alt+Down to move lines', 'questionId': '54886', 'answerId': '55763'}
{'answer': 'Ctrl+Shift+Enter to move the current line down by one and start typing above it. Ctrl+Shift+X to capitalize the current selection, Ctrl-Shift-Y to change it lowercase. Ctrl+. Autocompletes the current word. This works for variables as well as strings (which is a huge timesaver for array keys, for example)', 'questionId': '54886', 'answerId': '55780'}
{'answer': "Don't forget Ctrl+Shift+L, which displays a list of all the keyboard shortcut combinations (just in case you forget any of those listed here).", 'questionId': '54886', 'answerId': '56394'}
{'answer': 'If you want to put a System.out.println("anything"); to your code you can simply do as follows: Only write ", then mark the "" and press Crtl-Space Up-Arrow and enter (you should land on "sysout"). Voila, there it is :)', 'questionId': '54886', 'answerId': '56461'}
{'answer': 'Of course all these shortcuts are available in the menus but who has time for that when you\'re in the "zone". I like the code hot swapping.', 'questionId': '54886', 'answerId': '56861'}
{'answer': 'Ctrl-J starts an incremental find. Hit Ctrl-J, then start typing. Use up/down to find previous/next instances of what you typed. Ctrl-Shift-J searches backwards.', 'questionId': '54886', 'answerId': '58334'}
{'answer': 'Ctrl+Shift+L will show you all the currently available keyboard shortcuts', 'questionId': '54886', 'answerId': '58336'}
{'answer': 'A non-keyboard shortcut trick is to use commit sets in your Team->Synchronise view to organise your changes before committing. Set a change set to be the default, and all changes you make on files will be put in that set, making it easy to see what you have changed while working on a specific defect/feature, and other changes you had while testing etc.', 'questionId': '54886', 'answerId': '58341'}
{'answer': 'F3 has been my favorite, opens the definition for the selected item.  Ctrl+Shift+R has an interesting feature, you can use just the uppercase camel letters from a class when searching (such as typing CWAR will show a result for ClassWithAReallyLongName). Alt+Shift+W > Package Explorer makes life easier when browsing large projects.', 'questionId': '54886', 'answerId': '58360'}
{'answer': 'Hippie expand/Word Complete, afaik inspired by Emacs: will autocomplete any word in any editor based on other words in that file. Autocomplete inside String literals in Java code, in xml files, everywhere. Alt + /', 'questionId': '54886', 'answerId': '58665'}
{'answer': 'Ctrl+Alt+H on a method to get the call hierarchy for it. Fast way to see where it is called from.', 'questionId': '54886', 'answerId': '58859'}
{'answer': "Alt-Shift-R stands for rename, not refactor. Refactoring is a more general term (as defined by the book). Nevertheless, it is one of my favorite refactorings. Others include: Alt-Shift-M: Extract Method (when a code block or an expression is selected) Alt-Shift-L: Extract Local Variable (when an expression is selected) Extract Local Variable is especially useful when I don't remember (or bother to type) the result type of a method. Assuming you have a method JdbcTemplate createJdbcTemplate() in your class, write some code such as this: Select the expression createJdbcTemplate(), click Alt-Shift-L, type the name of variable and press enter.", 'questionId': '54886', 'answerId': '59413'}
{'answer': 'CTRL+3 brings up a type-ahead list of any menu command.', 'questionId': '54886', 'answerId': '59799'}
{'answer': "CTRL+SPACE, for anything, anywhere. Generate getters and setters. Create Constructors using Fields Extract Method... Refactor->Rename CTRL+O for the quick outline.  CTRL+O+CTRL+O for the inherited outline. F4 to display a type hierarchy Open Call Hierarchy to display where a method is called from. CTRL+SHIFT+T to open a Java Type CTRL+SHIFT+R to open any resource. ALT + left or right to go forward or backwards through edit places in your documents (easy navigation) Override/Implement methods if you know you're going to do a lot of methods (otherwise, CTRL+SPACE is better for one at a time selection. Refactor->Extract Interface Refactor->Pull up Refactor->Push down CTRL+SHIFT+O for organize imports (when typing the general class name such as Map, pressing CTRL+SPACE and then selecting the appropriate class will import it directly for you). CTRL+SHIFT+F for formatting (although Eclipse's built in formatter can be a little braindead for long lines of code) EDIT: Oh yeah, some debugging: F5: Step into (show me the details!) F6: Step over (I believe you, on to the next part...) F7: Step out (I thought I cared about this method, but it turns out I don't, get me out of here!) F8: Resume (go until the next breakpoint is reached) CTRL+SHIFT+I: inspect an expression.  CTRL+SHIFT+I+CTRL+SHIFT+I: create a watch expression on the inspected expression. Conditional breakpoints: Right click a breakpoint and you may set a condition that occurs which triggers its breaking the execution of the program (context assist, with Ctrl+Space, is available here!) F11 - Debug last launched (application) CTRL+F11 - Run last launched (application)", 'questionId': '54886', 'answerId': '69718'}
{'answer': "Type 'syso' then press Ctrl+Space to expand it to System.out.println(). Tres handy.", 'questionId': '54886', 'answerId': '70719'}
{'answer': "Nobody's mentioned the best one yet.  Click on a class or method name and press Ctrl+T. You get a quick type hierarchy.  For a class name you see the entire class hierarchy.  For a method name you get the hierarchy showing superclasses and subclasses, with implementations of that method distinguished from abstract mentions, or classes that don't mention the method. This is huge when you are at an abstract method declaration and quickly want to see where it is implemented.", 'questionId': '54886', 'answerId': '96109'}
{'answer': 'When debugging I find the "Display" view really useful. It lets you type code (using auto complete) and lets you run/display the outcome of whatever you write. Give it a try!', 'questionId': '54886', 'answerId': '99003'}
{'answer': 'There\'s an option to place the opening curly brace and a semicolon automagically in the "correct" position. You\'ll have to enable this - Choose Window/Preferences and type "brace" in the searchbox - should be easily findable (no eclipse on this computer). The effect:  Typing a semicolon anywhere on the line will place it at this lines end (as in word/openoffice: Backspace if you\'d like to have it in the original place) Typing an opening curly brace when you\'re just inside another pair of braces will place it at the end of this line - as in this example ("|" is the cursor): typing "{" now will result in', 'questionId': '54886', 'answerId': '104569'}
{'answer': 'ctrl + O is an popup outline view that lets you start typing to filter on a name Ctrl + F3 works similarly, but it can open other types\' outlines based on where your cursor is. Turn on the Save Action to clean up your code and it will be automatically formatted and import optimized every time you save.  To easily get to this option choose "Windows|Preferences" start type "Save Act" in the filter box and turn on the option. In the new 3.4 release, turn on the "Breadcrumb trail" at the top of the editor window.  There\'s a new toolbar button for this.', 'questionId': '54886', 'answerId': '116765'}
{'answer': "Code completion supports CamelCase, e.g., typing CWAR will show a result for ClassWithAReallyLongName.  Start using this feature and you'll never type another long classname again. (parts copied from another answer because i think answers w/ just one hint/tip are best for polling)", 'questionId': '54886', 'answerId': '133850'}
{'answer': 'Quick Assist: Ctrl + 2, followed by F (assign to field), L(assign to local variable) and R (rename in file) Last edit location: Ctrl+Q Check out this article: http://dmy999.com/article/29/using-eclipse-efficiently', 'questionId': '54886', 'answerId': '175254'}
{'answer': "Of course if you can't find the binding you are looking for, or don't like the current binding Window -> Preferences -> General -> Keys will allow you to change, add & delete the mappings of your key combo's.", 'questionId': '54886', 'answerId': '199513'}
{'answer': 'ALT+Shift+X + T  This will run your current file as a unit test.', 'questionId': '54886', 'answerId': '199535'}
{'answer': 'CTRL + D - to delete current line', 'questionId': '54886', 'answerId': '202045'}
{'answer': 'Ctrl-1 to convert if to conditional expression and back, split an assignment or join it back or do other such small manipulations. There is a list of these in the help.', 'questionId': '54886', 'answerId': '202070'}
{'answer': 'ctrl-alt-up/down to copy a line up (or down). That followed by alt-up/down is often much quicker than a copy-paste', 'questionId': '54886', 'answerId': '225883'}
{'answer': 'Don\'t know a keyboard shortcut to it, but select a local variable in a method, and then right click. Under refactor is "convert local variable to field". Very useful on occasions. Just wish there was a shortcut for it!', 'questionId': '54886', 'answerId': '225891'}
{'answer': 'Ctrl-Alt-h To open the Call hierarchy of the selected method. Really useful on large codebases or unknown codebases', 'questionId': '54886', 'answerId': '403716'}
{'answer': 'Depending on what time saver means to you... Adding TODO and FIXME in a comment automatically adds a task to the task list in Eclipse. So if there is code you want to come back to, say you were debugging and need to do some research, you can do... FIXME means it is urgent, which puts a red ! in the task window TODO is normal urgency And then there are the setters/getters automatically being built. This is great if you are creating a bean or something. Say you have declared a class such as: You can create all the variables, then right-click in the editor, go to Source and then pick Generate Setters & Getters. This will automatically create them for you.', 'questionId': '54886', 'answerId': '548271'}
{'answer': 'If you build your project with Ant you can assign a shortcut to "Runs the last launched external Tool" like Ctrl+Enter and it will repeat your last build. It is much easier than  standard Alt+Shift+X,Q also it helps with a bug in the latest Eclipse that cannot find an ant build file in the project.', 'questionId': '54886', 'answerId': '550361'}
{'answer': 'Breakpoint on Exception Eclipse let you set breakpoints based on where an Exception occurs. You access the option via the "j!" alt text http://help.eclipse.org/stable/topic/org.eclipse.jdt.doc.user/images/org.eclipse.jdt.debug.ui/elcl16/exc_catch.png icon in the debugging window. alt text http://blogs.bytecode.com.au/glen/2007/04/06/images/2007/AddExceptionWindow.png The official help topic "Add Java Exception Breakpoint " has more on this. The Uncaught Exception option is to suspend execution when an exception of the same type as the breakpoint is thrown in an uncaught location. The Caught Exception option is to suspend execution when an exception of the same type as the breakpoint is thrown in a caught location.  do not forget the Exception Breakpoint Suspend on Subclass of this Exception: to suspend execution when subclasses of the exception type are encountered. For example, if an exception breakpoint for RuntimeException is configured to suspend on subclasses, it will also be triggered by a NullPointerException. alt text http://help.eclipse.org/stable/topic/org.eclipse.jdt.doc.user/reference/breakpoints/images/ref-breakpoint_suspendsubclass.PNG', 'questionId': '54886', 'answerId': '591345'}
{'answer': "I'm really biased and this is blatant advertising...  Still, I think my new Eclipse plugin, nWire, is the best time saver you can get for Eclipse. I developed it after years of working with Eclipse, I just came to the conclusion that I need one tool to show me all the associations of my code instead of learning different tools and views.  Check out the demo on my web site.", 'questionId': '54886', 'answerId': '593725'}
{'answer': "Ctrl+, and Ctrl+. move the text cursor to the next and previous error or warning (red or yellow squiggle) in the source. This gets really useful if you're dealing with a big block of dirty or broken code when you're in the depths of refactoring or pasting. Combined with Ctrl+1 for suggest fix you can quickly repair the code without having to move your hand to the mouse.  In fact, you barely have to lift your finger off Ctrl...", 'questionId': '54886', 'answerId': '593745'}
{'answer': 'Absolutely, Ctrl+Q to go to last edit location. It is very useful just after being interrupted by phone, boss or others.', 'questionId': '54886', 'answerId': '595376'}
{'answer': 'Ctrl-Shift- Up or Down in Java editor jumps to to nearest declaration of a method or a field in that direction.', 'questionId': '54886', 'answerId': '595453'}
{'answer': "A hidden gem is the conditional breakpoint. Really useful for skipping over portions of loops, pausing if something is null or meets a certain value, etc... just right-click on the breakpoint, Breakpoint Properties --> Enable Condition. There's even code assist within the textbox!", 'questionId': '54886', 'answerId': '602021'}
{'answer': "Ctrl-2 something Seems that nobody mentioned Ctrl-2 L (assign to new local variable) and Ctrl-2 F (assign to a new field), these ones have changed how I write code. Previously, I was typing, say (| is cursor location): and then I pushed Ctrl-Space to complete the constructor call. Now I type: and press Ctrl-2 L, which results in: This really speeds things up. (Ctrl-2 F does the same, but assigns to a new field rather than a new variable.) Another good shortcut is Ctrl-2 R: rename in file. It is much faster than rename refactoring (Alt-Shift-R) when renaming things like local variables. Actually I went to Keys customization preference page and assigned all sorts of additional quick fixes to Ctrl-2-something. For example I now press Ctrl-2 J to split/join variable declaration, Ctrl-2 C to extract an inner class into top-level, Ctrl-2 T to add throws declaration to the function, etc. There are tons of assignable quick fixes, go pick your favourite ones and assign them to Ctrl-2 shortcuts. Templates Another favourite of mine in my npe template, defined as: This allows me to quickly add null argument checks at the start of every function (especially ones that merely save the argument into a field or add it into a collection, especially constructors), which is great for detecting bugs early. See more useful templates at www.tarantsov.com/eclipse/templates/. I won't list them all here because there are many, and because I often add new ones. Completion A few code completion tricks: camel case support mentioned in another answer: type cTM, get currentTimeMillis default constructor: in the class declaration with no default constructor push Ctrl-Space, the first choice will be to create one overloading: in the class declaration start typing name of a method you can overload, Ctrl-Space, pick one getter/setter creation: type get, Ctrl-Space, choose a getter to create; same with is and set Assign To A New Field This is how I add fields. If you have no constructors yet, add one. (Ctrl-Space anywhere in a class declaration, pick the first proposal.) Add an argument (| is cursor position): Press Ctrl-1, choose assign to a new field. You get: Add a null-pointer check if appropriate (see npe template above): Hit Ctrl-Space, get: A great time saver!", 'questionId': '54886', 'answerId': '628785'}
{'answer': 'Ctrl + Shift + P to find the matching brace. Really useful while working with long codes.', 'questionId': '54886', 'answerId': '653153'}
{'answer': 'One combination to rules them all. CTL+SHFT+L Get the list of all these "hidden" features.', 'questionId': '54886', 'answerId': '681470'}
{'answer': 'Here is my collection of the most useful keyboard shortcuts for Eclipse 3:', 'questionId': '54886', 'answerId': '681562'}
{'answer': "Enabling 'Ignore white space' in the Compare/Patch settings is a real time saver!", 'questionId': '54886', 'answerId': '866408'}
{'answer': 'How about: Ctrl-PgUp and Ctrl-PgDn to navigate through the open files in the editor (including the overflow section if you Ctrl-PgDn all the way to the right).', 'questionId': '54886', 'answerId': '879292'}
{'answer': "Hit CTRL+S very often. It's CTRL+1's best friend.", 'questionId': '54886', 'answerId': '879346'}
{'answer': "I'm surprised no one mentioned the Emacs keybinding setting available in Eclipse.  This is one of my favorite little features; it allows me to transition from Emacs to Eclipse with little adjustment in my navigation preferences. Windows->Preferences->General->Keys->Scheme.", 'questionId': '54886', 'answerId': '879427'}
{'answer': "I am sorry if this is a duplicate, but I don't think I have seen this one mentioned here and I scanned over all of the posts: Word completion: is a really nice alternative to Ctrl+Space. It doesn't quite replace Ctrl+Space, but is much faster. And don't be afraid to press it multiple times, it will keep cycling over possible options.", 'questionId': '54886', 'answerId': '923471'}
{'answer': 'Shift-F2 goes to the Javadoc for any method. Use it a LOT.  For libraries you need to configure the location , but for standard classes they are predefined by Eclipse', 'questionId': '54886', 'answerId': '933080'}
{'answer': 'CTRL-MouseClick (left) as an alternative for F3 to go to declaration.', 'questionId': '54886', 'answerId': '1004059'}
{'answer': 'ctrl+d to delete the current line alt+up/down to move the current line or block of selected text up or down ctrl+alt+up/down to copy/duplication the current line or block of selected text up or down ctrl+alt+c SVN commit (with subversive) ctrl+alt+u SVN update (with subversive)', 'questionId': '54886', 'answerId': '1025491'}
{'answer': "I recently mapped alt-enter to the same command as ctrl-1.  It's just a bit easier to get to. I also use alt+shift+x &t a bunch, but I'm not a fan of how the integrated test runner works.", 'questionId': '54886', 'answerId': '1258076'}
{'answer': "Clicking on the return type in a method's declaration highlights all exit points of the method. for instance: clicking on void will highlight the return on line 4 and the close } on line 7. Update: It even works for try{} catch blocks. If you put cursor on exception in the catch block and eclipse will highlight the probable methods which may throw that exception.", 'questionId': '54886', 'answerId': '1369376'}
{'answer': 'If you are using the F3 key to navigate to the source code of a method, you could often waste your time to switch to the the Interface instead of going directly to the implementation class (there is often only one, for DAO, Service,... for example) Using Ctrl+Mouse pointer to one method of the code, you will be able to choose between directly going to the  Directly go to the Implementation (the class) or the Declaration (the interface) More info about this tip here: http://www.ibm.com/developerworks/opensource/library/os-eclipse-galnav/index.html This is only available in Galileo and you can use Ctrl + T as well for the same.', 'questionId': '54886', 'answerId': '1674457'}
{'answer': 'alt+shift+z - to active the "surround with" sub menu. Handy when have to surround with a try catch block.', 'questionId': '54886', 'answerId': '1815891'}
{'answer': 'Double click next to an opening bracket will highlight all the code till the closing bracket, and vice versa.', 'questionId': '54886', 'answerId': '2153804'}
{'answer': 'In  Windows/Preferences/General/Keys define Alt + C  for SVN Commit Alt + U for SVN Update Shift + Ctrl + N for New Class Dialog.', 'questionId': '54886', 'answerId': '2153899'}
{'answer': 'The eclipse help contains a lot of useful resources. Just search for "tips & tricks". In particular the "Tips and Tricks (JDT)" i found to be very useful.', 'questionId': '54886', 'answerId': '2225683'}
{'answer': 'Ctrl + H searches/replaces through the whole workspace or project.', 'questionId': '54886', 'answerId': '2393372'}
{'answer': 'Install the MouseFeed Eclipse plugin. After installation, it will show you a popup with the keyboard shortcut whenever you click on a button or a menu item that is associated with a shortcut.', 'questionId': '54886', 'answerId': '2548104'}
{'answer': 'Ctrl-F6 to cycle focus through open Editor windows (with Ctrl-Shift-F6 to cycle backwards) Ctrl-F7 to cycle focus through Eclipse views Ctrl-F8 to cycle Eclipse perspectives', 'questionId': '54886', 'answerId': '2548503'}
{'answer': 'NOT so hidden feature ,but very less people use it and do not explore it Template Key board shortcut and Alex has explained about Member sort Move lines', 'questionId': '54886', 'answerId': '2996941'}
{'answer': 'Ctrl + Shift + M: changes a static method or static attribute reference of a class to a static import. Before After', 'questionId': '54886', 'answerId': '3014198'}
{'answer': "You can CTRL-click on just about any type, field, method, or variable and eclipse will bring you to the declaration of that item: ie: on a local variable - brings you to the declaration statement in the function on a member variable - brings you to the definition in a class file that the member is declared (or the parent class if it's not overridden in a child class on a class - brings you to the top of the class file for that class You can also CTRL-hover over a type to bring up the option to find an implementation. This is useful if you are using an interface and want to see what classes implement that interface. It also works to see what super-classes and subclasses might implement/override a certain function.", 'questionId': '54886', 'answerId': '3160216'}
{'answer': 'Not so Hidden but IMO the best Trick. Assuming Default Settings (and you have\'nt added new snippets) Highlight (or select) a Text (String or Variable)...Press Ctrl+Space. Hit End+Enter. the "sysout" snippet is triggered which wraps the selection around as its parameter. eg. I love it so much that i\'ve implemented a similar snippet for Android\'s Toast and Log.i() HUGE Time saver during Manual Debugging....', 'questionId': '54886', 'answerId': '3164102'}
{'answer': '', 'questionId': '54909', 'answerId': '54911'}
{'answer': '', 'questionId': '54909', 'answerId': '54912'}
{'answer': 'I find using addAll works fine. parentheses are used rather than the generics syntax', 'questionId': '54909', 'answerId': '54917'}
{'answer': 'This should also work:', 'questionId': '54909', 'answerId': '54922'}
{'answer': 'I think this should do the trick using the Collections API: Note: the copy method runs in linear time.', 'questionId': '54909', 'answerId': '55132'}
{'answer': 'Why would you want to clone? Creating a new list usually makes more sense. Job done.', 'questionId': '54909', 'answerId': '56383'}
{'answer': 'Be advised that Object.clone() has some major problems, and its use is discouraged in most cases. Please see Item 11, from "Effective Java" by Joshua Bloch for a complete answer. I believe you can safely use Object.clone() on primitive type arrays, but apart from that you need to be judicious about properly using and overriding clone. You are probably better off defining a copy constructor or a static factory method that explicitly clones the object according to your semantics.', 'questionId': '54909', 'answerId': '350301'}
{'answer': 'Be very careful when cloning ArrayLists. Cloning in java is shallow. This means that it will  only clone the Arraylist itself and not its members. So if you have an ArrayList X1 and clone it into X2 any change in X2 will also manifest in X1 and vice-versa. When you clone you will only generate a new ArrayList with pointers to the same elements in the original.', 'questionId': '54909', 'answerId': '599155'}
{'answer': 'I am not a java professional, but I have the same problem and I tried to solve by this method. (It suppose that T has a copy constructor).', 'questionId': '54909', 'answerId': '8971483'}
{'answer': 'This is the code I use for that: Hope is usefull for you', 'questionId': '54909', 'answerId': '10251692'}
{'answer': 'My function to clone a List with type:', 'questionId': '54909', 'answerId': '13800463'}
{'answer': 'To clone a generic interface like java.util.List you will just need to cast it. here you are an example: It is a bit tricky, but it works, if you are limited to return a List interface, so anyone after you can implement your list whenever he wants. I know this answer is close to the final answer, but my answer answers how to do all of that while you are working with List -the generic parent- not ArrayList', 'questionId': '54909', 'answerId': '25785306'}
{'answer': 'With Java 8 it can be cloned with a stream. ...', 'questionId': '54909', 'answerId': '35014446'}
{'answer': 'If you want this in order to be able to return the List in a getter it would be better to do:', 'questionId': '54909', 'answerId': '35430941'}
{'answer': "setOpaque(false) It'll pass off painting the background to its parent, which may draw its own background. You can do a screen capture and then use that to paint the background of the panel.", 'questionId': '54926', 'answerId': '54927'}
{'answer': 'This article seems to have some handy info on how to create shaped and transparent windows in Java: http://today.java.net/pub/a/today/2008/03/18/translucent-and-shaped-swing-windows.html', 'questionId': '54926', 'answerId': '54934'}
{'answer': 'Technically a JPanel may start off non-opague. This was true for the Gtk look & feel in 1.5 (or 1.4?), but no other PL&Fs as far as I am aware.', 'questionId': '54926', 'answerId': '56450'}
{'answer': '', 'questionId': '54926', 'answerId': '22712998'}
{'answer': 'If you are using NetBeans, Then Do these steps:- Right Click on JPanel. Scroll Down and Search For (( Opaque )). It must be there. Uncheck it. Now your JPanel background will be removed and what will appear in JPanel Background is your Background of JFrame.', 'questionId': '54926', 'answerId': '44391870'}
{'answer': 'Have you tried PowerShell rather than old cmd.exe.', 'questionId': '54952', 'answerId': '55262'}
{'answer': 'Try chcp 65001 && start.bat', 'questionId': '54952', 'answerId': '55307'}
{'answer': 'We had some similar problems in Linux. Our code was in ISO-8859-1 (mostly cp-1252 compatible) but the console was UTF-8, making the code to not compile. Simply changing the console to ISO-8859-1 would make the build script, in UTF-8, to break. We found a couple of choices: 1- define some standard encoding and sticky to it. That was our choice. We choose to keep all in ISO-8859-1, modifying the build scripts. 2- Setting the encoding before starting any task, even inside the build scripts. Some code like the erickson said. In Linux was like : My eclipse is still like this. Both do work well.', 'questionId': '54952', 'answerId': '265734'}
{'answer': "Windows doesn't support the 65001 code page: http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/chcp.mspx?mfr=true", 'questionId': '54952', 'answerId': '7610736'}
{'answer': 'Java on windows does NOT support unicode ouput by default. I have written a workaround method by calling Native API with JNA library.The method will call WriteConsoleW for unicode output on the console.', 'questionId': '54952', 'answerId': '8921509'}
{'answer': 'J# is no longer included in VS2008. Unless you already have J# code, you should probably stay away. From j# product page: Since customers have told us that the   existing J# feature set largely meets   their needs and usage of J# is   declining, Microsoft is retiring the   Visual J# product and Java Language   Conversion Assistant tool to better   allocate resources for other customer   requirements. The J# language and JLCA   tool will not be available in future   versions of Visual Studio. To preserve   existing customer investments in J#,   Microsoft will continue to support the   J# and JLCA technology that shipped   with Visual Studio 2005 through to   2015 as per our product life-cycle   strategy. For more information, see   Expanded Microsoft Support Lifecycle   Policy for Business & Development   Products.', 'questionId': '5527', 'answerId': '5532'}
{'answer': 'The whole purpose of J# is to ease the transition of Java developers to the .NET environment which didn\'t work so well (I guessing here) so Microsoft dropped J# from Visual Studio 2008. For your question, "Is there a real benefit of using J#?".. in a nutshell... No..', 'questionId': '5527', 'answerId': '5536'}
{'answer': "One of the killers I've found with J# in the past is that there is no built in support for referencing web services. That alone has been enough to deter me from it ever since.", 'questionId': '5527', 'answerId': '5538'}
{'answer': 'C# syntax is so close to Java (and better in some ways) that you might as well learn C# instead of J#.  And since C# is more widely used, you can easily find Java --> C# tutorials on google or check out http://www.asp.net/learn and watch some videos.', 'questionId': '5527', 'answerId': '5645'}
{'answer': 'Instead of J#, I would rather prefer IKVM (http://www.ikvm.net/) to convert my JARs to .NET assemblies as well as access Java APIs in C#.', 'questionId': '5527', 'answerId': '7557'}
{'answer': "Strongly agree that syntactically C# beats Java hands down, so there is really no reason to lament the demise of j#.  Now trying to get c# compiling to Java bytecode might be an interesting move as Sun's hotspot jvm is great software. Or, for a bit of fun with what might well become the next generation of Java, how about Scala on the CLR...", 'questionId': '5527', 'answerId': '16755'}
{'answer': "I don't think it's a matter of which language is better. In the .NET world there are some inconsistencies between the libraries different languages provide. There are certain functionality that is available in VB.NET that you might like to use from C# but can't. I remember I had to use J# to use some ZIP libraries that were not available in any other language in .NET.", 'questionId': '5527', 'answerId': '29289'}
{'answer': "I have used J# as an easy interim step to port a java library into C#.  It made for a good way to port code I don't plan to maintain from Java to .Net.  However, all new development is being done in C#.", 'questionId': '5527', 'answerId': '59872'}
{'answer': 'Since MFC ships with source code I would create a test MFC application that serializes a CObArray and step through the serialization code. This should give you all the information you need.', 'questionId': '55369', 'answerId': '55396'}
{'answer': "I agree with jmatthias: use the MFC source code. There's also this page on MSDN that may be useful.", 'questionId': '55369', 'answerId': '55406'}
{'answer': "You can't inherit from/extend an enum, you can use attributes to declare a description.  If you're looking for an integer value, that's built-in.", 'questionId': '55375', 'answerId': '55380'}
{'answer': "Hmmm - as far as I know, this can't be done - enumerations are written at design-time and are used as a convenience to the programmer. I'm pretty sure that when the code is compiled, the equivalent values will be substituted for the names in your enumeration, thereby removing the concept of an enumeration and (therefore) the ability to extend it.", 'questionId': '55375', 'answerId': '55381'}
{'answer': 'Adding enums is a fairly common thing to do if you go back to the source code and edit, any other way (inheritance or reflection, if either is possible) is likely to come back and hit you when you get an upgrade of the library and they have introduced the same enum name or the same enum value - I have seen plenty of lowlevel code where the integer number matches to the binary encoding, where you would run into problems Ideally code referencing enums should be written as equals only (or switches), and try to be future proof by not expecting the enum set to be const', 'questionId': '55375', 'answerId': '55383'}
{'answer': 'You can use .NET reflection to retrieve the labels and values from an existing enum at run-time (Enum.GetNames() and Enum.GetValues() are the two specific methods you would use) and then use code injection to create a new one with those elements plus some new ones. This seems somewhat analagous to "inheriting from an existing enum".', 'questionId': '55375', 'answerId': '55390'}
{'answer': "The reason you can't extend Enums is because it would lead to problems with polymorphism. Say you have an enum MyEnum with values A, B, and C , and extend it with value D as MyExtEnum. Suppose a method expects a myEnum value somewhere, for instance as a parameter. It should be legal to supply a MyExtEnum value, because it's a subtype, but now what are you going to do when it turns out the value is D? To eliminate this problem, extending enums is illegal", 'questionId': '55375', 'answerId': '55435'}
{'answer': "When built-in enums aren't enough, you can do it the old fashion way and craft your own. For example, if you wanted to add an additional property, for example, a description field, you could do it as follows: You can then treat it like an enum like so: The trick is to make sure that the constructor is private (or protected if you want to inherit), and that your instances are static.", 'questionId': '55375', 'answerId': '55486'}
{'answer': "If you mean extends in the Base class sense, then in Java... no. But you can extend an enum value to have properties and methods if that's what you mean. For example, the following uses a Bracket enum:", 'questionId': '55375', 'answerId': '55521'}
{'answer': 'Enums are supposed to represent the enumeration of all possible values, so extending rather does go against the idea. However, what you can do in Java (and presumably C++0x) is have an interface instead of a enum class. Then put you standard values in an enum that implements the feature. Obviously you don\'t get to use java.util.EnumSet and the like. This is the approach taken in "more NIO features", which should be in JDK7.', 'questionId': '55375', 'answerId': '56413'}
{'answer': 'Saw a post regarding this for Java a while back, check out http://www.javaspecialists.eu/archive/Issue161.html .', 'questionId': '55375', 'answerId': '57405'}
{'answer': 'You\'re going the wrong way: a subclass of an enum would have fewer entries. In pseudocode, think: Any method that can accept an Animal should be able to accept a Mammal, but not the other way around.  Subclassing is for making something more specific, not more general.  That\'s why "object" is the root of the class hierarchy.  Likewise, if enums were inheritable, then a hypothetical root of the enum hierarchy would have every possible symbol. But no, C#/Java don\'t allow sub-enums, AFAICT, though it would be really useful at times.  It\'s probably because they chose to implement Enums as ints (like C) instead of interned symbols (like Lisp).  (Above, what does (Animal)1 represent, and what does (Mammal)1 represent, and are they the same value?) You could write your own enum-like class (with a different name) that provided this, though.  With C# attributes it might even look kind of nice.', 'questionId': '55375', 'answerId': '1688974'}
{'answer': "I didn't see anyone else mention this but the ordinal value of an enum is important.  For example, with grails when you save an enum to the database it uses the ordinal value.  If you could somehow extend an enum, what would be the ordinal values of your extensions?  If you extended it in multiple places how could you preserve some kind of order to these ordinals?  Chaos/instability in the ordinal values would be a bad thing which is probably another reason why the language designers have not touched this.   Another difficulty if you were the language designer, how can you preserve the functionality of the values() method which is supposed to return all of the enum values.  What would you invoke this on and how would it gather up all of the values?", 'questionId': '55375', 'answerId': '1891211'}
{'answer': "I would like to be able to add values to C# enumerations which are combinations of existing values.  For example (this is what I want to do): AnchorStyles is defined as public enum AnchorStyles {  None = 0,  Top = 1,  Bottom = 2,  Left = 4,  Right = 8, } and I would like to add an AnchorStyles.BottomRight = Right + Bottom so instead of saying I can just say This doesn't cause any of the problems that have been mentioned above, so it would be nice if it was possible.", 'questionId': '55375', 'answerId': '3230740'}
{'answer': 'As far as java is concerned it is not allowed because adding elements to an enum would effectively create a super class rather than a sub class. Consider: A general use case of Polymorphism would be which is clearly wrong.', 'questionId': '55375', 'answerId': '18443046'}
{'answer': 'Some time back even i wanted to do something like this and found that enum extensions would voilate lot of basic concepts... (Not just polymorphisim) But still u might need to do if the enum is declared in external library and  Remember you should make a special caution when using this enum extensions...', 'questionId': '55375', 'answerId': '27519356'}
{'answer': 'In the current state of things, there is no good way other than by comments or a third-party solution. Boost provides a concept check library for this, and I think gcc also has an implementation. Concepts are on the list of C++0x improvements, but I\'m not sure if you can specify subtypes - they are more for "must support these operations" which is (roughly) equivalent. Edit: Wikipedia has this section about concepts in C++0x, which is significantly easier to read than draft proposals.', 'questionId': '55440', 'answerId': '55444'}
{'answer': "It's verbose, but you can do it like this: This requires a compiler with good support for the standard (most recent compilers should be fine but old versions of Visual C++ won't be). For more information, see the Boost.Enable_If documentation. As Ferruccio said, a simpler but less powerful implementation:", 'questionId': '55440', 'answerId': '55446'}
{'answer': "See Stoustrup's own words on the subject. Basically a small class, that you instantiate somewhere, e.g. the templated classes constructor.", 'questionId': '55440', 'answerId': '56551'}
{'answer': 'Reporting the value for InitialContext.getEnvironment().get(Context.PROVIDER_URL) might be helpful.', 'questionId': '55487', 'answerId': '55582'}
{'answer': "Why wouldn't you just point them to the S3 url? Taking an artifact from S3 and then streaming it through your own server to me defeats the purpose of using S3, which is to offload the bandwidth and processing of serving the images to Amazon.", 'questionId': '55709', 'answerId': '55717'}
{'answer': 'You have to check two things: Are you closing the stream? Very important Maybe you\'re giving stream connections "for free". The stream is not large, but many many streams at the same time can steal all your memory. Create a pool so that you cannot have a certain number of streams running at the same time', 'questionId': '55709', 'answerId': '55751'}
{'answer': 'toby is right, you should be pointing straight to S3, if you can. If you cannot, the question is a little vague to give an accurate response: How big is your java heap? How many streams are open concurrently when you run out of memory? How big is your read write/bufer (8K is good)? You are reading 8K from the stream, then writing 8k to the output, right? You are not trying to read the whole image from S3, buffer it in memory, then sending the whole thing at once?   If you use 8K buffers, you could have 1000 concurrent streams going in ~8Megs of heap space, so you are definitely doing something wrong.... BTW, I did not pick 8K out of thin air, it is the default size for socket buffers, send more data, say 1Meg, and you will be blocking on the tcp/ip stack holding a large amount of memory.', 'questionId': '55709', 'answerId': '55769'}
{'answer': 'When possible, you should not store the entire contents of a file to be served in memory.  Instead, aquire an InputStream for the data, and copy the data to the Servlet OutputStream in pieces.  For example: I do agree with toby, you should instead "point them to the S3 url." As for the OOM exception, are you sure it has to do with serving the image data?  Let\'s say your JVM has 256MB of "extra" memory to use for serving image data.  With Google\'s help, "256MB / 200KB" = 1310.  For 2GB "extra" memory (these days a very reasonable amount) over 10,000 simultaneous clients could be supported.  Even so, 1300 simultaneous clients is a pretty large number.  Is this the type of load you experienced?  If not, you may need to look elsewhere for the cause of the OOM exception. Edit - Regarding: In this use case the images can contain sensitive data... When I read through the S3 documentation a few weeks ago, I noticed that you can generate time-expiring keys that can be attached to S3 URLs.  So, you would not have to open up the files on S3 to the public.  My understanding of the technique is: Initial HTML page has download links to your webapp User clicks on a download link Your webapp generates an S3 URL that includes a key that expires in, lets say, 5 minutes. Send an HTTP redirect to the client with the URL from step 3. The user downloads the file from S3.  This works even if the download takes more than 5 minutes - once a download starts it can continue through completion.', 'questionId': '55709', 'answerId': '55788'}
{'answer': 'In addition to what John suggested, you should repeatedly flush the output stream. Depending on your web container, it is possible that it caches parts or even all of your output and flushes it at-once (for example, to calculate the Content-Length header). That would burn quite a bit of memory.', 'questionId': '55709', 'answerId': '55890'}
{'answer': "I agree strongly with both toby and John Vasileff--S3 is great for off loading large media objects if you can tolerate the associated issues.  (An instance of own app does that for 10-1000MB FLVs and MP4s.)  E.g.: No partial requests (byte range header), though.  One has to handle that 'manually', occasional down time, etc.. If that is not an option, John's code looks good.  I have found that a byte buffer of 2k FILEBUFFERSIZE is the most efficient in microbench marks.  Another option might be a shared FileChannel.  (FileChannels are thread-safe.) That said, I'd also add that guessing at what caused an out of memory error is a classic optimization mistake.  You would improve your chances of success by working with hard metrics. Place -XX:+HeapDumpOnOutOfMemoryError into you JVM startup parameters, just in case take use jmap on the running JVM (jmap -histo <pid>) under load Analyize the metrics (jmap -histo out put, or have jhat look at your heap dump).  It very well may be that your out of memory is coming from somewhere unexpected. There are of course other tools out there, but  jmap & jhat come with Java 5+ 'out of the box' I've considered writing the file to a local temp drive and then spawning another thread to handle the streaming so that the tomcat servlet thread can be re-used. This seems like it would be io heavy. Ah, I don't think you can't do that.  And even if you could, it sounds dubious.  The tomcat thread that is managing the connection needs to in control.  If you are experiencing thread starvation  then increase the number of available threads in ./conf/server.xml.  Again, metrics are the way to detect this--don't just guess.   Question: Are you also running on EC2?  What are your tomcat's JVM start up parameters?", 'questionId': '55709', 'answerId': '55896'}
{'answer': 'If you can structure your files so that the static files are separate and in their own bucket, the fastest performance today  can likely be achieved by using the Amazon S3 CDN, CloudFront.', 'questionId': '55709', 'answerId': '1504607'}
{'answer': "I've seen a lot of code like john-vasilef's (currently accepted) answer, a tight while loop reading chunks from one stream and writing them to the other stream. The argument I'd make is against needless code duplication, in favor of using Apache's IOUtils. If you are already using it elsewhere, or if another library or framework you're using is already depending on it, it's a single line that is known and well-tested. In the following code, I'm streaming an object from Amazon S3 to the client in a servlet. 6 lines of a well-defined pattern with proper stream closing seems pretty solid.", 'questionId': '55709', 'answerId': '23252476'}
{'answer': 'Try setting the lang attribute on the <html/> element. HTML example: XHTML example:', 'questionId': '56045', 'answerId': '56358'}
{'answer': "You could try something like this. It's taken from sun's page on Character Sets and Encodings. I think this has to be the very first line in your jsp.", 'questionId': '56045', 'answerId': '56626'}
{'answer': 'OMG - it turns out that the cause was a total WTF? all our tile responses were being served by a homegrown servlet that was ignoring the  <%@ page contentType="text/html; charset=UTF-8" %> directive (and who know what else). TilesDispatchExtensionServlet : bloody architecture astronauts, i shake my fist at ye.', 'questionId': '56045', 'answerId': '78724'}
{'answer': 'You need to use a filter. See: http://wiki.apache.org/tomcat/Tomcat/UTF-8', 'questionId': '56045', 'answerId': '224193'}
{'answer': 'Yes, there is a large conceptual difference. C++ utilizes different "classes" of iterators. Some are used for random access (unlike Java), some are used for forward access (like java). While even others are used for writing data (for use with, say, transform).  See the iterators concept in the C++ Documentation: Input Iterator Output Iterator Forward Iterator Bidirectional Iterator Random Access Iterator These are far more interesting and powerful compared to Java/C#\'s puny iterators. Hopefully these conventions will be codified using C++0x\'s Concepts.', 'questionId': '56347', 'answerId': '56370'}
{'answer': 'Iterators are only equivalent to pointers in the trivial case of iterating over the contents of an array in sequence. An iterator could be supplying objects from any number of other sources: from a database, from a file, from the network, from some other calculation, etc.', 'questionId': '56347', 'answerId': '56396'}
{'answer': "A pointer to an array element is indeed an iterator into the array. As you say, in Java, an iterator has more knowledge of the underlying container than in C++. C++ iterators are general, and a pair of iterators can denote any range: this can be a sub-range of a container, a range over multiple containers (see http://www.justsoftwaresolutions.co.uk/articles/pair_iterators.pdf or http://www.boost.org/doc/libs/1_36_0/libs/iterator/doc/zip_iterator.html) or even a range of numbers (see http://www.boost.org/doc/libs/1_36_0/libs/iterator/doc/counting_iterator.html) The iterator categories identify what you can and can't do with a given iterator.", 'questionId': '56347', 'answerId': '56401'}
{'answer': "Perhaps a bit more theoretical. Mathematically, collections in C++ can be described as a half-open interval of iterators, namely one iterator pointing to the start of the collection and one iterator pointing just behind the last element. This convention opens up a host of possibilities. The way algorithms work in C++, they can all be applied to subsequences of a larger collection. To make such a thing work in Java, you have to create a wrapper around an existing collection that returns a different iterator. Another important aspect of iterators has already been mentioned by Frank. There are different concepts of iterators. Java iterators correspond to C++' input iterators, i.e. they are read-only iterators that can only be incremented one step at a time and can't go backwards. On the other extreme, you have C pointers which correspond exactly to C++' concept of a random access iterator. All in all, C++ offers a much richer and purer concept that can be applied to a much wider variety of tasks than either C pointers or Java iterators.", 'questionId': '56347', 'answerId': '56419'}
{'answer': 'C++ library (the part formerly known as STL) iterators are designed to be compatible with pointers. Java, without pointer arithmetic, had the freedom to be more programmer-friendly. In C++ you end up having to use a pair of iterators. In Java you either use an iterator or a collection. Iterators are supposed to be the glue between algorithm and data structure. Code written for 1.5+ rarely need mention iterators, unless it is implementing a particular algorithm or data structure (which the vary majority of programmers have no need to do). As Java goes for dynamic polymorphism subsets and the like are much easier to handle.', 'questionId': '56347', 'answerId': '56441'}
{'answer': 'To me the fundamental difference is that Java Iterators point between items, whereas C++ STL iterators point at items.', 'questionId': '56347', 'answerId': '56795'}
{'answer': "C++ iterators are a generalization of the pointer concept; they make it applicable to a wider range of situations.  It means that they can be used to do such things as define arbitrary ranges. Java iterators are relatively dumb enumerators (though not so bad as C#'s; at least Java has ListIterator and can be used to mutate the collection).", 'questionId': '56347', 'answerId': '58660'}
{'answer': "As mentioned, Java and C# iterators describe an intermixed position(state)-and-range(value), while C++ iterators separate the concepts of position and range.  C++ iterators represent 'where am I now' separately from 'where can I go?'. Java and C# iterators can't be copied.  You can't recover a previous position.  The common C++ iterators can. Consider this example: Click the above link to see program output. This rather silly loop goes through a sequence (using forward iterator semantics only), printing each contiguous subsequence of 3 elements exactly once (and a couple shorter subsequences at the end).  But supposing N elements, and M elements per line instead of 3, this algorithm would still be O(N*M) iterator increments, and O(1) space. The Java style iterators lack the ability to store position independently.  You will either lose O(1) space, using (for example) an array of size M to store history as you iterate will need to traverse the list N times, making O(N^2+N*M) time or use a concrete Array type with GetAt member function, losing genericism and the ability to use linked list container types. Since only forward iteration mechanics were used in this example, i was able to swap in a list with no problems.  This is critical to authoring generic algorithms, such as search, delayed initialization and evaluation, sorting, etc. The inability to retain state corresponds most closely to the C++ STL input iterator, on which very few algorithms are built.", 'questionId': '56347', 'answerId': '161439'}
{'answer': "There are plenty of good answers about the differences, but I felt the thing that annoys me the most with Java iterators wasn't emphasized--You can't read the current value multiple times. This is really useful in a lot of scenarios, especially when you are merging iterators.  In c++, you have a method to advance the iterator and to read the current value. Reading its value doesn't advance the iteration; so you can read it multiple times. This is not possible with Java iterators, and I end up creating wrappers that do this. A side note: one easy way to create a wrapper is to use an existing one--PeekingIterator from Guava.", 'questionId': '56347', 'answerId': '29954778'}
{'answer': 'In Java, the \'int\' type is a primitive , whereas the \'Integer\' type is an object. In C#, the \'int\' type is the same as System.Int32 and is a value type (ie more like the java \'int\'). An integer (just like any other value types) can be boxed ("wrapped") into an object.  The differences between objects and primitives are somewhat beyond the scope of this question, but to summarize:  Objects provide facilities for polymorphism, are passed by reference (or more accurately have references passed by value), and are allocated from the heap. Conversely, primitives are immutable types that are passed by value and are often allocated from the stack.', 'questionId': '564', 'answerId': '566'}
{'answer': "Well, in Java an int is a primitive while an Integer is an Object. Meaning, if you made a new Integer: You could call some method on i: Whereas with an int: You cannot call any methods on it, because it is simply a primitive. So: would produce an error, because int is not an object. int is one of the few primitives in Java (along with char and some others). I'm not 100% sure, but I'm thinking that the Integer object more or less just has an int property and a whole bunch of methods to interact with that property (like the toString() method for example). So Integer is a fancy way to work with an int (Just as perhaps String is a fancy way to work with a group of chars). I know that Java isn't C, but since I've never programmed in C this is the closest I could come to the answer. Hope this helps! Integer object javadoc Integer Ojbect vs. int primitive comparison", 'questionId': '564', 'answerId': '568'}
{'answer': "In C#, int is just an alias for System.Int32, string for System.String, double for System.Double etc... Personally I prefer int, string, double, etc. because they don't require a using System; statement :) A silly reason, I know...", 'questionId': '564', 'answerId': '583'}
{'answer': "I'll add to the excellent answers given above, and talk about boxing and unboxing, and how this applies to Java (although C# has it too). I'll use just Java terminology, because I am more au fait with that. As the answers mentioned, int is just a number (called the unboxed type), whereas Integer is an object (which contains the number, hence a boxed type). In Java terms, that means (apart from not being able to call methods on int), you cannot store int or other non-object types in collections (List, Map, etc.). In order to store them, you must first box them up in its corresponding boxed type. Java 5 onwards have something called auto-boxing and auto-unboxing which allow the boxing/unboxing to be done behind the scenes. Compare and contrast: Java 5 version: Java 1.4 or earlier (no generics either): It must be noted that despite the brevity in the Java 5 version, both versions generate identical bytecode. Thus, although auto-boxing and auto-unboxing is very convenient because you write less code, these operations do happen behind the scenes, with the same runtime costs, so you still have to be aware of their existence. Hope this helps!", 'questionId': '564', 'answerId': '608'}
{'answer': "I'll just post here since some of the other posts are slightly inaccurate in relation to C#. Correct: int is an alias for System.Int32. Wrong: float is not an alias for System.Float, but for System.Single Basically, int is a reserved keyword in the C# programming language, and is an alias for the System.Int32 value type. float and Float is not the same however, as the right system type for ''float'' is System.Single. There are some types like this that has reserved keywords that doesn't seem to match the type names directly. In C# there is no difference between ''int'' and ''System.Int32'', or any of the other pairs or keywords/system types, except for when defining enums. With enums you can specify the storage size to use and in this case you can only use the reserved keyword, and not the system runtime type name. Wether the value in the int will be stored on the stack, in memory, or as a referenced heap object depends on the context and how you use it. This declaration in a method: defines a variable i of type System.Int32, living in a register or on the stack, depending on optimizations. The same declaration in a type (struct or class) defines a member field. The same declaration in a method argument list defines a parameter, with the same storage options as for a local variable. (note that this paragraph is not valid if you start pulling iterator methods into the mix, these are different beasts altogether) To get a heap object, you can use boxing: this will create a boxed copy of the contents of i on the heap. In IL you can access methods on the heap object directly, but in C# you need to cast it back to an int, which will create another copy. Thus, the object on the heap cannot easily be changed in C# without creating a new boxed copy of a new int value. (Ugh, this paragraph doesn't read all that easily.)", 'questionId': '564', 'answerId': '1266'}
{'answer': 'This has already been answered for Java, here\'s the C# answer: "Integer" is not a valid type name in C# and "int" is just an alias for System.Int32. Also, unlike in Java (or C++) there aren\'t any special primitive types in C#, every instance of a type in C# (including int) is an object. Here\'s some demonstrative code:', 'questionId': '564', 'answerId': '1582'}
{'answer': 'Regarding Java 1.5 and autoboxing there is an important "quirk" that comes to play when comparing Integer objects. In Java, Integer objects with the values -128 to 127 are immutable (that is, for one particular integer value, say 23, all Integer objects instantiated through your program with the value 23 points to the exact same object). Example, this returns true: While this returns false: The == compares by reference (does the variables point to the same object). This result may or may not differ depending on what JVM you are using. The specification autoboxing for Java 1.5 requires that integers (-128 to 127) always box to the same wrapper object.  A solution? =) One should always use the Integer.equals() method when comparing Integer objects. More info at java.net Example at bexhuff.com', 'questionId': '564', 'answerId': '2823'}
{'answer': 'In Java there are two basic types in the JVM. 1) Primitive types and 2) Reference Types. int is a primitive type and Integer is a class type (which is kind of reference type). Primitive values do not share state with other primitive values. A variable whose type is a primitive type always holds a primitive value of that type. An object is a dynamically created class instance or an array. The reference values (often just references) are pointers to these objects and a special null reference, which refers to no object. There may be many references to the same object. Also in Java everything is passed by value. With objects the value that is passed is the reference to the object. So another difference between int and Integer in java is how they are passed in method calls. For example in The variable two is passed as the primitive integer type 2. Whereas in The variable two is passed as a reference to an object that holds the integer value 2. @WolfmanDragon: Pass by reference would work like so: When increment is called it passes a reference (pointer) to variable a. And the increment function directly modifies variable a. And for object types it would work as follows: Do you see the difference now?', 'questionId': '564', 'answerId': '3285'}
{'answer': "One more thing that I don't see in previous answers: In Java the primitive wrappers classes like Integer, Double, Float, Boolean... and String are suposed to be invariant, so that when you pass an instance of those classes the invoked method couldn't alter your data in any way, in opositin with most of other classes, which internal data could be altered by its public methods. So that this classes only has 'getter' methods, no 'setters', besides the constructor. In a java program String literals are stored in a separate portion of heap memory, only a instance for literal, to save memory reusing those instances", 'questionId': '564', 'answerId': '3464'}
{'answer': 'In platforms like Java, ints are primitives while Integer is an object which holds a integer field. The important distinction is that primitives are always passed around by value and by definition are immutable.  Any operation involving a primitive variable always returns a new value. On the other hand, objects are passed around by reference. One could argue that the point to the object (AKA the reference) is also being passed around by value, but the contents are not.', 'questionId': '564', 'answerId': '498102'}
{'answer': 'int is used to declare primitive variable  Integer is used to create reference variable of class Integer', 'questionId': '564', 'answerId': '8462531'}
{'answer': 'have you ever programmed before then (int) is one of the primitive types you can set for your variables (just like char, float, ...). but Integer is a wrapper class that you can use it to do some functions on an int variable (e.g convert it to string or vise versa,...) , but keep note that methods in the wrapper classes are static so you can use them anytime without creating an instance of Integer class. as a recap : x and y are both variables of type int but y is wrapped by an Integer class and has several methods that you use,but i case you need to call some functions of Integer wrapper class you can do it simply. but be aware that both x and y are corect but if you want to use them just as a primitive type, use the simple form (used for defining x).', 'questionId': '564', 'answerId': '23711054'}
{'answer': "In both languages (Java and C#) int is 4-byte signed integer. Unlike Java, C# Provides both signed and unsigned integer values. As Java and C# are object object-oriented, some operations in these languages do not map directly onto instructions provided by the run time and so needs to be defined as part of an object of some type. C# provides System.Int32 which is a value type using a part of  memory that belongs to the reference type on the heap. java provides java.lang.Integer which is a reference type operating on int. The methods in Integer can't be compiled directly to run time instructions.So we box an int value to convert it into an instance of Integer and use the methods which expects instance of some type (like toString(), parseInt(), valueOf() etc). In C# variable  int refers to System.Int32.Any 4-byte value in memory can be interpreted as a primitive int, that can be manipulated by  instance of System.Int32.So int is an alias for System.Int32.When using integer-related methods like int.Parse(), int.ToString() etc. Integer is compiled into the FCL System.Int32 struct calling the respective methods like Int32.Parse(), Int32.ToString().", 'questionId': '564', 'answerId': '24795920'}
{'answer': 'There are many reasons to use wrapper classes: We get extra behavior (for instance we can use methods) We can store null values whereas in primitives we cannot Collections support storing objects and not primitives.', 'questionId': '564', 'answerId': '25056184'}
{'answer': 'An int and Integer in Java and C# are two different terms used to represent different things. It is one of the the primitive data types that can be assigned to a variable that can store exactly. One value of its declared type at a time. For example: Where int is the datatype assigned to the variable number which holds the value seven. So an int is just a primitive not an object. While an Integer is a wrapper class for a primitive data type which has static methods. That can be used as an argument to a method which requires an object, where as int can be used as an argument to a method which requires an integer value, that can be used for arithmetic expression.  For example:', 'questionId': '564', 'answerId': '25180570'}
{'answer': 'An int variable holds a 32 bit signed integer value. An Integer (with capital I) holds a reference to an object of (class) type Integer, or to null. Java automatically casts between the two; from Integer to int whenever the Integer object occurs as an argument to an int operator or is assigned to an int variable, or an int value is assigned to an Integer variable. This casting is called boxing/unboxing. If an Integer variable referencing null is unboxed, explicitly or implicitly, a NullPointerException is thrown.', 'questionId': '564', 'answerId': '33936777'}
{'answer': 'In Java int is a primitive data type while Integer is a Helper class, it is use to convert for one data type to other.  For example:  Primitive data types are store the fastest available memory where the Helper class is complex and store in heep memory.  reference from "David Gassner" Java Essential Training.', 'questionId': '564', 'answerId': '35686676'}
{'answer': "Java:  int, double, long, byte, float, double, short, boolean, char - primitives. Used for hold the basic data types supported by the language. the primitive types are not part of the object hierarchy, and they do not inherit Object. Thet can'be pass by reference to a method.  Double, Float, Long, Integer, Short, Byte, Character, and Boolean, are type Wrappers, packaged in java.lang. All of the numeric type wrappers define constructors that allow an object to be constructed from a given value, or a string representation of that value. Using objects can add an overhead to even the simplest of calculations.  Beginning with JDK 5, Java has included two very helpful features: autoboxing and autounboxing. Autoboxing/unboxing greatly simplifies and streamlines code that must convert primitive types into objects, and vice versa.   Example of constructors: Example of boxing/unboxing: Example of autoboxing/autounboxing: P.S. Herbert Schildt's book took as a reference.", 'questionId': '564', 'answerId': '37797743'}
{'answer': 'In java as per my knowledge if you learner then, when you write int a; then in java generic it will compile code like integer a=new integer. So,as per generics integer is not used but int is used. so there is so such difference there.', 'questionId': '564', 'answerId': '39635844'}
{'answer': 'int is predefined in library function c# but in java we can create oject of Integer', 'questionId': '564', 'answerId': '42617947'}
{'answer': 'In Java, the int type is a primitive data type, where as the Integer type is an object. In C#, the int type is also a data type same as System.Int32. An integer (just like any other value types) can be boxed ("wrapped") into an object.', 'questionId': '564', 'answerId': '43651213'}
{'answer': '"int" is primitive data-type and "Integer" in Wrapper Class in Java. "Integer" can be used as an argument to a method which requires an object, where as "int" can be used as an argument to a method which requires an integer value, that can be used for arithmetic expression.', 'questionId': '564', 'answerId': '45503764'}
{'answer': "You can do this with a custom RMI Socket Factory.   The socket factories create the sockets for RMI to use at both the client and server end so if you write your own you've got full control over the ports used.  The client factories are created on the server, Serialized and then sent down to the client which is pretty neat. Here's a guide at Sun telling you how to do it.", 'questionId': '56687', 'answerId': '56701'}
{'answer': "Summary of the long answer below: to solve the problem that I had (restricting server and callback ports at either end of the RMI connection), I needed to create two pairs of client and server socket factories. Longer answer ensues: Our solution to the callback problem had essentially three parts.  The first was the object wrapping which needed the ability to specify that it was being used for a client to server connection vs. being used for a server to client callback.  Using an extension of UnicastRemoteObject gave us the ability to specify the client and server socket factories that we wanted to use.  However, the best place to lock down the socket factories is in the constructor of the remote object.   So, the first argument specifies the part on which the object is expecting requests, whereas the second and third specify the socket factories that will be used at either end of the connection driving this remote object. Since we wanted to restrict the ports used by the connection, we needed to extend the RMI socket factories and lock down the ports.  Here are some sketches of our server and client factories: Note that the server socket factory above ensures that only the port that you previously specified will ever be used by this factory.  The client socket factory has to be paired with the appropriate socket factory (or you'll never connect). So, the only thing remaining to force your two way connection to stay on the same set of ports is some logic to recognize that you are calling back to the client-side.  In that situation, just make sure that your factory method for the remote object calls the RemoteObjectWrapper constructor up top with the callback parameter set to true.", 'questionId': '56687', 'answerId': '303081'}
{'answer': "I've been having various problems implementing an RMI Server/Client architecture, with Client Callbacks. My scenario is that both Server and Client are behind Firewall/NAT. In the end I got a fully working implementation. Here are the main things that I did: Server Side , Local IP: 192.168.1.10. Public (Internet) IP 80.80.80.10 On the Firewall/Router/Local Server PC open port 6620. On the Firewall/Router/Local Server PC open port 1099. On the Router/NAT redirect incoming connections on port 6620 to 192.168.1.10:6620 On the Router/NAT redirect incoming connections on port 1099 to 192.168.1.10:1099 In the actual program: Client Side, Local IP: 10.0.1.123 Public (Internet) IP 70.70.70.20 On the Firewall/Router/Local Server PC open port 1999. On the Router/NAT redirect incoming connections on port 1999 to 10.0.1.123:1999 In the actual program: Hope this helps. Iraklis", 'questionId': '56687', 'answerId': '2455094'}
{'answer': "You don't need socket factories for this, or even multiple ports. If you're starting the Registry from your server JVM you can use port 1099 for everything, and indeed that is what will happen by default. If you're not starting the registry at all, as in a client callback object, you can provide port 1099 when exporting it. The part of your question about 'the client connections back to the server resulting from callbacks' doesn't make sense. They are no different from the original client connections to the server, and they will use the same server port(s).", 'questionId': '56687', 'answerId': '37356737'}
{'answer': "Using the Glass Pane will do the trick. Here's a tutorial on how to use the glass pane to get the right click button and redispatch it to the right component. As the glass pane is not a solution in this case, I suggest you take a look at the Toolkit class. Specificaly the addAWTEventListener method. You can add a global event listener with it. To add a mouse event listener: Cheers", 'questionId': '56707', 'answerId': '58166'}
{'answer': 'Email -> mailserver ->[something] -> file-on-disk. File on disk is pretty easy to parse, use JavaMail. The [something] could be: listener for smtp connections (overkill)! Pop3/imap client Maildir/Mailbox', 'questionId': '56722', 'answerId': '56743'}
{'answer': 'Lotus Notes/Domino stores mail in a Notes database.  There are APIs available for getting documents (emails), reading field values (From, Subject), and detaching files. APIs include -LotusScript (VB variant, available within the Notes database) -Java (from within or external to the database) -C API (external) -Same API available through COM server You can create a "scheduled agent" within the database (using LotusScript or Java) that can locate documents created since it last ran, locate the attachments, and extract them.  The agent will need to be signed with an ID that has the appropriate permissions on the server, including those required to write to the file system and initiate any other processes. External to the database, you can use any API except LotusScript to log-in to the server/mail database, and follow a similar process, e.g. extracting the files locally on a client or separate server.  C API and COM require a notes client install, but Java applications can be set up to run via CORBA/DIIOP without a full install. Consult the Domino Designer help (or IBM\'s website for C API) for more information. As to a "generic way" to do this, if you are accessing data in Notes and needing to extract attachments, I believe these APIs are your best option.  If you envision porting the application to another mail system, consider decoupling the API routines via an "interface" so you only need to add a new implementation of that interface to support a new mail system.', 'questionId': '56722', 'answerId': '64192'}
{'answer': 'You can access Notes Documents relatively easily using DIIOP, would be a lot easier than going down the C Api road...', 'questionId': '56722', 'answerId': '64286'}
{'answer': "I've done quite a bit lately with Java agents on Domino servers. The Domino 8.5 server supports Java 6 and its embedded so it won't take someone with a bit of Domino development experience long to put together an agent that runs when new mail arrives. In LotusScript its even easier but that needs more specialised skills which you'd probably need to get a contractor in to provide. The limitation your likely to encounter concerns the extracted file, you can easily place it on the Domino server's file structure but you may be limited by the OS security from placing it on a different server.", 'questionId': '56722', 'answerId': '71353'}
{'answer': "Try POP3Client in the Net Commons package; it'll let your Java program check for new mail for a particular account at whatever interval you want (every few minutes?  hourly?), and get/delete messages as desired.", 'questionId': '56722', 'answerId': '74450'}
{'answer': "Use a mail in database (your Domino administrator can set that up for you but it's in the help file as well). In that database, you can create an agent that runs periodically to process all new documents.  That agent will use the EmbeddedObjects property of the NotesRichTextItem class and the ExtractFile method of the NotesEmbeddedObject class to get a handle on the file attachment and extract it to the location you specify. For example, this script goes through all the file attachments, object links, and embedded objects in the Body item of a document. Each time it finds a file attachment, it detaches the file to the SAMPLES directory on the C drive and removes the attachment from the document", 'questionId': '56722', 'answerId': '76684'}
{'answer': "SMTP/POP3 can be enabled on the Domino server.  Worked with this before and gotten Squirrel Mail running with it. SMTP is a bit resource intensive, but well worth the effort because then you don't have to descend into LotusLand to get things working.  Just write a small Java CLI program that will check a specific email box (POP3 or SMTP), and parse through the messages, pulling the attachments and placing them where needed. Plenty of documentation and examples here: http://java.sun.com/products/javamail/ The techniques that you develop taking this approach will be more widely applicable in your future career than anything Lotus/Domino specific.", 'questionId': '56722', 'answerId': '76778'}
{'answer': "No matter what you do, you'll need an understanding of the Lotus Notes data structures.  The good news is that a fully automated solution can be built in Notes very easily. Your best bet is to have it built within Notes, and it can be set up to run automatically whenever new mail is received.   Gary's answer is dead on, but without any experience, it would probably be hard to figure out how to implement it yourself.  On the other hand, it really shouldn't take any competent Notes programmer more than an hour or two to set it up.", 'questionId': '56722', 'answerId': '278289'}
{'answer': "Edit: since I first wrote this answer, Wiser has moved and now claims to only be a unit testing tool, so take the answer below with a pinch of salt... Svrist's answer is good, but if you want to avoid his middle step (the mailserver that writes the mail to disk for later pickup by the Java system) you can use Wiser. Wiser lets you start an in-Java mailserver: Then you can just poll it periodically for mail:", 'questionId': '56722', 'answerId': '278314'}
{'answer': 'Even though DocumentBuilder.parse appears not to mutate the builder it does on the Sun JDK default implementation (based on Apache Xerces). Eccentric design decision. What can you do? I guess use a ThreadLocal: (Disclaimer: Not so much as attempted to compile the code.)', 'questionId': '56737', 'answerId': '56815'}
{'answer': "There's a reset() method on DocumentBuilder which restores it to the state when it was first created. If you're going the ThreadLocal route, don't forget to call this or you're hosed.", 'questionId': '56737', 'answerId': '231433'}
{'answer': 'You can also check this code to make further optimization https://svn.apache.org/repos/asf/shindig/trunk/java/common/src/main/java/org/apache/shindig/common/xml/XmlUtil.java', 'questionId': '56737', 'answerId': '18823295'}
{'answer': "Doesn't the Criteria API do it for you? It looks almost exactly like what you're asking for.", 'questionId': '56843', 'answerId': '56866'}
{'answer': "It looks like you want to use the Criteria query API built into Hibernate. To do your above query it would look like this: If you don't have access to the Hibernate Session yet, you can used 'DetachedCriteria' like so: If you wanted to get all Stock that have a Bonus with a specific ID you could do the following: For more infromation check out Criteria Queries from the Hibernate docs", 'questionId': '56843', 'answerId': '56883'}
{'answer': "@Sbastien Rocca-Serra  That's just a join. Hibernate does it automatically, if and only if you've got the mapping between Stock and Bonus setup and if bonus is a property of Stock. Criteria.list() will return Stock objects and you just call stock.getBonus(). Note, if you want to do anything like You need to use Criteria.createAlias(). It'd be something like", 'questionId': '56843', 'answerId': '56937'}
{'answer': "@Sbastien Rocca-Serra Now we're getting somewhere concrete. The sort of join you're trying to do isn't really possible through the Criteria API, but a sub-query should accomplish the same thing. First you create a DetachedCriteria for the bonus table, then use the IN operator for someValue. This is equivalent to The only downside would be if you have references to different tables in someValue and your ID's are not unique across all tables. But your query would suffer from the same flaw.", 'questionId': '56843', 'answerId': '57100'}
{'answer': "Criteria API does not provide all functionality avaiable in HQL. For example, you cannot do more than one join over the same column. Why don't you use NAMED QUERIES? The look much more clean:", 'questionId': '56843', 'answerId': '57141'}
{'answer': 'I wrote a GPL\'d solution for OMERO which you could easily build suited to your situation. Source: QueryBuilder.java Test: QueryBuilderMockTest Usage: It functions as a state machine "select->from->join->where->order", etc. and keeps up with optional parameters. There were several queries which the Criteria API could not perform (see HHH-879), so in the end it was simpler to write this small class to wrap StringBuilder. (Note: there is a ticket HHH-2407 describing a Hibernate branch which should unify the two. After that, it would probably make sense to re-visit the Criteria API)', 'questionId': '56843', 'answerId': '586392'}
{'answer': 'Take a look at the search package available from the hibernate-generic-dao project.  This is a pretty decent HQL Builder implementation.', 'questionId': '56843', 'answerId': '1835464'}
{'answer': 'I know this thread is pretty old, but I also was looking for a HqlBuilder And I found this "screensaver" project  It is NOT a Windows screensaver, it\'s a  "Lab Information Management System (LIMS) for high-throughput screening (HTS) facilities that perform small molecule and RNAi screens." It contains an HQLBuilder that is looking quite good. Here is a sample list of available methods:', 'questionId': '56843', 'answerId': '1880122'}
{'answer': 'For a type-safe approach to your problem, consider Querydsl. The example query becomes Querydsl uses APT for code generation like JPA2 and supports JPA/Hibernate, JDO, SQL and Java collections. I am the maintainer of Querydsl, so this answer is biased.', 'questionId': '56843', 'answerId': '2044946'}
{'answer': "For another type-safe query dsl, I recommend http://www.torpedoquery.org.  The library is still young but it provides type safety by directly using your entity's classes.  This means early compiler errors when the query no longer applies before of refactoring or redesign. I also provided you with an example.  I think from your posts that you where trying to do a subquery restriction, so I based the exemple on that:", 'questionId': '56843', 'answerId': '8372768'}
{'answer': 'Now are also available the standard JPA Type Safe query and an less standard but also good Object Query Examples: JPA Type Safe Object Query', 'questionId': '56843', 'answerId': '17545743'}
{'answer': " This code uses Restlet to make a request to Yahoo's RESTful search service. Obviously, the details of the web service you are using will dictate what your client for it looks like.", 'questionId': '56865', 'answerId': '57090'}
{'answer': " So, if I understand this correctly, the above line is where the actual call to the web service is being made, with the response being converted to an appropriate format and manipulated after this line. Assuming I were not using Restlet, how would this line differ? (Of course, the actual processing code would be significantly different as well, so that's a given.)", 'questionId': '56865', 'answerId': '57163'}
{'answer': "There's roughly a gajillion HTTP client libraries (Restlet is quite a bit more than that, but I already had that code snippet for something else), but they should all provide support for sending GET requests. Here's a rather less featureful snippet that uses HttpClient from Apache Commons:", 'questionId': '56865', 'answerId': '58591'}
{'answer': "I dont have programed in Java ME, but i found in it's reference for optional packages the Advanced Graphics and User Interface API, and it's used like the Java SE API to create these dialogs with the JOptionPane Class int JOptionPane.showConfirmDialog(java.awt.Component parentComponent, java.lang.Object >message, java.lang.String title, int optionType) Return could be JOptionPane.YES_OPTION, JOptionPane.NO_OPTION, JOptionPane.CANCEL_OPTION ...", 'questionId': '56943', 'answerId': '56970'}
{'answer': 'You need an Alert: An alert is a screen that shows data to the user and waits for a certain period of time before proceeding to the next Displayable. An alert can contain a text string and an image. The intended use of Alert is to inform the user about errors and other exceptional conditions. With 2 commands ("Yes"/"No" in your case): If there are two or more Commands present on the Alert, it is automatically turned into a modal Alert, and the timeout value is always FOREVER. The Alert remains on the display until a Command is invoked. These are built-in classes supported in MIDP 1.0 and higher. Also your code snippet will never work. Such an API would need to block the calling thread awaiting for the user to select and answer. This goes exactly in the opposite direction of the UI interaction model of MIDP, which is based in callbacks and delegation. You need to provide your own class, implementing CommandListener, and prepare your code for asynchronous execution. Here is an (untested!) example class based on Alert: To use it (again, untested and on top of my head): This code will make the prompt the current displayed form in your app, but it won\'t block your thread like in the example you posted. You need to continue running and wait for a commandAction invocation.', 'questionId': '56943', 'answerId': '63063'}
{'answer': 'The two obvious routes are to suppress the warning or mock a subclass. (Disclaimer: Not even attempted to compile this code, nor have I used EasyMock.)', 'questionId': '56954', 'answerId': '56996'}
{'answer': 'You can annotate the test method with @SuppressWarnings("unchecked"). I agree this is some what of a hack but in my opinion it\'s acceptable on test code.', 'questionId': '56954', 'answerId': '57247'}
{'answer': "AFAIK, you can't avoid the unchecked warning when a class name literal is involved, and the SuppressWarnings annotation is the only way to handle this. Note that it is good form to narrow the scope of the SuppressWarnings annotation as much as possible. You can apply this annotation to a single local variable assignment: or use a helper method:", 'questionId': '56954', 'answerId': '396122'}
{'answer': 'I worked around this problem by introducing a subclass, e.g. Then create a mock of that abstract class:', 'questionId': '56954', 'answerId': '8897152'}
{'answer': "I know this goes against the question, but why not create a List rather than a Mock List? It's less code and easier to work with, for instance if you want to add items to the list. Instead of", 'questionId': '56954', 'answerId': '20427511'}
{'answer': 'In general you use OuterClassName.this to refer to the enclosing instance of the outer class. In your example that would be a.this.otherMethod()', 'questionId': '56974', 'answerId': '56987'}
{'answer': '', 'questionId': '56974', 'answerId': '56992'}
{'answer': 'For the first issue, how about trying For the second issue here is a thread with a possible workaround. Quoting the workaround change that code to:', 'questionId': '57034', 'answerId': '57047'}
{'answer': 'The overhead is very small. It is possible to write a hybrid array list that has fields for the first few items, and then falls back to using an array for longer list. You can avoid the overhead of the list object entirely by using an array. To go even further hardcore, you can declare the field as Object, and avoid the array altogether for a single item. If memory really is a problem, you might want to forget about using object instances at the low-level. Instead use a larger data structure at a larger level of granularity.', 'questionId': '57145', 'answerId': '57177'}
{'answer': "The ArrayList class in Java has only two data members, a reference to an Object[] array and a sizewhich you need anyway if you don't use an ArrayList. So the only advantage to not using an ArrayList is saving one object allocation, which is unlikely ever to be a big deal. If you're creating and disposing of many, many instances of your container class (and by extension your ArrayList instance) every second, you might have a slight problem with garbage collection churnbut that's something to worry about if it ever occurs. Garbage collection is typically the least of your worries.", 'questionId': '57145', 'answerId': '57185'}
{'answer': "For the sake of keeping things simple, I think this is pretty much a non-issue. Your implementation is flexible enough that if the requirements change in the future, you aren't forced into a refactoring. Also, adding more logic to your code for a hybrid solution just isn't worth it taking into account your small data set and the high-quality of Java's Collection API.", 'questionId': '57145', 'answerId': '57226'}
{'answer': 'Google Collections has collections optimized for immutable/small number of elements. See Lists.asList API as an example.', 'questionId': '57145', 'answerId': '57341'}
{'answer': "I am not sure if it was the same problem but I had similar symptoms a while ago using another FTP client in Java (commons.net). The problem turned out to be caused by the active/passive mode of the connection. I am sorry I can't give you more details, that's all I can remember... hope that help.", 'questionId': '57194', 'answerId': '57324'}
{'answer': 'Guillermo Vasconcelos was correct in his answer. There are two FTP modes, Active and Passive. The default FTP mode is active. Active requires the server to connect back to the client on some TCP/IP port. This does not work with firewalls because chances are that this port would be blocked or if you are behind a Router with NAT, not mapped. If you use Passive (PASV) mode instead, you should not get the hang.', 'questionId': '57194', 'answerId': '57447'}
{'answer': "I'm going to run some new tests with the settings to passive tomorrow when maintenance is done here, but I'm not sure that's the issue.  We are able to get a directory listing if there are files or subdirectories in that directory.  It only fails when the directory we're NLST-ing on is empty. Would the active/passive difference only manifest for an empty directory, or is there another possibility?", 'questionId': '57194', 'answerId': '57460'}
{'answer': "I tried this in WebMethods IS Version 6.5 Updates WmPRT_6-5-1_SP1, IS_6-5_SP3. It worked perfectly first time. I turned on debugging on the FTP server (Debian's default ftpd). WebMethods' NLST honours the active/passive parameter passed to it. There's nothing special about the NLST command, nor its correct behaviour with an empty directory -- if LIST works, then so should RETR, STOR and NLST. If NLST works with a non-empty directory, it should work with an empty one. So my guess is that either: Your version of WM has a bug mine doesn't Your FTP server has a bug mine doesn't There's a wacky protocol-aware firewall in your system that doesn't like FTP data sockets with no data in them. Firewall vendors are a bit wayward when it comes to FTP... When testing with other clients, make sure it's from the same machine on which WebMethods Integration Server is running. Just for the record, here's what should happen for an active NLST client opens a listening socket, and sends a PORT command with that socket's details client sends NLST command server connects to client's listening socket (this is the data socket) server transmits listing over data socket (in this case, zero bytes) server closes data socket ... and in passive mode client sends PASV command server opens a listening socket, and replies with PASV response containing its details client connects to listening socket (this is the data socket) client sends NLST command server transmits listing over data socket (zero bytes again) server closes data socket", 'questionId': '57194', 'answerId': '91422'}
{'answer': 'FTP requires that both the specified port and the one above it be opened through the firewall.  When I had problems with webMethods timing out, it was because the firewall did not have the return port open. Howard', 'questionId': '57194', 'answerId': '958415'}
{'answer': 'You want to use Restrictions.disjuntion(). Like so See the Hibernate doc here.', 'questionId': '57484', 'answerId': '57526'}
{'answer': 'Assuming you have a hibernate session to hand then something like the following should work:', 'questionId': '57484', 'answerId': '57541'}
{'answer': 'Just in case anyone should stumble upon this with the same question for NHibernate:', 'questionId': '57484', 'answerId': '58643'}
{'answer': ' //Same thing can be done for (c1 OR c2) AND c3, or any complex expression.', 'questionId': '57484', 'answerId': '25283984'}
{'answer': '', 'questionId': '57484', 'answerId': '25294252'}
{'answer': 'The conditions can be applied using the or / and in different levels of the query using disjunction', 'questionId': '57484', 'answerId': '36494224'}
{'answer': 'Do you mean: Or something more complex?', 'questionId': '57537', 'answerId': '57563'}
{'answer': "This should give you the real path that you can use to extract / edit files. Javadoc Link We're doing something similar in a context listener.", 'questionId': '57537', 'answerId': '57595'}
{'answer': 'I was googling the result and getting no where. In JSP pages that need to use Java Script to access the current contextPath it is actually quite easy.  Just put the following lines into your html head inside a script block.', 'questionId': '57537', 'answerId': '1807990'}
{'answer': " In my Servlet I would like to access the root of the context so that I can do some JavaScript minifying You can also access the files in the WebContent by ServletContext#getResource(). So if your JS file is for example located at WebContent/js/file.js then you can use the following in your Servlet to get a File handle of it: or to get an InputStream: That said, how often do you need to minify JS files? I have never seen the need for request-based minifying, it would only unnecessarily add much overhead. You probably want to do it only once during application's startup. If so, then using a Servlet for this is a bad idea. Better use ServletContextListener and do your thing on contextInitialized().", 'questionId': '57537', 'answerId': '1808295'}
{'answer': 'http://www.json.org/java/index.html has what you need.', 'questionId': '57689', 'answerId': '57732'}
{'answer': 'Yup!  Check out json-lib Here is a simplified code snippet from my own code that send a set of my domain objects:', 'questionId': '57689', 'answerId': '57737'}
{'answer': "We have been using Flexjson for converting Java objects to JSON and have found it very easy to use. http://flexjson.sourceforge.net Here are some examples: It has some cool features such as deepSerialize to send the entire graph and it doesn't break with bi directional relationships. Formatting dates on the server side is often handy too", 'questionId': '57689', 'answerId': '58047'}
{'answer': "To me, the best Java <-> JSON parser is XStream (yes, I'm really talking about json, not about xml). XStream already deals with circular dependencies and has a simple and powerful api where you could write yours drivers, converters and so on. Kind Regards", 'questionId': '57689', 'answerId': '58124'}
{'answer': 'For RESTful web services in Java, also check out the Restlet API which provides a very powerful and flexible abstraction for REST web services (both server and client, in a container or standalone), and also integrates nicely with Spring and JSON.', 'questionId': '57689', 'answerId': '62821'}
{'answer': "It might be worth looking into Jersey. Jersey makes it easy to expose restful web services as xml and/or JSON.  An example... start with a simple class Then create a Resource  and expose it. There are many ways to do this, such as by using Jersey's ServletContainer. (web.xml) Thats all you need to do... pop open your browser and browse to http://localhost/blah/1. By default you will see XML output. If you are using FireFox, install TamperData and change your accept header to application/json to see the JSON output. Obviously there is much more to it, but Jersey makes all that stuff quite easy. Good luck!", 'questionId': '57689', 'answerId': '73959'}
{'answer': "As already mentioned, Jersey (JAX-RS impl) is the framework to use; but for basic mapping of Java objects to/from JSON, Tutorial is good. Unlike many alternatives, it does not use strange XML-compatibility conventions but reads and writes clean JSON that directly maps to and from objects. It also has no problems with null (there is difference between missing entry and one having null), empty Lists or Strings (both are distinct from nulls). Jackson works nicely with Jersey as well, either using JAX-RS provider jar, or even just manually. Similarly it's trivially easy to use with plain old servlets; just get input/output stream, call ObjectMapper.readValue() and .writeValue(), and  that's about it.", 'questionId': '57689', 'answerId': '787025'}
{'answer': "I have found google-gson compelling. It converts to JSON and back. http://code.google.com/p/google-gson/ It's very flexible and can handle complexities with objects in a straightforward manner. I love its support for generics.", 'questionId': '57689', 'answerId': '2365261'}
{'answer': "I have been using jaxws-json, for providing JSON format web services. you can check the project https://jax-ws-commons.dev.java.net/json/. it's a nice project, once you get it up, you'll find out how charming it is.", 'questionId': '57689', 'answerId': '3757053'}
{'answer': "Check out Apache Savan. It's a publisher/subscriber implementation for Axis2 that supports WS-Eventing (see sample.eventing.Client for an example client). JBossWS has some information about setting up a service here, but I didn't see any example for a client. Regarding CXF and Metro, I'm not sure if they have specific support for WS-Eventing yet.", 'questionId': '57915', 'answerId': '58413'}
{'answer': 'Hibernate makes more sense when your application works on object graphs, which are persisted in the RDBMS. Instead, if your application logic works on a 2-D matrix of data, fetching those via direct JDBC works better. Although Hibernate is written on top of JDBC, it has capabilities which might be non-trivial to implement in JDBC. For eg: Say, the user views a row in the UI and changes some of the values and you want to fire an update query for only those columns that did indeed change. To avoid getting into deadlocks you need to maintain a global order for SQLs in a transaction. Getting this right JDBC might not be easy Easily setting up optimistic locking. When you use JDBC, you need to remember to have this in every update query. Batch updates, lazy materialization of collections etc might also be non-trivial to implement in JDBC. (I say "might be non-trivial", because it of course can be done - and you might be a super hacker:) Hibernate lets you fire your own SQL queries also, in case you need to.  Hope this helps you to decide. PS: Keeping the Session open on a remote desktop client and running into trouble is really not Hibernate\'s problem - you would run into the same issue if you keep the Connection to the DB open for long.', 'questionId': '58163', 'answerId': '58276'}
{'answer': 'Believe it or not, you can actually use java.awt.Robot to "create an image containing pixels read from the screen." You can then write that image to a file on disk. I just tried it, and the whole thing ends up like: NOTE: This will only capture the primary monitor. See GraphicsConfiguration for multi-monitor support.', 'questionId': '58305', 'answerId': '58326'}
{'answer': 'I never liked using Robot, so I made my own simple method for making screenshots of JFrame objects:', 'questionId': '58305', 'answerId': '10796047'}
{'answer': '', 'questionId': '58305', 'answerId': '17229248'}
{'answer': "If you'd like to capture all monitors, you can use the following code:", 'questionId': '58305', 'answerId': '18156495'}
{'answer': '', 'questionId': '58305', 'answerId': '27603992'}
{'answer': ' bufferedImage will contain a full screenshot, this was tested with three monitors', 'questionId': '58305', 'answerId': '31083752'}
{'answer': 'Yes you can and should put try/catch/finally block around your code. In C# there is a shorthand "using" statement, but in Java you are stuck with:', 'questionId': '58547', 'answerId': '58552'}
{'answer': 'If you want the using block get involved in the java closure debate :S', 'questionId': '58547', 'answerId': '58563'}
{'answer': 'Sorry to disappoint you but in Java we do use try\\catch\\finally blocks a lot. And with "a lot", I mean A LOT. I do sometimes wish that Java has the C# using block. Most of the time you won\'t need to free up resources as Java\'s garbage collector will take care of that. However exceptions do have their uses in making error handling a lot cleaner. You can write your own exceptions and catch them for whatever you are doing. No more returning arbitrary error codes to the user!', 'questionId': '58547', 'answerId': '58573'}
{'answer': 'It is possible to factor out try/finally (and exception and algorithms) using the Execute around idiom. However the syntax is highly verbose. This sort of thing makes more sense if you are abstracting more than try/finally. For instance, with JDBC you can execute a statement, loop through the results, close resources and wrap the exception.', 'questionId': '58547', 'answerId': '58817'}
{'answer': 'This question dates to 2008 and therefore pertains to Java 6. Since then Java 7 has been released, which contains a new feature for Automatic Resource Management. For a more recent question that is relevant to Java 7 see this question: java techniques for automatic resource release? "prompt cleanup"?', 'questionId': '58547', 'answerId': '7866351'}
{'answer': "I haven't done this before, but I found this site on the web giving an explanation.", 'questionId': '5855', 'answerId': '6687'}
{'answer': "Does your App use RMI over TCP? If not, is it possible that this is a heisenbug, caused by instrumenting the VM? I assume VisualVM must use RMI calls to figure out what's going on in the JVM....", 'questionId': '58886', 'answerId': '59121'}
{'answer': "I don't have experience with VisualVM -- but JRockit's profiler does provide this information; you may consider using it instead. Update: a question with a list of java profilers can be found here", 'questionId': '58886', 'answerId': '187021'}
{'answer': 'I have started using the new VisualVM 1.2. It allows profiling CPU and drilling down using a call graph. Try it out.', 'questionId': '58886', 'answerId': '1624142'}
{'answer': "Using 1.3.2 also seeing this being the reported hangup I am hitting. In 1.3.2 if you do a thread dump and look for this call you can see where it lands in the call chain for that thread. Not sure if Yuval F was referring to this or something else. Look up the call chain to see what it's calling and so on, look down to see what it's being called by and so on.", 'questionId': '58886', 'answerId': '6037264'}
{'answer': "It should respond to ActionListeners, like this: @John Calsbeek rightly points out that addItemListener() will work, too.  You may get 2 ItemEvents, though, one for the deselection of the previously selected item, and another for the selection of the new item. Just don't use both event types!", 'questionId': '58939', 'answerId': '58963'}
{'answer': "I would try the itemStateChanged() method of the ItemListener interface if jodonnell's solution fails.", 'questionId': '58939', 'answerId': '58965'}
{'answer': 'You may try these -or- -or-', 'questionId': '58939', 'answerId': '2187058'}
{'answer': 'Code example of ItemListener implementation Now we will get only selected item. Then just add listener to your JComboBox', 'questionId': '58939', 'answerId': '14424530'}
{'answer': "I was recently looking for this very same solution and managed to find a simple one without assigning specific variables for the last selected item and the new selected item. And this question, although very helpful, didn't provide the solution I needed. This solved my problem, I hope it solves yours and others. Thanks. How do I get the previous or last item?", 'questionId': '58939', 'answerId': '14667156'}
{'answer': 'Here is creating a ComboBox adding a listener for item selection change:', 'questionId': '58939', 'answerId': '17846338'}
{'answer': 'ISP states that: Clients should not be forced to depend   on methods that they do not use. ISP relates to important characteristics - cohesion and coupling. Ideally your components must be highly tailored. It improves code robustness and maintainability.  Enforcing ISP gives you following bonuses: High cohesion - better understandability, robustness Low coupling - better maintainability, high resistance to changes If you want to learn more about software design principles, get a copy of Agile Software Development, Principles, Patterns, and Practices book.', 'questionId': '58988', 'answerId': '59008'}
{'answer': "It simplifies the interface that any one client will use and removes dependencies that they might otherwise develop on parts of the interface that they don't need.", 'questionId': '58988', 'answerId': '59012'}
{'answer': 'One reason is that having many interfaces with a minimal amount of methods for each one makes it easier to implement each interface and to implement them correctly. A large interface can be unruly. Also, using a focused interface in a scenario makes the code more maintanable because you can see which facet of the object is being used (e.g., an IComparable interface lets you know that the object is only being used for comparisons in the given scenario).', 'questionId': '58988', 'answerId': '59529'}
{'answer': 'The interface segregation is the I on the SOLID principle, before digging too deep with the first, lets explain whats does the latter mean.  SOLID can be considered a set of best practices and recommendations made by experts (meaning they have  been proved before) in order to provide a reliable foundation in how we design applications. These practices strive to  make easier to maintain, extend, adapt and scale our applications. Why should I care about SOLID programming? First of all, you have to realize you are not going to be forever where you are. If we use standards and well known architectures, we can be sure that our code will be easy to maintain by other developers that come after us, and Im sure you wouldnt want to deal with the task of fixing a code that didnt applied any known methodology as it would be very hard to understand it. The interface segregation principle. Know that we know what the SOLID principles are we can get into more detail about the Interface Segregation principle, but what exactly does the interface segregation says? Clients should not be forced to implement unnecessary methods which   they will not use This means that sometimes we tend to make interfaces with a lot of methods, which can be good to an extent, however this can easily abused, and we can end up with classes that implement empty or useless methods which of course adds extra code and burden to our apps. Imagine you are declaring a lot of methods in single interface, if you like visual aids a class that is implementing an interface but that is really needing a couple of methods of it would look like this: In the other hand, if you properly apply the interface segregation and split your interface in smaller subsets you can me sure to implement those that are only needed: See! Is way better!  Enforcing this principle will allow you to have low coupling which aids to  a better maintainability and high  resistance to changes. So you can really leverage the usage of interfaces and implementing the methods when you really should. Now lets review a less abstract example, say you declared an interface called Reportable And you have a client that will only to export some data in Excel format, you can implement the interface, but would you only have to implement the excel method? The answer is no, you will have to code the implementation for all the methods even if you are not going to use them, this can cause a lot of junk code hence making the code hard to maintain.. Remember keep it simple and dont repeat yourself and you will find that you are already using this principle without knowing.', 'questionId': '58988', 'answerId': '17999321'}
{'answer': "This principle primarily serves twin purposes To make the code more readable and manageable. Promotes single responsibility for classes ( high cohesion ). Ofcourse why should a class have a method that has no behavioural impact ? Why not just remove it. Thats what ISP is about There are few questions that a designer must ask with concerns to ISP What does one achieve with ISP How to I analyse an already existing code for any ISP violations To take this discussion further, I must also add that this principle isn't a 'principle' in the strictest sense, because under certain circumstances, applying ISP to the design, instead of promoting readability, might make the object structure unreadable and cluttered with unnecessary code.  You may well observe this in the java.awt.event package More at my blog: http://design-principle-pattern.blogspot.in/2013/12/interface-segregation-principle.html", 'questionId': '58988', 'answerId': '20562950'}
{'answer': 'To avoid regression efforts, when just one client-specific or one behavior-specific changes. If you have combined all your behavior methods all in one BIG interface, just think about how you will end up testing all the pieces of code where all you have referred to is that interface, even when only small changes happened. For a more detailed explanation, refer to Interface segregation principle article', 'questionId': '58988', 'answerId': '33517269'}
{'answer': 'ISP is important. Basic idea of ISP : Client should not be forced to depend on methods it does not use. This principle seems to be more logical. Ideally client should not implement the methods, which are not used by the client.  Refer to below SE question for code example: Interface Segregation Principle- Program to an interface Advantages: Flexibility : In absence of ISP, you have one Generic FAT interface and many classes implementing it. Assume that you had 1 interface and 50 classes. If there is a change in interface, all 50 classes have to change their implementation. With ISP, you will divide generic FAT interface into fine granular small interfaces. If there is a change in small granular interface, only the classes implementing that interface  will be affected. Maintainability and Ease of use:  Since changes are limited to fine granular interface instead of generic FACT interface, code maintenance is easier. Unrelated code is no longer part of implementation classes.', 'questionId': '58988', 'answerId': '40042398'}
{'answer': 'Change it to: You need that because Comparable is itself a generic type.', 'questionId': '59107', 'answerId': '59119'}
{'answer': "Here's an odd case: Luckily code like the one above is rare, but nullCompare() will not support comparison of Bs unless it is stated that Comparable may apply to T or any superclass thereof: Even though most people will never benefit from the above tweak, it may come in handy when designing APIs for exported libraries.", 'questionId': '59107', 'answerId': '85739'}
{'answer': "I'm not sure that genericizing this method makes sense. Currently the method works on any kind of Comparable; if you genericize it you will have to implement it (with exactly the same code) multiple times. Sometimes it is possible to compare two objects that don't have a common ancestor, and any generic version won't allow this. By adding generics you won't add any safety to the code; any problems of safety will occur in the call to compareTo. What I would suggest is simply suppressing the warning. It's not really warning you about anything useful.", 'questionId': '59107', 'answerId': '115539'}
{'answer': 'Cannot edit so I have to post my answer. You need to declare nested type parameter since Comparable is generic. Please note that Comparable< ? super T >, which makes more flexible.  You will see the same method definition on Collections.sort', 'questionId': '59107', 'answerId': '227885'}
{'answer': 'To make it even more general, you could even allow it to work for two different types. =P', 'questionId': '59107', 'answerId': '815484'}
{'answer': "There's a standalone JUnit runner that has a UI, but I recommend using one of the builtin test runners in the Java IDEs (Eclipse, Netbeans, and IntelliJ all have good ones).  They all support JUnit, and most support TestNG as well.", 'questionId': '59128', 'answerId': '59132'}
{'answer': "Eclipse is by-far the best I've used.  Couple JUnit with a code coverage plug-in and Eclipse will probably be the best unit-tester.", 'questionId': '59128', 'answerId': '59256'}
{'answer': "Why you need a GUI runner? Can't you just run the tests from the IDE itself? In .Net we have TestDriven.net, in Java there must be something equivalent. You can check out IntelliJ IDEA, it has the unit testing support built-in.", 'questionId': '59128', 'answerId': '59279'}
{'answer': "JUnit stopped having graphical runners following the release of JUnit 4. If you do have an earlier version of JUnit you can use a graphical test runner by entering on the command line[1]: With the optional test class the specified tests will run straight away. Without it you can enter the class into the GUI. The benefits of running your tests this way is that you don't have the overhead of an entire IDE (if you're not already running one). However, if you're already working in an IDE such as Eclipse, the integration is excellent and is a lot less hassle to get the test running. If you do have JUnit 4, and really don't want to use an IDE to run the tests, or want textual feedback, you can run the text UI test runner. In a similar vein as earlier, this can be done by entering on the command line[1]: Though in this case the TestClass is not optional, for obvious reasons. [1] assuming you're in the correct working directory and the classpath has been setup, which may be out of scope for this answer", 'questionId': '59128', 'answerId': '59941'}
{'answer': "If you want a standalone test runner (not the build-in IDE one), then for Junit3 you can use junit.textui.TestRunner %your_class% - command line based runner junit.swingui.TestRunner [%your_class%] - runner with user interface (swing-powered) For Junit4, the UI-powered runners were removed and so far I haven't found a convenient solution to run new Junit4 tests on old swing-powered runner without additional libraries. But you can use JUnit 4 Extensions that provides a workaround to use junit.swingui.TestRunner. More here", 'questionId': '59128', 'answerId': '11132066'}
{'answer': 'From what I can see JavaFX is a whole new runtime and compiler so is not a subset of Java. Sun will support it on mobile phones and on the desktop. OS-wise it is currently released for Windows/Mac but Solaris/Linux are in the works.', 'questionId': '59129', 'answerId': '59276'}
{'answer': 'JavaFX has three planned distributions. JavaFX Desktop will run on Windows, Mac, Linux, and Solaris at FCS and will require Java SE.  Support for Linux and Solaris will be forthcoming. JavaFX TV and JavaFX Mobile have no announce target platforms.  Also unannounced is whether they will run on ME or SE, and if ME which profiles. One important platform distinction is that JavaFX Desktop will support Swing components while JavaFX Mobile will not (only scene graph for graphics).   JavaFX TV the least publicly concrete of the three at this time.', 'questionId': '59129', 'answerId': '75506'}
{'answer': 'JavaFx is not a new runtime. It is the same JRE but a new language/compiler with some a few new APIs to make it all works.... Using Netbeans, you can build applications on any platform.  As of today, the APIs are beta. Classfiles produced by the compiler are JRE 6 compatible.', 'questionId': '59129', 'answerId': '85580'}
{'answer': "From here. I couldn't have said it better (Well, with the exception of a flame war, this is a flameless place :-) ). Hello, Responding to your question seems   fraught with peril by starting a flame   war, so I'll proceed cautiously. There are a number of fundamental   technical similarities between the   Java Runtime and the Common Language   Runtime, including garbage collected   memory, an intermediate language   (Microsoft IL versus Java ByteCode),   core system libraries, and support for   fairly high level languages, code   security, and deployment. However, each of these 'similar' areas   also have a number of sizable and   small differences, and it's beyond the   scope of a simple Forum post to   describe most of them. I would suggest asking a more   targetted question about any of the   various runtime features and component   areas (e.g. memory management,   compilation, system libraries,   security, etc.) and then we can   provide a more targetted response   (e.g. a blog, a technical article, or   some books).", 'questionId': '59175', 'answerId': '59187'}
{'answer': 'This should be a great thread. One of the biggest differences is between the CLR and JVM is the CLR"s native integration of generics. Java instead removes the generic types and the JVM can only work with objects by autoboxing the objects it appears to be pseudo generics.', 'questionId': '59175', 'answerId': '59206'}
{'answer': 'Already posted this once but here is a series of interviews with c# chief language designer  Anders Hejlsberg.  Though mostly talking about the differences between C# and Java he does dive into differences between the virtual machines as well.', 'questionId': '59175', 'answerId': '59236'}
{'answer': 'As Vinko said, the full details are way beyond the scope of a forum post. The differences/similarities boil down to this: They are both a runtime environment "sandbox" that include a "just-in-time" compiler to translate program instructions in an intermediate language (MSIL or ByteCode) to native machine code and provide automatic memory management (garbage collection). Sitting on top of the respective runtime environments are a set of class libraries that provide higher level abstractions to developers to simplify development tasks. The internals of how those runtime environments are actually implemented are, for the most part, proprietary to Microsoft and Sun. The algorithms used by the garbage collection systems, for example, while probably similar in technical functionality are different in implementation.', 'questionId': '59175', 'answerId': '59240'}
{'answer': 'Miguel de Icaza mentions here: Seasoned industry programmers will notice that the above is   very much like Java and the Java VM.   They are right, the above   is just like Java.  The CIL has one feature not found in Java though: it is   byte code representation that is powerful enough to be used as a   target for many languages: from C++, C, Fortran and Eiffel to Lisp   and Haskell including things like Java, C#, JavaScript and Visual   Basic in the mix. I wish I had the time to go in more detail, but for the sake   of this argument, the above will suffice. The comments go into some details, though, like tail call optimizations. Lot have changed since 2002 though - both CLR and JVM now have multiple languages targeting it. But nonetheless worth a read.', 'questionId': '59175', 'answerId': '59415'}
{'answer': "One essential difference is that the JVM is portable across platforms and runs on Linux, Macintosh, and many cell phones and embedded devices.   CLR runs on Microsoft supported platforms with the Mono project providing partial support of older versions of CLR on a few more. Internally this means the JVM's performance will vary on those different platforms based on capabilities provided by the platforms themselves.", 'questionId': '59175', 'answerId': '96913'}
{'answer': 'As far as I know, .Net CLR still has much more flexible and powerful Code Access Security built into the runtime, allowing much finer grained permissions and execution policy.', 'questionId': '59175', 'answerId': '1919233'}
{'answer': "There differences in garbage collection as well.  JVM uses Copying collector and Mark and sweep. .NET user Copying collector and Mark and compact (Much harder to implement). Also type erasure mentioned by Flyswat is important. JVM doesn't have a clue about generics and everything is object and associated perf. penalty of boxing and unboxing. Also reflection won't give you generic information. CLR supports generics natively.", 'questionId': '59175', 'answerId': '2117199'}
{'answer': "The CLR and JVM have goals and philosophies that differ more than you might think. In general, the JVM aims to optimize more dynamic, higher-level code while the CLR gives you more low-level tools to do these kinds of optimizations yourself.  A good example is stack allocation. On the CLR you have explicit stack allocation of custom value types. On the JVM the only custom types are reference types but the JVM can convert heap allocations to stack allocations in certain circumstances through Escape Analysis. Another example. In Java, methods are virtual by default. On C# at least, they are not. It is much more difficult to optimize virtual method calls because the code that gets executed at a given call site cannot be determined statically. Under the hood, their execution systems are quite different. Most JVMs (in particular, Hotspot) start out with a bytecode interpreter and only JIT-compile parts of the code that are executed heavily e.g. tight loops. They can also re-compile these over and over each time using execution statistics collected from previous runs to drive optimizations. This allows more optimization effort to be applied to the parts of the program that need it most. This is called adaptive optimization. The CLR compiles everything up-front only once. It does fewer optimization both because it has more code to compile and so has to be fast and because it doesn't have any statistics of the actual execution paths taken to feed into its optimizations. This approach does have the very significant advantage of allowing you to cache compilation results across processes, which CLR does but JVM does not. A large percentage of the Hotspot JVM code is dedicated to these adaptive optimizations and they are what put Java in the same performance ballpark as native code for most general purpose computation in the early 2000s. They are also what makes the JVM a decent target for dynamic languages. I'm excluding here the more recent developments of the Dynamic Languages Runtime and invokedynamic as I don't know enough about the DLR.", 'questionId': '59175', 'answerId': '15861994'}
{'answer': "This page seems to imply that the correct configuration element is: However, I've only ever used EHCache myself.", 'questionId': '59299', 'answerId': '61394'}
{'answer': 'In the version I am working on (JBossCache 1.4.1), it looks like it is not possible to configure this parameter.', 'questionId': '59299', 'answerId': '101498'}
{'answer': "Use this XSLT.  If you need help using XSLT and Java here's a code snippet:", 'questionId': '59557', 'answerId': '59710'}
{'answer': "I am working on the same issue, and experimenting with a couple different techniques. The answer above could work. You could use the jTidy library to do the initial cleanup work and convert from HTML to XHTML. You use the XSLT stylesheet linked above. Unfortunately there is no library that has a one-stop function to do this in Java. You could try using the Python script html2text with Jython, but I haven't yet tried this!", 'questionId': '59557', 'answerId': '178278'}
{'answer': 'if you are using WMD editor and want to get the markdown code on the server side, just use these options before loading the wmd.js script:', 'questionId': '59557', 'answerId': '741062'}
{'answer': 'I came across Remark for converting HTML to Markdown see: http://remark.overzealous.com/manual/index.html It depends on JSoup, a powerful Java library for working with real-world HTML.', 'questionId': '59557', 'answerId': '21462810'}
{'answer': 'http://java.sun.com/developer/technicalArticles/Programming/Stacktrace/ ... "On UNIX platforms you can send a signal to a program by using the kill command. This is the quit signal, which is handled by the JVM. For example, on Solaris you can use the command kill -QUIT process_id, where process_id is the process number of your Java program. Alternatively you can enter the key sequence <ctrl>\\ in the window where the Java program was started. Sending this signal instructs a signal handler in the JVM, to recursively print out all the information on the threads and monitors inside the JVM." ... "Determining the Thread States You will see many different threads in many different states in a snapshot from a JVM stack trace. The key used is: R   Running or runnable thread S   Suspended thread CW  Thread waiting on a condition variable MW  Thread waiting on a monitor lock MS  Thread suspended waiting on a monitor lock"', 'questionId': '59787', 'answerId': '59818'}
{'answer': 'There is a JBoss-specific method that is slightly more user-friendly: http://community.jboss.org/wiki/GenerateAThreadDumpWithTheJMXConsole This is especially useful when you don\'t have direct access to the host machine (which "kill" would require).', 'questionId': '59787', 'answerId': '60021'}
{'answer': 'The stacktrace app found here is also useful, especially on Windows machines when the   java app is not started from the command line.', 'questionId': '59787', 'answerId': '60265'}
{'answer': "Sometimes JBoss locks so much that even jmx-concole doesn't respond. In such case use kill -3 on Linux and SendSignal on Windows.", 'questionId': '59787', 'answerId': '5720826'}
{'answer': 'Thread.getAllStackTraces() (since Java 1.5)', 'questionId': '59787', 'answerId': '11678609'}
{'answer': 'Two options: OPTION 1 Generate a thread dump using JMX Console In order to generate a thread dump: Open the JMXConsole (for example: http://localhost:8080 ) Navigate to jboss.system:type=ServerInfo mbean (hint: you can probably just CTRL-F and enter type=ServerInfo in the dialog box) Click on the link for the Server Info mbean. Navigate to the bottom where it says listThreadDump Click it and get your thread dump Notes: If you are using Internet Explorer you should use File > Save As to save the output instead of copying the data to a text editor.  For some reason when you copy the text from Internet Explorer the line breaks are not copied and all of the output ends up on a single line. OPTION 2 Generate a Thread Dump using Twiddle Alternatively you can use twiddle to execute the listThreadDump() method and pipe the returned HTML directly to file. Use this command line:', 'questionId': '59787', 'answerId': '16665089'}
{'answer': 'https://community.jboss.org/wiki/ThreadDumpJSP page features standalone self-contained threaddump.war that can be used without JMX.', 'questionId': '59787', 'answerId': '16766884'}
{'answer': "As of version 1.4, I have been running all my server side code, in my container of choice (Glassfish) and hooking up the GWTShell to that. Are you using Netbeans, Eclipse or something else? The Netbeans plugin gwt4nb does this for you out of the box, you just have to start your web project in debug mode. I'm sure the GWT plugin for Eclipse does the same thing. I realise this doesn't directly answer your question -> but my question is, is there a reason you're trying to get GWT to pick up your database settings and not just running your project as normal instead. I find this much better and robust way of running the GWTShell. Edit: Sorry I don't really use Eclipse, so I can't help you with plugins for it. I find Netbeans far superior for J2EE/web type projects. It's a bit slower, but far more functional. The plugin for that is called 'GWT4NB', it's free and it will set up your ant script in such a way that you just have to right-click on your web project and choose debug. I can understand if you don't want to switch IDEs though.", 'questionId': '59806', 'answerId': '61761'}
{'answer': "I'm using Eclipse with Cypal Studio (previously called Googlipse). If there is any other better plugin for Eclipse please recommend it. As the Shell mode uses a Tomcat instance, which is the same target server we are using in the final deployment, it should be possible to achieve (or fake) a similar behaviour.", 'questionId': '59806', 'answerId': '62218'}
{'answer': 'As a side note, you should be using URI because Java URL class is screwed up. (The equals method I believe)', 'questionId': '59832', 'answerId': '59851'}
{'answer': "That url string looks like it's invalid. Sure it's not supposed to be 'http://path'? Or are the server & port blank?", 'questionId': '59832', 'answerId': '59864'}
{'answer': 'Your code works perfectly fine for me: Instantiated new URL: http://:/path Sure you have the right line of code?', 'questionId': '59832', 'answerId': '59960'}
{'answer': 'I have also had the same exception, but in my case the URL which I was trying to execute had a space appended. After removing the space it worked fine for me. Check that the URL does not have any trailing spaces in your case.', 'questionId': '59832', 'answerId': '7876198'}
{'answer': 'I had the same error and it got resolved by the below : The jar files (JFree) which I added few days back got corrupted automatically and was causing this error. I downloaded the same files again from net and it worked fine for me.', 'questionId': '59832', 'answerId': '13266214'}
{'answer': "Why don't you just use a Double? any reason?", 'questionId': '59850', 'answerId': '59852'}
{'answer': 'Declare it like this: And use like this:', 'questionId': '59850', 'answerId': '59875'}
{'answer': "It's also worth noting that depending on your need defining your own bean may not be the best bet for you. is a good way to access a constant value stored in a class and default binders also work very well for conversions e.g.  I've found myself replacing many of my beans in this manner, coupled with a properties file defining my values (for reuse purposes).  What used to look like this gets refactored into this:", 'questionId': '59850', 'answerId': '73838'}
{'answer': 'Timestretching is quite hard. The more you slow down or speed up the sound the more artifacts you get. If you want to know what they sound like listen to "The Rockafeller Skank" by Fat Boy Slim. There are a lot of ways to do it that all have their own strengths and weaknesses. The math can get really complex. That\'s why there are so many proprietary algorithms. This page explains things a bit clearer than I can and links to the Dirac library. http://www.dspdimension.com/admin/time-pitch-overview/ I found this link for java code to do pitch shifting/timestretching http://www.adetorres.com/keychanger/KeyChangerReadme.html', 'questionId': '59936', 'answerId': '59977'}
{'answer': "This site explains how it's done in the physical world: http://www.wendycarlos.com/other/Eltro-1967/index.html I don't know how you would emulate that in software though... I'll keep looking", 'questionId': '59936', 'answerId': '59982'}
{'answer': "I use soundstretch to speed up podcasts which is works quite well, haven't tried it on music though.", 'questionId': '59936', 'answerId': '59988'}
{'answer': 'One way to do it would be to double the sampling rate without changing the sampling rate of your source.  (Low quality example, but easy to implement.  Note:  You can also decrease the sampling rate as well). Check out any math related to phase vocoders. Another common method is to create an array of fft bins that store data for scheduled intervals of your sound.  Then you can choose how quickly to iterate through the bins, and you can re-synthesize that audio data for as long as you choose thus enabling you to stretch out one short segment of your sound for as long as you like.', 'questionId': '59936', 'answerId': '1777603'}
{'answer': "audacity does it out of the box and it's free. THere are several plug ins for mp3 players as well that are free. Apparently it's pretty easy to do with an mp3 since it's already coded in the frequency domain.", 'questionId': '59936', 'answerId': '1777666'}
{'answer': "To answer your first question, you can check if the Line.Info object for your recording input matches Port.Info.LINE_IN like this: However, this doesn't work with operating systems or soundcard driver APIs that don't provide the type of each available mixer channel. So when I test it on Windows it works, but not on Linux or Mac. For more information and recommendations, see this FAQ. Regarding your second question, you can try changing the recording input settings through a Control class. In particular, see FloatControl.Type for some common settings. Keep in mind that the availability of these controls depends on the operating system and soundcard drivers, just like line-in detection.", 'questionId': '60049', 'answerId': '60961'}
{'answer': 'Since Java 1.5, yes:', 'questionId': '60160', 'answerId': '60161'}
{'answer': "I think what you're after is \\Q$5\\E.  Also see Pattern.quote(s) introduced in Java5. See Pattern javadoc for details.", 'questionId': '60160', 'answerId': '60164'}
{'answer': 'Difference between Pattern.quote and Matcher.quoteReplacement was not clear to me before I saw following example', 'questionId': '60160', 'answerId': '60172'}
{'answer': 'First off, if you use replaceAll() you DON\'T use Matcher.quoteReplacement() the text to be substituted in includes a $1 it won\'t put a 1 at the end.  It will look at the search regex for the first matching group and sub THAT in.  That\'s what $1, $2 or $3 means in the replacement text: matching groups from the search pattern. I frequently plug long strings of text into .properties files, then generate email subjects and bodies from those.  Indeed, this appears to be the default way to do i18n in Spring Framework.  I put XML tags, as placeholders, into the strings and I use replaceAll() to replace the XML tags with the values at runtime. I ran into an issue where a user input a dollars-and-cents figure, with a dollar sign.  replaceAll() choked on it, with the following showing up in a stracktrace: In this case, the user had entered "$3" somewhere in their input and replaceAll() went looking in the search regex for the third matching group, didn\'t find one, and puked. Given: replacing with  solved the problem.  The user could put in any kind of characters, including dollar signs, without issue.  It behaved exactly the way you would expect.', 'questionId': '60160', 'answerId': '11955201'}
{'answer': 'To have protected pattern you may replace all symbols with "\\\\\\\\", except digits and letters.  And after that you can put in that protected pattern your special symbols to make this pattern working not like stupid quoted text, but really like a patten, but your own.  Without user special symbols.', 'questionId': '60160', 'answerId': '13405612'}
{'answer': 'It may be too late to respond, but you can also use Pattern.LITERAL, which would ignore all special characters while formatting:', 'questionId': '60160', 'answerId': '35991060'}
{'answer': 'Pattern.quote("blabla") works nicely. The Pattern.quote() works nicely. It encloses the sentence with the characters "\\Q" and "\\E", and if it does escape "\\Q" and "\\E". However, if you need to do a real regular expression escaping(or custom escaping), you can use this code: This method returns: Some/\\s/wText*/\\,** Code for example and tests:', 'questionId': '60160', 'answerId': '45415931'}
{'answer': 'Found this code out there on the tubes:', 'questionId': '60269', 'answerId': '60279'}
{'answer': "Curses! Beaten to the punch by a Google search.  Unfortunately it's true there is no easy way to create draggable tab panes (or any other components) in Swing.  So whilst the example above is complete this one I've just written is a bit simpler. So it will hopefully demonstrate the more advanced techniques involved a bit clearer.  The steps are: Detect that a drag has occurred Draw the dragged tab to an offscreen buffer Track the mouse position whilst dragging occurs Draw the tab in the buffer on top of the component. The above example will give you what you want but if you want to really understand the techniques applied here it might be a better exercise to round off the edges of this example and add the extra features demonstrated above to it. Or maybe I'm just disappointed because I spent time writing this solution when one already existed :p", 'questionId': '60269', 'answerId': '60306'}
{'answer': "I liked Terai Atsuhiro san's DnDTabbedPane, but I wanted more from it. The original Terai implementation transfered tabs within the TabbedPane, but it would be nicer if I could drag from one TabbedPane to another. Inspired by @Tom's effort, I decided to modify the code myself. There are some details I added. For example, the ghost tab now slides along the tabbed pane instead of moving together with the mouse. setAcceptor(TabAcceptor a_acceptor) should let the consumer code decide whether to let one tab transfer from one tabbed pane to another. The default acceptor always returns true.", 'questionId': '60269', 'answerId': '61982'}
{'answer': '@Tony: It looks like Euguenes solution just overlooks preserving TabComponents during a swap. The convertTab method just needs to remember the TabComponent and set it to the new tabs it makes. Try using this:', 'questionId': '60269', 'answerId': '8610017'}
{'answer': 'Add this to isDragAcceptable to avoid Exceptions:', 'questionId': '60269', 'answerId': '20433634'}
{'answer': 'You will need to copy the Process out, err, and input streams to the System versions.  The easiest way to do that is using the IOUtils class from the Commons IO package.  The copy method looks to be what you need.  The copy method invocations will need to be in separate threads.   Here is the basic code:', 'questionId': '60302', 'answerId': '60578'}
{'answer': "A variation on John's answer that compiles and doesn't require you to use Commons IO:", 'questionId': '60302', 'answerId': '1570269'}
{'answer': 'For System.in use the following pipein() instead of pipe() Implementation:', 'questionId': '60302', 'answerId': '6303744'}
{'answer': "Sounds like it should be possible (but I've never done it). Have you already had a look at Remote Method Invocation (RMI)?", 'questionId': '60470', 'answerId': '60574'}
{'answer': 'I think classes are lazy loaded in applets. being loaded on demand. Anyway, if the classes are outside of a jar you can simply use the applet classloader and load them by name. Ex: If you want to load classes from a jar I think you will need to create a new instance of URLClassLoader with the url(s) of the jar(s). By default, applets are forbidden to create new classloaders. But if you sign your applet and include permission to create new classloaders you can do it.', 'questionId': '60470', 'answerId': '60615'}
{'answer': "Yes, you can open URL connections to the host you ran your applet from. You can either create a classloader with HTTP urls, or download the classes (as jars) to the user's machine and create a classloader with those jars in the classpath. The applet won't stop and you don't need to load another page. Regarding the second part of your question about confidence, once the user has granted access to your applet it can download anything, yes anything, it wants to the local machine. You can probably inform the user as to what it's doing, if your UI design permits this. Hope this helps.", 'questionId': '60470', 'answerId': '61203'}
{'answer': 'The following solution is hackish, as it uses reflection to bypass encapsulation, but it works flawlessly:', 'questionId': '60764', 'answerId': '60766'}
{'answer': 'You should take a look at OSGi, e.g. implemented in the Eclipse Platform. It does exactly that. You can install, uninstall, start and stop so called bundles, which are effectively JAR files. But it does a little more, as it offers e.g. services that can be dynamically discovered in JAR files at runtime. Or see the specification for the Java Module System.', 'questionId': '60764', 'answerId': '60770'}
{'answer': "The reason it's hard is security.  Classloaders are meant to be immutable; you shouldn't be able to willy-nilly add classes to it at runtime.  I'm actually very surprised that works with the system classloader.  Here's how you do it making your own child classloader: Painful, but there it is.", 'questionId': '60764', 'answerId': '60775'}
{'answer': "The best I've found is org.apache.xbean.classloader.JarFileClassLoader which is part of the XBean project. Here's a short method I've used in the past, to create a class loader from all the lib files in a specific directory Then to use the classloader, just do:", 'questionId': '60764', 'answerId': '63892'}
{'answer': "How about the JCL class loader framework? I have to admit, I haven't used it, but it looks promising. Usage example:", 'questionId': '60764', 'answerId': '1450837'}
{'answer': 'Here is a version that is not deprecated. I modified the original to remove the deprecated functionality.', 'questionId': '60764', 'answerId': '2593771'}
{'answer': 'I personally find that java.util.ServiceLoader does the job pretty well. You can get an example here.', 'questionId': '60764', 'answerId': '7523747'}
{'answer': 'If you are working on Android, the following code works:', 'questionId': '60764', 'answerId': '18253109'}
{'answer': 'The solution proposed by jodonnell is good but should be a little bit enhanced. I used this post to develop my application with success.  Assign the current thread Firstly we have to add or you will not able to load resource (such as spring/context.xml) stored into the jar. Do not include your jars into the parent class loader or you will not able to understand who is loading what. see also Problem reloading a jar using URLClassLoader However, OSGi framework remain the best way.', 'questionId': '60764', 'answerId': '31624177'}
{'answer': "Sounds to me like you are treating a symptom: poor design with dependencies on static initialization.  Maybe some refactoring is the real solution.  It sounds like you've already done a little refactoring with your staticInit() function, but maybe that function needs to be called from the constructor, not from a static initializer.  If you can do away with static initializers period, you will be better off.  Only you can make this decision (I can't see your codebase) but some refactoring will definitely help. As for mocking, I use EasyMock, but I have run into the same issue.  Side effects of static initializers in legacy code make testing difficult.  Our answer was to refactor out the static initializer.", 'questionId': '61150', 'answerId': '61153'}
{'answer': 'I suppose you really want some kind of factory instead of the static initializer. Some mix of a singleton and an abstract factory would probably be able to get you the same functionality as today, and with good testability, but that would add quite a lot of boiler-plate code, so it might be better to just try to refactor the static stuff away completely or if you could at least get away with some less complex solution.  Hard to tell if its possible without seeing your code though.', 'questionId': '61150', 'answerId': '61177'}
{'answer': "You could write your test code in Groovy and easily mock the static method using metaprogramming. If you can't use Groovy, you will really need to refactoring the code (maybe to inject something like a initializator). Kind Regards", 'questionId': '61150', 'answerId': '61190'}
{'answer': "When I run into this problem, I usually do the same thing you describe, except I make the static method protected so I can invoke it manually.  On top of this, I make sure that the method can be invoked multiple times without problems (otherwise it is no better than the static initializer as far as the tests go). This works reasonably well, and I can actually test that the static initializer method does what I expect/want it to do.  Sometimes it is just easiest to have some static initialization code, and it just isn't worth it to build an overly complex system to replace it. When I use this mechanism, I make sure to document that the protected method is only exposed for testing purposes, with the hopes that it won't be used by other developers.  This of course may not be a viable solution, for example if the class' interface is externally visible (either as a sub-component of some kind for other teams, or as a public framework).  It is a simple solution to the problem though, and doesn't require a third party library to set up (which I like).", 'questionId': '61150', 'answerId': '61215'}
{'answer': "I'm not super knowledgeable in Mock frameworks so please correct me if I'm wrong but couldn't you possibly have two different Mock objects to cover the situations that you mention? Such as and Then you can use them in your different test cases and respectively.", 'questionId': '61150', 'answerId': '61389'}
{'answer': 'This is going to get into more "Advanced" JMockit. It turns out, you can redefine static initialization blocks in JMockit by creating a public void $clinit() method. So, instead of making this change we might as well leave ClassWithStaticInit as is and do the following in the MockClassWithStaticInit: This will in fact allow us to not make any changes in the existing classes.', 'questionId': '61150', 'answerId': '144876'}
{'answer': 'PowerMock is another mock framework that extends EasyMock and Mockito. With PowerMock you can easily remove unwanted behavior from a class, for example a static initializer. In your example you simply add the following annotations to your JUnit test case: PowerMock does not use a Java agent and therefore does not require modification of the JVM startup parameters. You simple add the jar file and the above annotations.', 'questionId': '61150', 'answerId': '489018'}
{'answer': "Occasionally, I find static initilizers in classes that my code depends on. If I cannot refactor the code, I use PowerMock's @SuppressStaticInitializationFor annotation to suppress the static initializer: Read more about suppressing unwanted behaviour. Disclaimer: PowerMock is an open source project developed by two colleagues of mine.", 'questionId': '61150', 'answerId': '7242341'}
{'answer': 'Not really an answer, but just wondering - isn\'t there any way to "reverse" the call to Mockit.redefineMethods? If no such explicit method exists, shouldn\'t executing it again in the following fashion do the trick? If such a method exists, you could execute it in the class\' @AfterClass method, and test ClassWithStaticInitTest with the "original" static initializer block, as if nothing has changed, from the same JVM. This is just a hunch though, so I may be missing something.', 'questionId': '61150', 'answerId': '33737521'}
{'answer': 'You have to connect to GMail using SSL only. Setting the following properties will force that for you.', 'questionId': '61176', 'answerId': '61179'}
{'answer': 'In JavaMail, you can use imaps as the URL scheme to use IMAP over SSL. (See SSLNOTES.txt in your JavaMail distribution for more details.) For example, imaps://username%40gmail.com@imap.gmail.com/INBOX. Similarly, use smtps to send emails via Gmail. e.g., smtps://username%40gmail.com@smtp.gmail.com/. Again, read SSLNOTES.txt for more details. Hope it helps!', 'questionId': '61176', 'answerId': '61185'}
{'answer': "Using imaps was a great suggestion. Neither of the answers provided just worked for me, so I googled some more and found something that worked. Here's how my code looks now. This is nice because it takes the redundant Authenticator out of the picture. I'm glad this worked because the SSLNOTES.txt make my head spin.", 'questionId': '61176', 'answerId': '61469'}
{'answer': 'Check http://g4j.sourceforge.net/. There is a minimal gmail client built using this API.', 'questionId': '61176', 'answerId': '69724'}
{'answer': "If you'd like more sample code on using JavaMail with Gmail (e.g. converting Gmail labels to IMAP folder names, or using IMAP IDLE), do check out my program GmailAssistant on SourceForge.", 'questionId': '61176', 'answerId': '112173'}
{'answer': '', 'questionId': '61176', 'answerId': '260650'}
{'answer': 'I used following properties to get the store and It works well. "mail.imaps.host" : "imap.gmail.com"  "mail.store.protocol" : "imaps"  "mail.imaps.port" : "993"', 'questionId': '61176', 'answerId': '2385657'}
{'answer': 'You need to have JSSE installed to use SSL with Java', 'questionId': '61176', 'answerId': '3952463'}
{'answer': 'You need to use the following properties for imaps: Notices it\'s "imaps", not "imap", since the protocol you\'re using is imaps (IMAP + SSL)', 'questionId': '61176', 'answerId': '9888150'}
{'answer': 'Here is what worked for my team and I, given a classic account nickname@gmail.com and a business account employee@business.com : with USERNAME = "nickname" in the classic case, and USERNAME = "employee@business.com" in the business account case. In the classic case, and if you use an old JavaMail dependency, don\'t forget to lower the account security here : https://www.google.com/settings/security/lesssecureapps In both cases check in GMail Settings => Forwarding POP / IMAP if IMAP is enabled for the account. Hope it helps! To go further : http://www.oracle.com/technetwork/java/javamail/faq/index.html#gmail https://support.google.com/mail/accounts/answer/78754', 'questionId': '61176', 'answerId': '31214560'}
{'answer': "Honestly it sounds like bad CLASSPATH. One thing I suggest to start debugging this problem is copying the jtds package to same path as your main packages/classes and see if it works. This way you can assure the Classpath manifest is or isn't the problem. The Spring/Hibernate relies on the lib directory, so it will always be on classpath because it's main structure. Use the lib directory also to test. Hope this guidelines will help. Also send more information, like paths, classpath and manifest files.", 'questionId': '61191', 'answerId': '61222'}
{'answer': 'This issue occurred because our jdbc.url had invalid url. This was because maven treats jdbc.url property as a special property and while profiling, instead of url defined in the filter.properties. And that is the reason "No Suitable Driver" exception. The question should have been more clear.  Anyways to fix that we had to rename jdbc.url properties to jdbc.url.somename. This fixed our issue with maven profiling. We also had a similar maven profiling issue for a property called "server.name" This filter property was also confusing maven profiling . We had to change the name of that property as well. Thanks again Fernando.', 'questionId': '61191', 'answerId': '106590'}
{'answer': 'It is a Maven bug http://jira.codehaus.org/browse/MNG-3563', 'questionId': '61191', 'answerId': '1389015'}
{'answer': 'I think the question is phrased incorrectly. C# vs. Java is much less interesting in terms of cross-platform usage than is (a) which platforms you need to support, and (b) considering the core libraries and available third party libraries. The language is almost the least important part of the decision-making process.', 'questionId': '61559', 'answerId': '61562'}
{'answer': "Well....Java is actually more portable.  Mono isn't implemented everywhere, and it lags behind the Microsoft implementation significantly.  The Java SDK seems to stay in better sync across platforms (and it works on more platforms).   I'd also say Java has more tool availability across all those platforms, although there are plenty of tools available for .NET on Windows platforms. Update for 2014 I still hold this opinion in 2014.  However, I'll qualify this by saying I'm just now starting to pay some attention to Mono after a long while of not really caring, so there may be improvements in the Mono runtime (or ecosystem) that I haven't been made aware of. AFAIK, there is still no support for WPF, WCF, WF, of WIF. Mono can run on iOS, but to my knowledge, the Java runtime still runs on far more platforms than Mono.  Also, Mono is starting to see some much improved tooling (Xamarin), and Microsoft seems to have a much more cross-platform kind of attitude and willingness to work with partners to make them complimentary, rather than competitive (for example, Mono will be a pretty important part of the upcoming OWIN/Helios ASP.NET landscape).  I suspect that in the coming years the differences in portability will lessen rapidly, especially after .NET being open-sourced.", 'questionId': '61559', 'answerId': '61565'}
{'answer': "Java actually is as cross-platform as everyone says it is.  There's a JVM implementation for just about any mainstream OS out there (even Mac OS X, finally), and they all work really well.  And there's tons of open source tools out there that are just as cross platform.  The only catch is that there are certain native operations you can't do in Java without writing some DLLs or SOs.  It's very rare that these come up in practice.  In all those cases, though, I've been able to get around it by spawning native processes and screen-scraping the results.", 'questionId': '61559', 'answerId': '61567'}
{'answer': "I actually develop in .NET, run all my tests first on Mono, and then on Windows. That way I know my applications are cross platform. I have done this very successfully on both ASP.NET and Winforms applications. I am not really sure where some people get the impression Mono is so horrible from, but it certainly has done it's job in my cases and opinions.It is true you will have a bit of lag for the latest and greatest inventions in the .NET world, but so far, .NET 2.0 on Windows and Linux is very solid for me. Keep in mind there are obviously many quirks to this, but most of them come from making sure you are writing portable code. While the frameworks do a great job of abstracting away what OS you are running on, little things like Linux's case sensitivity in paths and file names takes a bit of getting used to, as do things like permissions. .NET is definitely very cross platform due to Mono based on my experiences so far.", 'questionId': '61559', 'answerId': '61571'}
{'answer': "Java was designed to be cross-platform; C#/.Net wasn't.  When in doubt, use the tool that was designed for your purpose. EDIT: in fairness, .NET was designed to work on embedded/PC/Server environments, so that's SORT of cross-platform.  But it wasn't designed for Linux.", 'questionId': '61559', 'answerId': '61607'}
{'answer': "I'm going to say Java as well. If you look at it in terms of maturity, a lot more time and effort has been expended by Sun (and others) in getting the JVM to work on non-Windows platforms.  In contrast, Mono is definitely a second class citizen in the .NET ecosystem. Depending on who your target customers are, you may also find there is real pushback against using Mono - does Novell offer the same kind of vendor support for Mono that you would get for Java or .NET on Windows? If you were primarily targeting hosting your service on Windows, it would make sense to be considering this choice, but since you're targeting Linux primarily, it seems like kind of a no-brainer to me.", 'questionId': '61559', 'answerId': '61724'}
{'answer': "There are other language choices too. I've become quite fond of Python, which works well on Windows, Linux, and Mac, and has a rich set of libraries.", 'questionId': '61559', 'answerId': '61810'}
{'answer': 'I would vote for Java being more portable than C#.  Java definitely also has a very rich set of standard libraries.  There is also a broad set of open source 3rd party libraries out there such as those provided by the Jakarta project (http://jakarta.apache.org/). All the usual suspects exist for CI, Unit testing, etc too.  Cross platform IDE support is also very good with the likes of Eclipse, Netbeans, IntelliJ IDEA etc.', 'questionId': '61559', 'answerId': '61815'}
{'answer': 'To add a bit more to the conversation, Java is more portable if you remain about one version behind - Java 5 still has many excellent features so you can wait for Java 6 and still have a lot of range in terms of language and libraries to develop with.  The Mac is the primary platform that can take some time to catch up to the latest Java version. Java also has an excellent standards body that intelligently grows the platform based on input from many different companies.  This is an oft overlooked feature but it keeps even new features working well across multiple platforms and provides a lot of range in library support for some esoteric things (as optional extensions).', 'questionId': '61559', 'answerId': '61829'}
{'answer': "I've been asking the same question off-late and IMHO, .NET/Mono seems to be a better option simply because Mono has a great track record for cross-platform desktop applications (as opposed to Java) and of course, Mono is improving by leaps and bounds these days.", 'questionId': '61559', 'answerId': '61852'}
{'answer': 'I think the answer is "it depends."  Java runs on just about anything, but .NET/Mono are (IMHO) a better framework for the desktop.  So I guess the answer really depends on what platforms you plan on targeting.', 'questionId': '61559', 'answerId': '61866'}
{'answer': 'While Mono has its share of problems I think it has a better cross-platform compatibility story especially IF you have reliance on native platform invocation. There are not enough words on Stack Overflow to stress how much smoother it is to get something native called and executed in .NET/Mono on (at least in my experience 3...) multiple platforms vs. the equivalent Java effort.', 'questionId': '61559', 'answerId': '264997'}
{'answer': "Java is a better choice for Cross-Platform development. Performance. Java and .Net have similar performance level due to the virtual machine, but JVM normally has better performance because of years and years optimization. Library. Although this depends on your task, Java has much more open source or third party libraries available there. For server App, J2EE, Spring, Struts, etc. For GUI, although .Net provides Win32 layer API but this causes compatibility issues. Java has Swing, SWT, AWT, etc. It works in most cases. Compatibility. This is the key issues that need to be considered when develop the cross-platform program. Two issue: first, platform compatibility. Java still wins since JDK is well maintained by single and original company Sun. Mono is not maintained by MS, so you have no guarantee yet for update compatibility. 2. Backward compatibility. Sun maintains a good reputation on their backward compatibility, although sometimes this seems too rigid and slows the pace. Tools. Java has good cross-platform IDEs. Netbeans, Eclipse, etc. Most of them are free. VS Studio is good but only on Windows, and not cost a bit. Both of them provides good unit tests, debugs, profiles, etc. Hence I'd suggest that Java is a better choice. As a show case, there are some famous desktop cross-platforms apps developed by Java: Vuze, Limewire, BlogBridge, CrossFTP, not to mention those IDEs. As to .Net, I have limited knowledge on such success apps.", 'questionId': '61559', 'answerId': '448793'}
{'answer': "Gatorhall do you have some data to back that up? Performance. Java and .Net have similar performance level due to the virtual machine, but JVM normally has better performance because of years and years optimization. Background: I'm a Windows guy since Windows 3.1 and currently a Linux user (still running Windows 7, great OS, on a VM for Visual Studio 2010 and other tools). The point: me and a lot of users (windows, linux, etc) I know, may disagree from you. Java tends to perform slower even on a linux desktop application, ASP.NET perform's faster that java server pages many of the times. Some may agree that even non-compiled PHP performs better i several scenarios. Java is more cross-platform? I have no doubts about this (the history back this on), but faster (not saying .NET is) not so certain and I would like to see some real benchmarks.", 'questionId': '61559', 'answerId': '8211739'}
{'answer': "Mono does a better job at targeting the platforms I want to support. Other than that, it is all subjective. I share C# code across the following platforms: - iOS (iPhone/iPad) - Android - The Web (HTML5) - Mac (OS X) - Linux - Windows I could share it even more places: - Windows Phone 7 - Wii - XBox - PS3 - etc. The biggie is iOS since MonoTouch works fantastically. I do not know of any good way to target iOS with Java. You cannot target Windows Phone 7 with Java, so I would say that the days of Java being better for mobile are behind us. The biggest factor for me though is personal productivity (and happiness). C# as a language is years ahead of Java IMHO and the .NET framework is a joy to use. Most of what is being added in Java 7 and Java 8 has been in C# for years. JVM languages like Scala and Clojure (both available on the CLR) are pretty nice though. I see Mono as a platform in it's own right (a great one) and treat .NET as the Microsoft implementation of Mono on Windows. This means that I develop and test on Mono first. This works wonderfully. If both Java and .NET (Mono let's say) were Open Source projects without any corporate backing, I would choose Mono over Java every time. I believe it is just a better platform. Both .NET/Mono and the JVM are great choices, although I would personally use some other language than Java on the JVM. My take on some of the other comments: Issue: Performance. **Answer: Both the JVM and the CLR perform better than detractors say they do. I would say that the JVM performs better. Mono is generally slower than .NET (though not always). I personally would take ASP.NET MVC over J2EE any day both as a developer and an end-user. Support for Google Native Client is pretty cool too. Also, I know that poor GUI performance for desktop Java apps is supposed to be a thing of the past but I keep finding slow ones. Then again, I could say the same for WPF. GTK# is plenty fast though so there is no reason they have to be slow. Issue: Java has a larger ecosystem of libraries available. Answer: Probably true, but it is a non-issue in practice. Practically every Java library (including the JDK) runs just dandy on .NET/Mono thanks to IKVM.NET. This piece of technology is a true marvel. The integration is amazing; you can use a Java library just like it was native. I have only had to use Java libraries in one .NET app though. The .NET/Mono ecosystem generally offers more than I need. Issue: Java has better (broader) tools support Answer: Not on Windows. Otherwise I agree. MonoDevelop is nice though. I want to give a shout-out to MonoDevelop; it is a jewel. MonoDevelop integrates most of the tools I want use including code completion (intellisense), Git/Subversion integration, support for unit tests, SQL integration, debugging, easy refactoring, and assembly browsing with on-the-fly decompilation. It is wonderful to use the same environment for everything from server-side web to mobile apps. Issue: Compatibility across platforms. Answer: Mono is a single code-base across all platforms, including Windows. Develop for Mono first and deploy to .NET on Windows if you like. If you compare .NET from MS to Java though then Java has the edge in terms of consistency across platforms. See next answer... Issue: Mono lags .NET. Answer: No it does not. IMHO, this is an often stated but incorrect statement. The Mono distribution from Xamarin ships with C#, VB.NET, F#, IronPython, IronRuby, and I think maybe Boo out of the box. The Mono C# compiler is completely up to date with MS. The Mono VB.NET compiler does lag the MS version. The other compilers are the same on both platforms (as are other .NET languages like Nemerle, Boo, and Phalanger (PHP) ). Mono ships with a lot of the actual Microsoft written code including the Dynamic Language Runtime (DLR), Managed Extensibility Framework (MEF), F#, and ASP.NET MVC. Because Razor is not Open Source, Mono currently ships with MVC2 but MVC3 works on Mono just fine. The core Mono platform has kept pace with .NET or many years and the compatibility is impressive. You can use the full C# 4.0 language and even some C# 5.0 features today. In fact, Mono often leads .NET in many ways. Mono implements parts of the CLR spec that even Microsoft does not support (like 64 bit arrays). One of the most exciting new pieces of technology in the .NET world is Rosylyn. Mono has offered the C# compiler as a service for many years. Some of what Rosylyn offers is available via NRefractory as well. An example of were Mono is still ahead would be the SIMD instructions to accelerate gaming performance. Microsoft does offer a number of products on top of .NET that are not available in Mono which is were the misconception about Mono lagging comes from. Windows Presentation Foundation (WPF), Entity Framework (EF), WCF (Windows Communication Foundation) are examples of products which do not work, or are poorly supported, on Mono. The obvious solution is to use cross-platform alternatives like GTK#, NHibernate, and ServiceStack instead. Issue: Microsoft is evil. Answer: True. So what. Many people offer the following reasons to avoid using Mono: 1) You should not use Mono because Microsoft tech should be avoided 2) Mono sucks because it does not let you use every technology that Microsoft offers To me, it is clear that these statements are incompatible. I reject the first statement but will skip that argument here. The second statement is true of all .NET alternatives. The JVM is a great platform and the explosion of JVM languages is awesome. Use what makes you happy. For now, that is often .NET/Mono for me.", 'questionId': '61559', 'answerId': '9049008'}
{'answer': "I'd say it entirely depends on who's working on the codebase. If you have a small group of developers who all share a common language and you don't ever plan needing anyone who doesn't speak the language to work on the code then go ahead and use whatever characters you want. If you need to have people of varying cultures and languages working on the code then it's probably best to stick with English since it's the common denominator for just about everyone in the world.", 'questionId': '61615', 'answerId': '61617'}
{'answer': "Part of the problem is that the Java/C# language and its libraries are based on English words like if and toString(). I personally would not like to switch between non-English language and English while reading code. However, if your database, UI, business logics (including metaphors) are already in some non-English language, there's no need to translate every method names and variables into English.", 'questionId': '61615', 'answerId': '61619'}
{'answer': "It depends: Does your team conform to any existing standards that require your using ASCII? Is your code ever going to be feasibly reused or read by someone who doesn't speak your native language? Do you envision a scenario where you'll need to ask for help online and will therefore not be able to copy-paste your code sample in as-is? Are you certain your entire suite of tools support code encoding? If you answered 'yes' to any of the above, stay ASCII only.  If not, go forward at your own risk.", 'questionId': '61615', 'answerId': '61620'}
{'answer': 'I would stick to english, simply because you usually never know who is working on that code, and because some third-party tools used in the build/testing/bugtracking progress may have problems. Typing  on a Non-German Keyboard is simply a PITA, and I simply believe that anyone involved in software development should speak english, but maybe that\'s just my arrogance as a non-native-english speaker. What you call "American arrogance" is not whether or not your program uses international variable names, it\'s when your program thinks "Whrung" and "Wahrung" are the same words.', 'questionId': '61615', 'answerId': '61624'}
{'answer': "IF you get past the other prerequisites you then have one extra (IMHO more important) one - How difficult is the symbol to type. On my regular en-us keyboard, the only way I know of to type the letter  is to hold alt, and hit 0227 on the numeric keypad, or copy and paste. This would be a HUGE big roadblock in the way of typing quickly. You don't want to slow your coding down with trivial stuff like this if you aren't forced to. International keyboards may alleviate this, but then what happens if you have to code on your laptop which doesn't have an international keyboard, etc?", 'questionId': '61615', 'answerId': '61630'}
{'answer': "I used to work in a development team that happily wiped their asses with any naming (and for that matter any other coding) conventions. Believe it or not, having to cope with 's and 's in the code was a contributing factor of me resigning. Though I'm Finnish, I prefer writing code with US keyboard settings because curly and square brackets are a pain to write in a Finnish keyboard (try right alt and 7 and 0 for curlies). So I say stick with the ascii characters.", 'questionId': '61615', 'answerId': '61641'}
{'answer': "If your business are non-English speakers, and you think Domain Driven Design has something to it, then there is another aspect: How do we, as developers, use the same domain language as our business without any translation overhead? That does not only mean translations between languages, say English and Norwegian, but also between different words. We should use the exact same words as our business for our entity classes and services. I have found it easier to just give in and use my native language. Now that my code use the same words, it's easier to have a conversation with my domain experts. And after a while you get used to it, just like how you got used to code without Hungarian notation.", 'questionId': '61615', 'answerId': '69791'}
{'answer': "Here's an example of where I've used non-ASCII identifiers, because I found it more readable than replacing the greek letters with their English names.  Even though I don't have  or  on my keyboard (I relied on copy-and-paste.) However these are all local variables.  I would keep non-ASCII identifiers out of public interfaces.", 'questionId': '61615', 'answerId': '1413778'}
{'answer': "I would stick to ASCII characters because if anyone in your development team is using an SDK that only supports ASCII or you wanted to make your code open source, alot of problems could arise. Personally, I would not do it even if you are not planning on bringing anyone who doesn't speak the language in on the project, because you are running a business and it seems to me that one running a business would want his business to expand, which in this day and age means transcending national borders. My opinion is that English is the language of the realm, and even if you name your variables in a different language, there is little to no point to use any non-ASCII characters in your programming. Leave it up to the language to deal with it if you are handling data that is UTF8: my iPhone program (which involves tons of user data going in between the phone and server) has full UTF8 support, but has no UTF8 in the source code. It just seems to open such a large can of worms for almost no benefit.", 'questionId': '61615', 'answerId': '3185293'}
{'answer': "There is another hazzard to using non-ASCII characters, though it will probably only bite in obscure cases.  The allowed characters are defined in terms of the methods Character.isJavaIdentifierStart(int) and Character.isJavaIdentifierPart(int), which are defined in terms of Unicode.  However, the exact version of Unicode used depends on the version Java platform, as specified in the documentation for java.lang.Character. Since character properties change slightly from one Unicode version to the next, it's possible (but probably very unlikely) you could have identifiers that are valid in one version of Java, but not in the next.", 'questionId': '61615', 'answerId': '18499554'}
{'answer': "As far as I know you need to start using JNI to set up a message handler for the Windows WM_QUERYENDSESSION message. To do this (if you're new to Windows programming like me) you'll need to create a new class of window with a new message handling function (as described here) and handle the WM_QUERYENDSESSION from the message handler. NB: You'll need to use the JNIEnv::GetJavaVM(...) and then JavaVM::AttachCurrentThread(...) on the message handling thread before you can call any Java methods from your native message handling code.", 'questionId': '61692', 'answerId': '61694'}
{'answer': "The previously mentioned JNI approach will likely work. You can use JNA which is basically a wrapper around JNI to make it easier to use.  An added bonus is that it (in my opinion at least) generally is faster and more maintainable than raw JNI.  You can find JNA at https://jna.dev.java.net/ If you're just starting the application in the start menu because you're trying to make it behave like a service in windows, you can use the java service wrapper which is found here: http://wrapper.tanukisoftware.org/doc/english/download.jsp", 'questionId': '61692', 'answerId': '72078'}
{'answer': "For handling uncaught exceptions you can provide a new ThreadGroup which provides an implementation of ThreadGroup.uncaughtException(...). You can then catch any uncaught exceptions and handle them appropriately (e.g. send a crash log home). I can't help you on the JNI front, there's probably a way using a native wrapper executable before calling the JVM, but that executable is going to need to know about all the possible JVMs it could be calling and how the indicate crashes and where crash logs are placed etc.", 'questionId': '61714', 'answerId': '61715'}
{'answer': 'Not sure if this is what you needing, but you can also detect if an exception has occurred from within your native code.  See http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp5234 for more info.', 'questionId': '61714', 'answerId': '61717'}
{'answer': "For simple catch-all handling, you can use the following static method in Thread. From the Javadoc: static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh) Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread. This is a very broad way to deal with errors or unchecked exceptions that may not be caught anywhere else. Side-note: It's better if the code can catch, log and/or recover from exceptions closer to the source of the problem. I would reserve this kind of generalized crash handling for totally unrecoverable situations (i.e. subclasses of java.lang.Error). Try to avoid the possibility of a RuntimeException ever going completely uncaught, since it might be possible--and preferable--for the software to survive that.", 'questionId': '61714', 'answerId': '61806'}
{'answer': "What are you looking to profile?  Is it stuff in the JVM or the App Server? If it's the latter, there's loads of stuff in WAS 6 GUI to help with this.  Assuming you really want to see stuff like the heap etc, then the IBM HeapAnalyzer might help.  There are other tools listed off the bottom of this page. Something else I've learned, ideally, youll be able to connect your IDE's profiler to the running JVM.  Some let you do this to a remote one as well as the local one you are developing on.  Is the JVM you wish to profile in live or remote?  If so, you might have to force dumps and take them out of the live environment to look at at your leisure.  Otherwise, set up something local and get the info from it that way.", 'questionId': '61795', 'answerId': '61983'}
{'answer': 'Update: I found out that JProfiler integrates smoothly with WAS 6.0.2 (IBM JDK 1.4).', 'questionId': '61795', 'answerId': '389330'}
{'answer': 'Old post, but this may help someone. You can use IBM Health Center which is free. It can be downloaded standalone or as part of the IBM Support Assistant. I suggest downloading ISA since it has a ton of other useful tools such as Garbage Collection and Memory Visualizer and Memory Analyzer.', 'questionId': '61795', 'answerId': '8176710'}
{'answer': 'What if you put this at the top?', 'questionId': '61796', 'answerId': '61813'}
{'answer': 'Not really seen this problem, although we do get intermittent Lazy Load errors - so perhaps we have the same problem, anyway, is it an option to use a different session for the loading of the Bar object - that should load it from scratch, I would expect...', 'questionId': '61906', 'answerId': '61935'}
{'answer': 'I am unable to reproduce the behaviour you are seeing. Here is my code: And it all works fine, as one would expect.', 'questionId': '61906', 'answerId': '61989'}
{'answer': 'Do you actually need to do lazy loading? Could you not set FetchType to EAGER instead and have it always loaded (properly) using a join?', 'questionId': '61906', 'answerId': '62246'}
{'answer': 'I had a similar problem: I did Session.save(nastyItem) to save an object into the Session. However, I did not fill in the property buyer which is mapped as update="false" insert="false" (this happens a lot when you have a composed primary key, then you map the many-to-one\'s as insert="false" update="false") I a query to load a list of items, and the item which I just saved, happens to be part of the result set now what goes wrong? Hibernate sees that the item was already in the cache, and Hibernate does not replace (probably not to break my earlier reference nastyItem) it with the newly loaded value, but uses MY nastyItem I have put into the Session cache myself. Even worse, now the lazy loading of the buyer is broken: it contains null. To avoid these Session issues, I always do a flush and a clear after a save, merge, update or delete. Having to solve these nasty problems takes too much of my time :-(', 'questionId': '61906', 'answerId': '120242'}
{'answer': "You are doing something wrong. I did not test your code, but you should never need to force the initialization of proxies, the property accessors do that for you. If you are using Hibernate explicitly, never mind using JPA, since you already have lost portability. Hibernate should detect automatically whenever it needs to fetch or write to db. If you issue a getProperty() from a proxy, hibernate or any other jpa provider should fetch the correspondent row from the db. The only situation I'm not sure hibernate is clever enough is if you issue a save() and then issue a get() with the id of the saved object, there might be a problem if the save() didn't flush the object to db.", 'questionId': '61906', 'answerId': '178835'}
{'answer': "I've been successfully using it on Vista x64 for some light Java work.  Nothing too involved and no extra plugins, but basic Java coding has been working without any issues.  I'm using the 3.4M7 build but it looks like the 3.4 stable build supports Vista x64 now.", 'questionId': '6222', 'answerId': '6356'}
{'answer': "I'm using Eclipse with a 64bit VM. However I have to use Java 1.5, because with Java 1.6, even 1.6.0_10ea, Eclipse crashed when changing the .classpath-file. On Linux I had the same problems and could only get the 64bit Eclipse to work with 64bit Java 1.5. The problem seems to be with the just in time compilation, since with vmparam -Xint eclipse works -- but this is not a sollution, because it's slow then. Edit: With 1.6.0_11 it seems to work.  1.6_10 final might work as well as mentioned in the comment, but I've not tested that.", 'questionId': '6222', 'answerId': '7877'}
{'answer': "The obvious names for these classes are ReaderInputStream and WriterOutputStream. Unfortunately these are not included in the Java library. However, google is your friend. I'm not sure that it is going to get around all text encoding problems, which are nightmarish. There is an RFE, but it's Closed, will not fix.", 'questionId': '62241', 'answerId': '62255'}
{'answer': "You can't really avoid dealing with the text encoding issues, but there are existing solutions: Reader to InputStream: ReaderInputStream Writer to OutputStream: WriterOutputStream You just need to pick the encoding of your choice.", 'questionId': '62241', 'answerId': '62257'}
{'answer': "Are you trying to write the contents of a Reader to an OutputStream?  If so, you'll have an easier time wrapping the OutputStream in an OutputStreamWriter and write the chars from the Reader to the Writer, instead of trying to convert the reader to an InputStream:", 'questionId': '62241', 'answerId': '1360466'}
{'answer': "Also note that, if you're starting off with a String, you can skip creating a StringReader and create an InputStream in one step using org.apache.commons.io.IOUtils from Commons IO like so: Of course you still need to think about the text encoding, but at least the conversion is happening in one step.", 'questionId': '62241', 'answerId': '2373846'}
{'answer': 'If you are starting off with a String you can also do the following:', 'questionId': '62241', 'answerId': '3235846'}
{'answer': 'commons-io 2.0 has WriterOutputStream', 'questionId': '62241', 'answerId': '4268583'}
{'answer': "You can't avoid text encoding issues, but Apache commons-io has ReaderInputStream WriterOutputStream Note these are the libraries referred to in Peter's answer of koders.com, just links to the library instead of source code.", 'questionId': '62241', 'answerId': '10655241'}
{'answer': 'Well, a Reader deals with characters and an InputStream deals with bytes.  The encoding specifies how you wish to represent your characters as bytes, so you can\'t really ignore the issue.  As for avoiding problems, my opinion is: pick one charset (e.g. "UTF-8") and stick with it.   Regarding how to actually do it, as has been pointed out, "the obvious names for these classes are ReaderInputStream and WriterOutputStream."  Surprisingly, "these are not included in the Java library" even though the \'opposite\' classes, InputStreamReader and OutputStreamWriter are included. So, lots of people have come up with their own implementations, including Apache Commons IO.  Depending on licensing issues, you will probably be able to include the commons-io library in your project, or even copy a portion of the source code (which is downloadable here). Apache ReaderInputStream: API / source code direct link Apache WriterOutputStream: API / source code direct link As you can see, both classes\' documentation states that "all charset encodings supported by the JRE are handled correctly". N.B.  A comment on one of the other answers here mentions this bug.  But that affects the Apache Ant ReaderInputStream class (here), not the Apache Commons IO ReaderInputStream class.', 'questionId': '62241', 'answerId': '12940771'}
{'answer': "A warning when using WriterOutputStream - it doesn't always handle writing binary data to a file properly/the same as a regular output stream. I had an issue with this that took me awhile to track down.  If you can, I'd recommend using an output stream as your base, and if you need to write strings, use an OUtputStreamWriter wrapper around the stream to do it. It is far more reliable to convert text to bytes than the other way around, which is likely why WriterOutputStream is not a part of the standard Java library", 'questionId': '62241', 'answerId': '17493111'}
{'answer': 'Use: This way does not require an upfront conversion to String and then to byte[], which allocates lot more heap memory, in case the report is large. It converts to bytes on the fly as the stream is read, right from the StringBuffer. It uses CharSequenceInputStream from Apache Commons IO project.', 'questionId': '62241', 'answerId': '27565648'}
{'answer': 'For Reading a string in a stream using just what java supplies.', 'questionId': '62241', 'answerId': '27821517'}
{'answer': 'You can use Cactoos (no static methods, only objects): new InputStreamOf(reader) new OutputStreamTo(writer) You can convert the other way around too: new ReaderOf(inputStream) new WriterTo(outputStream)', 'questionId': '62241', 'answerId': '45535083'}
{'answer': 'One tool which does this is the software tomograph http://www.software-tomography.com/ it is commercial and the ui sucks :o', 'questionId': '62276', 'answerId': '62324'}
{'answer': 'There is also structure 101 which should do this http://www.headwaysoftware.com/', 'questionId': '62276', 'answerId': '62329'}
{'answer': 'And you can use the open source tool CAP which is an eclipse plugin. http://cap.xore.de/ CAP has a graphical package view which will show you the lines to the classes so after some clicks (depending on the size of the circle) you will find the culprit.', 'questionId': '62276', 'answerId': '62332'}
{'answer': 'Findbugs can detect circular class dependencies, and has an eclipse plugin too. http://findbugs.sourceforge.net/', 'questionId': '62276', 'answerId': '62335'}
{'answer': 'There are some commercial tools: Structure101 & Lattix which can be used for this purpose.', 'questionId': '62276', 'answerId': '62344'}
{'answer': 'a first possible answer is... not pretty. But it does begin to do what I am after. (a better solution is presented below) Dependency Finder! Download it, unzip it. Not the most modern or active project ever, but if you edit [Dependency Finder]/bin/DependencyFinder.bat, add its path for DEFAULT_DEPENDENCYFINDER_HOME, set a JAVA_HOME, you can launch it. Then you click on the \'Extract\' button (CTRL-E - first button), enter your classes path, and let it scan away. The tricky part is to click exactly the right set of \'programming elements\' and \'closures\' items, in order to not been swamped by the level of details in the result. Select only \'classes\' in the left side (\'programming elements\') Select only \'classes\' in the right side (\'closures\') add "/javax?./,/org./,/sun./" as exclusion pattern (for both programming elements and closures) Click on the wheels (last button - Compute all - CTRL A) And here you go. Whenever you see \'<->\', you have got yourself a nice cyclic dependency. (If you select \'features\' on the \'closure\' side, you can even know what function does trigger the cycle - awesome -) I am ready to test any other suggestions.', 'questionId': '62276', 'answerId': '66059'}
{'answer': 'Well... after testing DepFinder presented above, it turns out it is great for a quick detection of simple dependencies, but it does not scale well with the number of classes... So the REAL ACTUAL ANSWER is: CDA - Class Dependency Analyzer It is fast, up-to-date, easy to use and provides with graphical representation of classes and their circular dependencies. A dream come true ;) You have to create a workset in which you enter only the directory of your classes (.class) (no need to have a complete classpath) The option "Detect circular dependencies - ALT-C" works as advertise and does not take 100% of the CPU for hours to analyze my 468 classes. Note: to refresh a workspace, you need to open it again(!), in order to trigger a new scan of your classes.', 'questionId': '62276', 'answerId': '71610'}
{'answer': 'We use Sonar to detect package cycles. It draws a nice graph of the dependencies and shows which ones go in the wrong direction. You can even navigate to the source where the dependency is used. See http://www.sonarsource.org/fight-back-design-erosion-by-breaking-cycles-with-sonar/', 'questionId': '62276', 'answerId': '3415537'}
{'answer': 'Highwheel detects class and package cycles and reports the source of the dependences down to the class/method/field level indicating the type of the relationship (inheritance, composition, part of a method signature etc).  It also breaks large cycles down into their sub-elements which can be understood/tackled individually. https://github.com/hcoles/highwheel The output is html with embedded svg that requires a modern browser.', 'questionId': '62276', 'answerId': '18217016'}
{'answer': "Yes, using the java.util.Preferences API, since the Windows implementation of it uses the Registry as a backend. In the end it depends on what you're wanting to do: storing preferences for your app is what the Preferences does just great. If you're wanting to actually change registry keys not having to do with your app, you'll need some JNI app, as described by Mark (shameless steal here): From a quick google:   Check the WinPack for JNIWrapper. It has full Windows Registry access support including Reading and Writing. The WinPack Demo has Registry Viewer implemented as an example. Check at http://www.teamdev.com/jniwrapper/winpack/#registry_access And... There is also try JNIRegistry @ http://www.trustice.com/java/jnireg/ There is also the option of invoking an external app, which is responsible for reading / writing the registry.", 'questionId': '62289', 'answerId': '62291'}
{'answer': 'From a quick google: Check the WinPack for JNIWrapper. It   has full Windows Registry access   support including Reading and Writing. The WinPack Demo has Registry Viewer   implemented as an example. Check at   http://www.teamdev.com/jniwrapper/winpack/#registry_access And... There is also try JNIRegistry @   http://www.trustice.com/java/jnireg/ There is also the option of invoking an external app, which is responsible for reading / writing the registry.', 'questionId': '62289', 'answerId': '62299'}
{'answer': "The Preferences API approach does not give you access to all the branches of the registry. In fact, it only gives you access to where the Preferences API stores its, well, preferences. It's not a generic registry handling API, like .NET's To read/write every key I guess JNI or an external tool would be the approach to take, as Mark shows.", 'questionId': '62289', 'answerId': '62312'}
{'answer': 'There are few JNDI service providers to work with windows registry. One could observe http://java.sun.com/products/jndi/serviceproviders.html.', 'questionId': '62289', 'answerId': '62690'}
{'answer': 'I\'ve done this before using jRegistryKey. It is an LGPL Java/JNI library that can do what you need. Here\'s an example of how I used it to enabled Registry editing through regedit and also the "Show Folder Options" option for myself in Windows via the registry.', 'questionId': '62289', 'answerId': '63231'}
{'answer': ' The WinPack Demo has Registry Viewer   implemented as an example. Check at   http://www.jniwrapper.com/winpack_features.jsp#registry BTW, WinPack has been moved to the following address: http://www.teamdev.com/jniwrapper/winpack/', 'questionId': '62289', 'answerId': '876862'}
{'answer': 'You could try WinRun4J. This is a windows java launcher and service host but it also provides a library for accessing the registry. (btw I work on this project so let me know if you have any questions)', 'questionId': '62289', 'answerId': '878336'}
{'answer': "You don't actually need a 3rd party package. Windows has a reg utility for all registry operations. To get the command format, go to the DOS propmt and type: You can invoke reg through the Runtime class: Editing keys and adding new ones is straightforward using the command above. To read the registry, you need to get reg's output, and it's a little tricky. Here's the code:", 'questionId': '62289', 'answerId': '1982033'}
{'answer': "As has been noted, the Preferences API uses the registry to store preferences, but cannot be used to access the whole registry. However, a pirate called David Croft has worked out that it's possible to use methods in Sun's implementation of the Preferences API for reading the Windows registry from Java without JNI. There are some dangers to that, but it is worth a look.", 'questionId': '62289', 'answerId': '5841923'}
{'answer': 'Here\'s a modified version of Oleg\'s solution.  I noticed that on my system (Windows server 2003), the output of "reg query" is not separated by tabs (\'\\t\'), but by 4 spaces. I also simplified the solution, as a thread is not required. }', 'questionId': '62289', 'answerId': '5902131'}
{'answer': 'I prefer using java.util.prefs.Preferences class. A simple example would be', 'questionId': '62289', 'answerId': '6028547'}
{'answer': 'I know this question is old, but it is the first search result on google to "java read/write to registry".  Recently I found this amazing piece of code which: Can read/write to ANY part of the registry.  DOES NOT USE JNI. DOES NOT USE ANY 3rd PARTY/EXTERNAL APPLICATIONS TO WORK. DOES NOT USE THE WINDOWS API (directly) This is pure, Java code. It uses reflection to work, by actually accessing the private methods in the java.util.prefs.Preferences class. The internals of this class are complicated, but the class itself is very easy to use. For example, the following code obtains the exact windows distribution from the registry: Here is the original class. Just copy paste it and it should work: I was unable to find and give credit to the original author of this code. If you find any details, please add a comment and I will add it here.', 'questionId': '62289', 'answerId': '6163701'}
{'answer': "Java Native Access (JNA) is an excellent project for working with native libraries and has support for the Windows registry in the platform library (platform.jar) through Advapi32Util and Advapi32. Update: Here's a snippet with some examples of how easy it is to use JNA to work with the Windows registry using JNA 3.4.1,", 'questionId': '62289', 'answerId': '6287763'}
{'answer': 'Although this is pretty old, but i guess the better utility to use on windows platform would be regini : A single call to process:  will do all the magic. I have tried it, while making jar as windows service using servany.exe which requires changes to made in registry for adding javaw.exe arguments and it works perfectly. You might want to read this: http://support.microsoft.com/kb/264584', 'questionId': '62289', 'answerId': '8955801'}
{'answer': "I've incremented the Pure java code originally posted by David to allow acessing the 32-bits section of the registry from a 64-bit JVM, and vice-versa. I don't think any of the other answers address this. Here it is:", 'questionId': '62289', 'answerId': '11854901'}
{'answer': "Yet another library... https://code.google.com/p/java-registry/ This one launches reg.exe under the covers, reading/writing to temporary files. I didn't end up using it, but it looks like a pretty comprehensive implementation. If I did use it, I might dive in and add some better management of the child processes.", 'questionId': '62289', 'answerId': '15689078'}
{'answer': 'My previous edit to @David\'s answer was rejected.  Here is some useful information about it. This "magic" works because Sun implements the Preferences class for Windows as part of JDK, but it is package private.  Parts of the implementation use JNI. Package private class from JDK java.util.prefs.WindowsPreferences: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/util/prefs/WindowsPreferences.java JNI: http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/9b8c96f96a0f/src/windows/native/java/util/WindowsPreferences.c The implementation is selected at runtime using a factory method here: http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/util/prefs/Preferences.java#Preferences.0factory The real question: Why doesn\'t OpenJDK expose this API to public?', 'questionId': '62289', 'answerId': '17310303'}
{'answer': "This was crazy... I took the code from one of the posts here, failed to see there were 18 more comments in which one stated that it does not read a dword value... In any case, I've refactored the hell of that code into something with less ifs and methods...  The Enum could be refined a bit, but as soon as I've fought my way to read a numeric value or byte array and failed, I've given up... So here it is: NOTE: THIS DOES NOT READ ANYTHING ELSE BUT STRINGS!!!!!", 'questionId': '62289', 'answerId': '18103763'}
{'answer': 'In response to David answer - I would do some enhancements:', 'questionId': '62289', 'answerId': '22589715'}
{'answer': "This uses the same Java internal APIs as in in David's answer, but I've rewritten it completely. It's shorter now and nicer to use. I also added support for HKEY_CLASSES_ROOT and other hives. It still has some of the other limitations though (such as no DWORD support and no Unicode support) which are due to the underlying API and are sadly unavoidable with this approach. Still, if you only need basic string reading/writing and don't want to load a native DLL, it's handy. I'm sure you can figure out how to use it. Public domain. Have fun. One day, Java will have a built-in foreign function interface for easy access to native APIs, and this sort of hack will be unnecessary.", 'questionId': '62289', 'answerId': '24877559'}
{'answer': 'The java.util.prefs package provides a way for applications to store and retrieve user and system preferences and data configuration. These preference data will be stored persistently in an implementation-dependent backing stored. For example in Windows operating system in will stored in Windows registry. To write and read these data we use the java.util.prefs.Preferences class. Below code shows how to read and write to the HKCU and HKLM in the registry.', 'questionId': '62289', 'answerId': '26097666'}
{'answer': 'You can execute these "REG QUERY" command using java code. Try to execute this from command prompt and execute command from java code. HKEY_LOCAL_MACHINE "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion" To Search details like productname version etc.. use /v amd "name".  HKEY_LOCAL_MACHINE "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion" /v "ProductName"', 'questionId': '62289', 'answerId': '26106387'}
{'answer': 'The best way to write to the register probably is using the reg import native Windows command and giving it the file path to the .reg file which has been generated by exporting something from the registry. Reading is done with the reg query command. Also see the documentation: https://technet.microsoft.com/en-us/library/cc742028.aspx Therefore the following code should be self-explanatory:', 'questionId': '62289', 'answerId': '30019357'}
{'answer': 'Thanks to original post. I have reskinned this utility class and come up over the flaws which it had earlier, thought it might help others so posting here. I have also added some extra utility methods. Now it is able to read any file in windows registry(including REG_DWORD, REG_BINARY, REG_EXPAND_SZ etc.). All the methods work like a charm. Just copy and paste it and it should work. Here is the reskinned and modified class:   Sample of using the methods is as follows:  Below method retrieves the value of the key from the given path:   String hex = WinRegistry.valueForKey(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WindowsUpdate\\\\Auto Update", "AUOptions");  This method retrieves all data for the specified path(in form of keys and values) :   Map<String, String> map = WinRegistry.valuesForPath(WinRegistry.HKEY_LOCAL_MACHINE, "SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WSMAN");  This method retrieves value recursively for the key from the given path:   String val = WinRegistry.valueForKeyPath(WinRegistry.HKEY_LOCAL_MACHINE, "System", "TypeID");  and this one retrieves all values recursively for a key from the given path:   List<String> list = WinRegistry.valuesForKeyPath(                        WinRegistry.HKEY_LOCAL_MACHINE,                  //HKEY                               "SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall",   //path                 "DisplayName"         //Key                 ); Here in above code I retrieved all installed software names in windows system. Note: See the documentation of these methods  And this one retrieves all subkeys of the given path: List<String> list3 = WinRegistry.subKeysForPath(WinRegistry.HKEY_CURRENT_USER, "Software");  Important Note: I have modified only reading purpose methods in this process, not the writing purpose methods like createKey, deleteKey etc. They still are same as I recieved them.', 'questionId': '62289', 'answerId': '35532028'}
{'answer': 'There are lots of ways to design apis, depending on what you are solving. I think a full answer to this question would be worthy off a whole book, such as the gang of four patterns book. For Java specifically, and also just OO programming in general, I would recommend Effecitve Java 2nd Edition. The first is general and alot of popular programming patterns, when they apply and their benefits. Effective Java is Java centered, but parts of it is general enough to apply to any programming language.', 'questionId': '62398', 'answerId': '62434'}
{'answer': 'Take a look at Framework Design Guidelines. I know it is .NET specific, but you can probably learn a lot of general information from it too.', 'questionId': '62398', 'answerId': '62728'}
{'answer': 'My two favourite resources on the subject: http://mollyrocket.com/873 and http://video.google.com/videoplay?docid=-3733345136856180693', 'questionId': '62398', 'answerId': '62813'}
{'answer': 'The video from Josh Bloch mentioned by yrp is a classic - I second that recommendation.   Some general guidelines: DO define your API primarily in terms of interfaces, factories, and builders. DO clearly specify exactly which packages and classes are part of the API. DO provide a jar specifically used for compiling against the API. DO NOT rely heavily on inheritance or the template method pattern - over time this becomes fragile and broken. DO NOT use the singleton pattern or at least use it with extreme caution. DO create package and class level javadoc explaining usage and concepts.', 'questionId': '62398', 'answerId': '63426'}
{'answer': 'From using third party libraries on Windows I\'ve learned the following two things: Try to distribute your library as a DLL rather than a static library. This gives way better compatibility between different c compilers and linkers. Another problem with static libraries in visual c++ is that the choice of runtime library can make libraries incompatible with code using a different runtime library and you may end up needing to distribute one version of the library for each runtime library. Avoid c++ if possible. The c++ name mangling differs alot between different compilers and it\'s unlikely that a library built for visual c++ will be possible to link from another build environment in windows. When it comes to C, things are much better, in particular if you use dll\'s. If you really want to get the good parts of c++ (such as resource management through constructors and destructors), build a convenience layer in c++ that you distribute as source code that hides away your c functions. Since the user has the source and compiles it locally, it won\'t have any name mangiling or abi issues with the local environment. Without knowing too much about calling c/c++ code from Java, I expect it to be way easier to work with c code than c++ code because of the name mangling issues. The book "Imperfect C++" has some discussion on library compatibility that I found very helpful.', 'questionId': '62398', 'answerId': '71496'}
{'answer': 'Have you tried using Process Explorer from SysInternals? It gives a much better idea of what is running within the process. Available free online here: http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx', 'questionId': '62418', 'answerId': '62431'}
{'answer': "I'd suggest downloading Process Explorer from Sysinternals and looking at the different java.exe processes more closesly, that way you can get a better idea of which one to kill. http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx It's very intuitive and you can find the java.exe processes and right click and goto their properties, from there you can see their command line, time of creation, etc which can help you find the process you want to kill. Hope it helps.", 'questionId': '62418', 'answerId': '62440'}
{'answer': 'Using ProcessExplorer and hovering over the Java process will show the command line.', 'questionId': '62418', 'answerId': '62448'}
{'answer': "Download Sysinternal's Process Explorer. It's a task manager much more powerfull than Windows's own manager.  One of it's features is that you can see all the resources that each process is using (like registry keys, hard disk directories, named pipes, etc). So, browsing the resources that each java.exe process holds might help you determine wich one you want to kill. I usually find out by looking for the one that's using a certain log file directory.", 'questionId': '62418', 'answerId': '62457'}
{'answer': 'You could try opening Windows Task Manager, going to the Applications tab, right clicking the application and then selecting "Go To Process". This will automatically highlight the appropriate process in the Processes tab.', 'questionId': '62418', 'answerId': '62502'}
{'answer': "If the application is not responding at all, then Process Explorer is a good option. If it's sort of responding, but not dying, sometimes bringing up task manager, and then moving another dialog over the java process will give you a clue. The java process that's taking up cpu cycles to redraw is the one you're looking for.", 'questionId': '62418', 'answerId': '62516'}
{'answer': 'In case you\'re developing software: use a java-launcher. I used for a few of my application [Exe4j][http://www.ej-technologies.com/products/exe4j/overview.html] and it worked very well. When the application is started, it\'s listed as for example "myserverapp.exe" or "myapp" in the windows tasks manager. There are other lauchers too (don\'t known them by heart), few of them might be for free too.', 'questionId': '62418', 'answerId': '62517'}
{'answer': 'Using jps in the JDK will give you more information. More information is display with the -m, -l and -v options.', 'questionId': '62418', 'answerId': '62571'}
{'answer': "Rather than using a third party tool, you can also make a pretty good guess by looking at all the columns in task manager if you know roughly what the various java processes on your system are. From the Processes tab, use View-> Select Columns and add PID, CPU Time, VM Size, and Thread count. Knowing roughly what the process is doing should help narrow it down.  For example, in a client-server app, the server will likely use more memory, have more threads, and have used more CPU time because it has been running longer. If you're killing a process because it's stuck, it might simply be using more CPU right now.  MAX java heap memory is usually directly reflected in VM Size. So if you're using -Xmx flags, the process with the larger setting will have a larger VM Size.", 'questionId': '62418', 'answerId': '63246'}
{'answer': 'Run jps -lv which shows PIDs and command lines of all running Java processes.  Determine PID of the task you want to kill. Then use command: to kill the misbehaving process.', 'questionId': '62418', 'answerId': '63655'}
{'answer': "If you're using Java 6, try jvisualvm from the JDK bin directory.", 'questionId': '62418', 'answerId': '63659'}
{'answer': 'If you can\'t run a GUI application like ProcessExplorer and you\'re looking for the "Command Line" arguments of the processes then you can use "wmic" via the command line.  For example: If you want to look for a specific process you can do this: The output from this will show you all of the command line arguments of processes like "java."', 'questionId': '62418', 'answerId': '3504584'}
{'answer': 'I would recommend using VTD-XML http://vtd-xml.sourceforge.net/ From their FAQ ( http://vtd-xml.sourceforge.net/faq.html ): Why should I use VTD-XML for large XML files? For numerous reasons summarized below: Performance: The performance of VTD-XML is far better than SAX Ease to use: Random access combined with XPath makes application easy to write Better maintainability: App code is shorter and simpler to understand. Incremental update: Occasional, small changes become very efficient. Indexing: Pre-parsed form of XML will further boost processing performance. Other features: Cut, paste, split and assemble XML documents is only possible with VTD-XML. In order to take advantage of VTD-XML, we recommended that developers split their ultra large XML documents into smaller, more manageable  chucks (<2GB).', 'questionId': '62423', 'answerId': '62460'}
{'answer': "You have a few options here, but none of them are good.  Since XML Objects aren't broken into distinct parts, you'll either have to use some filesystem level modification with regex pattern matching (sed is a good start), OR you should break your xml into smaller parts for manageability.", 'questionId': '62423', 'answerId': '62480'}
{'answer': "If possible, serialize the XML and use diff/patch/apply Linux tools (or equivalent tools in your platform) . This way, you don't have to deal with parsing, writing.", 'questionId': '62423', 'answerId': '62541'}
{'answer': "If your XML file is so large that updating it is a performance bottleneck, you should consider moving away from XML to a more efficient disk format (or a real database).   If, however, you just feel like it might be a problem, remember the rules of optimization: Don't do it (experts only) Don't do it, yet.", 'questionId': '62423', 'answerId': '64650'}
{'answer': 'Process Large XML Files with XQuery Works with Gigabyte Size XML Files http://www.xquery.com XQuery is a query language that was designed as a native XML query language. Because most types of data can be represented as XML, XQuery can also be used to query other types of data. For example, XQuery can be used to query relational data using an XML view of a relational database. This is important because many Internet applications need to integrate information from multiple sources, including data found in web messages, relational data, and various XML sources. XQuery was specifically designed for this kind of data integration. For example, suppose your company is a financial institution that needs to produce reports of stock holdings for each client. A client requests a report with a Simple Object Access Protocol (SOAP) message, which is represented in XML. In most businesses, the stock holdings data is stored in multiple relational databases, such as Oracle, Microsoft SQL Server, or DB2. XQuery can query both the SOAP message and the relational databases, creating a report in XML. XQuery is based on the structure of XML and leverages that structure to make it possible to perform queries on any type of data that can be represented as XML, including relational data. In addition, XQuery API for Java (XQJ) lets your queries run in any environment that supports the J2EE platform.', 'questionId': '62423', 'answerId': '114810'}
{'answer': "Facebook stopped supporting the official Java API on 5 May 2008 according to their developer wiki. In no way does that mean you shouldn't use Java any more to write FB apps. There are several alternative Java approaches outlined on the wiki. You might also want to check this project out; however, it only came out a few days ago so YMMV.", 'questionId': '62433', 'answerId': '62510'}
{'answer': "There's a community project which is intended to keep the Facebook Java API up to date, using the old official Facebook code as a starting point. You can find it here along with a Getting Started guide and a few bits of sample code.", 'questionId': '62433', 'answerId': '62554'}
{'answer': 'I write an example using facebook java api It use FacebookXmlRestClient in order to make client request and print all user infos http://programmaremobile.blogspot.com/2009/01/facebook-java-apieng.html', 'questionId': '62433', 'answerId': '545712'}
{'answer': "You might want to try Spring Social. It might be limited in terms of Facebook features, but lets you also connect to Twitter, LinkedIn, TripIt, GitHub, and Gowalla.  The other side of things is that as Facebook adds features some of the old API's might break, so using a simpler pure FB api (that you can update when things don't work) might be a good idea.", 'questionId': '62433', 'answerId': '7182834'}
{'answer': "BatchFB provides a modern Java API that lets you easily optimize your Facebook calls down to a minimum set: http://code.google.com/p/batchfb/ Here's the example taken from the main page of what you can effectively do in a single FB request:", 'questionId': '62433', 'answerId': '7411318'}
{'answer': 'This tutorial will literally step you through everything you need to do: http://ocpsoft.org/opensource/creating-a-facebook-app-setup-and-tool-installation/ It comes in 3 parts. The other 2 are linked from there.', 'questionId': '62433', 'answerId': '10020964'}
{'answer': 'This screams class path issue, to me.  Where exactly is your tomcat installed?  (Give us command line printouts of where the home directory is.)  Also, how are you starting it?', 'questionId': '62447', 'answerId': '62488'}
{'answer': 'Check your JAVA_HOME/JRE_HOME setting.  You might want to use a different JVM rather than the one that is installed with the OS', 'questionId': '62447', 'answerId': '62559'}
{'answer': "Seems like you've implemented a JMX service and tried to install it on your server.xml file but forgot to add the apache commons modeler jar to the server/lib directory (therefore the ClassNotFoundException for org.apache.commons.modeler.Registry). Check your server.xml file for anything you might have added, and try to add the proper jar file to your server classpath.", 'questionId': '62447', 'answerId': '64862'}
{'answer': "Seems like you need to have the jar for commons-modeler into $CATALINA_HOME/common/lib. You get the same kind of error when trying to setup JDBC datasources if you didn't put the driver's jar file into tomcat's server classpath.", 'questionId': '62447', 'answerId': '358763'}
{'answer': "I have the same issue.  For the moment, I've worked around it by writing a BasicHandler extension, and then walking the SOAPPart myself and moving the namespace reference up to a parent node.  I don't like this solution, but it does seem to work. I really hope somebody comes along and tells us what we have to do. EDIT This is way too complicated, and like I said, I don't like it at all, but here we go.  I actually broke the functionality into a few classes (This wasn't the only manipulation that we needed to do in that project, so there were other implementations)  I really hope that somebody can fix this soon.  This uses dom4j to process the XML passing through the SOAP process, so you'll need dom4j to make it work. No warranty, etc, etc.", 'questionId': '62490', 'answerId': '179495'}
{'answer': "Alter your client's wsdd to set enableNamespacePrefixOptimization to true", 'questionId': '62490', 'answerId': '185432'}
{'answer': 'For the Request I use this to remove namespaces types:', 'questionId': '62490', 'answerId': '5649242'}
{'answer': "Here's what's needed to make a simple hello world - Get Eclipse IDE for Java. I used Ganymede. Set it up. Get Sun's Wireless Toolkit. I used 2.5.2. Install it. Get Nokia's SDK (found here), in my case for S40 6230i Edition, and install it choosing the option to integrate with Sun's WTK Follow the instructions at http://www.eclipseme.org/ to download and install Mobile Tools Java (MTJ). I used version 1.7.9.  When configuring devices profiles in MTJ (inside Eclipse) use the Nokia device from the WTK folder and NOT from Nokia's folder. Set the WTK root to the main installation folder - for instance c:\\WTK2.5.2; Note that the WTK installer creates other folders apparently for backward compatibility. Get Antenna and set its location in MTJ's property page (in Eclipse). Here's an HelloWorld sample to test the configuration. Note: It worked for me on WindowsXP. Also note: This should work for S60 as well. Just replace the S40 SDK in phase 3 with S60's.", 'questionId': '62491', 'answerId': '62615'}
{'answer': 'Unless you need to do something Nokia-specific, I suggest avoiding the Nokia device definitions altogether. Develop for a generic device, then download your application to real, physical devices for final testing. The steps I suggest: Download and install Sun\'s Wireless Toolkit. Install EclipseME, using the method "installing via a downloaded archive". Configure EclipseME. Choose a generic device, such as the "DefaultColorPhone" to develop on. Create a new project "J2ME Midlet Suite" Right-click on the project, and create a new Midlet "HelloWorld" Enter the code, for example:', 'questionId': '62491', 'answerId': '63574'}
{'answer': 'The most annoying issue with EclipseME for me was the "broken" debugger, which just wouldn\'t start. This is covered in docs, but it took me about an hour to find this tip when I first installed EclipseME, and another hour when I returned to JavaME development a year later, so I decided to share this piece of knowledge here, too. If the debugger won\'t start, open "Java > Debug" section in Eclipse "Preferences" menu, and uncheck "Suspend execution on uncaught exceptions" and "Suspend execution on compilation errors" and increase the "Debugger timeout" near the bottom of the dialog to at least 15000 ms.  After that, Eclipse should be able to connect to KVM and run a midlet with a debugger attached.', 'questionId': '62491', 'answerId': '63728'}
{'answer': 'Apache digester is fairly easy: http://commons.apache.org/digester/ JAXB is newer and comes with annotation goodness: https://jaxb.dev.java.net', 'questionId': '62650', 'answerId': '62675'}
{'answer': 'java.beans.XMLEncoder perhaps?', 'questionId': '62650', 'answerId': '62711'}
{'answer': 'XStream is very simple http://x-stream.github.io/ XStream is a simple library to serialize objects to XML and back again.', 'questionId': '62650', 'answerId': '62722'}
{'answer': "The easiest way here is to serialize the object graph. Java 1.4 has built in support for serialization as XML. A solution I have used successfully is XStream (http://x-stream.github.io/)- it's a small library that will easily allow you to serialize and deserialize to and from XML. The downside is you can only very limited define the resulting XML; which might not be neccessary in your case.", 'questionId': '62650', 'answerId': '62745'}
{'answer': "The Simple API is, well, simple! It's really good. http://simple.sourceforge.net/ You can also use XStream: http://www.ibm.com/developerworks/library/x-xstream/index.html", 'questionId': '62650', 'answerId': '62751'}
{'answer': 'XStream by the folks at Thoughtworks has a simple API and even deals with things like duplicate and circular references.  It seems to be actively developed and is well documented. http://x-stream.github.io/', 'questionId': '62650', 'answerId': '62766'}
{'answer': "If you are really only interested in serializing your objects to a file and then deserializing them later, then you might check out YAML instead of XML. YAML is much easier to work with than XML and the output files are very human-readable (which may or may not be a requirement). Check out yaml.org for more information. I've used JYAML successfully on a recent project.", 'questionId': '62650', 'answerId': '62872'}
{'answer': 'If you need to control the structure of the XML, the XStream is a good choice. You can use annotations to define precisely the structure/mapping of the XML and your objects.', 'questionId': '62650', 'answerId': '63184'}
{'answer': "Use java.beans.XMLEncoder. Its API is very simple (actually a little too simple; it'd be nice to wire it to a SAX ContentHandler), but it works on many graphs out of the box, and it's easy to create your own persistence delegate for any odd-ball classes you might encounter. The syntax used by XMLDecoder allows you to invoke any method, instance or static, including constructors, so it's extremely flexible. Other encoders name elements and attributes after class and field names, so there's no fixed schema for the result. The XMLEncoder's XML follows a simple DTD and can easily be validated or transformed, even when you've never seen the types it uses. You can assign objects an identifier, and reference them throughout the graph. You can refer to constants defined in classes or interfaces. And, it's built into Java SE, so you don't need to ship an extra library.", 'questionId': '62650', 'answerId': '63256'}
{'answer': 'JAX-B is part of the standard APIs and really easy to use.', 'questionId': '62650', 'answerId': '65817'}
{'answer': "I'd second (or third) XStream.  It reads and writes XML without needing any special binding configuration or placing lots of extraneous syntax in the XML.", 'questionId': '62650', 'answerId': '66342'}
{'answer': "If you need control over the XML that gets generated, I recommend taking a look at Betwixt (http://commons.apache.org/betwixt/) - it adds a lot of functionality to Apache's digester (Digester is good for building object graphs from XML, but is not so good for generating them). If you really don't care about the XML that gets generated (just that it can be deserialized in the future), then the XMLEncoder/Decoder classes built into Java or good - as long as the objects you are serializing follow the JavaBean specification.  The biggest area I've run into problems with the XMLEncoder/Decoder solution is if you have a bean that returns an immutable list for one of it's properties - the encoder doesn't handle that situation very well.", 'questionId': '62650', 'answerId': '69304'}
{'answer': 'Although XStream and JAXB can serialize an some object graphs succssfully they can not handle very complex graphs. The most powerful solution for large complex graphs is http://simple.sourceforge.net/ it can handle any graph. Also, its fast and simple to use without any dependencies.', 'questionId': '62650', 'answerId': '130042'}
{'answer': 'I put together a list with a lot of xml serialization libraries and its license', 'questionId': '62650', 'answerId': '2337481'}
{'answer': 'This is a restriction of the EL parser (generally either OGNL or jboss-el for Spring Web Flow). EL uses dot notation for parsing the navigation chain,causing the initial behavior you describe (attempting to find the "bus" bean).', 'questionId': '62713', 'answerId': '65875'}
{'answer': 'In my experience, anything with a getter method can be accessed via dot notation.  In your example, whatever object is being represented by the bus bean needs to have a getServiceFacade method and that the object returned by getServiceFacade would need to have a getSomeAction method.', 'questionId': '62713', 'answerId': '65920'}
{'answer': "Try: ['bus.MyServiceFacade'].someAction() or 'bus.MyServiceFacade'.someAction() This may work, or it may not...but similar things are used in the Expression Language for JSPs.", 'questionId': '62713', 'answerId': '67178'}
{'answer': "I was able to do this by using both the bean accessor (@) symbol and single-quotes around the name of the bean. Using your example: #{@'bus.MyServiceFacade'.someAction()}", 'questionId': '62713', 'answerId': '14408583'}
{'answer': 'Whenever I have had odd issues like this, I usually sit down with a tool like WireShark and look at the raw data being passed back and forth. You might be surprised where things are being disconnected, and you are only being notified when you try and read.', 'questionId': '62929', 'answerId': '62996'}
{'answer': 'Connection reset simply means that a TCP RST was received. This happens when your peer receives data that it can\'t process, and there can be various reasons for that. The simplest is when you close the socket, and then write more data on the output stream. By closing the socket, you told your peer that you are done talking, and it can forget about your connection. When you send more data on that stream anyway, the peer rejects it with an RST to let you know it isn\'t listening. In other cases, an intervening firewall or even the remote host itself might "forget" about your TCP connection. This could happen if you don\'t send any data for a long time (2 hours is a common time-out), or because the peer was rebooted and lost its information about active connections. Sending data on one of these defunct connections will cause a RST too. Update in response to additional information:  Take a close look at your handling of the SocketTimeoutException. This exception is raised if the configured timeout is exceeded while blocked on a socket operation. The state of the socket itself is not changed when this exception is thrown, but if your exception handler closes the socket, and then tries to write to it, you\'ll be in a connection reset condition. setSoTimeout() is meant to give you a clean way to break out of a read() operation that might otherwise block forever, without doing dirty things like closing the socket from another thread.', 'questionId': '62929', 'answerId': '63155'}
{'answer': "There are several possible causes. The other end has deliberately reset the connection, in a way which I will not document here. It is rare, and generally incorrect, for application software to do this, but it is not unknown for commercial software. More commonly, it is caused by writing to a connection that the other end has already closed normally. In other words an application protocol error. It can also be caused by closing a socket when there is unread data in the socket receive buffer. In Windows, 'software caused connection abort', which is not the same as 'connection reset', is caused by network problems sending from your end. There's a Microsoft knowledge base article about this.", 'questionId': '62929', 'answerId': '4300803'}
{'answer': 'I had the same error. I found the solution for problem now. The problem was client program was finishing before server read the streams.', 'questionId': '62929', 'answerId': '5452194'}
{'answer': 'Embarrassing to say it, but when I had this problem, it was simply a mistake that I was closing the connection before I read all the data.  In cases with small strings being returned, it worked, but that was probably due to the whole response was buffered, before I closed it. In cases of longer amounts of text being returned, the exception was thrown, since more then a buffer was coming back. You might check for this oversight.  Remember opening a URL is like a file, be sure to close it (release the connection) once it has been fully read.', 'questionId': '62929', 'answerId': '17816678'}
{'answer': "I also had this problem with a Java program trying to send a command on a server via SSH. The problem was with the machine executing the Java code. It didn't have the permission to connect to the remote server. The write() method was doing alright, but the read() method was throwing a java.net.SocketException: Connection reset. I fixed this problem with adding the client SSH key to the remote server known keys.", 'questionId': '62929', 'answerId': '24681365'}
{'answer': "I had this problem with a SOA system written in Java.  I was running both the client and the server on different physical machines and they worked fine for a long time, then those nasty connection resets appeared in the client log and there wasn't anything strange in the server log.  Restarting both client and server didn't solve the problem.  Finally we discovered that the heap on the server side was rather full and increased the memory available to the JVM: problem solved!  Note that there was no OutOfMemoryError in the log.", 'questionId': '62929', 'answerId': '30123818'}
{'answer': "You should inspect full trace very carefully, I've a server socket application and fixed a java.net.SocketException: Connection reset case. In my case it happens while reading from a clientSocket Socket object which is closed its connection because of some reason. (Network lost,firewall or application crash or intended close) Actually I was re-establishing connection when I got an error while reading from this Socket object. The interesting thing is for my JAVA Socket if a client connects to my ServerSocket and close its connection without sending anything is.read() calls itself recursively.It seems because of being in an infinite while loop for reading from this socket you try to read from a closed connection.  If you use something like below for read operation; Then you get a stackTrace something like below on and on What I did is just closing ServerSocket and renewing my connection and waiting for further incoming client connections  This reestablises my connection for unknown client socket losts I couldn't find another way because as you see from below image you can't understand whether connection is lost or not without a try and catch ,because everything seems right . I got this snapshot while I was getting Connection reset continuously.", 'questionId': '62929', 'answerId': '31741436'}
{'answer': 'This is the sort of problem that web services were designed to solve.  Although no longer simple, the SOAP format allows you to serialize objects to an XML representation on a Java/C# application, transmit them across the wire and deserialize them in the corresponding Java/C# application (Java/C# may be replaced with virtually any language that can translate an XML document).  Although "serialize" is used here, it is also common for this process to be referred as "marshalling". However, moving away from SOAP for web services is currently being considered by many.  Find out more about web services from Wikipedia: http://en.wikipedia.org/wiki/Web_services', 'questionId': '62932', 'answerId': '65873'}
{'answer': 'Have you looked at the HessianC# project (http://www.hessiancsharp.org/)?', 'questionId': '62932', 'answerId': '67349'}
{'answer': 'Admitting "Soap is over-engineered" and then praising an implementation that un-engineers/abstracts it is like me writing this entry in French, and then asking you to use Google Translate to read it, and then in English praising Google Translate. Binary Protocols are the way of the future.  If you are prepared to write "smart" code you will thank yourself when it performs exactly how it was programmed and developed to perform. All it takes is one latent Soap service to bring your SOA architecture into an "exception" mode ... I call this the "exception" mode because companies with SOA\'s implemented in soap (READ: XML) implement exceptions around the SOA whenever they encounter a transactional type of data-interchange in which very large records may be read in succession. *(I can just imagine the post SOAP implementation conversations being had) So you have an SOA? :Yes we do Everything? :Well everything except our business critical transports... Check out WSO2 webservices and their ESB while you are at it - you will thank yourself again if you do. There is a reason Mule, and then WSO2 provided support for HESSIAN. You might also want to read: http://java.sun.com/developer/technicalArticles/WebServices/fastWS/', 'questionId': '62932', 'answerId': '1563747'}
{'answer': "I am author of jni4net, open source intraprocess bridge between JVM and CLR. It's build on top of JNI and PInvoke. No C/C++ code needed and it should be relatively fast. I'm not sure if marshalling by reference across boundary would solve your problem.", 'questionId': '62932', 'answerId': '1655499'}
{'answer': "The AWT code in IKVM is fairly easy to read and edit.  I'd recommend you look for the methods that you are using that throw that exception, and then implement them.  I've done this several times before with IKVM's AWT implementation and found it easy to do for background/server related functions.  Its much less usable if your app is a desktop app, however.", 'questionId': '63030', 'answerId': '65401'}
{'answer': "Here's a good place to start: http://java.sun.com/j2se/1.5.0/docs/relnotes/features.html http://java.sun.com/developer/technicalArticles/releases/j2se15/", 'questionId': '63042', 'answerId': '63066'}
{'answer': 'Java 5 new features Java 6 new features The real meat is in Java 5. Generics, Autoboxing, Annotations.', 'questionId': '63042', 'answerId': '63077'}
{'answer': 'I can recommend Bruce Eckel\'s "Thinking in Java" 4th edition.  He goes over a bunch of basic stuff you can skip, but his treatment of new 1.5 features is very thorough, especially the chapter on generics.  And it is a good Java reference to own.', 'questionId': '63042', 'answerId': '63112'}
{'answer': "Dietel : How to program Java This book is highly recommended.  Teaches everything, does it well.  Starts with simple Hello World and ends up in you writing your own BASIC compiler.  handles databases as well.  Does everything, uml, design.  Just can't say enough about it. And it is also beautiful book, I mean in design and color and it is not dry.", 'questionId': '63042', 'answerId': '63113'}
{'answer': 'I would thoroughly recommend Java Concurrency in Practice by Brian Goetz, Tim Peierls, Joshua Bloch, and Joseph Bowbeer. It focusses solely on good concurrency coding, but includes excellent guidance on the new concurrency features in the Java 5 and 6 libraries. Of course, it is no help at all on the other features, but if you ever deal with threads (and if you have a GUI, then you have threads), then this book is indispensable.', 'questionId': '63042', 'answerId': '63634'}
{'answer': 'Java 5 introduced several major updates, such as language improvements (i.e. Annotations, Generics, Autoboxing, and improved syntax for looping) among many others. Annotation is a mechanism for tagging classes with metadata so that, they can be used by metadata-aware programs. Generics is a mechanism of specifying types for objects belonging to collections, such as Arraylists, so that type safety is guaranteed at compile time. Autoboxing allows the automatic conversions between primitive types (e.g. int) and wrapper types (e.g. Integer). Improved syntax for looping includes the enhancements for each loop for going through the items of array or collections comparatively easily. Java 6 focuses on new specifications and APIs including XML, Web Services, JDBC version 4.0, programming based on Annotations, APIs for Java compiler and Application client GUI.With new compiler API added with Java 6, the java compiler can now receive and/or send output to an abstraction of the file system (programs can specify/process compiler output). Furthermore, Java 6 added enhancements to the applications GUI capabilities in AWT (faster splash screens and support for system tray) and SWING (better drag-and-drop, support for customizing layouts, multithreading enhancements and ability to write GIF images).', 'questionId': '63042', 'answerId': '11788474'}
{'answer': 'Use an approach based on java.lang.StringBuilder!  ("A mutable sequence of characters. ") Like you mentioned, all those string concatenations are creating Strings all over.  StringBuilder won\'t do that. Why StringBuilder instead of StringBuffer?  From the StringBuilder javadoc: Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations.', 'questionId': '63150', 'answerId': '63173'}
{'answer': "You can use Java's StringBuilder type for this. There's also StringBuffer, but it contains extra thread safety logic that is often unnecessary.", 'questionId': '63150', 'answerId': '63186'}
{'answer': 'Why not write your own join() method?  It would take as parameters collection of Strings and a delimiter String.  Within the method iterate over the collection and build up your result in a StringBuffer.', 'questionId': '63150', 'answerId': '63191'}
{'answer': "You can generalize it, but there's no join in Java, as you well say. This might work better.", 'questionId': '63150', 'answerId': '63201'}
{'answer': 'You can try something like this:', 'questionId': '63150', 'answerId': '63217'}
{'answer': '', 'questionId': '63150', 'answerId': '63218'}
{'answer': 'You should probably use a StringBuilder with the append method to construct your result, but otherwise this is as good of a solution as Java has to offer.', 'questionId': '63150', 'answerId': '63226'}
{'answer': "Why don't you do in Java the same thing you are doing in ruby, that is creating the delimiter separated string only after you've added all the pieces to the array? You may want to move that for loop in a separate helper method, and also use StringBuilder instead of StringBuffer... Edit: fixed the order of appends.", 'questionId': '63150', 'answerId': '63229'}
{'answer': "Pre Java 8: Apache's commons lang is your friend here - it provides a join method very similar to the one you refer to in Ruby:  StringUtils.join(java.lang.Iterable,char) Java 8: Java 8 provides joining out of the box via StringJoiner and String.join(). The snippets below show how you can use them: StringJoiner String.join(CharSequence delimiter, CharSequence... elements)) String.join(CharSequence delimiter, Iterable<? extends CharSequence> elements)", 'questionId': '63150', 'answerId': '63258'}
{'answer': 'You could write a little join-style utility method that works on java.util.Lists Then use it like so:', 'questionId': '63150', 'answerId': '63274'}
{'answer': 'So basically something like this:', 'questionId': '63150', 'answerId': '63282'}
{'answer': 'Apache commons StringUtils class has a join method.', 'questionId': '63150', 'answerId': '63305'}
{'answer': "Don't know if this really is any better, but at least it's using StringBuilder, which may be slightly more efficient. Down below is a more generic approach if you can build up the list of parameters BEFORE doing any parameter delimiting.", 'questionId': '63150', 'answerId': '63306'}
{'answer': 'Your approach is not too bad, but you should use a StringBuffer instead of using the + sign. The + has the big disadvantage that a new String instance is being created for each single operation. The longer your string gets, the bigger the overhead. So using a StringBuffer should be the fastest way: After you have finished creating your string simply call toString() on the returned StringBuffer.', 'questionId': '63150', 'answerId': '63324'}
{'answer': "I would use Google Collections.  There is a nice Join facility. http://google-collections.googlecode.com/svn/trunk/javadoc/index.html?com/google/common/base/Join.html But if I wanted to write it on my own, I think it works better with an object collection, since now you don't have to convert your objects to strings before you join them.", 'questionId': '63150', 'answerId': '63351'}
{'answer': 'Instead of using string concatenation, you should use StringBuilder if your code is not threaded, and StringBuffer if it is.', 'questionId': '63150', 'answerId': '63407'}
{'answer': 'You\'re making this a little more complicated than it has to be. Let\'s start with the end of your example: With the small change of using a StringBuilder instead of a String, this becomes: When you\'re done (I assume you have to check a few other conditions as well), just make sure you remove the tailing comma with a command like this: And finally, get the string you want with You could also replace the "," in the second call to append with a generic delimiter string that can be set to anything. If you have a list of things you know you need to append (non-conditionally), you could put this code inside a method that takes a list of strings.', 'questionId': '63150', 'answerId': '63418'}
{'answer': '', 'questionId': '63150', 'answerId': '63840'}
{'answer': "With Java 5 variable args, so you don't have to stuff all your strings into a collection or array explicitly:", 'questionId': '63150', 'answerId': '76070'}
{'answer': "So a couple of things you might do to get the feel that it seems like you're looking for: 1) Extend List class - and add the join method to it.  The join method would simply do the work of concatenating and adding the delimiter (which could be a param to the join method) 2) It looks like Java 7 is going to be adding extension methods to java - which allows you just to attach a specific method on to a class:  so you could write that join method and add it as an extension method to List or even to Collection. Solution 1 is probably the only realistic one, now, though since Java 7 isn't out yet :) But it should work just fine. To use both of these, you'd just add all your items to the List or Collection as usual, and then call the new custom method to 'join' them.", 'questionId': '63150', 'answerId': '76216'}
{'answer': "Use StringBuilder and class Separator Separator wraps a delimiter. The delimiter is returned by Separator's toString method, unless on the first call which returns the empty string! Source code for class Separator", 'questionId': '63150', 'answerId': '297128'}
{'answer': 'using Dollar is simple as typing: NB: it works also for Array and other data types Implementation Internally it uses a very neat trick: the class Separator return the empty String only the first time that it is invoked, then it returns the separator:', 'questionId': '63150', 'answerId': '2179425'}
{'answer': 'Slight improvement [speed] of version from izb:', 'questionId': '63150', 'answerId': '3338199'}
{'answer': "In the case of Android, the StringUtils class from commons isn't available, so for this I used http://developer.android.com/reference/android/text/TextUtils.html", 'questionId': '63150', 'answerId': '6011632'}
{'answer': "The Google's Guava library has com.google.common.base.Joiner class which helps to solve such tasks. Samples: Here is an article about Guava's string utilities.", 'questionId': '63150', 'answerId': '12471817'}
{'answer': 'If you\'re using Eclipse Collections, you can use makeString() or appendString(). makeString() returns a String representation, similar to toString(). It has three forms makeString(start, separator, end) makeString(separator) defaults start and end to empty strings makeString() defaults the separator to ", " (comma and space) Code example: appendString() is similar to makeString(), but it appends to an Appendable (like StringBuilder) and is void. It has the same three forms, with an additional first argument, the Appendable. If you can\'t convert your collection to an Eclipse Collections type, just adapt it with the relevant adapter. Note: I am a committer for Eclipse collections.', 'questionId': '63150', 'answerId': '20013838'}
{'answer': 'In Java 8 you can use String.join(): Also have a look at this answer for a Stream API example.', 'questionId': '63150', 'answerId': '22577623'}
{'answer': "And a minimal one (if you don't want to include Apache Commons or Gauva into project dependencies just for the sake of joining strings)", 'questionId': '63150', 'answerId': '22659416'}
{'answer': 'in Java 8 you can do this like: if list has nulls you can use:', 'questionId': '63150', 'answerId': '27599779'}
{'answer': 'For those who are in a Spring context their StringUtils class is useful as well: There are many useful shortcuts like: collectionToCommaDelimitedString(Collection coll) collectionToDelimitedString(Collection coll, String delim) arrayToDelimitedString(Object[] arr, String delim) and many others.  This can be helpful if you are not already using Java 8 and you are already in a Spring context. I prefer it against the Apache Commons (although very good as well) for the Collection support which is easier like this:', 'questionId': '63150', 'answerId': '28063943'}
{'answer': "Fix answer Rob Dickerson. It's easier to use:", 'questionId': '63150', 'answerId': '29135746'}
{'answer': 'Java 8', 'questionId': '63150', 'answerId': '33451093'}
{'answer': 'If you are using Spring MVC then you can try following steps. It will result to a,b,c', 'questionId': '63150', 'answerId': '36839833'}
{'answer': 'I personally quite often use  the following simple solution for logging purposes:', 'questionId': '63150', 'answerId': '39067118'}
{'answer': 'It should be as simple as looking at /System/Library/Frameworks/JavaVM.framework/Versions/ E.g. from my machine:', 'questionId': '63206', 'answerId': '63227'}
{'answer': 'This artical may help: http://developer.apple.com/technotes/tn2002/tn2110.html Summery:', 'questionId': '63206', 'answerId': '63236'}
{'answer': "You can add a shutdown hook to your application by doing the following: This is basically equivalent to having a try {} finally {} block around your entire program, and basically encompasses what's in the finally block. Please note the caveats though!", 'questionId': '63687', 'answerId': '63701'}
{'answer': 'Adding a shutdown hook addShutdownHook(java.lang.Thread) is probably what you look for. There are problems with that approach, though: you will lose the changes if the program aborts in an uncontrolled way (i.e. if it is killed) you will lose the changes if there are errors (permission denied, disk full, network errors) So it might be better to save settings immediately (possibly in an extra thread, to avoid waiting times).', 'questionId': '63687', 'answerId': '63886'}
{'answer': 'Are you creating a stand alone GUI app (i.e. Swing)? If so, you should consider how you are providing options to your users how to exit the application. Namely, if there is going to be a File menu, I would expect that there will be an "Exit" menu item. Also, if the user closes the last window in the app, I would also expect it to exit the application. In both cases, it should call code that handles saving the user\'s preferences.', 'questionId': '63687', 'answerId': '64773'}
{'answer': "Using Runtime.getRuntime().addShutdownHook() is certainly a way to do this - but if you are writing Swing applications, I strongly recommend that you take a look at JSR 296 (Swing Application Framework) Here's a good article on the basics:  http://java.sun.com/developer/technicalArticles/javase/swingappfr/. The JSR reference implementation provides the kind of features that you are looking for at a higher level of abstraction than adding shutdown hooks. Here is the reference implementation:  https://appframework.dev.java.net/", 'questionId': '63687', 'answerId': '69288'}
{'answer': 'In my opinion you should never clone the element unless you explicitly state that your data structure does that. The desired functionality of most things needs the actual object to be passed into the data structure by-reference. If you want to make the Node class safer, make it an inner class of the graph.', 'questionId': '63748', 'answerId': '63795'}
{'answer': "It isn't clear to me why you are adding the additional indirection of the String names for the nodes.  Wouldn't it make more sense for your Edge constructor's signature to be something like public Edge(String, Node, Node) instead of public Edge (String, String, String)? I don't know where clone would help you here. ETA: If the danger comes from having the node name changed after the node is created, throw an IllegalOperationException if the client tries to call setName() on a node with an existing name.", 'questionId': '63748', 'answerId': '63846'}
{'answer': 'In addition to the comments by @jhkiley.blogspot.com, you can create a factory for Edges and Nodes that refuses to create objects with a name that was already used.', 'questionId': '63748', 'answerId': '64598'}
{'answer': 'I work with graph structures in Java a lot, and my advice would be to make any data member of the Node and Edge class that the Graph depends on for maintaining its structure final, with no setters. In fact, if you can, I would make Node and Edge completely immutable, which has many benefits. So, for example: You would then do your uniqueness check in the Graph object: If you need to modify a name of a node, remove the old node and add a new one. This might sound like extra work, but it saves a lot of effort keeping everything straight. Really, though, creating your own Graph structure from the ground up is probably unnecessary -- this issue is only the first of many you are likely to run into if you build your own. I would recommend finding a good open source Java graph library, and using that instead. Depending on what you are doing, there are a few options out there. I have used JUNG in the past, and would recommend it as a good starting point.', 'questionId': '63748', 'answerId': '64847'}
{'answer': "Using NodeEnvelopes or edge/node Factories sounds like overdesign to me. Do you really want to expose a setName() method on Node at all?  There's nothing in your example to suggest that you need that.  If you make both your Node and Edge classes immutable, most of the integrity-violation scenarios you're envisioning become impossible.  (If you need them to be mutable but only until they're added to a Graph, you could enforce this by having an isInGraph flag on your Node/Edge classes that is set to true by Graph.Add{Node, Edge}, and have your mutators throw an exception if called after this flag is set.) I agree with jhkiley that passing Node objects to the Edge constructor (instead of Strings) sounds like a good idea. If you want a more intrusive approach, you could have a pointer from the Node class back to the Graph it resides in, and update the Graph if any critical properties (e.g., the name) of the Node ever change.  But I wouldn't do that unless you're sure you need to be able to change the names of existing Nodes while preserving Edge relationships, which seems unlikely.", 'questionId': '63748', 'answerId': '65104'}
{'answer': 'Object.clone() has some major problems, and its use is discouraged in most cases. Please see Item 11, from "Effective Java" by Joshua Bloch for a complete answer. I believe you can safely use Object.clone() on primitive type arrays, but apart from that you need to be judicious about properly using and overriding clone. You are probably better off defining a copy constructor or a static factory method that explicitly clones the object according to your semantics.', 'questionId': '63748', 'answerId': '354535'}
{'answer': 'You should be able to do that java.lang.Runtime.exec and shell commands.', 'questionId': '63758', 'answerId': '63807'}
{'answer': "You can have the java code detect the platform at runtime and fire off the platform's kill process command. This is really an refinement on your current solution. There's also Process.destroy(), if you're using the ProcessBuilder API", 'questionId': '63758', 'answerId': '63850'}
{'answer': "I may be missing something but can't you call the destroy() method on the Process object returned by Runtime.exec()?", 'questionId': '63758', 'answerId': '63909'}
{'answer': 'You could also publish a service (via burlap, hessian, etc) on the second JVM that calls System.exit() and consume it from the watchdog JVM.  If you only want to shut the second JVM down when it stops sending those periodic notifications, it might not be in a state to respond to the service call. Calling shell commands with java.lang.Runtime.exec() is probably your best bet.', 'questionId': '63758', 'answerId': '63924'}
{'answer': 'Not exactly process management, but you could start an rmi server in the java virtual machine you are launching, and bind a remote instance with a method that does whatever cleanup required and calls System.exit().  The first vm could then call that remote method to shutdown the second vm.', 'questionId': '63758', 'answerId': '63952'}
{'answer': 'You can use java.lang.Process to do what you want. Once you have created the nested process and have a reference to the Process instance, you can get references to its standard out and err streams. You can periodically monitor those, and call .destroy() if you want to close the process. The whole thing might look something like this: Hope this helps, Sean', 'questionId': '63758', 'answerId': '64062'}
{'answer': 'java.lang.Process has a waitFor() method to wait for a process to die, and a destroy() method to kill the subprocess.', 'questionId': '63758', 'answerId': '64114'}
{'answer': "OK the twist of the gist is as follows: I was using the Process API to close the second virtual machine, but it wouldn't work. The reason is that my second application is an Eclipse RCP Application, and I launched it using the eclipse.exe launcher included. However, that means that the Process API destroy() method will target the eclipse.exe process.  Killing this process leaves the Java Process unscathed.  So, one of my colleagues here wrote a small application that will kill the right application. So one of the solutions to use the Process API (and remove redundant middle steps) is to get away with the Eclipse launcher, having my first virtual machine duplicate all its functionality. I guess I will have to get to work.", 'questionId': '63758', 'answerId': '80748'}
{'answer': "The usual way to do this is to call Process.destroy()... however it is an incomplete solution since when using the sun JVM on *nix destroy maps onto a SIGTERM which is not guaranteed to terminate the process (for that you need SIGKILL as well). The net result is that you can't do real process management using Java. There are some open bugs about this issue see: link text", 'questionId': '63758', 'answerId': '81137'}
{'answer': "No, you can escape any character that Java doesn't allow in String literals but the filesystem allows. Also, if trying to port an Windows app to Mac or Unix it is best to use: To determine the correct file separator to use on each platform.", 'questionId': '63800', 'answerId': '63861'}
{'answer': 'When you create a new File the inputted arguments will be normalized by a platform specific implementation of the java.io.FileSystem class. There are no Java specific restrictions that I know of. and yes, always use File.separator.', 'questionId': '63800', 'answerId': '63963'}
{'answer': "Java supports any string that can be expressed in Unicode (subject to some ridiculously long maximum length, Integer.MAX_VALUE), and file names are just another kind of string. Of course, this means that you can try and refer to a file using a name that isn't supported by the underlying Operating System. If you do this, you'll get some kind of IOException when you try and use the File reference...", 'questionId': '63800', 'answerId': '63993'}
{'answer': 'If all else fails, use Sphinx', 'questionId': '63896', 'answerId': '65595'}
{'answer': 'That\'s the beauty of open source. You have the source code, so if the current implementations don\'t work for you, you can always create your own or even better, extend the existing ones. A good start would be the "Lucene in Action" book.', 'questionId': '63896', 'answerId': '280487'}
{'answer': "My answer is probably too late, but for the record, I've found analyzers from AOT project much better then those shipped with Lucene.", 'questionId': '63896', 'answerId': '3459515'}
{'answer': 'I used http://code.google.com/p/russianmorphology/', 'questionId': '63896', 'answerId': '8927397'}
{'answer': 'Project http://code.google.com/p/russianmorphology/ moved to https://github.com/AKuznetsov/russianmorphology. Please take into account the new hosting of this project.', 'questionId': '63896', 'answerId': '29176601'}
{'answer': 'Hmm... off by one hour. DST possibly? Is the date set correctly?  What version of the JDK is this running on? ("java -version")', 'questionId': '6392', 'answerId': '6397'}
{'answer': 'It\'s a "quirk" in the way the JVM looks up the zoneinfo file.  See Bug ID 6456628. The easiest workaround is to make /etc/localtime a symlink to the correct zoneinfo file.  For Pacific time, the following commands should work: I haven\'t had any problems with the symlink approach. Edit: Added "sudo" to the commands.', 'questionId': '6392', 'answerId': '6496'}
{'answer': 'It may help to double-check the timezone rules your OS is using. This file should contain your daylight savings rules, like this one for the year 2080: You can compare this with the timezone rules you think you should be using. They can be found in /usr/share/zoneinfo/.', 'questionId': '6392', 'answerId': '6502'}
{'answer': 'I had a similar issue, possibly the same one. However my tomcat server runs on a windows box so the symlink solution will not work.  I set "-Duser.timezone=Australia/Sydney" in the JAVA_OPTS however tomcat would not recognize that DST was in effect. As a workaround i changed Australia/Sydney (+10 GMT) to Pacific/Numea (+11 GMT) so that times would correctly display however i would love to know the actual solution or bug, if any.', 'questionId': '6392', 'answerId': '182437'}
{'answer': "On Ubuntu, it's not enough to just change the /etc/localtime file. It seems to read /etc/timezone file, too. It's better follow the instruction to set the time zone properly. In particular, do the following: On my Ubuntu, if /etc/localtime and /etc/timezone are inconsistent, Java seems to read default time zone from /etc/timezone .", 'questionId': '6392', 'answerId': '3912695'}
{'answer': 'You can\'t "forward", in the strict sense.  Just call sendRedirect() on the HttpServletResponse object in your Action class\'s execute() method.  and, then \'return null\'. alternately, either call setModule on the ActionForward object (that you are going to return) or set the path to an absolute URI', 'questionId': '63930', 'answerId': '64049'}
{'answer': 'I ended up doing response.sendRedirect().', 'questionId': '63930', 'answerId': '66294'}
{'answer': "If this was still in the web application, you could use ServletContext.RequestDispatcher?  That's how the Struts doForward() method works.  However, to go outside Struts/Java, you need the sendRedirect().", 'questionId': '63930', 'answerId': '1006703'}
{'answer': 'You can, as long as the fields follow the JavaBean conventions and the setter takes something Struts can understand.  So Thing needs getThingName() and setThingName(String).', 'questionId': '63935', 'answerId': '63985'}
{'answer': 'Just have two threads, one reading from stdout, one from stderr?', 'questionId': '64000', 'answerId': '64145'}
{'answer': "Set the redirectErrorStream property on ProcessBuilder to send stderr output to stdout: You should then create a thread to deal with the process stream, something like the following: Where InputHandler is defined as: Alternatively, just create two InputHandlers for the InputStream and ErrorStream. Knowing that the program will block if you don't read them is 90% of the battle :)", 'questionId': '64000', 'answerId': '64183'}
{'answer': "A safe way is to serialize the object, then deserialize.  This ensures everything is a brand new reference. Here's an article about how to do this efficiently. Caveats: It's possible for classes to override serialization such that new instances are not created, e.g. for singletons.  Also this of course doesn't work if your classes aren't Serializable.", 'questionId': '64036', 'answerId': '64066'}
{'answer': "Deep copying can only be done with each class's consent. If you have control over the class hierarchy then you can implement the clonable interface and implement the Clone method. Otherwise doing a deep copy is impossible to do safely because the object may also be sharing non-data resources (e.g. database connections). In general however deep copying is considered bad practice in the Java environment and should be avoided via the appropriate design practices.", 'questionId': '64036', 'answerId': '64082'}
{'answer': 'You can do a serialization-based deep clone using org.apache.commons.lang3.SerializationUtils.clone(T) in Commons Lang, but be careful--the performance is abysmal. In general, it is best practice to write your own clone methods for each class of an object in the object graph needing cloning.', 'questionId': '64036', 'answerId': '64611'}
{'answer': 'Use XStream(http://x-stream.github.io/). You can even control which properties you can ignore through annotations or explicitly specifying the property name to XStream class. Moreover you do not need to implement clonable interface.', 'questionId': '64036', 'answerId': '69534'}
{'answer': 'XStream is really useful in such instances. Here is a simple code to do cloning', 'questionId': '64036', 'answerId': '228900'}
{'answer': 'A few people have mentioned using or overriding Object.clone(). Don\'t do it. Object.clone() has some major problems, and its use is discouraged in most cases. Please see Item 11, from "Effective Java" by Joshua Bloch for a complete answer. I believe you can safely use Object.clone() on primitive type arrays, but apart from that you need to be judicious about properly using and overriding clone.  The schemes that rely on serialization (XML or otherwise) are kludgy. There is no easy answer here. If you want to deep copy an object you will have to traverse the object graph and copy each child object explicitly via the object\'s copy constructor or a static factory method that in turn deep copies the child object. Immutables (e.g. Strings) do not need to be copied. As an aside, you should favor immutability for this reason.', 'questionId': '64036', 'answerId': '354504'}
{'answer': '', 'questionId': '64036', 'answerId': '7432044'}
{'answer': "You can make a deep copy with serialization without creating files. Your object you wish to deep copy will need to implement serializable.  If the class isn't final or can't be modified, extend the class and implement serializable. Convert your class to a stream of bytes: Restore your class from a stream of bytes:", 'questionId': '64036', 'answerId': '7596565'}
{'answer': "One way to implement deep copy is to add copy constructors to each associated class. A copy constructor takes an instance of 'this' as its single argument and copies all the values from it. Quite some work, but pretty straightforward and safe. EDIT: note that you don't need to use accessor methods to read fields. You can access all fields directly because the source instance is always of the same type as the instance with the copy constructor. Obvious but might be overlooked. Example: Edit: Note that when using copy constructors you need to know the runtime type of the object you are copying. With the above approach you cannot easily copy a mixed list (you might be able to do it with some reflection code).", 'questionId': '64036', 'answerId': '7596965'}
{'answer': 'One very easy and simple approach is to use Jackson JSON to serialize complex Java Object to JSON and read it back. http://wiki.fasterxml.com/JacksonInFiveMinutes', 'questionId': '64036', 'answerId': '9170760'}
{'answer': 'You can use a library that has a simple API, and performs relatively fast cloning with reflection (should be faster than serialization methods).', 'questionId': '64036', 'answerId': '22546839'}
{'answer': "I used Dozer for cloning java objects and it's great at that , Kryo library is another great alternative.", 'questionId': '64036', 'answerId': '26416825'}
{'answer': 'Apache commons offers a fast way to deep clone an object.', 'questionId': '64036', 'answerId': '28195274'}
{'answer': 'BeanUtils does a really good job deep cloning beans.', 'questionId': '64036', 'answerId': '35429885'}
{'answer': '1) Here your MyPerson and MyAddress class must implement serilazable interface', 'questionId': '64036', 'answerId': '40550518'}
{'answer': 'For complicated objects and when performance is not significant i use a json library, like gson to serialize the object to json text, then deserialize the text to get new object. gson which based on reflection will works in most cases, except that transient fields will not be copied and objects with circular reference with cause StackOverflowError.', 'questionId': '64036', 'answerId': '40859968'}
{'answer': 'For Spring Framework users. Using class org.springframework.util.SerializationUtils:', 'questionId': '64036', 'answerId': '45201944'}
{'answer': "You could call during init or whatever Locale.setDefault() or -Duser.language=, -Duser.country=, and -Duser.variant= at the command line. Here's something on Sun's site.", 'questionId': '64038', 'answerId': '64058'}
{'answer': "I believe java gleans this from the environment variables in which it was launched, so you'll need to make sure your LANG and LC_* environment variables are set appropriately. The locale manpage has full info on said environment variables.", 'questionId': '64038', 'answerId': '64064'}
{'answer': 'One way to control the locale settings is to set the java system properties user.language and user.region.', 'questionId': '64038', 'answerId': '64070'}
{'answer': 'With the user.language, user.country and user.variant properties. Example: java -Duser.language=th -Duser.country=TH -Duser.variant=TH SomeClass', 'questionId': '64038', 'answerId': '64096'}
{'answer': 'If you are on Mac, simply using System Preferences -> Languages and dragging the language to test to top (before English) will make sure the next time you open the App, the right locale is tried!!', 'questionId': '64038', 'answerId': '2936833'}
{'answer': 'I had to control this in a script that ran on a machine with French locale, but a specific Java program had to run with en_US. As already pointed out, the following works: Alternatively,  I prefer the latter.', 'questionId': '64038', 'answerId': '9894836'}
{'answer': 'You can change on the console:', 'questionId': '64038', 'answerId': '10646947'}
{'answer': 'For tools like jarsigner which is implemented in Java.', 'questionId': '64038', 'answerId': '24987464'}
{'answer': 'On linux, create file in /etc/default/locale with the following contents and then use the source command to export this variable by running The source command sets the variable permanently.', 'questionId': '64038', 'answerId': '29652154'}
{'answer': 'Will ROME do?', 'questionId': '64061', 'answerId': '64094'}
{'answer': 'We also use ROME. While the SAX/eventing based FeedParser architecture is interesting it is a dormant project at Apache.  The "dormant" at Apache seems to imply NO binary download links and NO active development.', 'questionId': '64061', 'answerId': '4357661'}
{'answer': 'I think your best bet is to use an ORM-tool that includes database migration like SubSonic: http://subsonicproject.com/2-1-pakala/subsonic-using-migrations/', 'questionId': '64148', 'answerId': '64162'}
{'answer': "We ended up making update scripts each time we changed the database.  So there's a script from version 10 to 11, from 11 to 12, etc.. Then we can run any consecutive set of scripts to skip from some existing version to the new version.  We stored the existing version in the database so we could detect this upon startup. Yes this involved database-specific code!  One of the main problems with Hibernate!", 'questionId': '64148', 'answerId': '64165'}
{'answer': 'When working with Hibernate, I use an installer class that runs from the command-line and has options for creating database schema, inserting base data, and dynamically updating the database schema using SchemaUpdate. I find it to be extremely useful. It also gives me a place to put one-off scripts that will be run when a new version is launched to, for example, populate a new field in an existing DB table.', 'questionId': '64148', 'answerId': '64225'}
{'answer': "I don't see why ORM generated schemas are any different to other DB schemas - the problem is the same. Assuming your ORM will spit out a generation script, you can use an external tool to do the diff I've not tried it but google came back with SQLCompare as one option - I'm sure there are others.", 'questionId': '64148', 'answerId': '64312'}
{'answer': 'LiquiBase is an interesting open source library for handling database refactorings (upgrades).  I have not used it, but will definitely give it a try on my next project where I need to upgrade a db schema.', 'questionId': '64148', 'answerId': '64647'}
{'answer': 'We hand code SQL update scripts and we tear down the schema and rebuild it applying the update scripts as part of our continuous build process. If any hibernate mappings do not match the schema, the build will fail.', 'questionId': '64148', 'answerId': '162933'}
{'answer': 'DbMaintain can also help here.', 'questionId': '64148', 'answerId': '5132384'}
{'answer': 'You can check this feature comparison of some database schema upgrade tools. A comparison of the number of questions in SOW of some of those tools: mybatis (1049 questions tagged) Liquibase (663 questions tagged) Flyway (400 questions tagged) DBDeploy (24 questions tagged).', 'questionId': '64148', 'answerId': '28055590'}
{'answer': 'So you have input like and you need to detect that the first and third lines are identical?', 'questionId': '64209', 'answerId': '64236'}
{'answer': "If you want to find out if two files contain the same set of lines, but in a different order, you can use a regular hash function on each line individually, then combine them with a function where ordering doesn't matter, like addition.", 'questionId': '64209', 'answerId': '64262'}
{'answer': "If the lines are fairly long, you could just keep a list of the hashes of each line -- sort those and compare with previous outputs. If you don't need a 100% fool-proof solution, you could store the hash of each line in a Bloom filter (look it up on Wikipedia) and compare the Bloom filters at the end of processing.  This can give you false positives (i.e. you think you have the same output but it isn't really the same) but you can tweak the error rate by adjusting the size of the Bloom filter...", 'questionId': '64209', 'answerId': '64265'}
{'answer': "If you add up the ASCII values of each character, you'd get the same result regardless of order. (This may be a bit too simplified, but perhaps it sparks an idea for you. See Programming Pearls, section 2.8, for an interesting back story.)", 'questionId': '64209', 'answerId': '64285'}
{'answer': "The easiest way would seem to be to hash each line on the way in, storing the hash and the original data, and then compare each new hash with your collection of existing hashes. If you get a positive, you could compare the actual data, to make sure it's not a false positive - though this would be extremely rare, you could go with a quicker hash algorithm, like MD5 or CRC (instead of something like SHA, which is slower but less likely to collide), just so it's quick, and then compare the actual data when you get a hit.", 'questionId': '64209', 'answerId': '64446'}
{'answer': "Any of the hash-based methods may produce bad results because more than one string can produce the same hash.  (It's not likely, but it's possible.)  This is particularly true of the suggestion to add the hashes, since you would essentially be taking a particularly bad hash of the hash values. A hash method should only be attempted if it's not critical that you miss a change or spot a change where none exists. The most accurate way would be to keep a Map using the line strings as key and storing the count of each as the value.  (If each string can only appear once, you don't need the count.)  Compute this for the expected set of lines.  Duplicate this collection to examine the incoming lines, reducing the count for each line as you see it. If you encounter a line with a zero count (or no map entry at all), you've seen a line you didn't expect. If you end this with non-zero entries remaining in the Map, you didn't see something you expected.", 'questionId': '64209', 'answerId': '66238'}
{'answer': 'Well the problem specification is a bit limited. As I understand it you wish to see if several strings contain the same elements regardless of order. For example: are the same. The way to do this is to create a set of the values then compare the sets. To create a set do: Then just compare the contents of the sets by running through one of the sets and comparing it w/others. The execution time will be O(N) instead of O(NlogN) for the sorting example.', 'questionId': '64209', 'answerId': '67573'}
{'answer': ' Apache Commons Log4j Google collections', 'questionId': '64213', 'answerId': '64229'}
{'answer': 'The Google Collections API is pretty handy if you use lots of, well, Collections...', 'questionId': '64213', 'answerId': '64231'}
{'answer': 'It might be worth saying that the first thing to do is get to know the libraries in the newer versions of Java. A lot of ideas have worked their way back into java - java.util.concurrent, java.nio, and javax.xml', 'questionId': '64213', 'answerId': '64294'}
{'answer': "Apache's Jakarta Commons.", 'questionId': '64213', 'answerId': '64295'}
{'answer': 'The Spring framework is surprisingly general purpose. I started by just using it as a configuration management tool, but then realized how helpful dependency injection is when doing test-driven development. Then I slowly discovered many useful modules hidden in the corners of Spring.', 'questionId': '64213', 'answerId': '64318'}
{'answer': "JXL for Excel workbook creation/edition. I work in a bank and the multipurpose report tool for diary work is Excel. Whatever appliction we do must import/export from/to Excel. The only fail it's that it has memory problems with large workbooks and formating it's a little obscure", 'questionId': '64213', 'answerId': '64837'}
{'answer': 'Functional Java offers first-class function values, immutable lists/arrays, lazy/infinite streams, tuple types, either types, optional values (type-safe alternative to null). Works well in conjunction with Google Collections or the java.util collections. It also provides handy concurrency abstractions like parallel strategies, parallel list/array functors, actor concurrency, and composable light-weight processes.', 'questionId': '64213', 'answerId': '66003'}
{'answer': 'Take a look at jmate project. It contains really helpful methods for strings, collections and IO operations (for now).  Look some examples here.', 'questionId': '64213', 'answerId': '66427'}
{'answer': 'lambdaj is a thread safe library of static methods that provides an internal DSL to manipulate collections in a pseudo-functional and statically typed way without explicitly iterating on them. It eliminates the burden to write (often poorly readable) loops while iterating over collections.', 'questionId': '64213', 'answerId': '912941'}
{'answer': 'Here is a good start. http://java-sources.org/', 'questionId': '64213', 'answerId': '913028'}
{'answer': 'Google Collections migrated to great Guava Libraries . It contains some common utilities, string matcher, splitter, joiner, IO utils etc.', 'questionId': '64213', 'answerId': '3707905'}
{'answer': 'Lately I was trying to find answer to this question. I made some data analysis for this, you can find results here and here.', 'questionId': '64213', 'answerId': '23703968'}
{'answer': 'there is the excellent open source 3d engine called jMonkey (http://www.jmonkeyengine.com) which is being used for a few commercial projects as well as hobby developers... there is also at a lower level the lwjgl library which jmonkeyengine is built on which is a set of apis to wrap opengl as well as provide other game specific libs...', 'questionId': '64392', 'answerId': '64523'}
{'answer': "I haven't directly done any game programming but some scene-demo coding and have found that JOGL is really a quite nice framework to work with. It's Java OpenGL so it has a rich 3D functionality and i do believe there are some open source graphic engines done for it aswell.", 'questionId': '64392', 'answerId': '65366'}
{'answer': 'GTGE (www.goldenstudios.or.id) is an excellent 2D Java Game Library, with tutorials and an extensive API.  It has gone open-source in its latest version, and the source can be downloaded, browsed, etc. at gtge.googlecode.com.', 'questionId': '64392', 'answerId': '66587'}
{'answer': "Despite the odd name ( pretty sure he's talking about the soft drink...), this site has loads of resources and examples games both 2D and 3D. Coke and Code", 'questionId': '64392', 'answerId': '87614'}
{'answer': 'http://www.javagaming.org/ is a good source for up-to-date information. Another framework not mentioned yet is Xith3D', 'questionId': '64392', 'answerId': '219555'}
{'answer': 'Also check Pulp core - deals with the most common problems facing Java gaming.', 'questionId': '64392', 'answerId': '816187'}
{'answer': 'As an update, a couple of the JMonkeyEngine guys have forked that project to create Ardor3d, a new version of which was recently released, so its still under active development. Project Darkstar is also still actively developed. Indeed DarkMMO an opensource example Darkstar game is being currently refactored to use the latest version of both Darkstar and Ardor3d.', 'questionId': '64392', 'answerId': '987931'}
{'answer': "I've made a list of a bunch of tutorials that should be of help", 'questionId': '64392', 'answerId': '5312711'}
{'answer': "As mentioned by all others in this topic, there are plenty of excellent libraries/engines available for building games in Java. Game programming in Java is definitely feasible. Keep in mind though that, as with any other language, getting real-time performance will always take some effort. I wrote a small article about my experiences with using Java for our 3D breakout game 'Caromble!'. It is mainly about the steps we had to take to get our game running smoothly. http://www.caromble.com/2013/05/java-game-programming/", 'questionId': '64392', 'answerId': '16522062'}
{'answer': "I like to code games a bit in my free time. I use a library called slick2d which makes programming the back-end a lot easier. For example, you can copy/paste the example 'main' class file from the Slick2d Wiki and you have your game loop as well as the Update() and Render() methods all ready to go. Slick 2d is based on LWGJL and uses it to load images and do other cool things with OpenGL. There is also a bunch of helpful topics at: http://www.java-gaming.org/", 'questionId': '64392', 'answerId': '17245929'}
{'answer': 'IMHO you can disable every hint or error marker in IDEA. Please tell us the version of IDEA that you use.', 'questionId': '64408', 'answerId': '65365'}
{'answer': 'I reported this as an issue to JetBrains and according to their issue report this is fixed in "Diana 8858". AFICT that means this will be fixed in IDEA 8.0.', 'questionId': '64408', 'answerId': '171947'}
{'answer': 'Write webservice in Java and access it in .net', 'questionId': '64454', 'answerId': '64473'}
{'answer': "Using a standard type of web service (e.g. SOAP or XML-RPC) is best because not only is it easy to produce/consume, it's easy in other languages as well.", 'questionId': '64454', 'answerId': '64485'}
{'answer': "I recommend the web service route. It offers a standard interface that can be consumed by other client platforms in the future. .NET clients interact with Java web services pretty well, though there are some gotchas. The best two technologies available for you for the .NET client are Microsoft Web Service Enhancements (WSE) and Windows Communication Foundation (WCF). WSE is an older technology that is no longer being updated by Microsoft, but still works great in Visual Studio 2005 and older. I find WSE to be a bit easier to get started with in terms of how you interface with basic services, but WCF has much more support for WS-* protocols (security, trust, etc.). If your needs are basic and you're still using Visual Studio 2005 (.NET framework 2 or older), then go with WSE. If you like the cutting edge, or you anticipate more advanced security needs (doesn't sound like you will), then go with WCF. Please note that WSE will not work easily in Visual Studio 2008 and newer, and WCF will not work in Visual Studio 2005 and older. Going the web service route will mean that you will design to an interface that can be reused and will result in a more loosely coupled system when you're done than most of the other routes. The downside is primarily performance: xml serialization will be slower than binary over the wire, and web services do not handle large amounts of data well.", 'questionId': '64454', 'answerId': '64535'}
{'answer': 'The Hotspot JIT can now produce code faster than C++.  The reason is run-time empirical optimization. For example, it can see that a certain loop takes the "false" branch 99% of the time and reorder the machine code instructions accordingly. There\'s lots of articles about this.  If you want all the details, read Sun\'s excellent whitepaper.  For more informal info, try this one.', 'questionId': '64582', 'answerId': '64622'}
{'answer': "I'd be interested in a comparison between Hotspot JIT and profile-guided optimization optimized C++. The problem I see with the Hotspot JIT (and any runtime-profile-optimized JIT compiler) is that statistics must be kept and code modified.  While there are isolated cases this will result in faster-running code, I doubt that profile-optimized JIT compilers will run faster than well optimized C or C++ code in most circumstances.  (Of course I could be wrong.) Anyway, usually you're going to be at the mercy of the  larger project, using the same language it is written in.  Or you'll be at the mercy of the knowledge base of your co-workers.  Or you'll be at the mercy of the platform you are targetting (is a JVM available on the architecture you're targetting?).  In the rare case you have complete freedom and you're familiar with both languages, do some comparisons with the tools you have at your disposal.  That is really the only way to determine what's best.", 'questionId': '64582', 'answerId': '64714'}
{'answer': 'This is not strictly about C++ vs Java performance but nonetheless interesting in that regard: A paper about the performance of programs running in a garbage collected environment.', 'questionId': '64582', 'answerId': '64734'}
{'answer': 'The only possible answer is: make a prototype and measure for yourself. If my experience is of any interest, Java and C# were always much slower than C++ for the kind of work I was doing - I believe mostly because of the high memory consumption. Of course, you can come to a completely different conclusion.', 'questionId': '64582', 'answerId': '64791'}
{'answer': 'If excessive garbage collection is a concern, you can always reuse unused high-churn objects. Create a factory that keeps a queue of SoftReferences to recycled objects, using those before creating new objects.  Then in code that uses these objects, explicitly return these objects to the factory for recycling.', 'questionId': '64582', 'answerId': '65952'}
{'answer': "In the grand scheme of things, you're debating maybe a 5% performance difference where you'd get several orders of magnitude increase by moving to CUDA or dedicated hardware.", 'questionId': '64582', 'answerId': '1149400'}
{'answer': "Probably C++, although I believe you'll hardly notice the difference besides a slow startup time. Java however makes development faster and maintenance easier.", 'questionId': '64582', 'answerId': '6347791'}
{'answer': 'What is your measure of "requests/sec"?  In other words, what happens for the 31st request?  What resource is being blocked?  If it is the front-end/servlet/web portion, can you run em.persist() in another thread and return immediately? Also, are you creating transactions each time?  Are you creating EntityManagerFactory objects with each request?', 'questionId': '64781', 'answerId': '65828'}
{'answer': "You should decouple from the JPA interface and use the bare TopLink API. You can probably chuck the objects you're persisting into a UnitOfWork and commit the UnitOfWork on your schedule (sync or async). Note that one of the costs of em.persist() is the implicit clone that happens of the whole object graph. TopLink will work rather better if you uow.registerObject() your two user objects yourself, saving itself the identity tests it has to otherwise do. So you'll end up with: This is very old school TopLink btw ;) Note that the batch will help a lot, because batch writing and more especially batch writing with parameter binding will kick in which for this simple example will probably have a very large impact on your performance. Other things to look for: your sequencing size. A lot of the time spent writing objects in TopLink is actually spent reading sequencing information from the database, especially with the small defaults (I would probably have several hundred or even more as my sequence size).", 'questionId': '64781', 'answerId': '66373'}
{'answer': 'It has been a while, but I seem to remember having trouble with the slight differences in how default namespaces were handled between .Net and Java web services. Double check the generated c# proxy class and any namespaces declared within (especially the defaults xmlns=""), against what the Java service is expecting.  There will be probably be very subtle differences which you will have to recreate. If this is the case then you will to provide more namespace declarations in the c# attributes.', 'questionId': '64833', 'answerId': '64913'}
{'answer': "From your question, it looks like you had the client working at one point, and then the service was changed to return an array. Make sure you re-generate the proxy so the returned SOAP message is deserialized on the client. It wasn't clear you had done this - just making sure.", 'questionId': '64833', 'answerId': '66296'}
{'answer': "Thanks to Xian, I have a solution. The wsdl for the service included a line The soap that the client sent to the server had the following attribute on all data elements: But the xml payload of the response (from the service back to the client) did not have this namespace included.  By tinkering with the HTTP response (which I obtained with WireShark), I observed that the .NET proxy class correctly picked up the MyResponse values if I forced the xmlns attribute on every returned data element. Short of changing the service, which I don't control, the workaround is to edit the VS generated proxy class (eg Reference.cs) and look for lines like this: and comment out the XmlType attribute line.  This will tell the CLR to look for response elements in the default namespace rather than the one specied in the wsdl.  You have to redo this whenever you update the reference, but at least it works.", 'questionId': '64833', 'answerId': '66834'}
{'answer': 'Assuming the characters are present in a text field: (note that this will only work on a text field with no more than 5000 characters, for larger text fields increase the number in the query).', 'questionId': '64875', 'answerId': '64967'}
{'answer': "That's just a wild guess, but could it be, that a thread locks itself by trying to acquire a lock twice? Probably it would help if you could post some code.", 'questionId': '64989', 'answerId': '65462'}
{'answer': 'Yes normally each monitor which is locked must have an owner Thread. Maybe your stack dump was not complete (too long) or maybe the dumping was not consistent. I could imagine that it is not stopping the world, so a locked monitor is dumped but the thread who owns the lock releases it before beeing dumped (this is just an guess). Can you some where upload the dump as a text file for easier searching, and tell us which monitor you are looking at.', 'questionId': '64989', 'answerId': '75639'}
{'answer': "Does your code by any change use any JNI? (i.e. are you running any native code launched from Java?). We've seen a similar behavior, but JDK 1.6.0_05. App appears to deadlock, but Jstack shows threads waiting for a lock that no other threads are holding onto. We have some JNI code, so it's possible we're corrupting something. We haven't found a solution for this and the issue is only reproducible on 1 machine.", 'questionId': '64989', 'answerId': '79588'}
{'answer': "Do those waiting threads wait for ever, or do they eventually proceed? If the latter, it may be that the lock is held by the garbage collector. You can add the arguments -verbose:gc with -XX:+PrintGCDetails on your java command line to be told when GCs are occurring. If gc activity coincides with your slowdowns it may indicate that this is the problem. Here's some information on garbage collection.", 'questionId': '64989', 'answerId': '79671'}
{'answer': "I had a similar problem today, and it also involved accesses of static resources.   The short version is that a class made GUI changes in a static block, and outside of the AWT-EventQueue thread, which were blocked by the AWT TreeLock, then the EventQueue made a reference to the blocked class, which forced it to wait on the class loader's monitor for that class. The key observation here is that the lock for the class loader did not show up as locked in the thread dump. The full answer can be found on this thread.", 'questionId': '64989', 'answerId': '3728840'}
{'answer': "Have you tried upgrading to Java 1.6? A bug could be your issue if you're only on 1.5.", 'questionId': '64989', 'answerId': '3728850'}
{'answer': 'FWIW: I have never had good luck with GCJ, I have had a lot of problems using it and have had some obscure issues pop up that took forever to diagnose to GCJ rather than me (I am always very very reluctant to blame things on external libraries). I will openly admit this happened several years ago and I have never wanted to go near GCJ again. To give that more substance this was while I was in school and was working on a mostly trivial program so on an "enterprise level" I have had a healthy fear of GCJ.', 'questionId': '65010', 'answerId': '65065'}
{'answer': "I don't think that a large application like yours will compile to machine code. Remember that java is not only java syntax (might compile to machine code) but also a virtual machine which is more like an application / process environment. I would suggest making an uberjar or like that instead.", 'questionId': '65010', 'answerId': '65069'}
{'answer': "I don't know about GCJ, but my company uses Excelsior JET with success.  We haven't done it with a webapp (yet) but it should be able to handle anything that the Sun JRE can.  In fact JET is a Sun-certified Java implementation.", 'questionId': '65010', 'answerId': '65109'}
{'answer': "Having one executable has a few downsides: You can't patch it as easy (i.e. replace one class file) I don't think it can be called a webapp -- I assume it won't run in Tomcat. It is non-standard so that increases your maintenance costs. It is non-standard so tool support is reduced. If he wants something simple maybe a war or ear would be better.  I can't see any benefit to doing this -- I would think this might be beneficial it it was a standalone application that you distributed so that people can just double-click on it.", 'questionId': '65010', 'answerId': '65733'}
{'answer': 'Perhaps your boss just needs a demo as to how easy it is to distribute and deploy a war file for your customers on their own app servers.  Every file is "binary", so you might be too-literal in thinking he means an executable on the command-line.', 'questionId': '65010', 'answerId': '72914'}
{'answer': "I've only used GCJ very briefly, and quickly moved to Sun's JDK. The main problems I saw was that GCJ seems to always lag a little behind the latest version of Sun's JDK and that there were weird mysterious bugs caused by subtle differences with Sun's JDK. In version 1.5 (which is supposd to be compatible with Sun's v1.5), I had problems compiling using generics, and finally gave up and moved to Sun's JDK. I must say, any difference in performance was negligible (for my purposes, YMMV) and really the solution for installation issues is to create an installer for your app. Reverse engineering a binary isn't really all that harder than reverse engineering bytecode. Use an obfuscator if it is that important. Overall, I think the compatibility problems involved in using GCJ greatly outweighs any gains (which I think questionable at best) you might possible derive from it. Try compiling parts of your app in gcj and see how it goes though. If it works out fine, otherwise you get something solid to pitch to your boss.", 'questionId': '65010', 'answerId': '3734522'}
{'answer': "I'll play devils advocate a bit, though I know little about GCJ.  Compiling to native code may give your application a performance boost and use less memory, so if it can be made to work, there are advantages for the business in terms of competition. Being able to support an application better is also a good for business.  So perhaps it is worth investigating baring in mind that nothing can lose a customer faster than an application that doesn't work. You need proper project time to try this out and a customer, that knows what they are getting into, that is willing to give it whirl (harder to find).", 'questionId': '65010', 'answerId': '3734683'}
{'answer': 'Excelsior JET is the definitive answer', 'questionId': '65010', 'answerId': '3740493'}
{'answer': "Yes, finally will be called. The only times finally won't be called are: If you call System.exit() If the JVM crashes first If there is an infinite loop (or some other non-interuptable, non-terminating statement) in the try block If the power turns off", 'questionId': '65035', 'answerId': '65049'}
{'answer': 'finally is always executed unless there is abnormal program termination (like calling System.exit(0)..). so, your sysout will get printed', 'questionId': '65035', 'answerId': '65056'}
{'answer': "Yes it will get called. That's the whole point of having a finally keyword. If jumping out of the try/catch block could just skip the finally block it was the same as putting the System.out.println outside the try/catch.", 'questionId': '65035', 'answerId': '65059'}
{'answer': 'Proof code: Output:', 'questionId': '65035', 'answerId': '65185'}
{'answer': "That's actually true in any language...finally will always execute before a return statement, no matter where that return is in the method body. If that wasn't the case, the finally block wouldn't have much meaning.", 'questionId': '65035', 'answerId': '65219'}
{'answer': 'The finally block is always executed unless there is abnormal program termination, either resulting from a JVM crash or from a call to System.exit(0). On top of that, any value returned from within the finally block will override the value returned prior to execution of the finally block, so be careful of checking all exit points when using try finally.', 'questionId': '65035', 'answerId': '65282'}
{'answer': "Also, although it's bad practice, if there is a return statement within the finally block, it will trump any other return from the regular block. That is, the following block would return false: Same thing with throwing exceptions from the finally block.", 'questionId': '65035', 'answerId': '65362'}
{'answer': 'Also a return in finally will throw away any exception.  http://jamesjava.blogspot.com/2006/03/dont-return-in-finally-clause.html', 'questionId': '65035', 'answerId': '65943'}
{'answer': "A logical way to think about this is: Code placed in a finally block must be executed whatever occurs within the try block So if code in the try block tries to return a value or throw an exception the item is placed 'on the shelf' till the finally block can execute Because code in the finally block has (by definition) a high priority it can return or throw whatever it likes. In which case anything left 'on the shelf' is discarded. The only exception to this is if the VM shuts down completely during the try block e.g. by 'System.exit'", 'questionId': '65035', 'answerId': '65949'}
{'answer': 'In addition to the point about return in finally replacing a return in the try block, the same is true of an exception.  A finally block that throws an exception will replace a return or exception thrown from within the try block.', 'questionId': '65035', 'answerId': '158141'}
{'answer': "I tried the above example with slight modification- The above code outputs: finally trumps return.   2 This is because when return i; is executed i has a value 2. After this the finally block is executed where 12 is assigned to i and then System.out out is executed. After executing the finally block the try block returns 2, rather than returning 12, because this return statement is not executed again. If you will debug this code in Eclipse then you'll get a feeling that after executing System.out of finally block the return statement of try block is executed again. But this is not the case. It simply returns the value 2.", 'questionId': '65035', 'answerId': '296053'}
{'answer': "Finally is always run that's the whole point, just because it appears in the code after the return doesn't mean that that's how it's implemented. The Java runtime has the responsibility to run this code when exiting the try block. For example if you have the following: The runtime will generate something like this: If an uncaught exception is thrown the finally block will run and the exception will continue propagating.", 'questionId': '65035', 'answerId': '2824754'}
{'answer': 'Because a finally block will always be called unless you call System.exit() (or the thread crashes).', 'questionId': '65035', 'answerId': '2824758'}
{'answer': 'That is the whole idea of a finally block. It lets you make sure you do cleanups that might otherwise be skipped because you return, among other things, of course. Finally gets called regardless of what happens in the try block (unless you call System.exit(int) or the Java Virtual Machine kicks out for some other reason).', 'questionId': '65035', 'answerId': '2824759'}
{'answer': "Because the final is always be called in whatever cases you have. You don't have exception, it is still called, catch exception, it is still called", 'questionId': '65035', 'answerId': '2824762'}
{'answer': "In addition to the other responses, it is important to point out that 'finally' has the right to override any exception/returned value by the try..catch block. For example, the following code returns 12: Similarly, the following method does not throw an exception: While the following method does throw it:", 'questionId': '65035', 'answerId': '2824998'}
{'answer': "Consider this in a normal course of execution (i.e without any Exception being thrown): if method is not 'void' then it always explicitly returns something, yet, finally always gets executed", 'questionId': '65035', 'answerId': '2826472'}
{'answer': 'This is because you assigned the value of i as 12, but did not return the value of i to the function. The correct code is as follows:', 'questionId': '65035', 'answerId': '2902505'}
{'answer': 'Here\'s the official words from the Java Language Specification. 14.20.2. Execution of try-finally and try-catch-finally A try statement with a finally block is executed by first executing the try block. Then there is a choice: If execution of the try block completes normally, [...] If execution of the try block completes abruptly because of a throw of a value V, [...] If execution of the try block completes abruptly for any other reason R, then the finally block is executed. Then there is a choice: If the finally block completes normally, then the try statement completes abruptly for reason R.  If the finally block completes abruptly for reason S, then the try statement completes abruptly for reason S (and reason R is discarded). The specification for return actually makes this explicit: JLS 14.17 The return Statement A return statement with no Expression attempts to transfer control to the invoker of the method or constructor that contains it.  A return statement with an Expression attempts to transfer control to the invoker of the method that contains it; the value of the Expression becomes the value of the method invocation. The preceding descriptions say "attempts to transfer control" rather than just "transfers control" because if there are any try statements within the method or constructor whose try blocks contain the return statement, then any finally clauses of those try statements will be executed, in order, innermost to outermost, before control is transferred to the invoker of the method or constructor. Abrupt completion of a finally clause can disrupt the transfer of control initiated by a return statement.', 'questionId': '65035', 'answerId': '2902578'}
{'answer': 'If an exception is thrown, finally runs. If an exception is not thrown, finally runs. If the exception is caught, finally runs. If the exception is not caught, finally runs. Only time it does not run is when JVM exits.', 'questionId': '65035', 'answerId': '7756997'}
{'answer': 'Try this code, you will understand the code in finally block is get executed after return statement.', 'questionId': '65035', 'answerId': '10188271'}
{'answer': 'No, not always one exception case is// System.exit(0); before the finally block prevents finally to be  executed. }', 'questionId': '65035', 'answerId': '17634958'}
{'answer': 'Yes, it will. No matter what happens in your try or catch block unless otherwise System.exit() called or JVM crashed. if there is any return statement in the block(s),finally will be executed prior to that return statement.', 'questionId': '65035', 'answerId': '18272854'}
{'answer': 'finally block execute always, no matter exception object occur or not. there are two possibility to stop finally block : 1. return statement. 2. System.exit(0);', 'questionId': '65035', 'answerId': '20347145'}
{'answer': "Here's an elaboration of Kevin's answer. It's important to know that the expression to be returned is evaluated before finally, even if it is returned after. Output:", 'questionId': '65035', 'answerId': '20363941'}
{'answer': 'Yes It will. Only case it will not is JVM exits or crashes', 'questionId': '65035', 'answerId': '21125379'}
{'answer': 'Finally block always execute whether exception  handle or not .if any exception occurred before try block then finally block will not execute.', 'questionId': '65035', 'answerId': '21824431'}
{'answer': 'Yes, in a try/catch/finally block, the finally will always be called.  However, in your example: Your finally might not be executed because of the return statements. Now, depending on the circumstances of the code, just one return statement is suffice and pass down a variable. I do realize this post is 5 years old, but I hope this will help someone out there! Cheers!', 'questionId': '65035', 'answerId': '25050139'}
{'answer': 'Concisely, in the official Java Documentation (Click here), it is written that -  If the JVM exits while the try or catch code is being executed, then   the finally block may not execute. Likewise, if the thread executing   the try or catch code is interrupted or killed, the finally block may   not execute even though the application as a whole continues.', 'questionId': '65035', 'answerId': '26349456'}
{'answer': 'Yes, finally block is always execute. Most of developer use this block the closing the database connection, resultset object, statement object and also uses into the java hibernate to rollback the transaction.', 'questionId': '65035', 'answerId': '27249545'}
{'answer': 'finally will execute and that is for sure. finally will not execute in below cases:  case 1 : When you are executing System.exit(). case 2 : When your JVM / Thread crashes. case 3 :  When your execution is stopped in between manually.', 'questionId': '65035', 'answerId': '27540550'}
{'answer': 'I was very confused with all the answers provided on different forums and decided to finally code and see. The ouput is : finally will be executed even if there is return in try and catch block. Output try Print me FINALLY If return is replaced by System.exit(0) in try and catch block in above code and an exception occurs before it,for any reason.', 'questionId': '65035', 'answerId': '30213111'}
{'answer': "NOT ALWAYS The Java Language specification describes how try-catch-finally and try-catch blocks work at 14.20.2 In no place it specifies that the finally block is always executed. But for all cases in which the try-catch-finally and try-finally blocks complete it does specify that before completion finally must be executed. In other words. If NEXT is the code to be executed after the try-catch-finally or try-finally block and FIN is the code in the finally block, the JLS guarantees that FIN will always be executed before NEXT. Why doesn't the JLS guarantee that the finally block is always executed after the try block? Because it is impossible. It is unlikely but possible that the JVM will be aborted (kill, crash, power off) just after completing the try block but before execution of the finally block. There is nothing the JLS can do to avoid this. Thus, any software which for their proper behaviour depends on finally blocks always being executed after their try blocks complete are bugged. Returns in the try block are irrelevant to this issue. If execution reaches code after the try-catch-finally it is guaranteed that the finally block will have been executed before, with or without returns inside the try block.", 'questionId': '65035', 'answerId': '34240980'}
{'answer': 'A logical way to think about this is: Code placed in a finally block must be executed whatever occurs within the try block. So if code in the try block tries to return a value or throw an exception the item is placed on the shelf till the finally block can execute Because code in the finally block has (by definition) a high priority it can return or throw whatever it likes. In which case anything left on the shelf is discarded. The only exception to this is if the VM shuts down completely during the try block e.g. by System.exit Never throw any exception from finally block This is fine, as long as cleanUp() can never throw any exception. In the above example, if someMethod() throws an exception, and in the finally block also, cleanUp() throws an exception, that second exception will come out of method and the original first exception (correct reason) will be lost forever. If the code that you call in a finally block can possibly throw an exception, make sure that you either handle it, or log it. Never let it come out of the finally block. Actually exiting the program (either by calling System.exit() or by causing a fatal error that causes the process to abort: sometimes referred to informally as a "hotspot" or "Dr Watson" in Windows) will prevent your finally block from being executed! There\'s nothing to stop us nesting try/catch/finally blocks (for example, putting a try/finally block inside a try/catch block, or vice versa), and it\'s not such an uncommon thing to do.', 'questionId': '65035', 'answerId': '34408847'}
{'answer': 'I tried this, It is single threaded. Main thread will be on wait state forever, hence finally will never be called, hence there will not be o/p:"after wait()"', 'questionId': '65035', 'answerId': '36116269'}
{'answer': 'finally can also be exited prematurely if an exception is thrown inside a nested finally block. The compiler will warn you that the finally block does not complete normally or give an error that you have unreachable code. The error for unreachable code will be shown only if the throw is not behind a conditional statement or inside a loop.', 'questionId': '65035', 'answerId': '36926373'}
{'answer': 'Same with the following code: f will return 2!', 'questionId': '65035', 'answerId': '38187529'}
{'answer': 'INPUT: OUTPUT:', 'questionId': '65035', 'answerId': '38930134'}
{'answer': 'Yes it will always called but in one situation it not call when you use System.exit()', 'questionId': '65035', 'answerId': '39462828'}
{'answer': " Finally  Block always get executed. Unless and until System.exit() statement exists there (first statement in finally block). If system.exit() is first statement then finally block won't get executed and control come out of the finally block. Whenever System.exit() statement gets in finally block till that statement finally block executed and when System.exit() appears then control force fully come out of the finally block.", 'questionId': '65035', 'answerId': '44085757'}
{'answer': "If you don't handle exception, before terminating the program, JVM executes finally block. It will not executed only if normal execution of program will fail mean's termination of program due to these following reasons.. By causing a fatal error that causes the process to abort. Termination of program due to memory corrupt. By calling System.exit() If program goes into infinity loop.", 'questionId': '65035', 'answerId': '44436111'}
{'answer': 'I only know the other way. Dbo4 is developed in java and the c# version is generated from the java sources automaticaly.', 'questionId': '65058', 'answerId': '65080'}
{'answer': 'There is no good way.  My recommendation is to start over in Java, or like you said use Mono.', 'questionId': '65058', 'answerId': '65084'}
{'answer': "Although I think the first mistake was choosing an implementation language without ensuring a suitable deployment environment, there's nothing that can be done about that now. I would think the Mono way would be better. Having to rewrite code would only increase the cost of the project, especially if you already have a good amount of code written in C#. I, personally, try to avoid rewriting code whenever possible.", 'questionId': '65058', 'answerId': '65090'}
{'answer': "I'd suggest building for Mono. You'll run into some gray area, but overall it's great. However, if you want to build for Java, you might check out Grasshopper. It's a commercial product, but it claims to be able to translate CIL (the output of the C# compiler) to Java bytecodes.", 'questionId': '65058', 'answerId': '65094'}
{'answer': 'Possible solutions aside, direct translations of programs written in one language to a different language is generally considered a Bad Idea -- especially if this translation is done in some automated fashion.  Even when done by a "real" programmer, translating an application line by line often results in a less than desirable end result because each language has its own idioms, strengths and weaknesses that require things be done in a slightly different way. As painful as it may be, it\'s probably in your best interest and those who have to maintain this application to rewrite it in Java if that\'s what your employer requires.', 'questionId': '65058', 'answerId': '65139'}
{'answer': 'Java and C# are pretty close in syntax and semantics. The real problem is the little differences. They will bite you when you dont expect it.', 'questionId': '65058', 'answerId': '65154'}
{'answer': "Grasshopper is really the best solution at this time, if the licensing works for you (the free version has some significant limitations).  Its completely based on the Mono class libs (which are actually pretty good), but runs on top of standard Java VMs.  Thats good as the Java VMs are generally a bit faster and more stable than Mono, in my experience.  It does have more weaknesses than Mono when it comes to Forms/Graphics related APIs, as much of this hasn't been ported to Java from the Mono VM, however. In the cases were it works, it can be wonderful, though.  The performance is sometimes even better than when running the same code on MS's VM on Windows.  :)", 'questionId': '65058', 'answerId': '65315'}
{'answer': 'I would say from a maintance stand point rewrite the code. It\'s going to bring the initial cost of the projet up but would be less labor intensive later for whoever is looking at the code. Like previous posters stated anything automated like this can\'t do as good as a job as a "real" programmer and doing line by line converting won\'t help much either. You don\'t want to produce code later on that works but is hell to maintain.', 'questionId': '65058', 'answerId': '72998'}
{'answer': 'Formally SysInternal\'s, now Microsoft\'s Process Explorer http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx "Find" menu item -> "Find Handle or DLL..."', 'questionId': '65128', 'answerId': '65204'}
{'answer': 'SysInternals may not help with Java class IO.  Try getting a thread dump of the JVM (e.g., kill -3) while these logs are being written to.  You should be able to catch a thread red handed with java.io packages near the top of the stack trace.', 'questionId': '65128', 'answerId': '65280'}
{'answer': "Try placing a breakpoint in the File class' constructors and the mkdir and createNewFile methods.  Generally, code will use the File class to create its files or directories.  You should have the Java source code for these classes included with your JVM.", 'questionId': '65128', 'answerId': '65618'}
{'answer': 'Add -Dlog4j.debug to the command line and there will be extra info in standard output about how it is configured.', 'questionId': '65128', 'answerId': '65957'}
{'answer': "I'll cast a vote for jBPM.  We used it on a larg-ish ETL platform in-house and it seemed to work quite well.  I don't have anything to compare it to, however.", 'questionId': '65150', 'answerId': '65191'}
{'answer': "Here's an article that compares kBPM, OpenWFE, and Enhydra Shark that looks like it has some good, thorough info.", 'questionId': '65150', 'answerId': '65245'}
{'answer': 'It depends what kind of initial investment you want to make.  jBPM is the best in terms of features and flexibility, but OSWorkflow is a  more lightweight, easier to get up and running and has with a smaller learning curve.', 'questionId': '65150', 'answerId': '66675'}
{'answer': 'YAWL - Yet another workflow Language http://en.wikipedia.org/wiki/YAWL', 'questionId': '65150', 'answerId': '253770'}
{'answer': 'Drools Flow is the best workflow solution that I came across recently. It has a luxury to be better than other solutions, since it is built and designed recently, and based on lessons learned from other long existing, somewhat over engineered frameworks. Drools Flow comes as a community project along with an official Drools 5 release that besides Flow includes: Guvnor, Expert and Fusion. Unfortunately Drools Flow does not have an official Red Hat support contract yet, and that is a stopper for some big corporations to consider it. One might think the support is not there for political reasons due to the jBPM project living under same support roof.', 'questionId': '65150', 'answerId': '1869322'}
{'answer': 'JNI.  In fact, with JNI, crashing is the default mode of operation.  You have to work extra hard to get it not to crash.', 'questionId': '65200', 'answerId': '65237'}
{'answer': 'Depends on what you mean by crash. You can do an infinite recursion to make it run out of stack space, but that\'ll crash "gracefully".  You\'ll get an exception, but the JVM itself will be handling everything. You can also use JNI to call native code.  If you don\'t do it just right then you can make it crash hard.  Debugging those crashes is "fun" (trust me, I had to write a big C++ DLL that we call from a signed java applet). :)', 'questionId': '65200', 'answerId': '65289'}
{'answer': 'If you change that infinite for loop to a recursive call to the same function, then you would get a stack overflow exception:', 'questionId': '65200', 'answerId': '65290'}
{'answer': 'The closest thing to a single "answer" is System.exit() which terminates the JVM immediately without proper cleanup. But apart from that, native code and resource exhaustion are the most likely answers. Alternatively you can go looking on Sun\'s bug tracker for bugs in your version of the JVM, some of which allow for repeatable crash scenarios. We used to get semi-regular crashes when approaching the 4 Gb memory limit under the 32-bit versions (we generally use `64-bit`` now).', 'questionId': '65200', 'answerId': '65291'}
{'answer': "A perfect JVM implementation will never crash. To crash a JVM, aside from JNI, you need to find a bug in the VM itself.  An infinite loop just consumes CPU.  Infinitely allocating memory should just cause OutOfMemoryError's in a well built JVM.  This would probably cause problems for other threads, but a good JVM still should not crash. If you can find a bug in the source code of the VM, and for example cause a segmentation fault in the memory usage of the implementation of the VM, then you can actually crash it.", 'questionId': '65200', 'answerId': '65332'}
{'answer': "The book Java Virtual Machine by Jon Meyer has an example of a series of bytecode instructions that caused the JVM to core dump. I can't find my copy of this book. If anyone out there has one please look it up and post the answer.", 'questionId': '65200', 'answerId': '65610'}
{'answer': "I wouldn't call throwing an OutOfMemoryError or StackOverflowError a crash. These are just normal exceptions. To really crash a VM there are 3 ways: Use JNI and crash in the native code. If no security manager is installed you can use reflection to crash the VM. This is VM specific, but normally a VM stores a bunch of pointers to native resources in private fields (e.g. a pointer to the native thread object is stored in a long field in java.lang.Thread). Just change them via reflection and the VM will crash sooner or later. All VMs have bugs, so you just have to trigger one. For the last method I have a short example, which will crash a Sun Hotspot VM quiet nicely: This leads to a stack overflow in the GC so you will get no StackOverflowError but a real crash including a hs_err* file.", 'questionId': '65200', 'answerId': '74780'}
{'answer': 'If you define a crash as an process abort because of a unhandled situation (i.e. no Java Exception or Error), then this can not be done from within Java (unless you have permission to use the sun.misc.Unsafe class). This the whole point of managed code. Typical crashes in native code happen by de-referencing pointers to wrong memory areas (null address or missaligned). Another source could be illegal machine instructions (opcodes) or unhandled signals from library or kernel calls. Both can be triggered if the JVM or the system libraries have bugs. For example JITed (generated) code, native methods or system calls (graphics driver) can have problems leading to real crashes (it was quite common to get a crash when you used ZIP functions and they ran out of memory). In those cases the crash handler of the JVM kicks in and dumps the state. It could also generate a OS core file (Dr. Watson on Windows and core dump on *nix). On Linux/Unix you can easyly make a JVM crash by sending it a Signal to the running process. Note: you should not use SIGSEGV for this, since Hotspot catches this signal and re-throws it as a NullPointerException in most places. So it is better to send a SIGBUS for example.', 'questionId': '65200', 'answerId': '74867'}
{'answer': 'on winxpsp2 w/wmp10 jre6.0_7 Desktop.open(uriToAviOrMpgFile) This causes a spawned thread to throw an uncaught Throwable and crashes hotspot YMMV', 'questionId': '65200', 'answerId': '107442'}
{'answer': 'here is a detailed explanation on what causes JVM to core dump (i.e. crash):  http://kb.adobe.com/selfservice/viewContent.do?externalId=tn_17534', 'questionId': '65200', 'answerId': '152298'}
{'answer': "I'm doing it now, but not entirely sure how...  :-)  JVM (and my app) sometimes just completely disappear.  No errors thrown, nothing logged.  Goes from working to not running at all instantly with no warning.", 'questionId': '65200', 'answerId': '798997'}
{'answer': 'If you want to pretend you have run out of memory you can do I know a couple of way to cause the JVM dump an error file by calling native methods (ones which are built in), but its probably best you not know how to do this. ;)', 'questionId': '65200', 'answerId': '799757'}
{'answer': 'JNI is a large source of crashes. You can also crash using the JVMTI interface since that needs to be written in C/C++ as well.', 'questionId': '65200', 'answerId': '799781'}
{'answer': 'Broken hardware can crash any program. I once had an app crash reproducably on a specific machine while running fine on other machines with the exact same setup. Turns out that machine had faulty RAM.', 'questionId': '65200', 'answerId': '820021'}
{'answer': 'Use this: This class must be on the boot classpath because it is using trusted code,so run like this: java -Xbootclasspath/p:. Crash', 'questionId': '65200', 'answerId': '1378388'}
{'answer': 'This code will crash the JVM in nasty ways', 'questionId': '65200', 'answerId': '2849632'}
{'answer': 'If you want to crash JVM - use the following in Sun JDK 1.6_23 or below: This is due to a bug in Sun JDK - also found in OpenJDK. This is fixed from Oracle JDK 1.6_24 onwards.', 'questionId': '65200', 'answerId': '7291092'}
{'answer': 'I came here because I also ran into this question in The Passionate Programmer, by Chad Fowler. For those who don\'t have access to a copy, the question is framed as a kind of filter/test for candidates interviewing for a position requiring "really good Java programmers." Specifically, he asks: How would you write a program, in pure Java, that would cause the Java Virtual Machine to crash? I\'ve programmed in Java for over 15 years, and I found this question to be both puzzling and unfair. As others have pointed out, Java, as a managed language, is specifically designed not to crash. Of course there are always JVM bugs, but: After 15+ years of production-level JREs, it\'s rare. Any such bugs are likely to be patched in the next release, so how likely are you as a programmer to run into and recall the details of the current set of JRE show-stoppers? As others have mentioned, some native code via JNI is a sure way to crash a JRE. But the author specifically mentioned in pure Java, so that\'s out. Another option would be to feed the JRE bogus byte codes; it\'s easy enough to dump some garbage binary data to a .class file, and ask the JRE to run it: Does that count? I mean the JRE itself hasn\'t crashed; it properly detected the bogus code, reported it, and exited.  This leaves us with the most obvious kinds of solutions such as blowing the stack via recursion, running out of heap memory via object allocations, or simply throwing RuntimeException. But this just causes the JRE to exit with a StackOverflowError or similar exception, which, again is not really a crash. So what\'s left? I\'d really love to hear what the author really had in mind as a proper solution. Update: Chad Fowler responded here. PS: it\'s an otherwise great book. I picked it up for moral support while learning Ruby.', 'questionId': '65200', 'answerId': '11636338'}
{'answer': 'shortest possible way :)', 'questionId': '65200', 'answerId': '22905184'}
{'answer': 'Last time I tried this would do it: First part of generated log file:', 'questionId': '65200', 'answerId': '28650035'}
{'answer': "If a 'Crash' is anything that interrupts the jvm/program from normal termination, then an Un-handled exception could do this. So, it depends on what type of CRASH ?!", 'questionId': '65200', 'answerId': '35111507'}
{'answer': 'Not a crash, but closer to a crash than the accepted answer of using System.exit You can halt the JVM by calling Runtime.getRuntime().halt( status ) According to the docs :- "this method does not cause shutdown hooks to be started and does not run uninvoked finalizers if finalization-on-exit has been enabled".', 'questionId': '65200', 'answerId': '37839185'}
{'answer': "Shortest? Use Robot class to trigger CTRL+BREAK. I spotted this when I was trying to close my program without closing console (It had no 'exit' functionality).", 'questionId': '65200', 'answerId': '38031059'}
{'answer': 'This is what my code looks like. It seems to work fine. Are you using a service locator or just creating your service?', 'questionId': '65310', 'answerId': '65575'}
{'answer': "Just a guess, but it looks like that error message is reporting that you've left the service name blank.  I imagine the code that generates that error message looks like this:", 'questionId': '65310', 'answerId': '179414'}
{'answer': "I don't know what version of Axis you're using but I'm using Axis2 for both server and client and the Java2WSDL create a default endpoint for the service on localhost. If you create the client stub with WSDL2Java, the default constructor of the stub will then point to localhost. If the service is on other endpoint you must use the constructor with the endpoint as parameter... Maybe the problem is not that at all but as said on other answers, without the WSDL you're using as WSDL2Java input it's hard to say.", 'questionId': '65310', 'answerId': '200824'}
{'answer': "It is an exception used by Axis' control flow.  http://wiki.apache.org/ws/FrontPage/Axis/DealingWithCommonExceptions --> org.apache.axis.ConfigurationException: No service named XXX is available", 'questionId': '65310', 'answerId': '6496124'}
{'answer': 'According to the documentation linked to by @arnonym, this exception is somewhat misleading. In the first attempt to find the service a ConfigurationException is thrown and caught. It is logged at DEBUG level by the ConfigurationException class. Then another attempt is made using a different method to find the service that may then succeed. The workaround for this is to just change the log level on the ConfigurationException class to INFO in your log4j.properties:', 'questionId': '65310', 'answerId': '17981199'}
{'answer': 'You can have almost any character, including most Unicode characters!  The exact definition is in section 3.8 of the Java Language Specification. However see this question for whether or not you should do that.', 'questionId': '65475', 'answerId': '65490'}
{'answer': 'Every programming language has its own set of rules and conventions for the kinds of names that you\'re allowed to use, and the Java programming language is no different. The rules and conventions for naming your variables can be summarized as follows: Variable names are case-sensitive. A variable\'s name can be any legal identifier  an unlimited-length sequence of Unicode letters and digits, beginning with a letter, the dollar sign "$", or the underscore character "_". The convention, however, is to always begin your variable names with a letter, not "$" or "_". Additionally, the dollar sign character, by convention, is never used at all. You may find some situations where auto-generated names will contain the dollar sign, but your variable names should always avoid using it. A similar convention exists for the underscore character; while it\'s technically legal to begin your variable\'s name with "_", this practice is discouraged. White space is not permitted. Subsequent characters may be letters, digits, dollar signs, or underscore characters. Conventions (and common sense) apply to this rule as well. When choosing a name for your variables, use full words instead of cryptic abbreviations. Doing so will make your code easier to read and understand. In many cases it will also make your code self-documenting; fields named cadence, speed, and gear, for example, are much more intuitive than abbreviated versions, such as s, c, and g. Also keep in mind that the name you choose must not be a keyword or reserved word. If the name you choose consists of only one word, spell that word in all lowercase letters. If it consists of more than one word, capitalize the first letter of each subsequent word. The names gearRatio and currentGear are prime examples of this convention. If your variable stores a constant value, such as static final int NUM_GEARS = 6, the convention changes slightly, capitalizing every letter and separating subsequent words with the underscore character. By convention, the underscore character is never used elsewhere.  From the official Java Tutorial', 'questionId': '65475', 'answerId': '65531'}
{'answer': "I'd like to add to bosnic's answer that any valid currency character is legal for an identifier in Java.  this is a legal identifier, as is this, and  as well.  However, I can't figure out how to edit his or her answer, so I am forced to post this trivial addition.", 'questionId': '65475', 'answerId': '65955'}
{'answer': "Further to previous answers its worth noting that: Java allows any Unicode currency symbol in symbol names, so the following will all work: $var1   var2   var3 I believe the usage of currency symbols originates in C/C++, where variables added to your code by the compiler conventionally started with '$'. An obvious example in Java is the names of '.class' files for inner classes, which by convention have the format 'Outer$Inner.class' Many C# and C++ programmers adopt the convention of placing 'I' in front of interfaces (aka pure virtual classes in C++). This is not required, and hence not done, in Java because the implements keyword makes it very clear when something is an interface. Compare: class Employee : public IPayable //C++ with class Employee : IPayable //C# and  class Employee implements Payable //Java Many projects use the convention of placing an underscore in front of field names, so that they can readily be distinguished from local variables and parameters e.g. private double _salary; A tiny minority place the underscore after the field name e.g. private double salary_;", 'questionId': '65475', 'answerId': '66194'}
{'answer': 'As already stated by Jason Cohen, the Java Language Specification defines what a legal identifier is in section 3.8: "An identifier is an unlimited-length sequence of Java letters and Java digits, the first of which must be a Java letter. [...] A \'Java letter\' is a character for which the method Character.isJavaIdentifierStart(int) returns true. A \'Java letter-or-digit\' is a character for which the method Character.isJavaIdentifierPart(int) returns true." This hopefully answers your second question. Regarding your first question; I\'ve been taught both by teachers and (as far as I can remember) Java compilers that a Java class name should be an identifier that begins with a capital letter A-Z, but I can\'t find any reliable source on this. When trying it out with OpenJDK there are no warnings when beginning class names with lower-case letters or even a $-sign. When using a $-sign, you do have to escape it if you compile from a bash shell, however.', 'questionId': '65475', 'answerId': '11209443'}
{'answer': 'Class names should be nouns in UpperCamelCase, with the first letter of every word capitalised. Use whole words  avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML). The naming conventions can be read over here: http://www.oracle.com/technetwork/java/codeconventions-135099.html', 'questionId': '65475', 'answerId': '28011680'}
{'answer': 'Identifiers are used for class names, method names, and variable names. An identifiermay be any descriptive sequence of uppercase and lowercase letters, numbers, or theunderscore and dollar-sign characters. They must not begin with a number, lest they beconfused with a numeric literal. Again, Java is case-sensitive, so VALUE is a differentidentifier than Value. Some examples of valid identifiers are: AvgTemp ,count a4 ,$test ,this_is_ok Invalid variable names include: 2count, high-temp, Not/ok', 'questionId': '65475', 'answerId': '39371169'}
{'answer': ' What other rules govern Java class names (for instance, Java class names cannot begin with a number)? Java class names usually begin with a capital letter. Java class names cannot begin with a number. if there are multiple words in the class name like "MyClassName" each word should begin with a capital letter. eg- "MyClassName".This naming convention is based on CamelCase Type.', 'questionId': '65475', 'answerId': '42319629'}
{'answer': 'One shouldn\'t be faster than the other. This wasn\'t true before Java 1.4.2, because when concatenating more than two strings using the "+" operator, intermediate String objects would be created during the process of building the final string. However, as the JavaDoc for StringBuffer states, at least since Java 1.4.2 using the "+" operator compiles down to creating a StringBuffer and append()ing the many strings to it. So no difference, apparently. However, be careful when using adding a string to another inside a loop! For example: Keep in mind, however, that usually concatenating a few strings with "+" is cleaner than append()ing them all.', 'questionId': '65668', 'answerId': '65677'}
{'answer': "Under the hood, it actually creates and appends to a StringBuffer, calling toString() on the result.  So it actually doesn't matter which you use anymore. So  becomes That's true for a bunch of inlined appends within a single statement.  If you build your string over the course of multiple statements, then you're wasting memory and a StringBuffer or StringBuilder is your better choice.", 'questionId': '65668', 'answerId': '65678'}
{'answer': 'Because Strings are imutable in Java, every time you concanate a String, new object is created in memory. SpringBuffer use the same object in memory.', 'questionId': '65668', 'answerId': '65680'}
{'answer': 'StringBuffer is mutable. It adds the value of the string to the same object without instantiating another object. Doing something like: will create a new String object.', 'questionId': '65668', 'answerId': '65684'}
{'answer': "Java turns string1 + string2 into a StringBuffer construct, append(), and toString().  This makes sense. However, in Java 1.4 and earlier, it would do this for each + operator in the statement separately.  This meant that doing a + b + c would result in two StringBuffer constructs with two toString() calls.  If you had a long string of concats, it would turn into a real mess.  Doing it yourself meant you could control this and do it properly. Java 5.0 and above seem to do it more sensibly, so it's less of a problem and is certainly less verbose.", 'questionId': '65668', 'answerId': '65717'}
{'answer': "To concatenate two strings using '+', a new string needs to be allocated with space for both strings, and then the data copied over from both strings.  A StringBuffer is optimized for concatenating, and allocates more space than needed initially.  When you concatenate a new string, in most cases, the characters can simply be copied to the end of the existing string buffer. For concatenating two strings, the '+' operator will probably have less overhead, but as you concatenate more strings, the StringBuffer will come out ahead, using fewer memory allocations, and less copying of data.", 'questionId': '65668', 'answerId': '65719'}
{'answer': "It's better to use StringBuilder (it's an unsynchronized version; when do you build strings in parallel?) these days, in almost every case, but here's what happens: When you use + with two strings, it compiles code like this: To something like this: Therefore for just little examples, it usually doesn't make a difference. But when you're building a complex string, you've often got a lot more to deal with than this; for example, you might be using many different appending statements, or a loop like this: In this case, a new StringBuilder instance, and a new String (the new value of out - Strings are immutable) is required in each iteration. This is very wasteful. Replacing this with a single StringBuilder means you can just produce a single String and not fill up the heap with Strings you don't care about.", 'questionId': '65668', 'answerId': '65727'}
{'answer': "The StringBuffer class maintains an array of characters to hold the contents of the strings you concatenate, whereas the + method creates a new string each time its called and appends the two parameters (param1 + param2). The StringBuffer is faster because 1. it might be able to use its already existing array to concat/store all of the strings. 2. even if they don't fit in the array, its faster to allocate a larger backing array then to generate new String objects for each evocation.", 'questionId': '65668', 'answerId': '65730'}
{'answer': "I think that given jdk1.5 (or greater) and your concatenation is thread-safe you should use StringBuilder instead of StringBuffer http://java4ever.blogspot.com/2007/03/string-vs-stringbuffer-vs-stringbuilder.html As for the gains in speed: http://www.about280.com/stringtest.html Personally I'd code for readability, so unless you find that string concatenation makes your code considerably slower, stay with whichever method makes your code more readable.", 'questionId': '65668', 'answerId': '65738'}
{'answer': 'Because Strings are immutable, each call to the + operator creates a new String object and copies the String data over to the new String.  Since copying a String takes time linear in the length of the String, a sequence of N calls to the + operator results in O(N2) running time (quadratic). Conversely, since a StringBuffer is mutable, it does not need to copy the String every time you perform an Append(), so a sequence of N Append() calls takes O(N) time (linear).  This only makes a significant difference in runtime if you are appending a large number of Strings together.', 'questionId': '65668', 'answerId': '65739'}
{'answer': "I think the simplest answer is: it's faster. If you really want to know all the under-the-hood stuff, you could always have a look at the source yourself: http://www.sun.com/software/opensource/java/getinvolved.jsp http://download.java.net/jdk6/latest/archive/", 'questionId': '65668', 'answerId': '65744'}
{'answer': 'As said, the String object is ummutable, meaning once it is created (see below) it cannot be changed. String x = new String("something"); // or String x = "something"; So when you attempt to concanate String objects, the value of those objects are taken and put into a new String object. If you instead use the StringBuffer, which IS mutable, you continually add the values to an internal list of char (primitives), which can be extended or truncated to fit the value needed. No new objects are created, only new char\'s are created/removed when needed to hold the values.', 'questionId': '65668', 'answerId': '65753'}
{'answer': 'The section String Concatenation Operator + of the Java Language Specification gives you some more background information on why the + operator can be so slow.', 'questionId': '65668', 'answerId': '65770'}
{'answer': "When you concatenate two strings, you actually create a third String object in Java. Using StringBuffer (or StringBuilder in Java 5/6), is faster because it uses an internal array of chars to store the string, and when you use one of its add(...) methods, it doesn't create a new String object. Instead, StringBuffer/Buider appends the internal array. In simple concatenations, it's not really an issue whether you concatenate strings using StringBuffer/Builder or the '+' operator, but when doing a lot of string concatenations, you'll see that using a StringBuffer/Builder is way faster.", 'questionId': '65668', 'answerId': '65781'}
{'answer': 'For simple concatenations like: It is rather pointless to use StringBuffer - as jodonnell pointed out it will be smartly translated into: BUT it is very unperformant to concatenate strings in a loop, like: Using string in this loop will generate 10 intermediate string objects in memory: "0", "01", "012" and so on. While writing the same using StringBuffer you simply update some internal buffer of StringBuffer and you do not create those intermediate string objects that you do not need: Actually for the example above you should use StringBuilder (introduced in Java 1.5) instead of StringBuffer - StringBuffer is little heavier as all its methods are synchronized.', 'questionId': '65668', 'answerId': '65891'}
{'answer': 'AFAIK it depends on version of JVM, in versions prior to 1.5 using "+" or "+=" actually copied the whole string every time.  Beware that using += actually allocates the new copy of string.  As was pointed using + in loops involves copying.  When strings that are conactenated are compile time constants there concatenated at compile time, so  Has is compiled to:', 'questionId': '65668', 'answerId': '65893'}
{'answer': 'In some cases this is obsolete due to optimisations performed by the compiler, but the general issue is that code like: will act as below (each step being the next loop iteration): construct a string object of length 1, and value "x" Create a new string object of size 2, copy the old string "x" into it, add "x" in position 2. Create a new string object of size 3, copy the old string "xx" into it, add "x" in position 3. ... and so on As you can see, each iteration is having to copy one more character, resulting in us performing 1+2+3+4+5+...+N operations each loop.  This is an O(n^2) operation. If however we knew in advance that we only needed N characters, we could do it in a single allocation, with copy of just N characters from the strings we were using - a mere O(n) operation. StringBuffer/StringBuilder avoid this because they are mutable, and so do not need to keep copying the same data over and over (so long as there is space to copy into in their internal buffer).  They avoid performing an allocation and copy proportional to the number of appends done by over-allocing their buffer by a proportion of its current size, giving amortized O(1) appending. However its worth noting that often the compiler will be able to optimise code into StringBuilder style (or better - since it can perform constant folding etc.) automatically.', 'questionId': '65668', 'answerId': '65964'}
{'answer': 'Further information: StringBuffer is a thread-safe class But StringBuilder is not thread-safe, thus it is faster to use StringBuilder if possible', 'questionId': '65668', 'answerId': '1156919'}
{'answer': " You could use Apache POIFS, which seems to be a little more mature, but that would appear to duplicate the efforts of POI-HSMF. You could use POI-HSMF and contribute changes to get the features you need working.  That's often how FOSS projects like that expand. You could use com4j, j-Interop, or some other COM-level interop feature and interact directly with the COM interfaces that provide access to the structured document.  That would be much easier than trying to hit it directly through JNI.", 'questionId': '65936', 'answerId': '66030'}
{'answer': 'Have you tried to use Jython with the Python win32 extensions (http://www.jython.org/Project/ + http://python.net/crew/mhammond/win32/)?  If this is for a "personal" or "internal" project Jython with Python may be a very good choice. If you are building a "shrink wrapped" software package this may not be the best option.', 'questionId': '65936', 'answerId': '66034'}
{'answer': 'msgparser is a small open source Java library that parses Outlook .msg files and provides their content using Java objects. msgparser uses the Apache POI - POIFS library to parse the message files which use the OLE 2 Compound Document format.', 'questionId': '65936', 'answerId': '3305723'}
{'answer': 'Apache POI-HSMF. You can start from the example given in below link. http://svn.apache.org/viewvc/poi/trunk/src/scratchpad/examples/src/org/apache/poi/hsmf/examples/Msg2txt.java?revision=821500&view=markup&pathrev=821500 Further read library docs.', 'questionId': '65936', 'answerId': '30901700'}
{'answer': "A document-ordered node list is the behavior in other implementations of the DOM, such as Javascript's or Python's. And a randomly-ordered node list would be utterly useless. I think it's safe to depend on nodes being returned in document order.", 'questionId': '66032', 'answerId': '66112'}
{'answer': "In my experience, yes. The DOM spec isn't any clearer. If you're paranoid, try something like", 'questionId': '66032', 'answerId': '66116'}
{'answer': "My experience is that every time that I have bothered to look it has been in document order. However, I believe that I read somewhere it is not guaranteed to be in document order. I can't find where I read that right now, so take it as hearsay. I think your best bet if you must have them in document order would be to use FirstChild then NextSibling until there are no more sibs.", 'questionId': '66032', 'answerId': '66146'}
{'answer': "I'd love to tell you that this is guaranteed (as I believe it is) but the Document Object Model specification itself seems ambiguous in this case. I'm pretty sure that it's always document-order, though.", 'questionId': '66032', 'answerId': '66157'}
{'answer': "In your example, as presented. I believe so. However, I've experienced real-world experiences where spaces have been interpreted as nodes so: is different than if you're looking at index [1], firefox and IE may present different results. I would advise against relying on the order depending on your need.", 'questionId': '66032', 'answerId': '66160'}
{'answer': 'Yes they are ordered as it returns a nodeList, you would have to say getNamedChildNodes to get a list that is not ordered as in namedNodeList.', 'questionId': '66032', 'answerId': '4294653'}
{'answer': 'That is perfectly acceptable, probably even the standard. where TYPE is the type, NAME is the name in all caps with underscores for spaces, and VALUE is the constant value; I highly recommend NOT putting your constants in their own classes or interfaces.  As a side note:  Variables that are declared final and are mutable can still be changed; however, the variable can never point at a different object. For example: That is legal and ORIGIN would then be a point at (3, 0).', 'questionId': '66066', 'answerId': '66076'}
{'answer': 'I wouldn\'t call the class the same (aside from casing) as the constant ... I would have at a minimum one class of "Settings", or "Values", or "Constants", where all the constants would live.  If I have a large number of them, I\'d group them up in logical constant classes (UserSettings, AppSettings, etc.)', 'questionId': '66066', 'answerId': '66096'}
{'answer': 'That\'s the right way to go. Generally constants are not kept in separate "Constants" classes because they\'re not discoverable.  If the constant is relevant to the current class, keeping them there helps the next developer.', 'questionId': '66066', 'answerId': '66123'}
{'answer': 'Just avoid using an interface: It is tempting, but violates encapsulation and blurs the distinction of class definitions.', 'questionId': '66066', 'answerId': '66142'}
{'answer': "To take it a step further, you can place globally used constants in an interface so they can be used system wide.  E.g. But don't then implement it.  Just refer to them directly in code via the fully qualified classname.", 'questionId': '66066', 'answerId': '66143'}
{'answer': 'What about an enumeration?', 'questionId': '66066', 'answerId': '66212'}
{'answer': "I would highly advise against having a single constants class.  It may seem a good idea at the time, but when developers refuse to document constants and the class grows to encompass upwards of 500 constants which are all not related to each other at all (being related to entirely different aspects of the application), this generally turns into the constants file being completely unreadable.  Instead: If you have access to Java 5+, use enums to define your specific constants for an application area.  All parts of the application area should refer to enums, not constant values, for these constants.  You may declare an enum similar to how you declare a class.  Enums are perhaps the most (and, arguably, only) useful feature of Java 5+. If you have constants that are only valid to a particular class or one of its subclasses, declare them as either protected or public and place them on the top class in the hierarchy.  This way, the subclasses can access these constant values (and if other classes access them via public, the constants aren't only valid to a particular class...which means that the external classes using this constant may be too tightly coupled to the class containing the constant) If you have an interface with behavior defined, but returned values or argument values should be particular, it is perfectly acceptible to define constants on that interface so that other implementors will have access to them.  However, avoid creating an interface just to hold constants: it can become just as bad as a class created just to hold constants.", 'questionId': '66066', 'answerId': '66228'}
{'answer': "It is a BAD PRACTICE to use interfaces just to hold constants (named constant interface pattern by Josh Bloch). Here's what Josh advises: If the constants are strongly tied to   an existing class or interface, you   should add them to the class or   interface. For example, all of the   boxed numerical primitive classes,   such as Integer and Double, export   MIN_VALUE and MAX_VALUE constants. If   the constants are best viewed as   members of an enumerated type, you   should export them with an enum   type. Otherwise, you should export the   constants with a noninstantiable   utility class. Example: About the naming convention: By convention, such fields have names   consisting of capital letters, with   words separated by underscores. It is   critical that these fields contain   either primitive values or references   to immutable objects.", 'questionId': '66066', 'answerId': '66307'}
{'answer': "In Effective Java (2nd edition), it's recommended that you use enums instead of static ints for constants. There's a good writeup on enums in Java here: http://java.sun.com/j2se/1.5.0/docs/guide/language/enums.html Note that at the end of that article the question posed is: So when should you use enums? With an answer of: Any time you need a fixed set of constants", 'questionId': '66066', 'answerId': '66339'}
{'answer': "I agree that using an interface is not the way to go. Avoiding this pattern even has its own item (#18) in Bloch's Effective Java. An argument Bloch makes against the constant interface pattern is that use of constants is an implementation detail, but implementing an interface to use them exposes that implementation detail in your exported API. The public|private static final TYPE NAME = VALUE; pattern is a good way of declaring a constant. Personally, I think it's better to avoid making a separate class to house all of your constants, but I've never seen a reason not to do this, other than personal preference and style. If your constants can be well-modeled as an enumeration, consider the enum structure available in 1.5 or later. If you're using a version earlier than 1.5, you can still pull off typesafe enumerations by using normal Java classes. (See this site for more on that).", 'questionId': '66066', 'answerId': '66343'}
{'answer': 'The number one mistake you can make is creating a globally accessible class called with a generic name, like Constants. This simply gets littered with garbage and you lose all ability to figure out what portion of your system uses these constants. Instead, constants should go into the class which "owns" them. Do you have a constant called TIMEOUT? It should probably go into your Communications() or Connection() class. MAX_BAD_LOGINS_PER_HOUR? Goes into User().  And so on and so forth.  The other possible use is Java .properties files when "constants" can be defined at run-time, but not easily user changeable. You can package these up in your .jars and reference them with the Class resourceLoader.', 'questionId': '66066', 'answerId': '66592'}
{'answer': 'For Constants, Enum is a better choice IMHO. Here is an example public class myClass  {', 'questionId': '66066', 'answerId': '66768'}
{'answer': "A Constant, of any type, can be declared by creating an immutable property that within a class (that is a member variable with the final modifier).  Typically the static and  public modifiers are also provided. There are numerous applications where a constant's value indicates a selection from an n-tuple (e.g. enumeration) of choices.  In our example, we can choose to define an Enumerated Type that will restrict the possible assigned values (i.e. improved type-safety):", 'questionId': '66066', 'answerId': '67057'}
{'answer': "One of the way I do it is by creating a 'Global' class with the constant values and do a static import in the classes that need access to the constant.", 'questionId': '66066', 'answerId': '67310'}
{'answer': "A single, generic constants class is a bad idea. Constants should be grouped together with the class they're most logically related to. Rather than using variables of any kind (especially enums), I would suggest that you use methods. Create a method with the same name as the variable and have it return the value you assigned to the variable. Now delete the variable and replace all references to it with calls to the method you just created. If you feel that the constant is generic enough that you shouldn't have to create an instance of the class just to use it, then make the constant method a class method.", 'questionId': '66066', 'answerId': '67564'}
{'answer': 'A good object oriented design should not need many publicly available constants.  Most constants should be encapsulated in the class that needs them to do its job.', 'questionId': '66066', 'answerId': '68068'}
{'answer': "I prefer to use getters rather than constants.  Those getters might return constant values, e.g. public int getMaxConnections() {return 10;}, but anything that needs the constant will go through a getter. One benefit is that if your program outgrows the constant--you find that it needs to be configurable--you can just change how the getter returns the constant. The other benefit is that in order to modify the constant you don't have to recompile everything that uses it.  When you reference a static final field, the value of that constant is compiled into any bytecode that references it.", 'questionId': '66066', 'answerId': '68558'}
{'answer': 'FWIW, a timeout in seconds value should probably be a configuration setting (read in from a properties file or through injection as in Spring) and not a constant.', 'questionId': '66066', 'answerId': '68574'}
{'answer': "Creating static final constants in a separate class can get you into trouble.  The Java compiler will actually optimize this and place the actual value of the constant into any class that references it. If you later change the 'Constants' class and you don't do a hard re-compile on other classes that reference that class, you will wind up with a combination of old and new values being used. Instead of thinking of these as constants, think of them as configuration parameters and create a class to manage them.  Have the values be non-final, and even consider using getters.  In the future, as you determine that some of these parameters actually should be configurable by the user or administrator, it will be much easier to do.", 'questionId': '66066', 'answerId': '69187'}
{'answer': 'What is the difference 1. 2. and using  MyGlobalConstants.TIMEOUT_IN_SECS wherever we need this constant. I think both are same.', 'questionId': '66066', 'answerId': '4403167'}
{'answer': 'Based on the comments above I think this is a good approach to change the old-fashioned global constant class (having public static final variables) to its enum-like equivalent in a way like this: So then I can refer them to like:', 'questionId': '66066', 'answerId': '6486803'}
{'answer': 'I use following approach: Than, for example, I use Constants.DB.Connection.URL to get constant. It looks more "object oriently" as for me.', 'questionId': '66066', 'answerId': '8809578'}
{'answer': "static final is my preference, I'd only use an enum if the item was indeed enumerable.", 'questionId': '66066', 'answerId': '12207932'}
{'answer': "I use static final to declare constants and go with the ALL_CAPS naming notation. I have seen quite a few real life instances where all constants are bunched together into an interface. A few posts have rightly called that a bad practice, primarily because that's not what an interface is for. An interface should enforce a contract and should not be a place to put unrelated constants in. Putting it together into a class that cannot be instantiated (through a private constructor) too is fine if the constant semantics don't belong to a specific class(es). I always put a constant in the class that it's most related to, because that makes sense and is also easily maintainable. Enums are a good choice to represent a range of values, but if you are storing standalone constants with an emphasis on the absolute value (eg. TIMEOUT = 100 ms) you can just go for the static final approach.", 'questionId': '66066', 'answerId': '16565371'}
{'answer': 'I agree with what most are saying, it is best to use enums when dealing with a collection of constants. However, if you are programming in Android there is a better solution: IntDef Annotation. IntDef annotation is superior to enums in one simple way, it takes significantly less space as it is simply a compile-time marker. It is not a class, nor does it have the automatic string-conversion property.', 'questionId': '66066', 'answerId': '38639581'}
{'answer': "There is a certain amount of opinion to answer this.  To start with, constants in java are generally declared to be public, static and final. Below are the reasons: I would never use an interface for a CONSTANTS accessor/object simply because interfaces are generally expected to be implemented.  Wouldn't this look funny: Instead I would choose between a few different ways, based on some small trade-offs, and so it depends on what you need:", 'questionId': '66066', 'answerId': '41526147'}
{'answer': " What is the best way to implement constants in Java? One approach that we should really avoid : using interfaces to define constants. Creating a interface specifically to declare constants is really the worst thing : it defeats the reason why interfaces were designed : defining method(s) contract. Even if an interface already exists to address a specific need, declaring the constants in them make really not sense as constants should not make part of the API and the contract provided to client classes. To simplify, we have broadly 4 valid approaches. With static final String/Integer field : 1) using a class that declare constants inside but not only. 1 variant) creating a class dedicated to only declare constants. With Java 5 enum : 2) declaring the enum in a related purpose class (nested class). 2 variant) creating the enum alone (not in a outer class). TLDR : Which is the best way and where locate the constants ? In most of cases, the enum way is probably finer than the static final String/Integer way and personally I think that the static final String/Integer way should be used only if we have good reasons to not use enums. And about where we should declare the constant values, the idea is to search if there exists a class that own a strong semantic and use relationship with constant values. If we find it, we should use it as the constants holder. Otherwise, the constant should be associated to no one particular class. static final String/ static final Integer versus enum  Enums usage is really a way to strongly considered. Enums have a great advantage over String or Integer constant field.  They set a stronger compilation constraint.  If you define a method that takes the enum as parameter, you can only pass a enum value defined in the enum class(or null).  With String and Integer you can substitute them with any values of compatible type and the compilation will be fine even if the value is not a defined constant in the static final String/ static final Integer fields.  For example, below two constants defined in a class as static final String fields : Here a method that expects to have one of these constants as parameter : You can invoke it in this way : or  But no compilation constraint prevents you from invoking it in this way : You would have the error only at runtime and only if you do at a time a check on the transmitted value. With enum, checks are not required as the client could only pass a enum value in a enum parameter. For example, here two values defined in a enum class (so constant out of the box): Here a method that expects to have one of these enum values as parameter : You can invoke it in this way : or  But the compilation will never allow you from invoking it in this way : Where should we declare the constants ? If your application contains an existing class that has a specific and strong functional cohesion with the constant values, the 1) and the 2) appear more intuitive. Generally, it eases the use of the constants if these are declared in the main class that manipulates them or that has a name very natural to guess that we will find it inside. For example in the JDK library, the exponential and pi constant values are   declared in a class that declare not only constant declarations (java.lang.Math). The clients using mathematics functions rely often on the Math class. So, they may find constants easily enough and can also remember where E and PI are defined in a very natural way.  If your application doesn't contain an existing class that has a very specific and strong functional cohesion with the constant values, the 1 variant) and the 2 variant) ways appear more intuitive. Generally, it doesn't ease the use of the constants if these are declared in one class that manipulates them while we have also 3 or 4 other classes that manipulate them as much as and no one of these classes seems be more natural than others to host constant values. Here, defining a custom class to hold only constant values makes sense. For example in the JDK library, the java.util.concurrent.TimeUnit enum is not declared in a specific class as there is not really one and only one JDK specific class that appear as the most intuitive to hold it : Many classes declared in java.util.concurrent use them : BlockingQueue, ArrayBlockingQueue<E>, CompletableFuture, ExecutorService , ... and really no one of them seems more appropriate to hold the enum.", 'questionId': '66066', 'answerId': '44452756'}
{'answer': "It sounds like you're hitting a deadlock. If you can reproduce it in a dev environment then try attaching a debugger once it's happened.  Take a look at your threads and see if you have any deadlocks. If you can't get a debugger to attach you should be able to generate a thread dump, as Dustin pointed out.", 'questionId': '66104', 'answerId': '66163'}
{'answer': 'For any jvm process, force a thread dump. In windows, this can be done with CTRL-BREAK, I believe, in the console window. In *nix, it is almost always "kill -3 jvm-pid". This may show if you have threads waiting on db connection pool/thread pool, etc. Another thing to check out is how many connections you have currently to the JVM -- either use NETSTAT or SysInternals utility such as tcpconn/tcpview (google it). Also, try to run with the verbose:gc JVM flag.  For Sun\'s JVM, run like "java -verbose:gc".  This will show your garbage collections.  If it is collecting a lot (FULL COLLECTIONS, expecially) then you probably have a memory leak.  The full collections are costly, especially on large heaps like that. How are you determining that only 300mb are being used?', 'questionId': '66104', 'answerId': '66168'}
{'answer': 'Try increasing the logging sensitivity for the Tomcat application server. http://tomcat.apache.org/tomcat-5.5-doc/logging.html You can increase the sensitivity to FINEST or ALL for most of them for a few days and see if that helps you catch anything.', 'questionId': '66104', 'answerId': '66175'}
{'answer': 'I agree with creating multiple thread dumps and viewing them though this: Thread Dump Analyzer', 'questionId': '66104', 'answerId': '66275'}
{'answer': "I used JFreeChart (http://www.jfree.org/jfreechart/) on a previous project.  It has some very good built-in capabilities, and the design was WAY extensible so you could always roll your own extension later if you needed some custom chart annotation or wanted an axis to render differently, or whatever.  It's definitely worth checking out.", 'questionId': '6612', 'answerId': '6648'}
{'answer': 'I\'ve had success using JFreeChart on multiple projects. It is very configurable. JFreeChart is open source, but they charge for the developer guide. If you\'re doing something simple, the sample code is probably good enough. Otherwise, $50 for the developer guide is a pretty good bargain. With respect to "real-time" data, I\'ve also used JFreeChart for these sorts of applications. Unfortunately, I had to create some custom data models with appropriate synchronization mechanisms to avoid race conditions. However, it wasn\'t terribly difficult and JFreeChart would still be my first choice. However, as the FAQ suggests, JFreeChart might not give you the best performance if that is a big concern.', 'questionId': '6612', 'answerId': '6655'}
{'answer': "I've used JFreeChart in a rather complex application that needed to visualize data streams and calculations based on the data. We implemented the ability to visually edit the data plots by mouse and had a very large set of data points. JFreeChart handled it very well. Unfortunately I was stuck with v0.7, but the newest release are sooo much better when it comes to API clarity. The community is very helpful and the developers are responding to mails too. If you're doing a web application and don't want to bother with libraries, you can check the Google Chart API. Didn't use it myself, but I started some tests which were very promising.", 'questionId': '6612', 'answerId': '6683'}
{'answer': "Check ILOG's JViews - they have a lot of stuff and something might fit your needs. All of them are extremely configurable and quite fast. Not free though.", 'questionId': '6612', 'answerId': '194501'}
{'answer': 'For real-time plotting you can use QN Plot, JOpenChart or its fork Openchart2.', 'questionId': '6612', 'answerId': '520402'}
{'answer': 'JHandles is an alternative graphics package for Octave (a math package).  It is probably worth looking into, but being Octave specific may not have what you need. -Adam', 'questionId': '6612', 'answerId': '520504'}
{'answer': 'Live Graph supports real-time rendering.', 'questionId': '6612', 'answerId': '555932'}
{'answer': "I just ran into a similar issue (displaying fast-updating data for engineering purposes), and I'm using JChart2D. It's pretty minimalist and has a few quirks but it seems fairly fast: I'm running a benchmark speed test where it's adding 2331 points per second (333x7 traces) to a strip chart and uses 1% of the CPU on my 3GHz Pentium 4.", 'questionId': '6612', 'answerId': '863528'}
{'answer': 'You might want to check out JMathPlot', 'questionId': '6612', 'answerId': '1881391'}
{'answer': 'Plot4j supports also real-time plotting!', 'questionId': '6612', 'answerId': '3548418'}
{'answer': "I'm using GRAL for real-time plotting. It's an LGPL Java library. Although it's not as powerful as JFreeChart it has a nicer API. I got a plot up and running in very short time. They also ship a real-time plotting example.", 'questionId': '6612', 'answerId': '3558349'}
{'answer': 'PtPlot may be a good choice.  Formerly called Ptolemy.', 'questionId': '6612', 'answerId': '3867975'}
{'answer': "I found this question when I was googling for open source plotting libraries for java. I wasn't quite happy with the answers posted here so I did some further research on the issue. Although this question has been posted back in 2008 this might still be interesting to someone. Here is a list of Open Source Charting & Reporting Tools in Java", 'questionId': '6612', 'answerId': '8769904'}
{'answer': 'http://autoplot.org/ allows for real-time updates and can be used to create many types of scientific plots. To update the plot, specify the URL to a data file and then append &filePollUpdates=1&tail=100.  See the example at http://autoplot.org/cookbook#Loading_Data', 'questionId': '6612', 'answerId': '11265300'}
{'answer': "jcckit can handle real-time plotting.  It's a bear to use though. I forked it, and made a very simple wrapper around it for non-realtime plotting.  The underlying complicated interface can be used directly too. https://bitbucket.org/hughperkins/easyjcckit", 'questionId': '6612', 'answerId': '12954099'}
{'answer': 'Waterloo Scientific Graphics is a new LGPL project. Data objects are observable and could be updated in a real time plotting scenario. For details see http://waterloo.sourceforge.net/ A few screenshots:', 'questionId': '6612', 'answerId': '13782534'}
{'answer': "Well, I've used Enunciate quite a bit.  It uses simple annotations to provide either REST and/or SOAP endpoints. http://enunciate.codehaus.org Plus, Ryan Heaton has always provided top-notch support for things, too.", 'questionId': '66288', 'answerId': '66334'}
{'answer': "I am working on a REST API for gliffy.com and we ended up rolling our own.  We didn't want to have to bring in Struts 2, Spring, or any other framework.  I looked at RESTLet and found it incredibly confusing and over complicated. Apache has an implementation of the JAX-RS spec, but it is not finalized and also has some oddities to it.  We're tentatively planning to open source our solution, but that's not for a few months.   Rolling your own is easy, though.  The Servlet Specification gives you everything you need, and you can easily connect to a database via Hibernate (see http://www.naildrivin5.com/daveblog5000/?p=39 for how to set up JPA without using EJB3).", 'questionId': '66288', 'answerId': '66360'}
{'answer': "I found restlet to be a really elegant architecture.  I'm working in the .net world so  it was not an option for me, but I was able to build my own framework following the same basic principles of restlet. I have found the conversion of our WCF contract-based SOA application to REST based one has significantly simplified the application,", 'questionId': '66288', 'answerId': '66723'}
{'answer': 'You know there is a new JCP API for Accessing RESTful Services, also: JAX-RS JCP311  https://jsr311.dev.java.net/ The open source version is called Project Jersey', 'questionId': '66288', 'answerId': '75423'}
{'answer': "I'm a huge fan of JAX-RS - I think they've done a great job with that specification. I use it on a number of projects and its been a joy to work with.  JAX-RS lets you create REST resources using POJOs with simple annotations dealing with the URI mappings, HTTP methods and content negotiation all integrated nicely with dependency injection. There's no complex APIs to learn; just the core REST concepts (URIs, headers/response codes and content negotiation) are required. FWIW JAX-RS is quite Rails-ish from the controller point of view There are a number of JAX-RS implementations out there - see this thread for a discussion. My personal recommendation is to use Jersey as its got the biggest, most active community behind it, has the best features at the time of writing (WADL support, implicit views, spring integration, nice REST client API); though if you are using JBoss/SEAM you might find RESTeasy integrates a little better.", 'questionId': '66288', 'answerId': '82165'}
{'answer': "I'm a big fan of Restlet, but I usually use it to implement apps whose primary role is to be a RESTful web service. It sounds like you're looking to add a RESTful API to an existing application. If that's the case, JAX-RS's (or Enunciate's) annotation-based approach might be a better fit for your project. As for Restlet, I can tell you that I've been very impressed with the developers and the community; they're very active, engaged, responsive, and committed to a stable, efficient, reliable, and effective framework. My single favorite aspect of the framework is that it is a ground-up implementation of the REST paradigm; therefore there is no impedance-mismatch between a Restlet app's external API and internal implementation. I also really like how flexible it is - it can run inside a Java application container/server such as JBoss, Tomcat, Jetty, etc, or standalone, with an embedded HTTP server library.", 'questionId': '66288', 'answerId': '96322'}
{'answer': 'The short answer Use one of these two methods: Class.getResource(String) Class.getResourceAsStream(String) For example: -- The long answer Typically, one would not want to load files using absolute paths. For example, dont do this if you can help it: This technique is not recommended for at least two reasons. First, it creates a dependency on a particular operating system, which prevents the application from easily moving to another operating system. One of Javas main benefits is the ability to run the same bytecode on many different platforms. Using an absolute path like this makes the code much less portable. Second, depending on the relative location of the file, this technique might create an external dependency and limit the applications mobility. If the file exists outside the applications current directory, this creates an external dependency and one would have to be aware of the dependency in order to move the application to another machine (error prone). Instead, use the getResource() methods in the Class class. This makes the application much more portable. It  can be moved to different platforms, machines, or directories and still function correctly.', 'questionId': '6639', 'answerId': '6640'}
{'answer': 'getResource is fine, but using relative paths will work just as well too, as long as you can control where your working directory is (which you usually can). Furthermore the platform dependence regarding the separator character can be gotten around using File.separator, File.separatorChar, or System.getProperty("file.separator").', 'questionId': '6639', 'answerId': '6679'}
{'answer': 'I haven\'t had a problem just using unix-style path separators, even on Windows (though it is good practice to check File.separatorChar). The technique of using ClassLoader.getResource() is best for read-only resources that are going to be loaded from JAR files. Sometimes, you can programmatically determine the application directory, which is useful for admin-configurable files or server applications. (Of course, user-editable files should be stored somewhere in the System.getProperty("user.home") directory.)', 'questionId': '6639', 'answerId': '6708'}
{'answer': "What are you loading the files for - configuration or data (like an input file) or as a resource? If as a resource, follow the suggestion and example given by Will and Justin  If configuration, then you can use a ResourceBundle or Spring (if your configuration is more complex). If you need to read a file in order to process the data inside, this code snippet may help BufferedReader file = new BufferedReader(new FileReader(filename)) and then read each line of the file using file.readLine();  Don't forget to close the file.", 'questionId': '6639', 'answerId': '30854'}
{'answer': '', 'questionId': '6639', 'answerId': '5058626'}
{'answer': "Use Java's.   Also, cache results of the exp and then you can look up the answer faster than calculating them again.", 'questionId': '66402', 'answerId': '66416'}
{'answer': "You'd want to wrap whatever loop's calling Math.exp() in C as well. Otherwise, the overhead of marshalling between Java and C will overwhelm any performance advantage.", 'questionId': '66402', 'answerId': '66439'}
{'answer': "Since the Java code will get compiled to native code with the just-in-time (JIT) compiler, there's really no reason to use JNI to call native code. Also, you shouldn't cache the results of a method where the input parameters are floating-point real numbers.  The gains obtained in time will be very much lost in amount of space used.", 'questionId': '66402', 'answerId': '66447'}
{'answer': 'The problem with using JNI is the overhead involved in making the call to JNI.  The Java virtual machine is pretty optimized these days, and calls to the built-in Math.exp() are automatically optimized to call straight through to the C exp() function, and they might even be optimized into straight x87 floating-point assembly instructions.', 'questionId': '66402', 'answerId': '66450'}
{'answer': "The real question is, has this become a bottle neck for you? Have you profiled your application and found this to be a major cause of slow down? If not, I would recommend using Java's version. Try not to pre-optimize as this will just cause development slow down. You may spend an extended amount of time on a problem that may not be a problem. That being said, I think your test gave you your answer. If jni + C is slower, use java's version.", 'questionId': '66402', 'answerId': '66462'}
{'answer': "There's simply an overhead associated with using the JNI, see also: http://java.sun.com/docs/books/performance/1st_edition/html/JPNativeCode.fm.html So as others have suggested try to collate operations that would involve using the JNI.", 'questionId': '66402', 'answerId': '66477'}
{'answer': "You might be able to get it to run faster if you do them in batches.  Making a JNI call adds overhead, so you don't want to do it for each exp() you need to calculate.  I'd try passing an array of 100 values and getting the results to see if it helps performance.", 'questionId': '66402', 'answerId': '66515'}
{'answer': "Write your own, tailored to your needs. For instance, if all your exponents are of the power of two, you can use bit-shifting. If you work with a limited range or set of values, you can use look-up tables. If you don't need pin-point precision, you use an imprecise, but faster, algorithm.", 'questionId': '66402', 'answerId': '66523'}
{'answer': "There is a cost associated with calling across the JNI boundary. If you could move the loop that calls exp() into the native code as well, so that there is just one native call, then you might get better results, but I doubt it will be significantly faster than the pure Java solution. I don't know the details of your application, but if you have a fairly limited set of possible arguments for the call, you could use a pre-computed look-up table to make your Java code faster.", 'questionId': '66402', 'answerId': '66536'}
{'answer': "There are faster algorithms for exp depending on what your'e trying to accomplish.  Is the problem space restricted to a certain range, do you only need a certain resolution, precision, or accuracy, etc. If you define your problem very well, you may find that you can use a table with interpolation, for instance, which will blow nearly any other algorithm out of the water. What constraints can you apply to exp to gain that performance trade-off? -Adam", 'questionId': '66402', 'answerId': '66553'}
{'answer': '+1 to writing your own exp() implementation.  That is, if this is really a bottle-neck in your application.  If you can deal with a little inaccuracy, there are a number of extremely efficient exponent estimation algorithms out there, some of them dating back centuries.  As I understand it, Java\'s exp() implementation is fairly slow, even for algorithms which must return "exact" results. Oh, and don\'t be afraid to write that exp() implementation in pure-Java.  JNI has a lot of overhead, and the JVM is able to optimize bytecode at runtime sometimes even beyond what C/C++ is able to achieve.', 'questionId': '66402', 'answerId': '66565'}
{'answer': " I run a fitting algorithm and the minimum error of the fitting result is way larger   than the precision of the Math.exp(). Transcendental functions are always much more slower than addition or multiplication and a well-known bottleneck. If you know that your values are in a narrow range, you can simply build a lookup-table (Two sorted array ; one input, one output). Use Arrays.binarySearch to find the correct index and interpolate value with the elements at [index] and [index+1].  Another method is to split the number. Lets take e.g. 3.81 and split that in 3+0.81. Now you multiply e = 2.718 three times and get 20.08. Now to 0.81. All values between 0 and 1 converge fast with the well-known exponential series 1+x+x^2/2+x^3/6+x^4/24.... etc. Take as much terms as you need for precision; unfortunately it's slower if x approaches 1. Lets say you go to x^4, then you get 2.2445 instead of the correct 2.2448 Then multiply the result 2.781^3 = 20.08 with 2.781^0.81 = 2.2445 and you have the result 45.07 with an error of one part of two thousand (correct: 45.15).", 'questionId': '66402', 'answerId': '67312'}
{'answer': 'This has already been requested several times (see e.g. here). Here is an approximation to Math.exp(), copied from this blog posting: It is basically the same as a lookup table with 2048 entries and linear interpolation between the entries, but all this with IEEE floating point tricks. Its 5 times faster than Math.exp() on my machine, but this can vary drastically if you compile with -server.', 'questionId': '66402', 'answerId': '424985'}
{'answer': "It might not be relevant any more, but just so you know, in the newest releases of the OpenJDK (see here), Math.exp should be made an intrinsic (if you don't know what that is, check here). This will make performance unbeatable on most architectures, because it means the Hotspot VM will replace the call to Math.exp by a processor-specific implementation of exp at runtime. You can never beat these calls, as they are optimized for the architecture...", 'questionId': '66402', 'answerId': '15155829'}
{'answer': 'Commons Math3 ships with an optimized version: FastMath.exp(double x). It did speed up my code significantly.  Fabien ran some tests and found out that it was almost twice as fast as Math.exp(): Here is the javadoc:  Computes exp(x), function result is nearly rounded. It will be correctly rounded to the theoretical value for 99.9% of input values, otherwise it will have a 1 UPL error. Method: Accuracy: Calculation is done with 63 bits of precision, so result should be correctly rounded for 99.9% of input values, with less than 1 ULP error otherwise.', 'questionId': '66402', 'answerId': '23963586'}
{'answer': "Yes, the Content-type header in the user agent's request should include multipart/form-data as described in (at least) the HTML4 spec: http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2", 'questionId': '66423', 'answerId': '66481'}
{'answer': 'You can call a method to get the content type. http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/ServletRequest.html#getContentType() According to http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2, the content type will be "multipart/form-data". Don\'t forget that: request.getContent() may return null. request.getContent() may not be equal to "multipart/form-data", but may just start with it. So, with all this in mind:', 'questionId': '66423', 'answerId': '66509'}
{'answer': "You'll have to read the request parameters in order to determine this, at least on some level.  The ServletRequest class has a getContentType method that you'll want to look at.", 'questionId': '66423', 'answerId': '66534'}
{'answer': 'If you are going to try using the request.getContentType() method presented above, be aware that: request.getContent() may return null. request.getContent() may not be equal to "multipart/form-data", but may just start with it. With this in mind, the check you should run is :', 'questionId': '66423', 'answerId': '579519'}
{'answer': 'ServletFileUpload implements isMultipartContent().  Perhaps you can lift this implementation (as opposed to going through the overhead to create a ServletFileUpload) for your needs. http://www.docjar.com/html/api/org/apache/commons/fileupload/servlet/ServletFileUpload.java.html', 'questionId': '66423', 'answerId': '7011086'}
{'answer': "Personally, I'm not even aware of Java bindings for OpenGL other than JOGL -- I think JOGL is pretty much the standard for Java OpenGL. It works in Windows, Linux, and OS X, but you might want to read over the official documentation for some notes about specific issues in each platform. Keep in mind that the OpenGL paradigm is quite different from Swing/AWT or the Java 2D API; OpenGL is not a drop-in replacement for Swing.", 'questionId': '66446', 'answerId': '66535'}
{'answer': 'JOGL My reasons can be quoted off the previously linked site: JOGL provides full access to the APIs in the OpenGL 2.0 specification as well as nearly all vendor extensions, and integrates with the AWT and Swing widget sets. Also if you want to have some fun learning and poking around, Processing is an excellent way to start (Processing also uses JOGL btw...)', 'questionId': '66446', 'answerId': '66577'}
{'answer': "I'd suggest checking out LWJGL, the LightWeight Java Game Library. It's got OpenGL bindings, but it also has OpenAL bindings and some great tutorials to get you started. Just keep in mind that Swing/SWT and OpenGL are generally used for entirely different things. You may end up wanting to use a combination of both. Just try LWJGL out and see how well it fits with what you're doing.", 'questionId': '66446', 'answerId': '66647'}
{'answer': "JOGL is probably the only option worth considering. Notice that there are at least two options for integrating it into an SWT application. There's a GLCanvas that belongs to SWT and a GLCanvas that belongs to AWT. The one in SWT is not feature complete and is not really maintained. It's much better to use the AWT GLCanvas inside a SWT_AWT container. Some code from a recent project:", 'questionId': '66446', 'answerId': '68392'}
{'answer': 'JOGL will give you best performance and portability. But be aware that learning JOGL, which is essentially the same as learning OpenGL, is not easy.', 'questionId': '66446', 'answerId': '345338'}
{'answer': 'We\'ve had lots of luck at work using JOGL. The new 2.0 version is at http://jogamp.org/ (the last "old" version is at http://download.java.net/media/jogl/builds/archive/jsr-231-1.1.1a/). For JOGL 2 with SWT specifically, I\'ve got a series of tutorials starting at http://wadeawalker.wordpress.com/2010/10/09/tutorial-a-cross-platform-workbench-program-using-java-opengl-and-eclipse/ that demonstrates exactly how to make cross-platform JOGL SWT applications, complete with installable native binaries. Or if you don\'t want to use Eclipse RCP, here\'s an even simpler example that just draws one triangle with JOGL 2 and SWT. To build it, put it in a project with swt.jar (from http://www.eclipse.org/swt/) and the latest JOGL autobuild .jar and .dll files (from http://jogamp.org/). The only problem with this simple example is that it won\'t be cross-platform without some extra help -- you need the ability that Eclipse RCP gives you to bundle multiple sets of platform libraries together into one project.', 'questionId': '66446', 'answerId': '4200153'}
{'answer': "The only way I know is to create a FocusListener and attach it to your component. If you want it this FocusListener to be global to all components in your application you might consider using Aspect Oriented Programming (AOP). With AOP is possible to code it once and apply your focus listener to all components instantiated in your app without having to copy-and-paste the component.addFocusListener(listener) code throughout your application.. Your aspect would have to intercept the creation of a JComponent (or the sub-classes you want to add this behaviour to) and add the focus listener to the newly created instance. The AOP approach is better than copy-and-pasting the FocusListener to your entire code because you keep it all in a single piece of code, and don't create a maintenance nightmare once you decide to change your global behavior like removing the listener for JSpinners. There are many AOP frameworks out there to choose from. I like JBossAOP since it's 100% pure Java, but you might like to take a look at AspectJ.", 'questionId': '66455', 'answerId': '66570'}
{'answer': 'When I\'ve needed this in the past, I\'ve created subclasses of the components I wanted to add "auto-clearing" functionality too.  eg: The biggest problem is that I haven\'t found a "good" way to get all the standard constructors without writing overrides.  Adding them, and forcing a call to addListener is the most general approach I\'ve found. Another option is to watch for ContainerEvents on a top-level container with a ContainerListeer to detect the presence of new widgets, and add a corresponding focus listener based on the widgets that have been added. (eg: if the container event is caused by adding a TextField, then add a focus listener that knows how to select all the text in a TextField, and so on.)  If a Container is added, then you need to recursively add the ContainerListener to that new sub-container as well. Either way, you won\'t need to muck about with focus listeners in your actual UI code -- it will all be taken care of at a higher level.', 'questionId': '66455', 'answerId': '66645'}
{'answer': "I haven't tried this myself (only dabbled in it a while ago), but you can probably get the current focused component by using: KeyboardFocusManager (there is a static method getCurrentKeyboardFocusManager()) an adding a PropertyChangeListener to it. From there, you can find out if the component is a JTextComponent and select all text.", 'questionId': '66455', 'answerId': '67376'}
{'answer': 'A separate class that attaches a FocusListener to the desired text field can be written.  All the focus listener would do is call selectAll() on the text widget when it gains the focus. By accepting a JTextComponent as an argument this behavior can be added to JTextArea, JPasswordField, and all of the other text editing components directly.  This also allows the class to add select all to editable combo boxes and JSpinners, where your control over the text editor component may be more limited.  Convenience methods can be added: Also, the remove listener methods are likely unneeded, since the listener contains no exterior references to any other instances, but they can be added to make code reviews go smoother.', 'questionId': '66455', 'answerId': '75244'}
{'answer': 'After reading the replies so far (Thanks!) I passed the outermost JPanel to the following method:  It works!', 'questionId': '66455', 'answerId': '86170'}
{'answer': 'have you looked at the tightVNC source?  It is fairly terse  http://www.tightvnc.com/download.html', 'questionId': '66504', 'answerId': '66569'}
{'answer': '[Suggested solution #1 of 3] Define an abstract property Name in the interface to force all implementing classes to implement the name property. (in c#) Add this property as abstract in the base class. In the implementations implement like this: Where name is a constant defined in that class. Advantages: Name itself defined as a constant. Interface mandates the property be created. Disadvantages: Duplication (which I hate). The exact same property accessor code pasted into every one of my implementations. Why cant that go in the base class to avoid the clutter?', 'questionId': '66505', 'answerId': '66546'}
{'answer': 'You may consider to use attributes instead of fields.', 'questionId': '66505', 'answerId': '66557'}
{'answer': "just add the name property to the base class and pass it ito the base class's constructor and have the constuctor from the derived class pass in it's command name", 'questionId': '66505', 'answerId': '66596'}
{'answer': ' Simple as that. Why bother having a static field? Obs.: Do not use a field in an abstract class that should be initiated in a subclass (like David B suggestion). What if someone extends the abstract class and forget to initiate the field?', 'questionId': '66505', 'answerId': '66602'}
{'answer': 'What I usually do (in pseudo): Of course, if this is a library that other developers will use, it wouldn\'t hurt if you add some reflection in the property to verify that the current instance in fact does implement the override or throw an exception "Not Implemented".', 'questionId': '66505', 'answerId': '66611'}
{'answer': '[Suggested solution #2 of 3] Make a private member variable name. Define an abstract property Name in the interface. Implement the property in the base class like this: Force all implementations to pass name as a constructor argument when calling the abstract base class constructor: Now all my implementations set the name in the constructor: Advantages: My accessor code is centralised in the base class.  The name is defined as a constant Disadvantages Name is now an instance variable - every instance of my Command classes makes a new reference rather than sharing a static variable.', 'questionId': '66505', 'answerId': '66618'}
{'answer': 'My answer will relate to Java, as that is what I know. Interfaces describe behavior, and not implementation. Additionally, static fields are tied to the classes, and not instances. If you declared the following: Then how could this code know which NAME to link to: How I would suggest to implement this, is one of the following ways: Class name convention, and the base class derives the name from the class name. If you wish to deviate from this, override the interface directly. The base class has a constructor which takes name Use annotations and enforce their presence through the base class. However, a much better solution is proabably to use enums: This is much cleaner, and allows you to use switch statements, and the NAME will be easily derived. You are however not able to extended the number of options runtime, but from your scenario description that might not be even needed.', 'questionId': '66505', 'answerId': '66631'}
{'answer': '[Suggested answer # 3 of 3] I have not tried this yet and it would not be so nice in Java (I think?) but I could just tag my classes with Attributes: [CammandAttribute(Name="HELP")] Then I can use reflection to get that static information. Would need some simple helper methods to make the information easily available to the clients of the class but this could go in the base class.', 'questionId': '66505', 'answerId': '66658'}
{'answer': "As you mentioned, there is no way to enforce this from the interface level. Since you are using an abstract class, however, what you can do is declare the property as abstract in the base class which will force the inheriting class it override it. In C#, that would look like this: (Note that the protected set prevents outside code changing the name.) This may not be exactly what you're looking for, but it's as close as I think you can get. By definition, static fields do not vary; you simply can't have a member that is both static and overridable for a given class.", 'questionId': '66505', 'answerId': '66679'}
{'answer': "From a design perspective, I think it is wrong to require a static implementation member...  The relative deference between performance and memory usage between static and not for the example string is minimal.  That aside, I understand that in implementation the object in question could have a significantly larger foot print... The essential problem is that by trying to setup a model to support static implementation members that are avaialble at a base or interface level with C# is that our options are limited...  Only properties and methods are available at the interface level. The next design challenge is whether the code will be base or implementation specific.  With implementation your model will get some valdiation at compile time at the code of having to include similar logic in all implementations.  With base your valdiation will occur at run time but logic would be centralized in one place.  Unfortunately, the given example is the perfect show case for implemntation specific code as there is no logic associated with the data. So for sake of the example, lets assume there is some actual logic associated with the data and that it is extensive nad/or complex enough to provide a showcase for base classing.  Setting aside whether the base class logic uses any impelementation details or not, we have the problem of insuring implemtation static initialization.  I would recommend using an protected abstract in the base class to force all implementations to created the needed static data that would be valdated at compile time.  All IDE's I work with make this very quick any easy.  For Visual Studio it only takes a few mouse clicks and then just changing the return value essentially. Circling back to the very specific nature of the question and ignoring many of the other design problems...  If you really must keep this entire to the nature of static data and still enforce it thru the nature confines of the problem...  Definately go with a method over properties, as there are way to many side effects to make go use of properties.  Use a static member on the base class and use a static constructor on the implementations to set the name.  Now keep in mind that you have to valdiate the name at run-time and not compile time.  Basically the GetName method on the base class needs to handle what happens when an implementation does not set it's name.  It could throw an exception making it brutally apparent that something is worng with an implementation that was hopefulyl cause by testing/QA and not a user.  Or you could use reflection to get the implementation name and try to generate a name...  The problem with reflection is that it could effect sub classes and set up a code situation that would be difficult for a junior level developer to understand and maintain... For that matter you could always generate the name from the class name thru reflection...  Though in the long term this could be a nightmare to maintain...  It would however reduce the amount of code needed on the implementations, which seems more important than any other concerns.  Your could also use attributes here as well, but then you are adding code into the implementations that is equivalent in time/effort as a static constructor and still have the problem off what todo when the implementation does not include that information.", 'questionId': '66505', 'answerId': '74982'}
{'answer': 'What about something like this: Now you can access the information statically: And from you base class:', 'questionId': '66505', 'answerId': '227578'}
{'answer': "The Hibernate annotations docs (http://www.hibernate.org/hib_docs/annotations/reference/en/html_single/) suggest that this should be a class-level annotation rather than occurring inline within your code.  And indeed when I paste that code into my IDE and move it around, the compile errors are present when the annotation is inline, but vanish when I put it in above the class declaration: ...obviously I have no evidence that the above code will actually work.  I have only verified that it doesn't cause compile errors.", 'questionId': '66528', 'answerId': '66697'}
{'answer': "Your example comes straight out of the API docs which are unfortunately poorly presented. Your annotation should be placed on some class, probably the one in which you will be creating the query to use the result set mapping. However, it actually doesn't matter where this annotation is placed. Your JPA provider will actually maintain a global list of all these mappings, so no matter where you define it, you will be able to use it anywhere. This is a shortcoming of the annotation method (as opposed to specifying things in XML.) Many other things in the JPA (i.e. named queries) are defined this same way. It makes it seem like there's some kind of connection between the thing being defined and the class on which it is annotated, when it's not.", 'questionId': '66528', 'answerId': '66825'}
{'answer': "In practice, it usually decides to do a garbage collection.  The answer varies depending on lots of factors, like which JVM you're running on, which mode it's in, and which garbage collection algorithm it's using.   I wouldn't depend on it in your code.  If the JVM is about to throw an OutOfMemoryError, calling System.gc() won't stop it, because the garbage collector will attempt to free as much as it can before it goes to that extreme.  The only time I've seen it used in practice is in IDEs where it's attached to a button that a user can click, but even there it's not terribly useful.", 'questionId': '66540', 'answerId': '66573'}
{'answer': "System.gc() is implemented by the VM, and what it does is implementation specific. The implementer could simply return and do nothing, for instance.  As for when to issue a manual collect, the only time when you may want to do this is when you abandon a large collection containing loads of smaller collections--a  Map<String,<LinkedList>>   for instance--and you want to try and take the perf hit then and there, but for the most part, you shouldn't worry about it. The GC knows better than you--sadly--most of the time.", 'questionId': '66540', 'answerId': '66582'}
{'answer': "You have no control over GC in java -- the VM decides.  I've never run across a case where System.gc() is needed.  Since a System.gc() call simply SUGGESTS that the VM do a garbage collection and it also does a FULL garbage collection (old and new generations in a multi-generational heap), then it can actually cause MORE cpu cycles to be consumed than necessary. In some cases, it may make sense to suggest to the VM that it do a full collection NOW as you may know the application will be sitting idle for the next few minutes before heavy lifting occurs.  For example, right after the initialization of a lot of temporary object during application startup (i.e., I just cached a TON of info, and I know I won't be getting much activity for a minute or so).  Think of an IDE such as eclipse starting up -- it does a lot to initialize, so perhaps immediately after initialization it makes sense to do a full gc at that point.", 'questionId': '66540', 'answerId': '66601'}
{'answer': "In short: Parameters is VM dependent. Example usage- can't think of one for runtime/production apps, but it is useful to run it for some profiling harnesses, like calling", 'questionId': '66540', 'answerId': '66640'}
{'answer': "I can't think of a specific example when it is good to run explicit GC.  In general, running explicit GC can actually cause more harm than good, because an explicit gc will trigger a full collection, which takes significantly longer as it goes through every object.  If this explicit gc ends up being called repeatedly it could easily lead to a slow application as a lot of time is spent running full GCs. Alternatively if going over the heap with a heap analyzer and you suspect a library component to be calling explicit GC's you can turn it off adding: gc=-XX:+DisableExplicitGC  to the JVM parameters.", 'questionId': '66540', 'answerId': '66650'}
{'answer': "You need to be very careful if you call System.gc(). Calling it can add unnecessary performance issues to your application, and it is not guaranteed to actually perform a collection. It is actually possible to disable explicit System.gc() via the java argument -XX:+DisableExplicitGC. I'd highly recommend reading through the documents available at Java HotSpot Garbage Collection for more in depth details about garbage collection.", 'questionId': '66540', 'answerId': '66692'}
{'answer': 'The only example I can think of where it makes sense to call System.gc() is when profiling an application to search for possible memory leaks. I believe the profilers call this method just before taking a memory snapshot.', 'questionId': '66540', 'answerId': '66694'}
{'answer': "Most JVMs will kick off a GC (depending on the -XX:DiableExplicitGC and -XX:+ExplicitGCInvokesConcurrent switch). But the specification is just less well defined in order to allow better implementations later on. The spec needs clarification: Bug #6668279: (spec) System.gc() should indicate that we don't recommend use and don't guarantee behaviour Internally the gc method is used by RMI and NIO, and they require synchronous execution, which: this is currently in discussion: Bug #5025281: Allow System.gc() to trigger concurrent (not stop-the-world) full collections", 'questionId': '66540', 'answerId': '75536'}
{'answer': "Normally, the VM would do a garbage collection automatically before throwing an OutOfMemoryException, so adding an explicit call shouldn't help except in that it perhaps moves the performance hit to an earlier moment in time. However, I think I encountered a case where it might be relevant. I'm not sure though, as I have yet to test whether it has any effect: When you memory-map a file, I believe the map() call throws an IOException when a large enough block of memory is not available. A garbage collection just before the map() file might help prevent that, I think. What do you think?", 'questionId': '66540', 'answerId': '532295'}
{'answer': "If you use direct memory buffers, the JVM doesn't run the GC for you even if you are running low on direct memory. If you call ByteBuffer.allocateDirect() and you get an OutOfMemoryError you can find this call is fine after triggering a GC manually.", 'questionId': '66540', 'answerId': '534040'}
{'answer': 'we can never force garbage collection. System.gc is only suggesting vm for garbage collection, however, really what time the mechanism runs, nobody knows, this is as stated by JSR specifications.', 'questionId': '66540', 'answerId': '4061787'}
{'answer': 'There is a LOT to be said in taking the time to test out the various garbage collection settings, but as was mentioned above it usually not useful to do so. I am currently working on a project involving a memory-limited environment and a relatively large amounts of data--there are a few large pieces of data that push my environment to its limit, and even though I was able to bring memory usage down so that in theory it should work just fine, I would still get heap space errors---the verbose GC options showed me that it was trying to garbage collect, but to no avail. In the debugger, I could perform System.gc() and sure enough there would be "plenty" of memory available...not a lot of extra, but enough. Consequently, The only time my application calls System.gc() is when it is about to enter the segment of code where large buffers necessary for processing the data will be allocated, and a test on the free memory available indicates that I\'m not guaranteed to have it.  In particular, I\'m looking at a 1gb environment where at least 300mb is occupied by static data, with the bulk of the non-static data being execution-related except when the data being processed happens to be at least 100-200 MB at the source.  It\'s all part of an automatic data conversion process, so the data all exists for relatively short periods of time in the long run. Unfortunately, while information about the various options for tuning the garbage collector is available, it seems largely an experimental process and the lower level specifics needed to understand how to handle these specific situations are not easily obtained.   All of that being said, even though I am using System.gc(), I still continued to tune using command line parameters and managed to improve the overall processing time of my application by a relatively significant amount, despite being unable to get over the stumbling block posed by working with the larger blocks of data.   That being said, System.gc() is a tool....a very unreliable tool, and if you are not careful with how you use it, you will wish that it didn\'t work more often than not.', 'questionId': '66540', 'answerId': '5217683'}
{'answer': 'Accroding to Thinking in Java by Bruce Eckel, one use case for explicit System.gc() call is when you want to force finalization, i.e. the call to finalize method.', 'questionId': '66540', 'answerId': '7494724'}
{'answer': 'while system.gc works,it will stop the world:all respones are stopped so garbage collector can scan every object to check if it is needed deleted. if the application is a web project, all request are stopped until gc finishes,and this will cause your web project can not work in a monent.', 'questionId': '66540', 'answerId': '11359998'}
{'answer': "If you want to know if your System.gc() is called, you can with the new Java 7 update 4 get notification when the JVM performs Garbage Collection. I am not 100% sure that the GarbageCollectorMXBean class was introduces in Java 7 update 4 though, because I couldn't find it in the release notes, but I found the information in the javaperformancetuning.com site", 'questionId': '66540', 'answerId': '11649198'}
{'answer': "Garbage Collection is Good in Java, if we are executing Software coded in java in Desktop/laptop. Because it will be having very high performing Heavy Duty RAM, you can Call System.GC() or Runtime.c() in Java. But don't use Garbage collection explicitly in Android because it slow downs your activity. In fact Context to Context Android implicitly Calls System.gc().", 'questionId': '66540', 'answerId': '16251925'}
{'answer': 'The Java Language Specification does not guarantee that the JVM will start a GC when you call System.gc(). This is the reason of this "may or may not decide to do a GC at that point". Now, if you look at OpenJDK source code, which is the backbone of Oracle JVM, you will see that a call to System.gc() does start a GC cycle. If you use another JVM, such as J9, you have to check their documentation to find out the answer. For instance, Azul\'s JVM has a garbage collector that runs continuously, so a call to System.gc() won\'t do anything Some other answer mention starting a GC in JConsole or VisualVM. Basically, these tools make a remote call to System.gc(). Usually, you don\'t want to start a garbage collection cycle from your code, as it messes up with the semantics of your application. Your application does some business stuff, the JVM takes care of memory management. You should keep those concerns separated (don\'t make your application do some memory management, focus on business). However, there are few cases where a call to System.gc() might be understandable. Consider, for example, microbenchmarks. No-one wants to have a GC cycle to happen in the middle of a microbenchmark. So you may trigger a GC cycle between each measurement to make sure every measurement starts with an empty heap.', 'questionId': '66540', 'answerId': '16496206'}
{'answer': "First I would say, don't rewrite all your tests just to suit the latest fad.  Junit3 works perfectly well, and the introduction of annotations in 4 doesn't buy you very much (in my opinion).  It is much more important that you guys write tests, and it sounds like you do.   Use whatever seems most natural and helps you get your work done. I can't comment on TestNG b/c I haven't used it.  But I would recommend unitils, a great wrapper for JUnit/TestNG/DBUnit/EasyMock, regardless of which route you take. (It supports all the flavors mentioned above)", 'questionId': '6658', 'answerId': '6659'}
{'answer': 'I\'ve used both, but I have to agree with Justin Standard that you shouldn\'t really consider rewriting your existing tests to any new format.  Regardless of the decision, it is pretty trivial to run both.  TestNG strives to be much more configurable than JUnit, but in the end they both work equally well. TestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.  Thus you can mark tests that run slowly as in the "slow" group and then ignore them when you want quick results.  A suggestion from their documentation is to mark some subset as "checkin" tests which should be run whenever you check new files in.  I never saw such a feature in JUnit, but then again, if you don\'t have it, you don\'t REALLY miss it. For all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn\'t do what I wanted to do... I wish I could remember what it is, but I wanted to bring it up so you know that it\'s not perfect. The biggest advantage TestNG has is annotations... which JUnit added in version 4 anyways.', 'questionId': '6658', 'answerId': '6671'}
{'answer': "About a year ago, we had the same problem. I spent sometime considering which move was better, and eventually we realized that TestNG has no 'killer features'. It's nice, and has some features JUnit 4 doesn't have, but we don't need them. We didn't want people to feel uncomfortable writing tests while getting to know TestNG because we wanted them to keep writing a lot of tests. Also, JUnit is pretty much the de-facto standard in the Java world. There's no decent tool that doesn't support it from the box, you can find a lot of help on the web and they added a lot of new features in the past year which shows it's alive. We decided to stick with JUnit and never looked back.", 'questionId': '6658', 'answerId': '6713'}
{'answer': "TestNG's biggest draw cards for me include its support test groups, and more importantly - test group dependencies (marking a test as being dependent of a group causes the tests to simply skip running when the dependent group fails). TestNG's other big draw cards for me include test parameters, data providers, annotation transformers, and more than anything - the vibrant and responsive user community. Whilst on the surface one might not think all of TestNGs features above might not be needed, once you start to understand the flexibility bring to your tests, you'll wonder how you coped with JUnit. (disclaimer - I've not used JUnit 4.x at all, so am unable to really comment on advances or new features there).", 'questionId': '6658', 'answerId': '14412'}
{'answer': 'A couple of additions to Mike Stone\'s reply: 1) The most frequent thing I use TestNG\'s groups for is when I want to run a single test method in a test suite.  I simply add this test to the group "phil" and then run this group.  When I was using JUnit 3, I would comment out the entries for all methods but the one I wanted to run in the "suite" method, but then would commonly forget to uncomment them before checkin.  With the groups, I no longer have this problem. 2) Depending on the complexity of the tests, migrating tests from JUnit3 to TestNG can be done somewhat automatically with sed and creating a base class to replace TestCase that static imports all of the TestNG assert methods. I have info on my migration from JUnit to TestNG here and here.', 'questionId': '6658', 'answerId': '46727'}
{'answer': "Also one more advantage of TestNG is supporting of parallel testing. In our era of multicores it's important, i think. I also used both frameworks. But i using hamcrest for assertations. Hamcrest allows you easily write your own assert method. So instead of You can write That gives you opportunity to use higher level of abstraction in your tests. And this makes your tests more robust.", 'questionId': '6658', 'answerId': '430893'}
{'answer': 'I wanted to share the one I encountered today. I found built-in Parameterized runner is quite crude in Junit4 as compare to TestNG (I know each framework has its strengths but still). The Junit4 annotation @parameters is restricted to one set of parameters. I encountered this problem while testing the valid and invalid behavior for functionality in same test class. So the first public, static annotated method that it finds will be used, but it may find them in any order. This causes us to write different classes unnecessarily. However TestNG provides clean way to provide different kind of data providers for each and every method. So we can test the same unit of code with valid and invalid way in same test class putting the valid/invalid data separately. I will go with TestNG.', 'questionId': '6658', 'answerId': '1232919'}
{'answer': "Cheers to all the above. Some other things I've personally found I like more in TestNG are: The @BeforeClass for TestNG takes place after class creation, so you aren't constrained by only being able to call static methods of your class in it. Parallel and parameterized tests, maybe I just don't have enough of a life... but I just get a kick writing one set of Selenium tests, accepting a driver name as a parameter. Then defining 3 parallel test groups, 1 each for the IE, FF and Chrome drivers, and watching the race! I originally did 4, but way too many of the pages I've worked on break the HtmlUnit driver for one reason or another. Yeah, probably need to find that life. ;)", 'questionId': '6658', 'answerId': '3522444'}
{'answer': 'I like the neat and easy integration of TestNG with Guice.', 'questionId': '6658', 'answerId': '14729899'}
{'answer': "Your question seems two folded to me. On one had you would like to compare two test frameworks, on the other hand you would like to implement tests easily, have natural assertions, etc... Ok, firstly JUnit has been playing catchup with TestNG in terms of functionality, they have bridged the gap some what with v4, but not well enough in my opinion. Things like annotations and dataproviders are still much better in TestNG. Also they are more flexible in terms of test execution, since TestNG has test dependency, grouping and ordering. JUnit still requires certain before/after methods to be static, which limits what you can do prior to the running of tests, TestNG never has this issue. TBH, mostly the differences between the two frameworks don't mean much, unless your focusing on integration/automation testing. JUnit from my experience is built from the ground up for unit testing and is now being pushed towards higher levels of testing, which IMO makes it the wrong tool for the job. TestNG does well at unit testing and due to its robust dataproviding and great test execution abilities, works even better at integration/automation test level. Now for what I believe is a separate issue, how to write well structured, readable and maintainable tests. Most of this I am sure you know, but things like Factory Pattern, Command Pattern and PageObjects (if your testing websites) are vital, it is very important to have a layer of abstraction between what your testing (SUT) and what the actual test is (assertions of business logic). In order to have much nicer assertions, you can use Hamcrest. Make use of javas inheritance/interfaces to reduce repetition and enforce commonality. Almost forgot, also use the Test Data Builder Pattern, this coupled with TestNG's dataprovider annotation is very useful.", 'questionId': '6658', 'answerId': '17062476'}
{'answer': 'My opinion about what makes TestNG truly far more powerful:', 'questionId': '6658', 'answerId': '22897063'}
{'answer': 'JUnit 4 Vs TestNG  Comparison by mkyong.com ( updated on 2013). Conclusion: I suggest to use TestNG as core unit test framework for Java project, because TestNG is more advance in parameterize testing, dependency testing and suite testing (Grouping concept).  TestNG is meant for functional, high-level testing and complex integration test. Its flexibility is especially useful with large test suites.  In addition, TestNG also cover the entire core JUnit4 functionality. Its just no reason for me to use JUnit anymore. You can find more detailed comparison here.', 'questionId': '6658', 'answerId': '38111186'}
{'answer': 'No I do not believe so.  The catch block will run to completion before the finally block. Otherwise you can add a synchronize() object that the exception code will use, that you can check in the finally block, which would help you identify if in a seperate thread you are running an exception.', 'questionId': '66643', 'answerId': '66664'}
{'answer': "If a function throws and you want to catch the exception, you'll have to wrap the function in a try block, it's the safest way. So in your example:", 'questionId': '66643', 'answerId': '66673'}
{'answer': 'Set a flag variable, then check for it in the finally clause, like so:', 'questionId': '66643', 'answerId': '66705'}
{'answer': "Do you mean you want the finally block to act differently depending on whether the try block completed successfully? If so, you could always do something like: That's getting pretty convoluted, though... you might want to think of a way to restructure your code to make doing this unnecessary.", 'questionId': '66643', 'answerId': '66706'}
{'answer': 'If you find yourself doing this, then you might have a problem with your design.  The idea of a "finally" block is that you want something done regardless of how the method exits.  Seems to me like you don\'t need a finally block at all, and should just use the try-catch blocks:', 'questionId': '66643', 'answerId': '66740'}
{'answer': "In the flags for the javac compiler, set the -encoding flag, so in your case you'd mark it as", 'questionId': '66668', 'answerId': '66721'}
{'answer': 'You may not want to change the capitalization -- different cultures capitalize different words (for example, in German you capitalize every noun, not just proper nouns).', 'questionId': '66750', 'answerId': '66771'}
{'answer': "Not all languages share english capitalization rules. I guess you'd need to alter the data used by the API, but your non-english clients might not appreciate it... about.com on french capitalization", 'questionId': '66750', 'answerId': '66784'}
{'answer': 'Capitalisation rules are different for different languages.  In French, month names should not be capitalised.', 'questionId': '66750', 'answerId': '66794'}
{'answer': 'I\'m having a problem now where a sentence begins with "dimanche 07 mars", which wouldn\'t matter if it were not at the beginning of a sentence. I guess this cannot be changed, unless I do manual string manipulation on the first character of the string.', 'questionId': '66750', 'answerId': '15253817'}
{'answer': 'tl;dr lundi Localize As others stated, you should not be forcing your own parochial (US English?) notions of capitalization. Use a decent date-time library, and let it automatically localize for you. java.time You are using terrible old date-time classes that are now legacy, supplanted by the java.time classes. The LocalDate class represents a date-only value without time-of-day and without time zone. A time zone is crucial in determining a date. For any given moment, the date varies around the globe by zone. For example, a few minutes after midnight in Paris France is a new day while still yesterday in Montral Qubec. Specify a proper time zone name in the format of continent/region, such as America/Montreal, Africa/Casablanca, or Pacific/Auckland. Never use the 3-4 letter abbreviation such as EST or IST as they are not true time zones, not standardized, and not even unique(!).  To work with a month, extract a Month enum object. Ditto for day-of-week, DayOfWeek.  Call getDisplayName. Pass a TextStyle for abbreviation. Pass a Locale to determine (a) the human language for translation of name of day, name of month, and such, and (b) the cultural norms deciding issues of abbreviation, capitalization, punctuation, separators, and such. Note that Locale has nothing to do with time zone. and About java.time The java.time framework is built into Java 8 and later. These classes supplant the troublesome old legacy date-time classes such as java.util.Date, Calendar, & SimpleDateFormat. The Joda-Time project, now in maintenance mode, advises migration to the java.time classes. To learn more, see the Oracle Tutorial. And search Stack Overflow for many examples and explanations. Specification is JSR 310. Where to obtain the java.time classes?  Java SE 8, Java SE 9, and later Built-in.  Part of the standard Java API with a bundled implementation. Java 9 adds some minor features and fixes. Java SE 6 and Java SE 7 Much of the java.time functionality is back-ported to Java 6 & 7 in ThreeTen-Backport. Android The ThreeTenABP project adapts ThreeTen-Backport (mentioned above) for Android specifically. See How to use ThreeTenABP. The ThreeTen-Extra project extends java.time with additional classes. This project is a proving ground for possible future additions to java.time. You may find some useful classes here such as Interval, YearWeek, YearQuarter, and more.', 'questionId': '66750', 'answerId': '45249515'}
{'answer': "Is there a valid <servlet-mapping> for 'MyServlet' in your web.xml?  That's been my number one culprit in the past", 'questionId': '66767', 'answerId': '66792'}
{'answer': 'A 404 error means that the requested resource was not found.  As pkaeding suggests, it is probably due to the servlet mapping not being correct (or not being present) in the web.xml file.  Servlets must be specified in the web.xml file, and not only that, but they must be mapped to particular paths (an "url-mapping").  If the "MyServlet" servlet exists, but is not mapped to a path that may resolve with "/MyServlet/MyServlet" based on the application context root, and nothing else (i.e. another servlet, etc) resolves with this path, the application server will throw a 404 stating that nothing is mapped to the given path.', 'questionId': '66767', 'answerId': '66821'}
{'answer': "I just spent about an hour pulling my hair out on this very problem. Tomcat 5.5.27 on OSX was working just fine until I'd added another servlet and servlet-mapping at which point everything was returning a 404. I hadn't realized it, but when I'd added a new servlet/servlet-mapping pair I'd put the servlet-mapping before the servlet entry. It's an easy mistake to make and, although knee-capping the entire application without giving anything resembling a sensible error message seems a little extreme, it makes perfect sense in retrospect.", 'questionId': '66767', 'answerId': '196427'}
{'answer': 'Servlet mapping is a common problem.  But if you have any fitlers in your web.xml those can be the culprit as well.  One thing to realize is filters always execute the code before the doFilter before any servlets starts executing.  (Technically filters execute code after the doFilter)  In our code we created filters that would return 404 under certain situations.  Sometimes removing some or all filters-mapping will help discover if it is related to filter-mappings.', 'questionId': '66767', 'answerId': '1261685'}
{'answer': 'I would try using DWR to integrate JavaScript with your Java app. It makes Java to JavaScript communication transparent and only requires one servlet + configuration of what to expose. I havent done this with JMS, but it should work the same. There are three technologies that together solve all my integration problems, Spring, Mule, and DWR.', 'questionId': '66840', 'answerId': '66943'}
{'answer': "You'll find some references to the Dojo/Bayeux approach here http://www.pathf.com/blogs/2006/08/bayeux_a_json_p/ If you're using WebSphere 6.0 or higher then the Web 2.0 Feature Pack includes an implementation.", 'questionId': '66840', 'answerId': '67047'}
{'answer': 'I think this is your answer.  Looks like it is baked in to ActieMQ.  I tried the examples and they seem to work. http://activemq.apache.org/ajax.html', 'questionId': '66840', 'answerId': '68981'}
{'answer': 'The Seam framework supports subscription to JMS topics from a JavaScript based client: http://docs.jboss.com/seam/2.0.2.GA/reference/en-US/html/remoting.html#d0e14169', 'questionId': '66840', 'answerId': '101508'}
{'answer': "Unfortunately, different versions of the Java Plug-In have different caching behaviors. Setting your Cache-Control and Last-Modified HTTP headers is the ideal solution, but it only works under the most recent versions of the JRE.  The only solution GUARANTEED to work is to rename your application jars when their versions change (we've seen strange caching behavior when trying other tricks like adding query strings based on file dates). This isn't so difficult to do if you have a properly automated deployment system.", 'questionId': '66875', 'answerId': '66942'}
{'answer': 'As per this link  , same jar file should not be listed int "archive" and "cache_archive" params. In that case, the JAR file is cached using the native browser cache.', 'questionId': '66875', 'answerId': '9582242'}
{'answer': 'You can remove applet from Java cache using Java Control Panel. For example, on Win XP', 'questionId': '66875', 'answerId': '15113420'}
{'answer': "You can use a regular expression with this pattern: That will tell you if it's an IPv4 address.", 'questionId': '66923', 'answerId': '66944'}
{'answer': 'You can see if the string matches the number.number.number.number format, for example: will match anything from 0 - 999. Anything else you can have it default to hostname.', 'questionId': '66923', 'answerId': '66947'}
{'answer': 'Do we get to make the assumption that it is one or the other, and not something completely different?  If so, I\'d probably use a regex to see if it matched the "dotted quad" format.', 'questionId': '66923', 'answerId': '66948'}
{'answer': "Couldn't you just to a regexp match on it?", 'questionId': '66923', 'answerId': '66951'}
{'answer': ' That code will validate the IP address or Hostname. (It throws a malformed URI Exception if the string is invalid) If you are trying to distinguish the two..then I miss read your question.', 'questionId': '66923', 'answerId': '66989'}
{'answer': "You can use a security manager with the InetAddress.getByName(addr) call.  If the addr is not a dotted quad, getByName will attempt to perform a connect to do the name lookup, which the security manager can capture as a checkConnect(addr, -1) call, resulting in a thrown SecurityException that you can catch. You can use System.setSecurityManager() if you're running fully privileged to insert your custom security manager before the getByName call is made.", 'questionId': '66923', 'answerId': '67156'}
{'answer': "It is not as simple as it may appear, there are some ambiguities around characters like hyphens, underscore, and square brackets '-', '_', '[]'. The Java SDK is has some limitations in this area.  When using InetAddress.getByName it will go out onto the network to do a DNS name resolution and resolve the address, which is expensive and unnecessary if all you want is to detect host vs address.  Also, if an address is written in a slightly different but valid format (common in IPv6) doing a string comparison on the results of InetAddress.getByName will not work. The IPAddress Java library will do it.  The javadoc is available at the link.  Disclaimer: I am the project manager. Output:", 'questionId': '66923', 'answerId': '40135432'}
{'answer': "The document in question discusses the Solaris threading model and how the VM maps to it. This has nothing to do with Linux. Also, the document discusses performance only. The program's overall behaviour should not change no matter what you choose. Java's exposed threading model is the same on every platform and defined in the Java specifications. To a Java application, the underlying OS should be completely transparent even for threading. If you have to know, though ... The Sun JVM maps its threads 1:1 to Windows threads. It doesn't use multiple processes or fibers.", 'questionId': '67183', 'answerId': '67870'}
{'answer': "That document is a little more about Solaris threading than the Java threading model. All JVMs call the native thread API of the OS they're written for so there is always one Java thread for an OS thread. The diagram in the document shows that it's not until the threads are in the OS space that they change. Each OS can handle threads in different ways for Windows specific documentation here is a good place to start: MSDN About Processes and Threads. For a long time various flavours of *nix have implemented their threads with processes rather than actual threads it seems that those specific tuning parameters where there to sort of ease the transition to a newer threading model in Solaris. Which made the older model and those JVM options obsolete. For a list of JVM options for the HotSpot JVM you can look at: HotSpot VM Options. A lot of these are useful for tuning long running applications but you can also get into trouble with them if you don't understand what they're doing. Also keep in mind that each implementation of the JVM can have a different set of options you won't find some of them on IBM's VM or BEA's.", 'questionId': '67183', 'answerId': '67909'}
{'answer': "It really depends on the specific JVM implementation. I assume you're wondering about Sun's Windows JVM, and I can tell you with certainty that the Sun JVM maps a Java thread to an OS thread. You could try spawning up a couple of threads from Java code, open up Task Manager and see what happened.", 'questionId': '67183', 'answerId': '68903'}
{'answer': 'To answer you question most directly, precise semantics on how threads are implemented are deliberately left undefined by the JVM specification. FWIW, Sebastion\'s statement that "Java\'s exposed threading model is the same on every platform and defined in the Java specifications. To a Java application, the underlying OS should be completely transparent even for threading", is inaccurate. I have found significant empirical differences between threading under Windows and Linux regarding thread starvation using wait/notify.  Linux is significantly more prone to starvation when the many threads contend for a single lock - to the extent that I had to load up 3 orders of magnitude more threads in Windows to cause starvation than in Linux.  For heavily contended locks the Java concurrency locks with a fair modifier become critical. To illustrate numbers, I had problems under Linux with one lock heavily contended by 31 threads, where the same code under Windows required 10,000 (yes, that\'s 10 thousand) threads to begin to demonstrate starvation problems. To make matters worse, there have been 3 different threading models under Linux, each of which have different characteristics. Mostly, threading has been transparent in my experience, but issues of contention deserve careful consideration.', 'questionId': '67183', 'answerId': '255653'}
{'answer': 'Check if the input stream is positioned in the begging. Otherwise, as implementation: I do not think that you need to write to the result stream while you are reading, unless you process this exact stream in another thread. Just create a byte array, read the input stream, then create the output stream.', 'questionId': '67275', 'answerId': '67367'}
{'answer': 'It is unclear how you got the zipStream. It should work when you get it like this:', 'questionId': '67275', 'answerId': '67377'}
{'answer': "I'd use IOUtils from the commons io project.", 'questionId': '67275', 'answerId': '67403'}
{'answer': 'You probably tried reading from a FileInputStream like this: This wont work since a zip archive can contain multiple files and you need to specify which file to read. You could use java.util.zip.ZipFile and a library such as IOUtils from Apache Commons IO or ByteStreams from Guava that assist you in copying the stream. Example:', 'questionId': '67275', 'answerId': '67719'}
{'answer': 't is unclear how you got the zipStream. It should work when you get it like this: If you are obtaining the ZipInputStream from a ZipFile you can get one stream for the 3d party library, let it use it, and you obtain another input stream using the code before. Remember, an inputstream is a cursor. If you have the entire data (like a ZipFile) you can ask for N cursors over it. A diferent case is if you only have an "GZip" inputstream, only an zipped byte stream. In that case you ByteArrayOutputStream buffer makes all sense.', 'questionId': '67275', 'answerId': '67765'}
{'answer': 'I would call getNextEntry() on the ZipInputStream until it is at the entry you want (use ZipEntry.getName() etc.).  Calling getNextEntry() will advance the "cursor" to the beginning of the entry that it returns.  Then, use ZipEntry.getSize() to determine how many bytes you should read using zipInputStream.read().', 'questionId': '67275', 'answerId': '68187'}
{'answer': 'You could implement your own wrapper around the ZipInputStream that ignores close() and hand that off to the third-party library.', 'questionId': '67275', 'answerId': '69177'}
{'answer': "Your loop looks valid - what does the following code (just on it's own) return? if it's returning -1, then the zipStream is closed before you get it, and all bets are off.  It's time to use your debugger and make sure what's being passed to you is actually valid. When you call getNextEntry(), does it return a value, and is the data in the entry meaningful (i.e. does getCompressedSize() return a valid value)?  IF you are just reading a Zip file that doesn't have read-ahead zip entries embedded, then ZipInputStream isn't going to work for you. Some useful tidbits about the Zip format: Each file embedded in a zip file has a header.  This header can contain useful information (such as the compressed length of the stream, it's offset in the file, CRC) - or it can contain some magic values that basically say 'The information isn't in the stream header, you have to check the Zip post-amble'. Each zip file then has a table that is attached to the end of the file that contains all of the zip entries, along with the real data.  The table at the end is mandatory, and the values in it must be correct.  In contrast, the values embedded in the stream do not have to be provided. If you use ZipFile, it reads the table at the end of the zip.  If you use ZipInputStream, I suspect that getNextEntry() attempts to use the entries embedded in the stream.  If those values aren't specified, then ZipInputStream has no idea how long the stream might be.  The inflate algorithm is self terminating (you actually don't need to know the uncompressed length of the output stream in order to fully recover the output), but it's possible that the Java version of this reader doesn't handle this situation very well. I will say that it's fairly unusual to have a servlet returning a ZipInputStream (it's much more common to receive an inflatorInputStream if you are going to be receiving compressed content.", 'questionId': '67275', 'answerId': '69489'}
{'answer': 'Please try code bellow', 'questionId': '67275', 'answerId': '2093184'}
{'answer': "You're missing call ZipEntry entry = (ZipEntry) zipStream.getNextEntry();  to position the first byte decompressed of the first entry.", 'questionId': '67275', 'answerId': '9999404'}
{'answer': "I don't know about Java and 2008... but you shouldn't have too much trouble with Java and SQL2000. As lubos suggested, you'd be doing yourself a favour to look at c# but if you're much more comfortable with Java then there shouldn't be any real limitations as the JDBC connector is supported by Microsoft", 'questionId': '6765', 'answerId': '6779'}
{'answer': "I've worked on a project using MSQL Server in conjunction with a Java Stack. It works very well and as long, since JDBC shouldn't really care about your database. We used ehcache together with Hibernate and had problems with the MS JDBC Driver, so we switched to jtds and it works really good. It's quite a while ago, so you still might wanna give the MS driver a chance...", 'questionId': '6765', 'answerId': '6902'}
{'answer': "We've been running an application using Hibernate talking to multiple remote MSQL Server instances for a few years now and we also switched to the jTDS driver early on after a few issues with the M$ driver. Since the switch we haven't had any issues at all. However, it's not a complicated application so it doesn't use any LOB's. Hope that helps.", 'questionId': '6765', 'answerId': '9652'}
{'answer': "jTDS is excellent. I've been using it for years without issue in high-availability production environments.", 'questionId': '6765', 'answerId': '9743'}
{'answer': 'I would lean towards the jTDS driver.  The MSSQL driver has a limitation where you cannot re-read the same column twice.  This happens frequently when using Hibernate.', 'questionId': '6765', 'answerId': '85919'}
{'answer': "The JDBC driver works well with SQL Server 2008, I've not had any problems with it.  The version that you need to download depends on the version of the JRE you have installed.  JRE6 uses JDBC4, JRE7 uses JDBC4.1, etc.  Once you download the correct driver from Microsoft and run the installer you will need to copy the  sqljdbc_auth.dll from the \\auth directory to the c:\\windows\\system32 directory.  Then can then use this code to make a connection: In your header: and in your class:", 'questionId': '6765', 'answerId': '38664293'}
{'answer': 'I just Googled it.  :) http://bugs.sakaiproject.org/confluence/display/BOOT/Setting+Up+Tomcat+For+Remote+Debugging Many more on google. Effectively, set your JPDA settings: set JPDA_ADDRESS=8000 set JPDA_TRANSPORT=dt_socket bin/catalina.bat jpda start Then, in Eclipse, Run->Debug Configurations...->Remote Applications.', 'questionId': '67810', 'answerId': '67888'}
{'answer': "Follow these steps: Add the following arguments to the java command that is used to launch Tomcat (on Windows, I think this is in TOMCAT\\bin\\catalina.bat) -Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n In Eclipse, create a 'Remote Java Application' debug configuration and set the port to 8787 and the host to the name (or IP address) of the machine where Tomcat is running. If Tomcat is running on the same machine as Eclipse, use 'localhost'. In the 'source' tab of the debug configuration, add any projects that you want to debug into Start Tomcat Launch the debug configuration you created in step 2 Eclipse should now stop at any breakpoints that you've set in the projects you added in step 3. Notes: You can change the port to any other available port if for some reason you can't use 8787 If you want Tomcat to wait for the remote debugger to start, use 'suspend=n' in the command above to 'suspend=y'", 'questionId': '67810', 'answerId': '67927'}
{'answer': 'You could do what they suggest, or use this Eclipse plugin, which makes it easier to configure Tomcat to begin with: Eclipse Tomcat Plugin When launching tomcat via this plugin, it starts in debug mode by default, you must explicitly disable debugging mode if you want it to not allow Eclipse to connect a remote debugger.', 'questionId': '67810', 'answerId': '68310'}
{'answer': 'For Tomcat 5.5 on Windows: Edit bin/startup.bat Find the line that reads: Replace it with these lines:', 'questionId': '67810', 'answerId': '198801'}
{'answer': 'Not sure what you are asking? Spring comes with a CustomEditorConfigurer to supply custom String <-> Object converters. To use this, just add the CustomEditorConfigurer as bean to your config, and add the custom converters. However, these converters are typically used when converting string attributes in the config file into real objects. If you are using Spring MVC, then take a look at the section on annotated MVC Specifically, have a look at the @RequestParam and the @ModelAttribute annotations? Hope this helps?', 'questionId': '67980', 'answerId': '68035'}
{'answer': 'Please see chapter 5 of the spring reference manual here: 5.4.2.1. Registering additional custom PropertyEditors', 'questionId': '67980', 'answerId': '68450'}
{'answer': 'I have an MVC controller with RequestMapping annotations. One method has a parameter of type UUID. Thanks toolkit, after reading about WebDataBinder, I figured that I need a method like this in my controller: UUIDEditor simply extends PropertyEditorSupport and overrides getAsText() and setAsText(). Worked for me nicely.', 'questionId': '67980', 'answerId': '69314'}
{'answer': 'In extenstion to the previous example. Controller class Property de-munger', 'questionId': '67980', 'answerId': '1555102'}
{'answer': "The class you're looking for is java.text.MessageFormat; specifically, calling or will return [Unfortunately, I can't help with the Struts connection, although this looks relevant.]", 'questionId': '68018', 'answerId': '68075'}
{'answer': 'There is the class org.apache.struts.util.MessageResources with various methods getMessage, some of them take arguments to insert to the actual message. Eg.:', 'questionId': '68018', 'answerId': '68163'}
{'answer': 'A portable and robust solution is to use iconv, with the understanding that you have to know what encoding your system wchar_t uses (UTF-16 on Windows, UTF-32 on many Unix systems, for example). If you want to minimise your dependency on third-party code, you can also hand-roll your own UTF-8 converter. This is easy if converting to UTF-32, somewhat harder with UTF-16 because you have to handle surrogate pairs too. :-P Also, you must be careful to reject non-shortest forms, or it can open up security bugs in some cases.', 'questionId': '68042', 'answerId': '68065'}
{'answer': 'If we are not interested in cross platform-ability, in windows you can use the MultiByteToWideChar function, or the helpful macros A2W (ref. example).', 'questionId': '68042', 'answerId': '68066'}
{'answer': "JNI has a GetStringChars() function as well.  The return type is const jchar*, jchar is 16-bit on win32 so in a way that would be compatible with wchar_t.  Not sure if it's real UTF-16 or something else...", 'questionId': '68042', 'answerId': '68754'}
{'answer': "Just use env->GetStringChars(myString, 0); Java pass Unicode by it's nature", 'questionId': '68042', 'answerId': '804654'}
{'answer': "I know this was asked a year ago, but I don't like the other answers so I'm going to answer anyway.  Here's how we do it in our source: EDIT: This solution works well on platforms where wchar_t is 2 bytes, some platforms have a 4 byte wchar_t in which case this solution will not work.", 'questionId': '68042', 'answerId': '1666532'}
{'answer': 'And who frees wsz? I would recommend STL!', 'questionId': '68042', 'answerId': '2295676'}
{'answer': 'Rather simple. But do not forget to free the memory by ReleaseStringChars', 'questionId': '68042', 'answerId': '4154448'}
{'answer': "If this helps someone... I've used this function for an Android project: An improved solution could be (Thanks for the feedback):", 'questionId': '68042', 'answerId': '9100041'}
{'answer': "I'm not aware of any virtual machine in widespread use that saves statistical usage data between program invocations -- but it certainly is an interesting possibility for future research. What you're seeing is almost certainly due to disk caching.", 'questionId': '68109', 'answerId': '68124'}
{'answer': 'Java JVM (actually might change from different implementations of the JVM) when first started out will interpret the byte code. Once it detects that the code will be running enough number of times JITs it to native machine language so it runs faster.', 'questionId': '68109', 'answerId': '68131'}
{'answer': 'Okay, I found where I read that.  This is all from "Learning Java" (O\'Reilly 2005): The problem with a traditional JIT compilation is that optimizing code takes time. So a JIT compiler can produce decent results but may suffer a significant latency when the application starts up. This is generally not a problem for long-running server-side applications but is a serious problem for client-side software and applications run on smaller devices with limited capabilities. To address this, Sun\'s compiler technology, called HotSpot, uses a trick called adaptive compilation. If you look at what programs actually spend their time doing, it turns out that they spend almost all their time executing a relatively small part of the code again and again. The chunk of code that is executed repeatedly may be only a small fraction of the total program, but its behavior determines the program\'s overall performance. Adaptive compilation also allows the Java runtime to take advantage of new kinds of optimizations that simply can\'t be done in a statically compiled language, hence the claim that Java code can run faster than C/C++ in some cases. To take advantage of this fact, HotSpot starts out as a normal Java bytecode interpreter, but with a difference: it measures (profiles) the code as it is executing to see what parts are being executed repeatedly. Once it knows which parts of the code are crucial to performance, HotSpot compiles those sections into optimal native machine code. Since it compiles only a small portion of the program into machine code, it can afford to take the time necessary to optimize those portions. The rest of the program may not need to be compiled at alljust interpretedsaving memory and time. In fact, Sun\'s default Java VM can run in one of two modes: client and server, which tell it whether to emphasize quick startup time and memory conservation or flat out performance. A natural question to ask at this point is, Why throw away all this good profiling information each time an application shuts down? Well, Sun has partially broached this topic with the release of Java 5.0 through the use of shared, read-only classes that are stored persistently in an optimized form. This significantly reduces both the startup time and overhead of running many Java applications on a given machine. The technology for doing this is complex, but the idea is simple: optimize the parts of the program that need to go fast, and don\'t worry about the rest. I\'m kind of wondering how far Sun has gotten with it since Java 5.0.', 'questionId': '68109', 'answerId': '68199'}
{'answer': "I agree that it's likely the result of disk caching. FYI, the IBM Java 6 VM does contain an ahead-of-time compiler (AOT).  The code isn't quite as optimized as what the JIT would produce, but it is stored across VMs, I believe in some sort of persistent shared memory.  Its primary benefit is to improve startup performance.  The IBM VM by default JITs a method after it's been called 1000 times.  If it knows that a method is going to be called 1000 times just during the VM startup (think a commonly-used method like java.lang.String.equals(...) ), then it's beneficial for it to store that in the AOT cache so that it never has to waste time compiling at runtime.", 'questionId': '68109', 'answerId': '68602'}
{'answer': "I agree that the performance difference seen by the poster is most likely caused by disk latency bringing the JRE into memory.  The Just In Time compiler (JIT) would not have an impact on performance of a little application. Java 1.6u10 (http://download.java.net/jdk6/) touches the runtime JARs in a background process (even if Java isn't running) to keep the data in the disk cache.  This significantly decreases startup times (Which is a huge benefit to desktop apps, but probably of marginal value to server side apps). On large, long running applications, the JIT makes a big difference over time - but the amount of time required for the JIT to accumulate sufficient statistics to kick in and optimize (5-10 seconds) is very, very short compared to the overall life of the application (most run for months and months).  While storing and restoring the JIT results is an interesting academic exercise, the practical improvement is not very large (Which is why the JIT team has been more focused on things like GC strategies for minimizing memory cache misses, etc...). The pre-compilation of the runtime classes does help desktop applications quite a bit (as does the aforementioned 6u10 disk cache pre-loading).", 'questionId': '68109', 'answerId': '69412'}
{'answer': 'You should describe how your Benchmark was done. Especially at which point you start to measure the time.  If you include the JVM startup time (which is useful for Benchmarking the User experience but not so useful to optimize Java code) then it might be a filesystem caching effect or it can be caused by a feature called "Java Class Data Sharing": For Sun: http://java.sun.com/j2se/1.5.0/docs/guide/vm/class-data-sharing.html This is an option where the JVM saves a prepared image of the runtime classes to a file, to allow quicker loading (and sharing) of those at the next start. You can control this with -Xshare:on or -Xshare:off with a Sun JVM. The default is -Xshare:auto which will load the shared classes image if present, and if not present it will write it at first startup if the directory is write able. With IBM Java 5 this is BTW even more powerful: http://www.ibm.com/developerworks/java/library/j-ibmjava4/ I don\'t know of any mainstream JVM which is saving JIT statistics.', 'questionId': '68109', 'answerId': '75199'}
{'answer': "I've had some luck with the Java Service Wrapper", 'questionId': '68113', 'answerId': '68140'}
{'answer': "I've used JavaService before with good success. It hasn't been updated in a couple of years, but was pretty rock solid back when I used it.", 'questionId': '68113', 'answerId': '68847'}
{'answer': "I didn't like the licensing for the Java Service Wrapper.  I went with ActiveState Perl to write a service that does the work. I thought about writing a service in C#, but my time constraints were too tight.", 'questionId': '68113', 'answerId': '68884'}
{'answer': "I always just use sc.exe (see http://support.microsoft.com/kb/251192).  It should be installed on XP from SP1, and if it's not in your flavor of Vista, you can download load it with the Vista resource kit. I haven't done anything too complicated with Java, but using either a fully qualified command line argument (x:\\java.exe ....) or creating a script with Ant to include depencies and set parameters works fine for me.", 'questionId': '68113', 'answerId': '68927'}
{'answer': "I think the Java Service Wrapper works well. Note that there are three ways to integrate your application. It sounds like option 1 will work best for you given that you don't want to change the code. The configuration file can get a little crazy, but just remember that (for option 1) the program you're starting and for which you'll be specifying arguments, is their helper program, which will then start your program. They have an example configuration file for this.", 'questionId': '68113', 'answerId': '68930'}
{'answer': "Another good option is FireDaemon. It's used by some big shops like NASA, IBM, etc; see their web site for a full list.", 'questionId': '68113', 'answerId': '69865'}
{'answer': 'I am currently requiring this to run an Eclipse-based application but I need to set some variables first that is local to that application. sc.exe will only allow executables but not scripts so I turned to autoexnt.exe which is part of the Windows 2003 resource kit. It restricts the service to a single batch file but I only need one batch script to be converted into a service. ciao!', 'questionId': '68113', 'answerId': '118405'}
{'answer': 'One more option is WinRun4J. This is a configurable java launcher that doubles as a windows service host (both 32 and 64 bit versions). It is open source and there are no restrictions on its use.  (full disclosure: I work on this project).', 'questionId': '68113', 'answerId': '847126'}
{'answer': 'JavaService is LGPL. It is very easy and stable. Highly recommended.', 'questionId': '68113', 'answerId': '1553442'}
{'answer': 'Apache Commons Daemon is a good alternative. It has Procrun for windows services, and Jsvc for unix daemons. It uses less restrictive Apache license, and Apache Tomcat uses it as a part of itself to run on Windows and Linux! To get it work is a bit tricky, but there is an exhaustive article with working example. Besides that, you may look at the bin\\service.bat in Apache Tomcat to get an idea how to setup the service.  In Tomcat they rename the Procrun binaries (prunsrv.exe -> tomcat6.exe, prunmgr.exe -> tomcat6w.exe). Something I struggled with using Procrun, your start and stop methods must accept the parameters (String[] argv).  For example "start(String[] argv)" and "stop(String[] argv)" would work, but "start()" and "stop()" would cause errors.  If you can\'t modify those calls, consider making a bootstrapper class that can massage those calls to fit your needs.', 'questionId': '68113', 'answerId': '2518162'}
{'answer': "Yet another answer is Yet Another Java Service Wrapper, this seems like a good alternative to Java Service Wrapper as has better licensing. It is also intended to be easy to move from JSW to YAJSW. Certainly for me, brand new to windows servers and trying to get a Java app running as a service, it was very easy to use. Some others I found, but didn't end up using: Java Service Launcher I didn't use this because it looked more complicated to get working than YAJSW. I don't think this is a wrapper. JSmooth Creating Window's services isn't its primary goal, but can be done. I didn't use this because there's been no activity since 2007.", 'questionId': '68113', 'answerId': '3626452'}
{'answer': 'A pretty good comparison of different solutions is available at : http://yajsw.sourceforge.net/#mozTocId284533 Personally like launch4j', 'questionId': '68113', 'answerId': '4559593'}
{'answer': 'Use "winsw" which was written for Glassfish v3 but works well with Java programs in general. Require .NET runtime installed.', 'questionId': '68113', 'answerId': '5954356'}
{'answer': 'With Apache Commons Daemon you can now have a custom executable name and icon!  You can also get a custom Windows tray monitor with your own name and icon! I now have my service running with my own name and icon (prunsrv.exe), and the system tray monitor (prunmgr.exe) also has my own custom name and icon!   Download the Apache Commons Daemon binaries (you will need prunsrv.exe and prunmgr.exe).   Rename them to be MyServiceName.exe and MyServiceNamew.exe respectively. Download WinRun4J and use the RCEDIT.exe program that comes with it to modify the Apache executable to embed your own custom icon like this: Now install your Windows service like this (see documentation for more details and options): Now you have a Windows service of your Jar that will run with your own icon and name!  You can also launch the monitor file and it will run in the system tray with your own icon and name.', 'questionId': '68113', 'answerId': '10756495'}
{'answer': 'A simple way is the NSSM Wrapper Wrapper (see my blog entry).', 'questionId': '68113', 'answerId': '14553774'}
{'answer': 'Exe4j is a very good option although it is not free. Check it out at Exe4j In the wizard to create the .exe file, you are give the option to create a service.', 'questionId': '68113', 'answerId': '20627965'}
{'answer': 'it\'s simple as you have to put shortcut in  Windows 7 C:\\users\\All Users\\Start Menu\\Programs\\Startup(Admin)  or User home directory(%userProfile%) Windows 10 : In Run   shell:startup in it\'s property -> shortcut -> target - > java.exe -jar D:\\..\\runJar.jar NOTE: This will run only after you login With Admin Right sc create serviceName binpath= "java.exe -jar D:\\..\\runJar.jar" Will create windows service if you get timeout use cmd /c D:\\JAVA7~1\\jdk1.7.0_51\\bin\\java.exe -jar d:\\jenkins\\jenkins.war but even with this you\'ll get timeout but in background java.exe will be started. Check in task manager NOTE: This will run at windows logon start-up(before sign-in, Based on service \'Startup Type\') Detailed explanation of creating windows service', 'questionId': '68113', 'answerId': '42204087'}
{'answer': "If you use Gradle Build Tool you can try my windows-service-plugin, which facilitates using of Apache Commons Daemon Procrun.   To create a java windows service application with the plugin you need to go through several simple steps. Create a main service class with the appropriate method. Include the plugin into your build.gradle file. The same script snippet for new, incubating, plugin mechanism introduced in Gradle 2.1: Configure the plugin. Run createWindowsService gradle task to create a windows service distribution. That's all you need to do to create a simple windows service. The plugin will automatically download Apache Commons Daemon Procrun binaries, extract this binaries to the service distribution directory and create batch files for installation/uninstallation of the service. In ${project.buildDir}/windows-service directory you will find service executables, batch scripts for installation/uninstallation of the service and all runtime libraries.  To install the service run <project-name>-install.bat and if you want to uninstall the service run <project-name>-uninstall.bat. To start and stop the service use <project-name>w.exe executable. Note that the method handling service start should create and start a separate thread to carry out the processing, and then return. The main method is called from different threads when you start and stop the service. For more information, please read about the plugin and Apache Commons Daemon Procrun.", 'questionId': '68113', 'answerId': '45443208'}
{'answer': 'With Java 8 we can handle this scenario without any external tools. javapackager tool coming with java 8 provides an option to create self contained application bundles: -native type Generate self-contained application bundles (if possible). Use the -B option to provide arguments to the bundlers being used. If type is specified, then only a bundle of this type is created. If no type is specified, all is used. The following values are valid for type: In case of windows refer the following doc we can create msi or exe as needed.', 'questionId': '68113', 'answerId': '45851799'}
{'answer': "Two more general-purpose mechanisms for fixing some of Eclipse's idiosyncrasies: Close and open the project Delete the project (but not from disk!) and reimport it as an existing project Failing that, bugs.eclipse.org might provide the answer. If the workspace is caching something broken, you may be able to delete it by poking around in workspace/.metadata/.plugins. Most of that stuff is fairly transient (though backup and watch for deleted preferences).", 'questionId': '6816', 'answerId': '6840'}
{'answer': "Got this error to the other day. Tried deleting the all .class-files and resources from my output folder manually. Didn't work. Restarted my computer (WinXP). Didn't work. Closed my project in Eclipse and opened it again. Worked!!! Hopes this solves someones problem out there. The search facilities and truly essential to Eclipse.", 'questionId': '6816', 'answerId': '305214'}
{'answer': 'Comment #9 to bug 269820 explains how to delete the search index, which appears to be the solution to a corrupt index whose symptoms are the dreaded An internal error occurred during: "Items filtering".   Class file name must end with .class message box. How to delete the search index: Close Eclipse Delete <workspace>/.metadata/.plugins/org.eclipse.jdt.core/*.index Delete <workspace>/.metadata/.plugins/org.eclipse.jdt.core/savedIndexNames.txt Start Eclipse again', 'questionId': '6816', 'answerId': '808782'}
{'answer': 'I also encountered this issue recently, the below scenario worked for me. Close Eclipse Delete <workspace>/.metadata/.plugins/org.eclipse.jdt.core/*.index  Delete <workspace>/.metadata/.plugins/org.eclipse.jdt.core/savedIndexNames.txt  Start Eclipse again', 'questionId': '6816', 'answerId': '1220707'}
{'answer': "Closing the projects didn't do the trick for me. I started eclipse with the -clean flag and that worked for some reason.", 'questionId': '6816', 'answerId': '1903106'}
{'answer': 'Just Close project Clear manually output folder(s) Open project (Eclipse 3.5 SR2, Build id: 20100218-1602)', 'questionId': '6816', 'answerId': '5403613'}
{'answer': 'If I understand you correctly, the idea is to get a different "singleton" object for each caller object or "context". One thing you can do is to create a thread-local global variable where you write the ID of the current context. (This can be done with AOP.) Then in the singleton getter, the context ID is fetched from the thread-local to use as a key to the correct "singleton" instance for the calling context.  Regarding AOP there should be no problem using it in applets since, depending on your point-cuts, the advices are woven at compile time and a JAR is added to the runtime dependencies. Hence, no special evidence of AOP should remain at run time.', 'questionId': '7269', 'answerId': '7717'}
{'answer': "@Hugo regarding threadlocal: I thought about that solution. However, from experiments I found two problems with that approach: Shared thread (server connections, etc) are problematic. This can be solved though by paying special attention to these thread (they're all under my control and are pretty much isolated from the legacy code). The EDT thread is shared across all applets. I failed to find a way to force the creation of a new EDT thread for each applet. This means that the threadlocal for the EDT would be shared across the applets. This one I have no idea how to solve. Suggestions?", 'questionId': '7269', 'answerId': '8163'}
{'answer': 'Singletons are evil, what do you expect? ;) Perhaps the most comprehensive approach would be to load the bulk of the applet in a different class loader (use java.net.URLClassLoader.newInstance). Then use a WeakHashMap to associate class loader with an applet. If you could split most of the code into a common class loader (as a parent of each per-applet class loader) and into the normal applet codebase, that would be faster but more work. Other hacks: If you have access to any component, you can use Component.getParent repeatedly or SwingUtilities.getRoot. If you are in a per-applet instance thread, then you can set up a ThreadLocal. From the EDT, you can read the current event from the queue (java.awt.EventQueue.getCurrentEvent()), and possibly find a component from that. Alternatively push an EventQueue with a overridden dispatchEvent method.', 'questionId': '7269', 'answerId': '46902'}
{'answer': "If I'm understanding you correctly, it sounds like you're expecting the MathContext to control how many digits should be kept after the decimal point.  That's not what it's for.  It specifies how many digits to keep, total.  So if you specify that you want 3 significant digits, that's all you're going to get. For example, this: will output:", 'questionId': '7539', 'answerId': '7550'}
{'answer': "It's not for fun. Actually I found some online example, which stated the use of MathContext to round the amounts/numbers stored in BigDecimal. For example, If MathContext is configured to have precision = 2 and rounding mode = ROUND_HALF_EVEN BigDecimal Number = 0.5294, is rounded to 0.53 So I thought it is a newer technique and used it for rounding purpose. However it turned into nightmare because it started rounding even mentissa part of number. For example, Number = 1.5294 is rounded to 1.5 Number = 10.5294 is rounded to 10 Number = 101.5294 is rounded to 100  .... and so on So this is not the behavior I expected for rounding (as precision = 2). It seems to be having some logic because from patter I can say that it takes first two digits (as precision is 2) of number and then appends 0's till the no. of digits become same as unrounded amount (checkout the example of 101.5294 ...)", 'questionId': '7539', 'answerId': '7552'}
{'answer': "@jatan Thanks for you answer. It makes sense. Can you please explain me MathContext in the context of BigDecimal#round method. There's nothing special about BigDecimal.round() vs. any other BigDecimal method.  In all cases, the MathContext specifies the number of significant digits and the rounding technique.  Basically, there are two parts of every MathContext.  There's a precision, and there's also a RoundingMode. The precision again specifies the number of significant digits.  So if you specify 123 as a number, and ask for 2 significant digits, you're going to get 120.  It might be clearer if you think in terms of scientific notation. 123 would be 1.23e2 in scientific notation.  If you only keep 2 significant digits, then you get 1.2e2, or 120.  By reducing the number of significant digits, we reduce the precision with which we can specify a number. The RoundingMode part specifies how we should handle the loss of precision.  To reuse the example, if you use 123 as the number, and ask for 2 significant digits, you've reduced your precision.  With a RoundingMode of HALF_UP (the default mode), 123 will become 120.  With a RoundingMode of CEILING, you'll get 130. For example: Outputs: You can see that both the precision and the rounding mode affect the output.", 'questionId': '7539', 'answerId': '7561'}
{'answer': 'For rounding just the fractional part of a BigDecimal, check out the BigDecimal.setScale(int newScale, int roundingMode) method. E.g. to change a number with three digits after the decimal point to one with two digits, and rounding up: The result of this is a BigDecimal with the value 1.24 (because of the rounding up rule)', 'questionId': '7539', 'answerId': '4194330'}
{'answer': 'I would add here, a few examples. I haven\'t found them in previous answers, but I find them useful for those who maybe mislead significant digits with number of decimal places. Let\'s assume, we have such context: For this code: it\'s perfectly clear, that your result is 1.23E+3 as guys said above. First significant digits are 123... But what in this case: your number will not be rounded to 3 places after comma - for someone it can be not intuitive and worth to emphasize. Instead it will be rounded to the first 3 significant digits, which in this case are "4 5 4". So above code results in 4.55E-7 and not in 0.000 as someone could expect. Similar examples: I hope this obvious, but relevant example would be helpful...', 'questionId': '7539', 'answerId': '22988977'}
{'answer': "Class names should always be descriptive and self-explanatory. If you have multiple domains of responsibility for your classes then they should probably be refactored. Likewise for you packages. They should be grouped by domain of responsibility. Every domain has it's own exceptions. Generally don't sweat it until you get to a point where it is becoming overwhelming and bloated. Then sit down and don't code, just refactor the classes out, compiling regularly to make sure everything works. Then continue as you did before.", 'questionId': '7596', 'answerId': '7599'}
{'answer': "Use packages to group related functionality together. Usually the top of your package tree is your domain name reversed (com.domain.subdomain) to guarantee uniqueness, and then usually there will be a package for your application. Then subdivide that by related area, so your FileStorageStrategy might go in, say, com.domain.subdomain.myapp.storage, and then there might be specific implementations/subclasses/whatever in com.domain.subdomain.myapp.storage.file and com.domain.subdomain.myapp.storage.database. These names can get pretty long, but import keeps them all at the top of files and IDEs can help to manage that as well. Exceptions usually go in the same package as the classes that throw them, so if you had, say, FileStorageException it would go in the same package as FileStorageStrategy. Likewise an interface defining constants would be in the same package. There's not really any standard as such, just use common sense, and if it all gets too messy, refactor!", 'questionId': '7596', 'answerId': '7610'}
{'answer': 'One thing I\'ve done in the past - if I\'m extending a class I\'ll try and follow their conventions. For example, when working with the Spring Framework, I\'ll have my MVC Controller classes in a package called com.mydomain.myapp.web.servlet.mvc If I\'m not extending something I just go with what is simplest. com.mydomain.domain for Domain Objects (although if you have a ton of domain objects this package could get a bit unwieldy). For domain specific constants, I actually put them as public constants in the most related class. For example, if I have a "Member" class and have a maximum member name length constant, I put it in the Member class. Some shops make a separate Constants class but I don\'t see the value in lumping unrelated numbers and strings into a single class. I\'ve seen some other shops try to solve this problem by creating SEPARATE Constants classes, but that just seems like a waste of time and the result is too confusing. Using this setup, a large project with multiple developers will be duplicating constants all over the place.', 'questionId': '7596', 'answerId': '8335'}
{'answer': 'I like break my classes down into packages that are related to each other. For example: Model For database related calls View Classes that deal with what you see Control Core functionality classes Util Any misc. classes that are used (typically static functions) etc.', 'questionId': '7596', 'answerId': '8400'}
{'answer': "I think keep it simple and don't over think it. Don't over abstract and layer too much. Just keep it neat, and as it grows, refactoring it is trivial. One of the best features of IDEs is refactoring, so why not make use of it and save you brain power for solving problems that are related to your app, rather then meta issues like code organisation.", 'questionId': '7596', 'answerId': '8438'}
{'answer': "I'm a huge fan of organized sources, so I always create the following directory structure: In /src I'm using the default Java patterns: Package names starting with your domain (org.yourdomain.yourprojectname) and class names reflecting the OOP aspect you're creating with the class (see the other commenters). Common package names like util, model, view, events are useful, too. I tend to put constants for a specific topic in an own class, like SessionConstants or ServiceConstants in the same package of the domain classes.", 'questionId': '7596', 'answerId': '8594'}
{'answer': 'I\'ve really come to like Maven\'s Standard Directory Layout. One of the key ideas for me is to have two source roots - one for production code and one for test code like so: (here, both src/main/java and src/test/java are source roots). Advantages: Your tests have package (or "default") level access to your classes under test. You can easily package only your production sources into a JAR by dropping src/test/java as a source root. One rule of thumb about class placement and packages: Generally speaking, well structured projects will be free of circular dependencies. Learn when they are bad (and when they are not), and consider a tool like JDepend or SonarJ that will help you eliminate them.', 'questionId': '7596', 'answerId': '13283'}
{'answer': 'One thing that I found very helpful for unit tests was to have a myApp/src/ and also myApp/test_src/ directories. This way, I can place unit tests in the same packages as the classes they test, and yet I can easily exclude the test cases when I prepare my production installation.', 'questionId': '7596', 'answerId': '41544'}
{'answer': "Short answer: draw your system architecture in terms of modules, drawn side-by-side, with each module sliced vertically into layers (e.g. view, model, persistence). Then use a structure like com.mycompany.myapp.somemodule.somelayer, e.g. com.mycompany.myapp.client.view or com.mycompany.myapp.server.model. Using the top level of packages for application modules, in the old-fashioned computer-science sense of modular programming, ought to be obvious. However, on most of the projects I have worked on we end up forgetting to do that, and end up with a mess of packages without that top-level structure. This anti-pattern usually shows itself as a package for something like 'listeners' or 'actions' that groups otherwise unrelated classes simply because they happen to implement the same interface. Within a module, or in a small application, use packages for the application layers. Likely packages include things like the following, depending on the architecture: com.mycompany.myapp.view com.mycompany.myapp.model com.mycompany.myapp.services com.mycompany.myapp.rules com.mycompany.myapp.persistence (or 'dao' for data access layer) com.mycompany.myapp.util (beware of this being used as if it were 'misc') Within each of these layers, it is natural to group classes by type if there are a lot. A common anti-pattern here is to unnecessarily introduce too many packages and levels of sub-package so that there are only a few classes in each package.", 'questionId': '7596', 'answerId': '43779'}
{'answer': 'Where I\'m working, we\'re using Maven 2 and we have a pretty nice archetype for our projects. The goal was to obtain a good separation of concerns, thus we defined a project structure using multiple modules (one for each application \'layer\'):   - common: common code used by the other layers (e.g., i18n)   - entities: the domain entities   - repositories: this module contains the daos interfaces and implementations   - services-intf: interfaces for the services (e.g, UserService, ...)    - services-impl: implementations of the services (e.g, UserServiceImpl)    - web: everything regarding the web content (e.g., css, jsps, jsf pages, ...)   - ws: web services Each module has its own dependencies (e.g., repositories could have jpa) and some are project wide (thus they belong in the common module). Dependencies between the different project modules clearly separate things (e.g., the web layer depends on the service layer but doesn\'t know about the repository layer). Each module has its own base package, for example if the application package is "com.foo.bar", then we have: Each module respects the standard maven project structure: Unit tests for a given layer easily find their place under \\src\\test... Everything that is domain specific has it\'s place in the entities module. Now something like a FileStorageStrategy should go into the repositories module, since we don\'t need to know exactly what the implementation is. In the services layer, we only know the repository interface, we do not care what the specific implementation is (separation of concerns). There are multiple advantages to this approach: clear separation of concerns each module is packageable as a jar (or a war in the case of the web module) and thus allows for easier code reuse (e.g., we could install the module in the maven repository and reuse it in another project) maximum independence of each part of the project I know this doesn\'t answer all your questions, but I think this could put you on the right path and could prove useful to others.', 'questionId': '7596', 'answerId': '66745'}
{'answer': "Someone took the javascript code from Google Maps and ported it to python: gmerc.py I've used this and it works great.", 'questionId': '7661', 'answerId': '7668'}
{'answer': "GeoTools has code to transform to and from about any coordinate system you could imagine, and among them also Google Map's. It's also open source. However, it should also be pointed out that GeoTools is a large library, so if you're looking something small, quick and easy, it's likely not the way to go. I would highly recommend it though if you're going to do other GIS/coordinate transformations, etc. as well. If you use GeoTools or something similar, you might also be interested in knowing that the Google Map coordinate system is called EPSG 3785.", 'questionId': '7661', 'answerId': '7679'}
{'answer': 'Tile utility code in Java on mapki.com (great resource for google map developers)', 'questionId': '7661', 'answerId': '32551'}
{'answer': 'Here are the functions in JavaSCript ... As extracted from OpenLayers  Fairly straightforward to convert to Java', 'questionId': '7661', 'answerId': '2373697'}
{'answer': "I ported this to PHP - here's the code, if anyone would need it: To mercator: From mercator:", 'questionId': '7661', 'answerId': '8051786'}
{'answer': '', 'questionId': '7661', 'answerId': '11747267'}
{'answer': "Perhaps you could deserialise the byte array using a known encoding and ensure that (a) it doesn't throw any exceptions, and (b) deserialises to the original string. It seems that from your description of the scenario, you may not have the original string readily available. Might there be a way to create it?", 'questionId': '7681', 'answerId': '7688'}
{'answer': "That's good. You're right, I don't have the original string, since I'm testing a module that creates an XML document as a byte array. I didn't think about deserializing to a String with an expected encoding. That will do the trick.", 'questionId': '7681', 'answerId': '7698'}
{'answer': 'Install4J. Not free, but worth it. Give the trial a shot', 'questionId': '7720', 'answerId': '7747'}
{'answer': "I went through the same and found that all of the free options weren't very good. Looks like you'll be writing your own. I'd be interested to see if someone has a free/cheap option that works", 'questionId': '7720', 'answerId': '7759'}
{'answer': 'Have you thought about Java Web Start?  Here is a tutorial specifically for deploying an SWT application with Java Web Start.', 'questionId': '7720', 'answerId': '7796'}
{'answer': "Maybe you should take a look at IzPack. I created a very nice installer some years ago and I'd bet that they are still improving it. It allows the installation of docs, binaries and a clickable link to start the application IIRC.", 'questionId': '7720', 'answerId': '8598'}
{'answer': 'Have you considered writing a small program in C/C++ that just calls CreateProcess to start up the java VM with the jar (or class) file? You could get Visual C++ Express and put together the startup program pretty easily.  This would make it easy to add a friendly icon as well.', 'questionId': '7720', 'answerId': '8602'}
{'answer': "Another option I was considering: rather than writing a native launcher from scratch, Eclipse comes with the source code for its own launcher, and this could perhaps be repurposed for my app. It's a shame that Sun never included anything similar in the JDK.", 'questionId': '7720', 'answerId': '8620'}
{'answer': "I've used the free Launch4J to create a custom launcher for my Java programs on Windows. Combined with the free NSIS Installer you can build a nice package for your Windows users. Edit: Did not see that you use SWT. Don't know if it works with SWT as well, because I used only Swing in my apps.", 'questionId': '7720', 'answerId': '26942'}
{'answer': 'In my company we use Launch4J to create the exe file, and NSIS to create the installer, with SWT applications.  We have used it for years in several commercial applications and the pair works fine.', 'questionId': '7720', 'answerId': '74597'}
{'answer': 'Another vote for Launch4J, just wrote an ant task this morning to integrate with one of my projects.  Seems to work really well', 'questionId': '7720', 'answerId': '75908'}
{'answer': "Consider converting your application to Eclipse RCP.  It is written in SWT, and the Eclipse IDE contains packaging tools that generate executables for all major platforms.  For windows, it can generate a zip or a folder containing your code.  For a common installation experience, I'd using NSIS.  There is actually a packages generator project at eclipse to create common installers for all platforms eclipse supports.", 'questionId': '7720', 'answerId': '76548'}
{'answer': 'To follow up on pauxu\'s answer, I\'m using launch4j and NSIS on a project of mine and thought it would be helpful to show just how I\'m using them.  Here\'s what I\'m doing for Windows.  BTW, I\'m creating .app and .dmg for Mac, but haven\'t figured out what to do for Linux yet. Project Copies of launch4j and NSIS In my project I have a "vendor" directory and underneath it I have a directory for "launch4j" and "nsis".  Within each is a copy of the install for each application.  I find it easier to have a copy local to the project rather than forcing others to install both products and set up some kind of environment variable to point to each. Script Files I also have a "scripts" directory in my project that holds various configuration/script files for my project.  First there is the launch4j.xml file: And then there\'s the NSIS script rpgam-setup.nsis.  It can take a VERSION argument to help name the file. Ant Integration I have some targets in my Ant buildfile (build.xml) to handle the above.  First I tel Ant to import launch4j\'s Ant tasks: I then have a simple target for creating the wrapper executable: And another target for making the installer: The top portion of that just copies the necessary files for the installer to a temporary location and the second half executes the script that uses all of it to make the installer.', 'questionId': '7720', 'answerId': '149971'}
{'answer': 'I have used JSmooth in the past, and still have luck with it.  The UI is pretty buggy, but I only use that for building the config file once, and then I build from Ant after that. What issues are you having with JSmooth?', 'questionId': '7720', 'answerId': '242507'}
{'answer': 'JSMooth has worked very well for us in a production environment, where I first generated a single jar using one-jar (fat jar plugin to eclipse) and then wrapped it with JSmooth. (Please note that I wanted a no-install distribution of a single file, which could promt for installing the JRE if needed). It has worked so well that I thought nobody was using it :)', 'questionId': '7720', 'answerId': '438536'}
{'answer': 'You may want to try our tool, BitRock InstallBuilder. Although it is a native application, a lot of our customers use it to package desktop Java applications. If you bundle the JRE and create launcher, etc. the user does not even need to know they are installing a Java application. It is cross platform, so you can generate installers for both Windows and Mac (and Linux, Solaris, etc.) Like install4j tool mentioned in another post, it is a commercial tool, but we have free licenses for open source projects and special discounts for microISVs / small business, etc. just drop us an email.  Also wanted to emphasize that this is an installer tool, so it will not address your needs if you are looking only for a single file executable.', 'questionId': '7720', 'answerId': '455074'}
{'answer': 'In my company we use launch4J and NSIS for the windows distribution, and jdeb for the Debian distribution, and Java Web Start for the general operating system. This works quite fine.', 'questionId': '7720', 'answerId': '1214727'}
{'answer': 'Please try InstallJammer.The best one I have used ever. Free and powerful.And sufficient for personal and commercial use.', 'questionId': '7720', 'answerId': '9884607'}
{'answer': "You can now do this through Netbeans! It's really easy and works perfectly. Check out this tutorial on the Netbeans website.", 'questionId': '7720', 'answerId': '23582843'}
{'answer': "Have you considered Advanced Installer? I have used it severally especially for Windows and Mac. No scripting or Ant required. All GUI. Very simple and understandable. Ain't free but worth every penny. - Lauch as Administrator - File Association - Custom Install Themes + In built Themes - Package with JRE - Install location - Native Splash screen implementation - You can event create services and installation events - Prerequisites - JRE minimum version and maximum version And a lot more. And don't get it twisted, i have no connections with the dudes...their App is just awesome.", 'questionId': '7720', 'answerId': '25479992'}
{'answer': 'Although I don\'t have personal experience, a few friends of mine did Eclipse RCP development, and they used the book "Eclipse Rich Client Platform: Designing, Coding, and Packaging Java(TM) Applications". They seemed to like it a lot, and I looked it at myself, and it seemed useful. If I was going to do RCP development on Eclipse, I would probably get this book. To clarify - this book is geared toward Eclipse 3.1, and since I haven\'t done any RCP development of my own, I\'m not sure how much things have changed.', 'questionId': '7779', 'answerId': '7790'}
{'answer': "I read the book suggested by Thomas and it's really worth reading, although not very up-to-date.", 'questionId': '7779', 'answerId': '7792'}
{'answer': 'I\'ve been doing Eclipse RCP development for almost 2 years now.  When I first started, I wanted a book for help and many people told me, with Eclipse you\'re better off using the Eclipsepedia and Google. However, I started with "The Java Developer\'s Guide to Eclipse" by D\'Anjou et al, and I still reference it when I need a better starting point or a good reference.  It\'s probably a little outdated now, but is very thorough and really explains how the Eclipse framework works.  Like just about anything, RCP isn\'t too hard to pick up if you\'ve figured out how the framework supporting it works and you\'ll get a lot more mileage out of your code.', 'questionId': '7779', 'answerId': '28154'}
{'answer': 'I agree with Thomas Owens on "Eclipse Rich Client Platform: Designing, Coding, and Packaging Java(TM) Applications" and would also add "Eclipse: Building Commercial-Quality Plug-ins" to the list of rather outdated but still somewhat useful books on Eclipse RCP. Even though the latter does not go much into the Rich Client Platform, it explains quite a lot about the Eclipse plug-in architecture that is useful knowledge for developers of RCP applications. There has been a lot of improvements in the Eclipse RCP platform since the release of both of these books, so I really hope that there are new versions of these books coming out soon.', 'questionId': '7779', 'answerId': '65917'}
{'answer': 'Recently published: The third edition of "eclipse Plug-ins" by Eric Clayberg and Dan Rubel Practical Eclipse rich Client Platform Projects by Vladimir Silvar=1-1', 'questionId': '7779', 'answerId': '1027242'}
{'answer': "I find a lot of the books to be lacking in any sort of depth. At least not enough to justify their price.  You can find plenty of tutorials online that cover what the books do and plenty more.  They're usually less outdated than the books too. I really like Lars Vogel's tutorials: http://www.vogella.com/eclipse.html They're short and easy to understand, with enough pictures and material to get you going.  After you have a basic understanding, then google will suffice for the details of things.", 'questionId': '7779', 'answerId': '10212523'}
{'answer': "I've seen some people having a play with distributed JUnit. I can't particularly vouch for how effective it is, but the other teams I've seen seemed to think it was straight forward enough. Hope that helps.", 'questionId': '8219', 'answerId': '8226'}
{'answer': "Our build people use Mozilla Tinderbox.  It seems to have some hooks for distributed testing.  I'm sorry not to know the details but I thought I would at least pass on the pointer to you. It's also nice coz you can find out immediately when a build breaks, and what checkin might have been the culprit. http://www.mozilla.org/tinderbox.html", 'questionId': '8219', 'answerId': '8274'}
{'answer': "There's also parallel-junit. Depending on how you currently execute your tests its convenience may vary - the idea is just to multithread on a single system that has multiple cores. I've played with it briefly, but it's a change from how we currently run our tests.  Hudson, the continuous integration engine I use, also has some ways to distribute test running (separate jobs aggregated results in one).", 'questionId': '8219', 'answerId': '9408'}
{'answer': 'This defect (found here) points the way to the solution. The Tomcat instance that runs in JBoss is configured with emptySessionPath="true", rather than "false", which is the default. This can be modified in .../deploy/jboss-web.deployer/server.xml; both the HTTP and AJP connectors have this option. The feature itself is used to eliminate the context path (eg. "foo" in http://example.com/foo) from being included in the JSESSIONID cookie. Setting it to false will break applications that rely on cross-application authentication, which includes stuff built using some portal frameworks. It didn\'t negatively affect the application in question, however.', 'questionId': '8318', 'answerId': '8322'}
{'answer': 'This problem and the specific case in which it occurs is a problem in Tomcat as well as JBoss. Tomcat shares the emptySessionPath="true" effect (and actually JBoss inherits it from Tomcat). This really seems like a bug in Tomcat and JBoss when you are trying to prevent session fixation attacks but the servlet spec (at least version 2.3) does not actually require the JSESSIONID to be defined or redefined according to any specific logic. Perhaps this has been cleaned up in later versions.', 'questionId': '8318', 'answerId': '2919307'}
{'answer': 'One workaround is to store the client address in the session. A response wrapper should validate the client address set in the session is same as the one accessing the session.', 'questionId': '8318', 'answerId': '6096537'}
{'answer': 'I came to know below code setting snippet from one of the fourm. And i added below lines. But when i print the session ID after and before log in into the application it is same. How would i test session Fixation. D:\\jboss-5.1.0.GA\\bin\\run.cof file and add the below line. set "JAVA_OPTS=%JAVA_OPTS% -Dorg.apache.catalina.connector.Request.SESSION_ID_CHECK=false"  in each context.xml of the jboss applications. D:\\jboss-5.1.0.GA\\server\\default\\deploy\\jbossweb.sar\\context.xml', 'questionId': '8318', 'answerId': '16666753'}
{'answer': "Whilst its been years since I have used spring, and I can't say I am a fan of it, I know that the App Fuse tool (https://java.net/projects/appfuse/) has been helpful to help people bootstrap in terms of generating all the artifacts you need to get going.", 'questionId': '8569', 'answerId': '8571'}
{'answer': "Focus first on the heart of Spring: Dependency Injection. Once you see all the ways that DI can be used, then start thinking about the more interesting pieces like AOP, Remoting, JDBC Templates etc. So my best bit of advice is let your use of Spring grow out from the core. Best practice? If you're using the standard XML config, manage the size of individual files and comment them judiciously. You may think that you and others will perfectly understand your bean definitions, but in practice they're somewhat harder to come back to than plain old java code. Good luck!", 'questionId': '8569', 'answerId': '8576'}
{'answer': "I actually quite liked Spring.. It was a fresh breeze of air in your average J2EE Java Beans.. I recommend implementing the example Spring provides:  http://static.springframework.org/docs/Spring-MVC-step-by-step/ Also, I decided to go full monty and added Hibernate to my Spring application ;), because Spring provides excellent support for Hibernate... :) I do have a DON'T however, which I learned the hard way (product in production)... If you only implement the Controller interface, and return a ModelAndView object with some data as provided with the interface, Spring does garbadge collect those resources, for tries to cache those data. So be careful to put large data in those ModelAndView objects, because they will hog up your server memory for as long as the server is in the air as soon as that page has been viewed...", 'questionId': '8569', 'answerId': '8586'}
{'answer': 'A good way to get started is to concentrate on the "Springframework". The Spring portfolio has grown to a big pile of projects around various aspects of Enterprise Software. Stick to the core at the beginning and try to grasp the concepts. Download the latest binaries and check out Spring\'s petclinic example once you are familiar with the core. It gives quite a good overview of the various projects SpringSource has to offer. Although the documentation is very good, I\'d recommend a book after you grasp the concepts of the core. What I\'ve found problematic with the documentation, is that it\'s not in depth and can\'t give you all the details you need.', 'questionId': '8569', 'answerId': '8635'}
{'answer': 'Spring is also very much about unit testing and therefore testability of your classes. That basically means thinking about modularization, separation of concerns, referencing a class through interfaces etc.', 'questionId': '8569', 'answerId': '8642'}
{'answer': "If you're just looking to dabble in it a bit and see if you like it, I recommend starting with the DAO layer, using Spring's JDBC and/or Hibernate support. This will expose you to a lot of the core concepts, but do so in a way that is easy to isolate from the rest of your app. This is the route I followed, and it was good warm-up before getting into building a full application with Spring.", 'questionId': '8569', 'answerId': '8967'}
{'answer': "Start here - I actually think it's among the best Software Dev books that I've read. Expert Spring MVC And Web Flow Learn the new Annotation-based configuration for MVC classes. This is part of Spring 2.5. Using Annotation-based classes is going to make writing Unit tests a heck of a lot easier. Also being able to cut down on the amount of XML is a good thing. Oh yeah Unit Tests - if you're using Spring, you BETTER be Unit Testing. :) Write Unit tests for all of your Web and Service Layer classes.  Read up on Domain Driven Design. The fact that you can use Domain Object classes at all levels of a Spring Application means you're going to have a VERY powerful Domain Model. Leverage it. However, when using your Domain Object classes for form population, you will want to take heed of the recent security concerns around the Spring Framework. A discussion on the Server Side reveals the way to close the hole in the comments.", 'questionId': '8569', 'answerId': '9245'}
{'answer': "Small tip - I've found it helpful to modularize and clearly label my Spring xml context files based on application concern. Here's an example for a web app I worked on: MyProject / src / main / resources / spring / datasource.xml  -  My single data source bean. persistence.xml  -  My DAOs/Repositories. Depends on datasource.xml beans. services.xml  -  Service layer implementations. These are usually the beans to which I apply transactionality using AOP. Depends on persistence.xml beans. controllers.xml  - My Spring MVC controllers. Depends on services.xml beans. views.xml - My view implementations. This list is neither perfect nor exhaustive, but I hope it illustrates the point. Choose whatever naming strategy and granularity works best for you. In my (limited) experience, I've seen this approach yeild the following benefits: Clearer architecture Clearly named context files gives those unfamiliar with your project structure a reasonable  place to start looking for bean definitions. Can make detecting circular/unwanted dependencies a little easier. Helps domain design If you want to add a bean definition, but it doesn't fit well in any of your context files, perhaps there's a new concept or concern emerging? Examples: Suppose you want to make your Service layer transactional with AOP. Do you add those bean definitions to services.xml, or put them in their own transactionPolicy.xml? Talk it over with your team. Should your transaction policy be pluggable? Add Acegi/Spring Security beans to your controllers.xml file, or create a security.xml context file? Do you have different security requirements for different deployments/environments? Integration testing You can wire up a subset of your application for integration testing (ex: given the above files, to test the database you need to create only datasource.xml and persistence.xml beans). Specifically, you can annotate an integration test class as such: Works well with Spring IDE's Beans Graph Having lots of focused and well-named context files makes it easy to create custom BeansConfigSets to visualize the layers of your app using Spring IDE's Beans Graph. I've used this before to give new team members a high-level overview of our application's organization.", 'questionId': '8569', 'answerId': '13367'}
{'answer': '"...Which technology did you use right away: AOP, complex Hibernate..." - I\'d say a better question would be to ask what people did not use right away.  I\'d add the examples you cite to that list. Spring MVC and JDBC template would be my starting recommendations.  You can go a very long way just with those. My recommendation would be to follow the Spring architectural recommendations faithfully.  Use their layering ideas.  Make sure that your web layer is completely detachable from the rest.  You do this by letting the web tier interact with the back end only through the service layer. If you want to reuse that service layer, a good recommendation is to expose it using Spring "contract first" web services.  If you start with the XML messages that you pass back and forth, your client and server can be completely decoupled. The IDE with the best Spring support is IntelliJ.  It\'s worth spending a few bucks.', 'questionId': '8569', 'answerId': '1318317'}
{'answer': 'With the release of Spring 2.5 and 3.0, I think one of the most important best practices to take advantage of now are the Spring annotations. Annotations for Controllers, Services, and Repositories can save you a ton of time, allow you to focus on the business logic of your app, and can potentially all you to make all of your object plain old Java objects (POJOs).', 'questionId': '8569', 'answerId': '2792809'}
{'answer': 'First of all Spring is about modularity and works best if one focuses on writing small components that do one thing and do it well.  If you follow best practices in general like: Defining an interface rather than abstract classes Making types immutable Keep dependencies as few as possible for a single class. Each class should do one thing and do it well. Big monolithic classes suck, they are hard to test and hard to use. If your components are small and follow the dogmas above they should be easy to wire up and play with other stuff. The above points are naturally also true of the Spring framework itself.  PS Dont listen to the points above, they are talking about how to do whatever. Its more important to learn how to think rather than how to do something. Humans can think, repeating something is not clever, thinking is.', 'questionId': '8569', 'answerId': '2792827'}
{'answer': 'What kind of data are you planning to use? I would say, that if the server is also done in Java, easiest way for small footprint is to send/receive binary data in predefined format. Just write everything in known order into DataOutputStream. But it would really depend, what what kind of data are you working on and can you define the format. Actually you should evaluate, if this kind of optimization is even needed. Maybe you target devices are not so limited.', 'questionId': '8599', 'answerId': '8645'}
{'answer': 'You might want to take a look at wbxml (Wireless Binary XML) it is optimized for size, and often used on mobile phones, but it is not optimized for parsing speed.', 'questionId': '8599', 'answerId': '8655'}
{'answer': 'It very much depends on the target device. If you have JSR172 available, then you are done with the parsing, the runtime does it for you. And XML is mainly about making your own format. As was alredy stated if your goal is performance, than XML is probably not the best way to go and you will end up doing some binary stuff.', 'questionId': '8599', 'answerId': '86142'}
{'answer': 'Hessian might be an alternative worth looking at. It is a small protocol, well-suited for Java ME applications.  "Hessian is a binary web service protocol that makes web services usable without requiring a large framework, and without learning a new set of protocols. Because it is a binary protocol, it is well-suited to sending binary data without any need to extend the protocol with attachments." More links: http://hessian.caucho.com/ http://www.nubius.be/info-software/hessian4j.html', 'questionId': '8599', 'answerId': '132129'}
{'answer': "If you only need some simple process orchestration, Spring's own Web Flow, despite its name can serve as a orchestration task manager.   If you need to preserve state for several days then you will need to become an 'early adopter' of one of the open-source projects.  You may want to look at Eclipse's BPEL project.   My hunch is that once a clearer picture of the BPEL/BPM/Workflow space emerges you will see Spring provide an abstraction layer the same way they have for JDBC, Transactions, ORM frameworks etc...", 'questionId': '8968', 'answerId': '9404'}
{'answer': "We're looking at Drools/Guvnor, possibly integrated with jBPM (as in this presentation), to add a workflow engine to our Spring/Java EE app, but we're still in the very early phases of trying it out.", 'questionId': '8968', 'answerId': '9698'}
{'answer': "I second Spring Web Flow. Depending on how complex the process is, Web Flow is great for managing various states and I've found that it's pretty easy to pick up and there's a good amount of documentation out there for it.", 'questionId': '8968', 'answerId': '17820'}
{'answer': "Like Brian said if you're doing anything of great complexity you might look at using BPEL.  There are a number of open source BPEL engines, one that comes to mind is Apache Orchestration Director Engine", 'questionId': '8968', 'answerId': '182346'}
{'answer': 'ActiveVOS is by far the best BPEL engine in my opinion. Download the evaluation version and give it a go. JBoss have even adopted their open source offering.', 'questionId': '8968', 'answerId': '427596'}
{'answer': "I'm not sure how the annotation inheritance works for TestNG but this article may be of some use. http://beust.com/weblog/archives/000170.html.  Actually, this may help better http://testng.org/doc/documentation-main.html#annotations, look at inheritGroups.", 'questionId': '9044', 'answerId': '9137'}
{'answer': "TestNG will run all the public methods from a class with a @Test annotation. Maybe you could change the methods you don't want TestNG to run to be non-public", 'questionId': '9044', 'answerId': '75209'}
{'answer': 'You can specify the @Test annotation at method level that allows for maximum flexibility. Does this works for you or I am missing something from your question.', 'questionId': '9044', 'answerId': '154080'}
{'answer': 'It would seem to me as the following code-challenge (community wiki post): How to be able to execute all test methods of Extended class from the group \'aGlobalGroup\' without: specifying the \'aGlobalGroup\' group on the Extended class itself ? testing non-annotated public methods of Extended class ? The first answer is easy: add a class TestNG(groups = { "aGlobalGroup" }) on the Base class level That group will apply to all public methods of both Base class and Extended class. BUT: even non-testng public methods (with no TestNG annotation) will be included in that group. CHALLENGE: avoid including those non-TestNG methods.', 'questionId': '9044', 'answerId': '275342'}
{'answer': "The answer is through a custom org.testng.IMethodSelector: Its includeMethod() can exclude any method we want, like a public not-annotated method. However, to register a custom Java MethodSelector, you must add it to the XMLTest instance managed by any TestRunner, which means you need your own custom TestRunner. But, to build a custom TestRunner, you need to register a TestRunnerFactory, through the -testrunfactory option. BUT that -testrunfactory is NEVER taken into account by TestNG class... so you need also to define a custom TestNG class : in order to override the configure(Map) method,  so you can actually set the TestRunnerFactory TestRunnerFactory which will build you a custom TestRunner, TestRunner which will set to the XMLTest instance a custom XMLMethodSelector XMLMethodSelector which will build a custom IMethodSelector IMethodSelector which will exclude any TestNG methods of your choosing! Ok... it's a nightmare. But it is also a code-challenge, so it must be a little challenging ;) All the code is available at DZone snippets. As usual for a code challenge: one java class (and quite a few inner classes) copy-paste the class in a 'source/test' directory (since the package is 'test') run it (no arguments needed) Update from Mike Stone: I'm going to accept this because it sounds pretty close to what I ended up doing, but I figured I would add what I did as well. Basically, I created a Groups annotation that behaves like the groups property of the Test (and other) annotations. Then, I created a GroupsAnnotationTransformer, which uses IAnnotationTransformer to look at all tests and test classes being defined, then modifies the test to add the groups, which works perfectly with group exclusion and inclusion. Modify the build to use the new annotation transformer, and it all works perfectly! Well... the one caveat is that it doesn't add the groups to non-test methods... because at the time I did this, there was another annotation transformer that lets you transform ANYTHING, but it somehow wasn't included in the TestNG I was using for some reason... so it is a good idea to make your before/after annotated methods to alwaysRun=true... which is sufficient for me. The end result is I can do: And I made the transformer work with subclassing and everything.", 'questionId': '9044', 'answerId': '275353'}
{'answer': "I believe that the real answer is that you can't.  The file path won't be sent by the browser for security reasons.  The file name will be sent, however I don't believe it gets sent without an actual upload. The closest you could come, afaik, would be to forcibly kill the connection just when the upload starts.  That would net you the filename with little actual transferred data, but it doesn't sound like it would be useful to you. Alternatively, a signed Java applet might get you closer to a solution that you'd want.", 'questionId': '9361', 'answerId': '16650'}