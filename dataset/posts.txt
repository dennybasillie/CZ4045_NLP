{'questionId': '123', 'questionText': '<p>Is there an existing application or library in <em>Java</em> which will allow me to convert a <code>CSV</code> data file to <code>XML</code> file?  </p>\n\n<p>The <code>XML</code> tags would be provided through possibly the first row containing column headings.</p>\n', 'answers': ['<p>This may be too basic or limited of a solution, but couldn\'t you do a <a href="http://java.sun.com/j2se/7/docs/api/java/lang/String.html#split(java.lang.String)" rel="nofollow noreferrer"><code>String.split()</code></a> on each line of the file, remembering the result array of the first line to generate the XML, and just spit each line\'s array data out with the proper XML elements padding each iteration of a loop?</p>\n', '<p>Maybe this might help: <a href="http://jsefa.sourceforge.net/quick-tutorial.html" rel="noreferrer">JSefa</a></p>\n\n<p>You can read CSV file with this tool and serialize it to XML.</p>\n', "<p>I don't understand why you would want to do this. It sounds almost like cargo cult coding.</p>\n\n<p>Converting a CSV file to XML doesn't add any value. Your program is already reading the CSV file, so arguing that you need XML doesn't work.</p>\n\n<p>On the other hand, reading the CSV file, doing <em>something</em> with the values, and then serializing to XML does make sense (well, as much as using XML can make sense... ;)) but you would supposedly already have a means of serializing to XML.</p>\n", "<p>As far as I know, there's no ready-made library to do this for you, but producing a tool capable of translating from CSV to XML should only require you to write a crude CSV parser and hook up JDOM (or your XML Java library of choice) with some glue code.</p>\n", '<p>There is nothing I know of that can do this without you at least writing a little bit of code... You will need 2 separate library:</p>\n\n<ul>\n<li>A CSV Parser Framework </li>\n<li>An XML Serialization Framework</li>\n</ul>\n\n<p>The CSV parser I would recommend (unless you want to have a little bit of fun to write your own CSV Parser) is OpenCSV (A SourceForge Project for parsing CSV Data)</p>\n\n<p>The XML Serialization Framework should be something that can scale in case you want to transform large (or huge) CSV file to XML: My recommendation is the Sun Java Streaming XML Parser Framework (See <a href="https://sjsxp.java.net/" rel="noreferrer">here</a>) which allows pull-parsing AND serialization.</p>\n', '<p>I know you asked for Java, but this strikes me as a task well suited to a scripting language. Here is a quick (very simple) solution written in Groovy.</p>\n\n<p><strong>test.csv</strong></p>\n\n<pre><code>string,float1,float2,integer\nhello world,1.0,3.3,4\ngoodbye world,1e9,-3.3,45\nhello again,-1,23.33,456\nhello world 3,1.40,34.83,4999\nhello 2 world,9981.05,43.33,444\n</code></pre>\n\n<p><strong>csvtoxml.groovy</strong></p>\n\n<pre><code>#!/usr/bin/env groovy\n\ndef csvdata = []\nnew File("test.csv").eachLine { line -&gt;\n    csvdata &lt;&lt; line.split(\',\')\n}\n\ndef headers = csvdata[0]\ndef dataRows = csvdata[1..-1]\n\ndef xml = new groovy.xml.MarkupBuilder()\n\n// write \'root\' element\nxml.root {\n    dataRows.eachWithIndex { dataRow, index -&gt;\n        // write \'entry\' element with \'id\' attribute\n        entry(id:index+1) {\n            headers.eachWithIndex { heading, i -&gt;\n                // write each heading with associated content\n                "${heading}"(dataRow[i])\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Writes the following XML to stdout:</p>\n\n<pre><code>&lt;root&gt;\n  &lt;entry id=\'1\'&gt;\n    &lt;string&gt;hello world&lt;/string&gt;\n    &lt;float1&gt;1.0&lt;/float1&gt;\n    &lt;float2&gt;3.3&lt;/float2&gt;\n    &lt;integer&gt;4&lt;/integer&gt;\n  &lt;/entry&gt;\n  &lt;entry id=\'2\'&gt;\n    &lt;string&gt;goodbye world&lt;/string&gt;\n    &lt;float1&gt;1e9&lt;/float1&gt;\n    &lt;float2&gt;-3.3&lt;/float2&gt;\n    &lt;integer&gt;45&lt;/integer&gt;\n  &lt;/entry&gt;\n  &lt;entry id=\'3\'&gt;\n    &lt;string&gt;hello again&lt;/string&gt;\n    &lt;float1&gt;-1&lt;/float1&gt;\n    &lt;float2&gt;23.33&lt;/float2&gt;\n    &lt;integer&gt;456&lt;/integer&gt;\n  &lt;/entry&gt;\n  &lt;entry id=\'4\'&gt;\n    &lt;string&gt;hello world 3&lt;/string&gt;\n    &lt;float1&gt;1.40&lt;/float1&gt;\n    &lt;float2&gt;34.83&lt;/float2&gt;\n    &lt;integer&gt;4999&lt;/integer&gt;\n  &lt;/entry&gt;\n  &lt;entry id=\'5\'&gt;\n    &lt;string&gt;hello 2 world&lt;/string&gt;\n    &lt;float1&gt;9981.05&lt;/float1&gt;\n    &lt;float2&gt;43.33&lt;/float2&gt;\n    &lt;integer&gt;444&lt;/integer&gt;\n  &lt;/entry&gt;\n&lt;/root&gt;\n</code></pre>\n\n<p>However, the code does very simple parsing (not taking into account quoted or escaped commas) and it does not account for possible absent data.</p>\n', '<p>This solution does not need any CSV or XML libraries and, I know, it does not handle any illegal characters and encoding issues, but you might be interested in it as well, provided your CSV input does not break the above mentioned rules.</p>\n\n<p><strong>Attention:</strong> You should not use this code unless you know what you do or don\'t have the chance to use a further library (possible in some bureaucratic projects)... Use a StringBuffer for older Runtime Environments...</p>\n\n<p>So here we go:</p>\n\n<pre><code>BufferedReader reader = new BufferedReader(new InputStreamReader(\n        Csv2Xml.class.getResourceAsStream("test.csv")));\nStringBuilder xml = new StringBuilder();\nString lineBreak = System.getProperty("line.separator");\nString line = null;\nList&lt;String&gt; headers = new ArrayList&lt;String&gt;();\nboolean isHeader = true;\nint count = 0;\nint entryCount = 1;\nxml.append("&lt;root&gt;");\nxml.append(lineBreak);\nwhile ((line = reader.readLine()) != null) {\n    StringTokenizer tokenizer = new StringTokenizer(line, ",");\n    if (isHeader) {\n        isHeader = false;\n        while (tokenizer.hasMoreTokens()) {\n            headers.add(tokenizer.nextToken());\n        }\n    } else {\n        count = 0;\n        xml.append("\\t&lt;entry id=\\"");\n        xml.append(entryCount);\n        xml.append("\\"&gt;");\n        xml.append(lineBreak);\n        while (tokenizer.hasMoreTokens()) {\n            xml.append("\\t\\t&lt;");\n            xml.append(headers.get(count));\n            xml.append("&gt;");\n            xml.append(tokenizer.nextToken());\n            xml.append("&lt;/");\n            xml.append(headers.get(count));\n            xml.append("&gt;");\n            xml.append(lineBreak);\n            count++;\n        }\n        xml.append("\\t&lt;/entry&gt;");\n        xml.append(lineBreak);\n        entryCount++;\n    }\n}\nxml.append("&lt;/root&gt;");\nSystem.out.println(xml.toString());\n</code></pre>\n\n<p>The input test.csv (stolen from another answer on this page):</p>\n\n<pre><code>string,float1,float2,integer\nhello world,1.0,3.3,4\ngoodbye world,1e9,-3.3,45\nhello again,-1,23.33,456\nhello world 3,1.40,34.83,4999\nhello 2 world,9981.05,43.33,444\n</code></pre>\n\n<p>The resulting output:</p>\n\n<pre><code>&lt;root&gt;\n    &lt;entry id="1"&gt;\n        &lt;string&gt;hello world&lt;/string&gt;\n        &lt;float1&gt;1.0&lt;/float1&gt;\n        &lt;float2&gt;3.3&lt;/float2&gt;\n        &lt;integer&gt;4&lt;/integer&gt;\n    &lt;/entry&gt;\n    &lt;entry id="2"&gt;\n        &lt;string&gt;goodbye world&lt;/string&gt;\n        &lt;float1&gt;1e9&lt;/float1&gt;\n        &lt;float2&gt;-3.3&lt;/float2&gt;\n        &lt;integer&gt;45&lt;/integer&gt;\n    &lt;/entry&gt;\n    &lt;entry id="3"&gt;\n        &lt;string&gt;hello again&lt;/string&gt;\n        &lt;float1&gt;-1&lt;/float1&gt;\n        &lt;float2&gt;23.33&lt;/float2&gt;\n        &lt;integer&gt;456&lt;/integer&gt;\n    &lt;/entry&gt;\n    &lt;entry id="4"&gt;\n        &lt;string&gt;hello world 3&lt;/string&gt;\n        &lt;float1&gt;1.40&lt;/float1&gt;\n        &lt;float2&gt;34.83&lt;/float2&gt;\n        &lt;integer&gt;4999&lt;/integer&gt;\n    &lt;/entry&gt;\n    &lt;entry id="5"&gt;\n        &lt;string&gt;hello 2 world&lt;/string&gt;\n        &lt;float1&gt;9981.05&lt;/float1&gt;\n        &lt;float2&gt;43.33&lt;/float2&gt;\n        &lt;integer&gt;444&lt;/integer&gt;\n    &lt;/entry&gt;\n&lt;/root&gt;\n</code></pre>\n', '<p>As the others above, I don\'t know any one-step way to do that, but if you are ready to use very simple external libraries, I would suggest:</p>\n\n<p><a href="http://opencsv.sourceforge.net/" rel="noreferrer">OpenCsv</a> for parsing CSV (small, simple, reliable and easy to use)</p>\n\n<p><strong>Xstream</strong> to parse/serialize XML (very very easy to use, and creating fully human readable xml)</p>\n\n<p>Using the same sample data as above, code would look like:</p>\n\n<pre><code>package fr.megiste.test;\n\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport au.com.bytecode.opencsv.CSVReader;\n\nimport com.thoughtworks.xstream.XStream;\n\npublic class CsvToXml {     \n\n    public static void main(String[] args) {\n\n        String startFile = "./startData.csv";\n        String outFile = "./outData.xml";\n\n        try {\n            CSVReader reader = new CSVReader(new FileReader(startFile));\n            String[] line = null;\n\n            String[] header = reader.readNext();\n\n            List out = new ArrayList();\n\n            while((line = reader.readNext())!=null){\n                List&lt;String[]&gt; item = new ArrayList&lt;String[]&gt;();\n                    for (int i = 0; i &lt; header.length; i++) {\n                    String[] keyVal = new String[2];\n                    String string = header[i];\n                    String val = line[i];\n                    keyVal[0] = string;\n                    keyVal[1] = val;\n                    item.add(keyVal);\n                }\n                out.add(item);\n            }\n\n            XStream xstream = new XStream();\n\n            xstream.toXML(out, new FileWriter(outFile,false));\n\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>\n\n<p>Producing the following result:\n(Xstream allows very fine tuning of the result...)</p>\n\n<pre><code>&lt;list&gt;\n  &lt;list&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;string&lt;/string&gt;\n      &lt;string&gt;hello world&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float1&lt;/string&gt;\n      &lt;string&gt;1.0&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float2&lt;/string&gt;\n      &lt;string&gt;3.3&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;integer&lt;/string&gt;\n      &lt;string&gt;4&lt;/string&gt;\n    &lt;/string-array&gt;\n  &lt;/list&gt;\n  &lt;list&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;string&lt;/string&gt;\n      &lt;string&gt;goodbye world&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float1&lt;/string&gt;\n      &lt;string&gt;1e9&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float2&lt;/string&gt;\n      &lt;string&gt;-3.3&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;integer&lt;/string&gt;\n      &lt;string&gt;45&lt;/string&gt;\n    &lt;/string-array&gt;\n  &lt;/list&gt;\n  &lt;list&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;string&lt;/string&gt;\n      &lt;string&gt;hello again&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float1&lt;/string&gt;\n      &lt;string&gt;-1&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float2&lt;/string&gt;\n      &lt;string&gt;23.33&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;integer&lt;/string&gt;\n      &lt;string&gt;456&lt;/string&gt;\n    &lt;/string-array&gt;\n  &lt;/list&gt;\n  &lt;list&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;string&lt;/string&gt;\n      &lt;string&gt;hello world 3&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float1&lt;/string&gt;\n      &lt;string&gt;1.40&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float2&lt;/string&gt;\n      &lt;string&gt;34.83&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;integer&lt;/string&gt;\n      &lt;string&gt;4999&lt;/string&gt;\n    &lt;/string-array&gt;\n  &lt;/list&gt;\n  &lt;list&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;string&lt;/string&gt;\n      &lt;string&gt;hello 2 world&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float1&lt;/string&gt;\n      &lt;string&gt;9981.05&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;float2&lt;/string&gt;\n      &lt;string&gt;43.33&lt;/string&gt;\n    &lt;/string-array&gt;\n    &lt;string-array&gt;\n      &lt;string&gt;integer&lt;/string&gt;\n      &lt;string&gt;444&lt;/string&gt;\n    &lt;/string-array&gt;\n  &lt;/list&gt;\n&lt;/list&gt;\n</code></pre>\n', '<p>For the CSV Part, you may use <a href="http://developer.berlios.de/projects/java-csv/" rel="nofollow noreferrer">my little open source library</a></p>\n', '<p>I have an opensource framework for working with CSV and flat files in general. Maybe it\'s worth looking: <a href="http://jfilehelpers.com" rel="noreferrer" title="JFileHelpers">JFileHelpers</a>.</p>\n\n<p>With that toolkit you can write code using beans, like:</p>\n\n<pre><code>@FixedLengthRecord()\npublic class Customer {\n    @FieldFixedLength(4)\n    public Integer custId;\n\n    @FieldAlign(alignMode=AlignMode.Right)\n    @FieldFixedLength(20)\n    public String name;\n\n    @FieldFixedLength(3)\n    public Integer rating;\n\n    @FieldTrim(trimMode=TrimMode.Right)\n    @FieldFixedLength(10)\n    @FieldConverter(converter = ConverterKind.Date, \n    format = "dd-MM-yyyy")\n    public Date addedDate;\n\n    @FieldFixedLength(3)\n    @FieldOptional\n    public String stockSimbol;  \n}\n</code></pre>\n\n<p>and then just parse your text files using:</p>\n\n<pre><code>FileHelperEngine&lt;Customer&gt; engine = \n    new FileHelperEngine&lt;Customer&gt;(Customer.class); \nList&lt;Customer&gt; customers = \n    new ArrayList&lt;Customer&gt;();\n\ncustomers = engine.readResource(\n    "/samples/customers-fixed.txt");\n</code></pre>\n\n<p>And you\'ll have a collection of parsed objects.</p>\n\n<p>Hope that helps!</p>\n', '<p>There is also good library <a href="http://servingxml.sourceforge.net/" rel="noreferrer">ServingXML</a> by Daniel Parker, which is able to convert almost any plain text format to XML and back.</p>\n\n<p>The example for your case can be found <a href="http://servingxml.sourceforge.net/examples/index.html#d62e305" rel="noreferrer">here</a>: It uses heading of field in CSV file as the XML element name.</p>\n', '<p>You can do this exceptionally easily using Groovy, and the code is very readable. </p>\n\n<p>Basically, the text variable will be written to <code>contacts.xml</code> for each line in the <code>contactData.csv</code>, and the fields array contains each column.</p>\n\n<pre><code>def file1 = new File(\'c:\\\\temp\\\\ContactData.csv\')\ndef file2 = new File(\'c:\\\\temp\\\\contacts.xml\')\n\ndef reader = new FileReader(file1)\ndef writer = new FileWriter(file2)\n\nreader.transformLine(writer) { line -&gt;\n    fields =  line.split(\',\')\n\n    text = """&lt;CLIENTS&gt;\n    &lt;firstname&gt; ${fields[2]} &lt;/firstname&gt;\n    &lt;surname&gt; ${fields[1]} &lt;/surname&gt;\n    &lt;email&gt; ${fields[9]} &lt;/email&gt;\n    &lt;employeenumber&gt; password &lt;/employeenumber&gt;\n    &lt;title&gt; ${fields[4]} &lt;/title&gt;\n    &lt;phone&gt; ${fields[3]} &lt;/phone&gt;\n    &lt;/CLIENTS&gt;"""\n}\n</code></pre>\n', '<p>You could use <strong>XSLT</strong>.  Google it and you will find a few examples e.g. <a href="http://andrewjwelch.com/code/xslt/csv/csv-to-xml_v2.html" rel="noreferrer">CSV to XML</a>\nIf you use <strong>XSLT</strong> you can then convert the XML to whatever format you want.</p>\n', '<p>The big difference is that <a href="http://jsefa.sourceforge.net/index.html" rel="noreferrer">JSefa</a> brings in is that it can serialize your java objects to  CSV/XML/etc files and can deserialize back to java objects. And it\'s driven by annotations which gives you lot of control over the output. </p>\n\n<p>JFileHelpers also looks interesting.</p>\n', '<p>I had the same problem and needed an application to convert a CSV file to a XML file for one of my projects, but didn\'t find anything free and good enough on the net, so I coded my own Java Swing CSVtoXML application.</p>\n\n<p>It\'s available from my website <a href="https://sites.google.com/site/ibrabel/freewares/csvtoxml" rel="nofollow">HERE</a>. Hope it will help you. </p>\n\n<p>If not, you can easily code your own like I did; The source code is inside the jar file so modify it as you need if it doesn\'t fill your requirement.</p>\n', '<p>Jackson processor family has backends for multiple data formats, not just JSON. This includes both XML (<a href="https://github.com/FasterXML/jackson-dataformat-xml" rel="nofollow">https://github.com/FasterXML/jackson-dataformat-xml</a>) and CSV (<a href="https://github.com/FasterXML/jackson-dataformat-csv/" rel="nofollow">https://github.com/FasterXML/jackson-dataformat-csv/</a>) backends.</p>\n\n<p>Conversion would rely on reading input with CSV backend, write using XML backend. This is easiest to do if you have (or can define) a POJO for per-row (CSV) entries. This is not a strict requirement, as content from CSV may be read "untyped" as well (a sequence of <code>String</code> arrays), but requires bit more work on XML output.</p>\n\n<p>For XML side, you would need a wrapper root object to contain array or <code>List</code> of objects to serialize.</p>\n']}
{'questionId': '126', 'questionText': '<p>What is the "purist" or "correct" way to access an object\'s properties from within an object method that is not a getter/setter method?</p>\n\n<p>I know that from outside of the object you should use a getter/setter, but from within would you just do:</p>\n\n<p>Java:</p>\n\n<pre><code>String property = this.property;\n</code></pre>\n\n<p>PHP:</p>\n\n<pre><code>$property = $this-&gt;property;\n</code></pre>\n\n<p>or would you do:</p>\n\n<p>Java:</p>\n\n<pre><code>String property = this.getProperty();\n</code></pre>\n\n<p>PHP:</p>\n\n<pre><code>$property = $this-&gt;getProperty();\n</code></pre>\n\n<p>Forgive me if my Java is a little off, it\'s been a year since I programmed in Java...</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>It seems people are assuming I am talking about private or protected variables/properties only. When I learned OO I was taught to use getters/setters for every single property even if it was public (and actually I was told never to make any variable/property public). So, I may be starting off from a false assumption from the get go. It appears that people answering this question are maybe saying that you should have public properties and that those don\'t need getters and setters, which goes against what I was taught, and what I was talking about, although maybe that needs to be discussed as well. That\'s probably a good topic for a different question though...</p>\n', 'answers': ["<p>This has religious war potential, but it seems to me that if you're using a getter/setter, you should use it internally as well - using both will lead to maintenance problems down the road (e.g. somebody adds code to a setter that <em>needs</em> to run every time that property is set, and the property is being set internally w/o that setter being called).</p>\n", "<p>It depends on how the property is used. For example, say you have a student object that has a name property. You could use your Get method to pull the name from the database, if it hasn't been retrieved already. This way you are reducing unnecessary calls to the database.</p>\n\n<p>Now let's say you have a private integer counter in your object that counts the number of times the name has been called. You may want to not use the Get method from inside the object because it would produce an invalid count.</p>\n", '<blockquote>\n  <p>Am I just going overboard here?</p>\n</blockquote>\n\n<p>Perhaps ;)</p>\n\n<p>Another approach would be to utilize a private/protected method to actually do the getting (caching/db/etc), and a public wrapper for it that increments the count:</p>\n\n<p>PHP:</p>\n\n<pre><code>public function getName() {\n    $this-&gt;incrementNameCalled();\n    return $this-&gt;_getName();\n}\n\nprotected function _getName() {\n    return $this-&gt;name;\n}\n</code></pre>\n\n<p>and then from within the object itself:</p>\n\n<p>PHP:</p>\n\n<pre><code>$name = $this-&gt;_getName();\n</code></pre>\n\n<p>This way you can still use that first argument for something else (like sending a flag for whether or not to used cached data here perhaps).</p>\n', "<p>Well, it seems with C# 3.0 properties' default implementation, the decision is taken for you; you HAVE to set the property using the (possibly private) property setter.</p>\n\n<p>I personally only use the private member-behind when not doing so would cause the object to fall in an less than desirable state, such as when initializing or when caching/lazy loading is involved.</p>\n", "<p>As stated in some of the comments: Sometimes you should, sometimes you shouldn't. The great part about private variables is that you are able to see all the places they are used when you change something. If your getter/setter does something you need, use it. If it doesn't matter you decide.</p>\n\n<p>The opposite case could be made that if you use the getter/setter and somebody changes the getter/setter they have to analyze all the places the getter and setter is used internally to see if it messes something up.</p>\n", "<p>Personally, I feel like it's important to remain consistent.  If you have getters and setters, use them.  The only time I would access a field directly is when the accessor has a lot of overhead.  It may feel like you're bloating your code unnecessarily, but it can certainly save a whole lot of headache in the future.  The classic example:</p>\n\n<p>Later on, you may desire to change the way that field works.  Maybe it should be calculated on-the-fly or maybe you would like to use a different type for the backing store.  If you are accessing properties directly, a change like that can break an awful lot of code in one swell foop.</p>\n", "<p>i can be wrong because i'm autodidact, but i NEVER user public properties in my Java clases, they are allways private or protected, so that outside code must access by getters/setters. it's better for mainteance / modification purposes. And for inside class code... if getter method is trivial i use the property directly, but i allways use the setter methods because i could easily add code to fire events if i wish</p>\n", "<p>i've found using setters/getters made my code easier to read. I also like the control it gives when other classes use the methods and if i change the data the property will store.</p>\n", "<p>Private fields with public or protected properties.  Access to the values should go through the properties, and be copied to a local variable if they will be used more than once in a method.  If and ONLY if you have the rest of your application so totally tweaked, rocked out, and otherwise optimized to where accessing values by going through their assosciated properties has become a bottleneck (And that will never EVER happen, I guarantee) should you even begin to consider letting anything other than the properties touch their backing variables directly.</p>\n\n<p>.NET developers can use automatic properties to enforce this since you can't even see the backing variables at design time.</p>\n", '<p>If by "purist" you mean "most encapsulation", then I typically declare all my fields as private and then use this.field from within the class itself, but all other classes, including subclasses, access instance state using the getters.</p>\n', "<p>If I won't edit the property I'll use a <code>get_property()</code> public method unless it's a special occasion such as a MySQLi object inside another object in which case I'll just public the property and refer to it as <code>$obj-&gt;object_property</code>.</p>\n\n<p>Inside the object it's always $this->property for me.</p>\n", '<p>I like the answer by <a href="https://stackoverflow.com/questions/126/how-would-you-access-object-properties-from-within-an-object-method#132">cmcculloh</a>, but it seems like the most correct is the answer by <a href="https://stackoverflow.com/questions/126/how-would-you-access-object-properties-from-within-an-object-method#127">Greg Hurlman</a>. Use getter/setters all the time if you started using them from the getgo and/or are used to working with them.</p>\n\n<p>As an aside, I personally find that using getter/setters makes the code easier to read and to debug later on.</p>\n', '<p>I\'m fairly surprised at how unanimous the sentiment is that <code>getters</code> and setters are fine and good. I suggest the incendiary article by Allen Holub "<a href="http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html" rel="noreferrer">Getters And Setters Are Evil</a>". Granted, the title is for shock value, but the author makes valid points.</p>\n\n<p>Essentially, if you have <code>getters</code> and <code>setters</code> for each and every private field, you are making those fields as good as public. You\'d be very hard-pressed to change the type of a private field without ripple effects to every class that calls that <code>getter</code>.</p>\n\n<p>Moreover, from a strictly OO point of view, objects should be responding to messages (methods) that correspond to their (hopefully) single responsibility. The vast majority of <code>getters</code> and <code>setters</code> don\'t make sense for their constituent objects;<code>Pen.dispenseInkOnto(Surface)</code> makes more sense to me than <code>Pen.getColor()</code>.</p>\n\n<p>Getters and setters also encourage users of the class to ask the object for some data, perform a calculation, and then set some other value in the object, better known as procedural programming. You\'d be better served to simply tell the object to do what you were going to in the first place; also known as the <a href="http://en.wikipedia.org/wiki/GRASP_%28object-oriented_design%29#Information_Expert" rel="noreferrer">Information Expert</a> idiom.</p>\n\n<p>Getters and setters, however, are necessary evils at the boundary of layers -- UI, persistence, and so forth. Restricted access to a class\'s internals, such as C++\'s friend keyword, Java\'s package protected access, .NET\'s internal access, and the <a href="http://moffdub.wordpress.com/2008/09/17/friend-classes-in-java-and-c-sharp/" rel="noreferrer">Friend Class Pattern</a> can help you reduce the visibility of <code>getters</code> and setters to only those who need them.</p>\n', '<p>The purist OO way is to avoid both and follow the <a href="https://en.wikipedia.org/wiki/Law_of_Demeter" rel="nofollow noreferrer">Law of Demeter</a> by using the <a href="http://c2.com/cgi/wiki?TellDontAsk" rel="nofollow noreferrer">Tell Don\'t Ask</a> approach.</p>\n\n<p>Instead of getting the value of the object\'s property, which <a href="https://stackoverflow.com/questions/2832017/what-is-the-difference-between-loose-coupling-and-tight-coupling-in-object-orien">tightly couples</a> the two class, use the object as a parameter e.g.</p>\n\n<pre><code>  doSomethingWithProperty() {\n     doSomethingWith( this.property ) ;\n  }\n</code></pre>\n\n<p>Where the property was a native type, e.g. int, use an access method,  name it for problem domain not the programming domain.</p>\n\n<pre><code>  doSomethingWithProperty( this.daysPerWeek() ) ;\n</code></pre>\n\n<p>These will allow you to maintain encapsulation and any post-conditions or dependent invariants. You can also use the setter method to maintain any pre-conditions or dependent invariants, however don\'t fall into the trap of naming them setters, go back to the Hollywood Principle for naming when using the idiom.</p>\n', "<p>PHP offers a myriad of ways to handle this, including magic methods <code>__get</code> and <code>__set</code>, but I prefer explicit getters and setters. Here's why:</p>\n\n<ol>\n<li>Validation can be placed in setters (and getters for that matter)</li>\n<li>Intellisense works with explicit methods</li>\n<li>No question whether a property is read only, write only or read-write</li>\n<li>Retrieving virtual properties (ie, calculated values) looks the same as regular properties </li>\n<li>You can easily set an object property that is never actually defined anywhere, which then goes undocumented </li>\n</ol>\n", "<p>It depends. It's more a style issue than anything else, and there is no hard rule.</p>\n", '<p>i would say its better to use the accessor methods even within the object. Here are the points that come to my mind immediately:</p>\n\n<p>1) It should be done in the interest of maintaining consistency with accesses made outside the object.</p>\n\n<p>2) In some cases, these accessor methods could be doing more than just accessing the field; they could be doing some additional processing (its rare though). If this is the case, by accessing the field directly you would missing out that additional processing and your program could go awry if this processing is always to be done during those accesses</p>\n', "<p>I must be missing the point here, why would you use a getter inside an object to access a property of that object?</p>\n\n<p>Taking this to its conclusion the getter should call a getter, which should call a getter.</p>\n\n<p>So I'd say inside an object method access a property directly, especially seeing as calling another method in that object (which will just access the property directly anyway then return it) is just a pointless, wasteful exercise (or have I misunderstood the question).</p>\n"]}
{'questionId': '382', 'questionText': '<p>What is the meaning of the <em>Java warning</em>?</p>\n\n<blockquote>\n  <p>Type safety: The cast from Object to List is actually checking against the erased type List</p>\n</blockquote>\n\n<p>I get this warning when I try to cast an Object to a type with generic information, such as in the following code:</p>\n\n<pre><code>Object object = getMyList();\nList&lt;Integer&gt; list = (List&lt;Integer&gt;) object;\n</code></pre>\n', 'answers': ["<p>This warning is there because Java is not actually storing type information at run-time in an object that uses generics.  Thus, if <code>object</code> is actually a <code>List&lt;String&gt;</code>, there will be no <code>ClassCastException</code> at run-time except until an item is accessed from the list that doesn't match the generic type defined in the variable.  </p>\n\n<p>This can cause further complications if items are added to the list, with this incorrect generic type information.  Any code still holding a reference to the list but with the correct generic type information will now have an inconsistent list.  </p>\n\n<p>To remove the warning, try:</p>\n\n<pre><code>List&lt;?&gt; list = (List&lt;?&gt;) object;\n</code></pre>\n\n<p>However, note that you will not be able to use certain methods such as add because the compiler doesn't know if you are trying to add an object of incorrect type.  The above will work in a lot of situations, but if you have to use add, or some similarly restricted method, you will just have to suffer the yellow underline in Eclipse (or a <code>SuppressWarning</code> annotation).</p>\n"]}
{'questionId': '564', 'questionText': '<p>I was reading <em><a href="http://rads.stackoverflow.com/amzn/click/1430209879" rel="noreferrer">More Joel on Software</a></em> when I came across <a href="http://en.wikipedia.org/wiki/Joel_Spolsky" rel="noreferrer">Joel Spolsky</a> saying something about a particular type of programmer knowing the difference between an <code>int</code> and an <code>Integer</code> in Java/C# (Object Oriented Programming Languages).</p>\n\n<p>So, what is the difference?</p>\n', 'answers': ['<p><strong>In Java,</strong> the \'int\' type is a primitive , whereas the \'Integer\' type is an object.</p>\n\n<p><strong>In C#,</strong> the \'int\' type is the same as <code>System.Int32</code> and is <a href="http://msdn.microsoft.com/en-us/library/s1ax56ch.aspx" rel="noreferrer">a value type</a> (ie more like the java \'int\'). An integer (just like any other value types) can be <a href="http://msdn.microsoft.com/en-us/library/yz2be5wk.aspx" rel="noreferrer">boxed</a> ("wrapped") into an object. </p>\n\n<hr>\n\n<p>The differences between objects and primitives are somewhat beyond the scope of this question, but to summarize: </p>\n\n<p><strong>Objects</strong> provide facilities for polymorphism, are passed by reference (or more accurately have references passed by value), and are allocated from the <a href="http://en.wikipedia.org/wiki/Dynamic_memory_allocation" rel="noreferrer">heap</a>. Conversely, <strong>primitives</strong> are immutable types that are passed by value and are often allocated from the <a href="http://en.wikipedia.org/wiki/Stack-based_memory_allocation" rel="noreferrer">stack</a>.</p>\n', '<p>Well, in Java an int is a primitive while an Integer is an Object. Meaning, if you made a new Integer:</p>\n\n<pre><code>Integer i = new Integer(6);\n</code></pre>\n\n<p>You could call some method on i:</p>\n\n<pre><code>String s = i.toString();//sets s the string representation of i\n</code></pre>\n\n<p>Whereas with an int:</p>\n\n<pre><code>int i = 6;\n</code></pre>\n\n<p>You cannot call any methods on it, because it is simply a primitive. So:</p>\n\n<pre><code>String s = i.toString();//will not work!!!\n</code></pre>\n\n<p>would produce an error, because int is not an object.</p>\n\n<p>int is one of the few primitives in Java (along with char and some others). I\'m not 100% sure, but I\'m thinking that the Integer object more or less just has an int property and a whole bunch of methods to interact with that property (like the toString() method for example). So Integer is a fancy way to work with an int (Just as perhaps String is a fancy way to work with a group of chars).</p>\n\n<p>I know that Java isn\'t C, but since I\'ve never programmed in C this is the closest I could come to the answer. Hope this helps!</p>\n\n<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html" rel="noreferrer">Integer object javadoc</a></p>\n\n<p><a href="http://mindprod.com/jgloss/intvsinteger.html" rel="noreferrer">Integer Ojbect vs. int primitive comparison</a></p>\n', "<p>In C#, int is just an <strong><em>alias</em></strong> for <code>System.Int32</code>, string for <code>System.String</code>, double for <code>System.Double</code> etc...</p>\n\n<p>Personally I prefer int, string, double, etc. because they don't require a <code>using System;</code> statement :) A silly reason, I know...</p>\n", "<p>I'll add to the excellent answers given above, and talk about boxing and unboxing, and how this applies to Java (although C# has it too). I'll use just Java terminology, because I am more <em>au fait</em> with that.</p>\n\n<p>As the answers mentioned, <code>int</code> is just a number (called the <em>unboxed</em> type), whereas <code>Integer</code> is an object (which contains the number, hence a <em>boxed</em> type). In Java terms, that means (apart from not being able to call methods on <code>int</code>), you cannot store <code>int</code> or other non-object types in collections (<code>List</code>, <code>Map</code>, etc.). In order to store them, you must first box them up in its corresponding boxed type.</p>\n\n<p>Java 5 onwards have something called <em>auto-boxing</em> and <em>auto-unboxing</em> which allow the boxing/unboxing to be done behind the scenes. Compare and contrast: Java 5 version:</p>\n\n<pre><code>Deque&lt;Integer&gt; queue;\n\nvoid add(int n) {\n    queue.add(n);\n}\n\nint remove() {\n    return queue.remove();\n}\n</code></pre>\n\n<p>Java 1.4 or earlier (no generics either):</p>\n\n<pre><code>Deque queue;\n\nvoid add(int n) {\n    queue.add(Integer.valueOf(n));\n}\n\nint remove() {\n    return ((Integer) queue.remove()).intValue();\n}\n</code></pre>\n\n<p>It must be noted that despite the brevity in the Java 5 version, both versions generate identical bytecode. Thus, although auto-boxing and auto-unboxing is very convenient because you write less code, these operations <em>do</em> happen behind the scenes, with the same runtime costs, so you still have to be aware of their existence.</p>\n\n<p>Hope this helps!</p>\n", "<p>I'll just post here since some of the other posts are slightly inaccurate in relation to C#.</p>\n\n<p><strong>Correct:</strong> <code>int</code> is an alias for <code>System.Int32</code>.<br/>\n<strong>Wrong:</strong> <code>float</code> is not an alias for <code>System.Float</code>, but for <code>System.Single</code></p>\n\n<p>Basically, int is a reserved keyword in the C# programming language, and is an alias for the <code>System.Int32</code> value type.</p>\n\n<p>float and Float is not the same however, as the right system type for ''<code>float</code>'' is System.Single. There are some types like this that has reserved keywords that doesn't seem to match the type names directly.</p>\n\n<p>In C# there is no difference between ''<code>int</code>'' and ''<code>System.Int32</code>'', or any of the other pairs or keywords/system types, except for when defining enums. With enums you can specify the storage size to use and in this case you can only use the reserved keyword, and not the system runtime type name.</p>\n\n<p>Wether the value in the int will be stored on the stack, in memory, or as a referenced heap object depends on the context and how you use it.</p>\n\n<p>This declaration in a method:</p>\n\n<pre><code>int i;\n</code></pre>\n\n<p>defines a variable <code>i</code> of type <code>System.Int32</code>, living in a register or on the stack, depending on optimizations. The same declaration in a type (struct or class) defines a member field. The same declaration in a method argument list defines a parameter, with the same storage options as for a local variable. (note that this paragraph is not valid if you start pulling iterator methods into the mix, these are different beasts altogether)</p>\n\n<p>To get a heap object, you can use boxing:</p>\n\n<pre><code>object o = i;\n</code></pre>\n\n<p>this will create a boxed copy of the contents of <code>i</code> on the heap. In IL you can access methods on the heap object directly, but in C# you need to cast it back to an int, which will create another copy. Thus, the object on the heap cannot easily be changed in C# without creating a new boxed copy of a new int value. (Ugh, this paragraph doesn't read all that easily.)</p>\n", '<p>This has already been answered for Java, here\'s the C# answer:</p>\n\n<p>"Integer" is not a valid type name in C# and "int" is just an alias for System.Int32. Also, unlike in Java (or C++) there aren\'t any special primitive types in C#, every instance of a type in C# (including int) is an object. Here\'s some demonstrative code:</p>\n\n<pre><code>void DoStuff()\n{\n    System.Console.WriteLine( SomeMethod((int)5) );\n    System.Console.WriteLine( GetTypeName&lt;int&gt;() );\n}\n\nstring SomeMethod(object someParameter)\n{\n    return string.Format("Some text {0}", someParameter.ToString());\n}\n\nstring GetTypeName&lt;T&gt;()\n{\n    return (typeof (T)).FullName;\n}\n</code></pre>\n', '<p>Regarding Java 1.5 and <a href="http://en.wikipedia.org/wiki/Autoboxing#Autoboxing" rel="noreferrer">autoboxing</a> there is an important "quirk" that comes to play when comparing Integer objects.</p>\n\n<p>In Java, Integer objects with the values -128 to 127 are immutable (that is, for one particular integer value, say 23, all Integer objects instantiated through your program with the value 23 points to the <em>exact</em> same object).</p>\n\n<p>Example, this returns true:</p>\n\n<pre><code>Integer i1 = new Integer(127);\nInteger i2 = new Integer(127);\nSystem.out.println(i1 == i2); //  true\n</code></pre>\n\n<p>While this returns false:</p>\n\n<pre><code>Integer i1 = new Integer(128);\nInteger i2 = new Integer(128);\nSystem.out.println(i1 == i2); //  false\n</code></pre>\n\n<p>The == compares by reference (does the variables point to the same object).</p>\n\n<p>This result may or may not differ depending on what JVM you are using. The specification autoboxing for Java 1.5 requires that integers (-128 to 127) always box to the same wrapper object. </p>\n\n<p>A solution? =) One should always use the Integer.equals() method when comparing Integer objects.</p>\n\n<pre><code>System.out.println(i1.equals(i2)); //  true\n</code></pre>\n\n<p>More info at <a href="http://today.java.net/pub/a/today/2005/03/24/autoboxing.html" rel="noreferrer">java.net</a> Example at <a href="http://bexhuff.com/2006/11/java-1-5-autoboxing-wackyness" rel="noreferrer">bexhuff.com</a></p>\n', '<p>In Java there are two basic types in the <a href="http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#22930" rel="noreferrer">JVM</a>. 1) Primitive types and 2) Reference Types. int is a primitive type and Integer is a class type (which is kind of reference type).</p>\n\n<p>Primitive values do not share state with other primitive values. A variable whose type is a primitive type always holds a primitive value of that type.</p>\n\n<pre><code>int aNumber = 4;\nint anotherNum = aNumber;\naNumber += 6;\nSystem.out.println(anotherNum); // Prints 4\n</code></pre>\n\n<p>An object is a dynamically created class instance or an array. The reference values (often just references) are pointers to these objects and a special null reference, which refers to no object. There may be many references to the same object.</p>\n\n<pre><code>Integer aNumber = Integer.valueOf(4);\nInteger anotherNumber = aNumber; // anotherNumber references the \n                                 // same object as aNumber\n</code></pre>\n\n<p>Also in Java everything is passed by value. With objects the value that is passed is the reference to the object. So another difference between int and Integer in java is how they are passed in method calls. For example in</p>\n\n<pre><code>public int add(int a, int b) {\n    return a + b;\n}\nfinal int two = 2;\nint sum = add(1, two);\n</code></pre>\n\n<p>The variable <em>two</em> is passed as the primitive integer type 2. Whereas in</p>\n\n<pre><code>public int add(Integer a, Integer b) {\n    return a.intValue() + b.intValue();\n}\nfinal Integer two = Integer.valueOf(2);\nint sum = add(Integer.valueOf(1), two);\n</code></pre>\n\n<p>The variable <em>two</em> is passed as a reference to an object that holds the integer value 2.</p>\n\n<hr>\n\n<p>@WolfmanDragon:\nPass by reference would work like so:</p>\n\n<pre><code>public void increment(int x) {\n  x = x + 1;\n}\nint a = 1;\nincrement(a);\n// a is now 2\n</code></pre>\n\n<p>When increment is called it passes a reference (pointer) to variable <em>a</em>. And the <em>increment</em> function directly modifies variable <em>a</em>.</p>\n\n<p>And for object types it would work as follows:</p>\n\n<pre><code>public void increment(Integer x) {\n  x = Integer.valueOf(x.intValue() + 1);\n}\nInteger a = Integer.valueOf(1);\nincrement(a);\n// a is now 2\n</code></pre>\n\n<p>Do you see the difference now?</p>\n', u"<p>One more thing that I don't see in previous answers:\nIn Java the primitive wrappers classes like Integer, Double, Float, Boolean... and String are suposed to be invariant, so that when you pass an instance of those classes the invoked method couldn't alter your data in any way, in opositi\xf3n with most of other classes, which internal data could be altered by its public methods. So that this classes only has 'getter' methods, no 'setters', besides the constructor.</p>\n\n<p>In a java program String literals are stored in a separate portion of heap memory, only a instance for literal, to save memory reusing those instances</p>\n", '<p>In platforms like Java, <code>int</code>s are primitives while <code>Integer</code> is an object which holds a integer field. The important distinction is that primitives are always passed around by value and by definition are immutable. </p>\n\n<p>Any operation involving a primitive variable always returns a new value. On the other hand, objects are passed around by reference. One could argue that the point to the object (AKA the reference) is also being passed around by value, but the contents are not.</p>\n', '<p>int is used to declare primitive variable </p>\n\n<pre><code>e.g. int i=10;\n</code></pre>\n\n<p>Integer is used to create reference variable of class Integer</p>\n\n<pre><code>Integer a = new Integer();\n</code></pre>\n', '<p>have you ever programmed before then (int) is one of the primitive types you can set for your variables (just like char, float, ...).</p>\n\n<p>but Integer is a wrapper class that you can use it to do some functions on an int variable (e.g convert it to string or vise versa,...) , but keep note that methods in the wrapper classes are static so you can use them anytime without creating an instance of Integer class.\nas a recap :</p>\n\n<pre><code>int x;\nInteger y; \n</code></pre>\n\n<p>x and y are both variables of type int but y is wrapped by an Integer class and has several methods that you use,but i case you need to call some functions of Integer wrapper class you can do it simply.</p>\n\n<pre><code>Integer.toString(x);\n</code></pre>\n\n<p>but be aware that both x and y are corect but if you want to use them just as a primitive type, use the simple form (used for defining x).</p>\n', "<p>In both languages (Java and C#) <code>int</code> is 4-byte signed integer.</p>\n\n<p>Unlike Java, C# Provides both signed and unsigned integer values. As Java and C# are object object-oriented, some operations in these languages do not map directly onto instructions provided by the run time and so needs to be defined as part of an object of some type.</p>\n\n<p>C# provides <code>System.Int32</code> which is a value type using a part of  memory that belongs to the reference type on the heap.</p>\n\n<p>java provides <code>java.lang.Integer</code> which is a reference type operating on <code>int</code>. The methods in <code>Integer</code> can't be compiled directly to run time instructions.So we box an int value to convert it into an instance of Integer and use the methods which expects instance of some type (like <code>toString()</code>, <code>parseInt()</code>, <code>valueOf()</code> etc).</p>\n\n<p>In C# variable  int refers to <code>System.Int32.Any</code> 4-byte value in memory can be interpreted as a primitive int, that can be manipulated by  instance of System.Int32.So int is an alias for <code>System.Int32.When</code> using integer-related methods like <code>int.Parse()</code>, <code>int.ToString()</code> etc. Integer is compiled into the FCL <code>System.Int32</code> struct calling the respective methods like <code>Int32.Parse()</code>, <code>Int32.ToString()</code>.</p>\n", '<p>There are many reasons to use wrapper classes:</p>\n\n<ol>\n<li>We get extra behavior (for instance we can use methods)</li>\n<li>We can store null values whereas in primitives we cannot</li>\n<li>Collections support storing objects and not primitives.</li>\n</ol>\n', '<p>An int and Integer in Java and C# are two different terms used to represent different things. It is one of the the primitive data types that can be assigned to a variable that can store exactly. One value of its declared type at a time.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>int number = 7;\n</code></pre>\n\n<p>Where <code>int</code> is the datatype assigned to the variable number which holds the value seven. So an <code>int</code> is just a primitive not an object.</p>\n\n<p>While an <code>Integer</code> is a wrapper class for a primitive data type which has static methods. That can be used as an argument to a method which requires an object, where as int can be used as an argument to a method which requires an integer value, that can be used for arithmetic expression. </p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>Integer number = new Integer(5);\n</code></pre>\n', '<p>An int variable holds a 32 bit signed integer value. An Integer (with capital I) holds a reference to an object of (class) type Integer, or to null.</p>\n\n<p>Java automatically casts between the two; from Integer to int whenever the Integer object occurs as an argument to an int operator or is assigned to an int variable, or an int value is assigned to an Integer variable. This casting is called boxing/unboxing.</p>\n\n<p>If an Integer variable referencing null is unboxed, explicitly or implicitly, a NullPointerException is thrown.</p>\n', '<p>In Java int is a primitive data type while Integer is a Helper class, it is use to convert for one data type to other. </p>\n\n<p>For example: </p>\n\n<pre><code>double doubleValue = 156.5d;\nDouble doubleObject  = new Double(doubleValue);\nByte myByteValue = doubleObject.byteValue ();\nString myStringValue = doubleObject.toString();\n</code></pre>\n\n<p>Primitive data types are store the fastest available memory where the Helper class is complex and store in heep memory. </p>\n\n<p>reference from "David Gassner" Java Essential Training. </p>\n', '<p><strong>Java:</strong> </p>\n\n<p>int, double, long, byte, float, double, short, boolean, char - primitives. Used for hold the basic data types\nsupported by the language. the primitive types are not part of the\nobject hierarchy, and they do not inherit Object. Thet can\'be pass by reference to a method. </p>\n\n<p>Double, Float, Long, Integer, Short, Byte, Character, and Boolean, are type Wrappers, packaged in java.lang. All of the numeric type wrappers define constructors that allow an object to be constructed from a given value, or a string representation of that value.\nUsing objects can add an overhead to even the simplest of calculations. </p>\n\n<p>Beginning with JDK 5, Java has included two very helpful features: autoboxing and autounboxing. Autoboxing/unboxing greatly simplifies and streamlines code that must convert\nprimitive types into objects, and vice versa.  </p>\n\n<p>Example of constructors:</p>\n\n<pre><code>Integer(int num)\nInteger(String str) throws NumberFormatException\nDouble(double num)\nDouble(String str) throws NumberFormatException\n</code></pre>\n\n<p>Example of boxing/unboxing:</p>\n\n<pre><code>class ManualBoxing {\n        public static void main(String args[]) {\n        Integer objInt = new Integer(20);  // Manually box the value 20.\n        int i = objInt.intValue();  // Manually unbox the value 20\n        System.out.println(i + " " + iOb); // displays 20 20\n    }\n}\n</code></pre>\n\n<p>Example of autoboxing/autounboxing:</p>\n\n<pre><code>class AutoBoxing {\n    public static void main(String args[]) {\n        Integer objInt = 40; // autobox an int\n        int i = objInt ; // auto-unbox\n        System.out.println(i + " " + iOb); // displays 40 40\n    }\n}\n</code></pre>\n\n<p>P.S. Herbert Schildt\'s book took as a reference.</p>\n', '<p>In java as per my knowledge if you learner then, when you write int a; then in java generic it will compile code like integer a=new integer.\nSo,as per generics integer is not used but int is used.\nso there is so such difference there.</p>\n', '<p>int is predefined in library function c# but in java we can create oject of Integer </p>\n', '<p>In Java, the <code>int</code> type is a primitive data type, where as the <code>Integer</code> type is an object.</p>\n\n<p>In C#, the <code>int</code> type is also a data type same as <code>System.Int32</code>. An <code>integer</code> (just like any other value types) can be boxed ("wrapped") into an object.</p>\n', '<p>"int" is primitive data-type and "Integer" in Wrapper Class in Java. "Integer" can be used as an argument to a method which requires an object, where as "int" can be used as an argument to a method which requires an integer value, that can be used for arithmetic expression.</p>\n']}
{'questionId': '2092', 'questionText': '<p>Looking for books or other references that discuss actually <em>"how"</em> to write a code coverage tool in Java; some of the various techniques or tricks - source vs. byte code instrumentation. This is for a scripting language that generates java byte code under the hood.</p>\n', 'answers': ['<p>Thxm, Mc! <a href="http://asm.objectweb.org" rel="nofollow noreferrer">http://asm.objectweb.org</a>/ is another one. <em>Excellent</em> documentation on byte code instrumentation, but nothing "directly" aimed at writing a coverage tool - just some hints or ideas.</p>\n', '<p>Is your scripting language bytecode generating? Does it generate debug metadata? If so, bytecode instrumentation is probably the way to go. In fact existing tools like will probably work; perhaps with minimal modification (the typical problem is the tools are written to work with Java and assume com.foo.Bar.class corresponds to com/foo/Bar.java. Unwinding that assumption can be tedious.) <a href="http://emma.sourceforge.net/" rel="noreferrer">EMMA</a> is a ClassLoader that does byte-code re-writing for code-coverage collection in Java. The coding style is a little funky, but I recommend reading the source for some ideas.</p>\n\n<p>If your scripting language is interpreted then you will need something higher-level (source level) that hooks into the interpreter.</p>\n', '<p>You can also get the source from a Open Source code coverage tool and learn from it.</p>\n', "<p>You might also want to use something like BCEL to analyse which lines of source actually exist in the byte-code.  You don't want to report that things like blank lines and comments haven't been covered.</p>\n", "<p>If you're talking about ColdFusion (which I assume you are from the tags) then I'm not sure this is doable but I may be very wrong here...</p>\n\n<p>IIRC, When CF compiles it essentially compiles into a interpreted form of the CFML as a plain old java source file, this is then compiled into the class.  Therefore, any instrumentation that you may have will apply to the intermediary version rather than the CFML itself.</p>\n\n<p>Saying that though, Adobe have got the CF debugger now which can step though code, so please prove me wrong - I'd love code coverage in CFML.</p>\n"]}
{'questionId': '2158', 'questionText': '<p>Is there a way to create a <code>JButton</code> with your own button graphic and not just with an image inside the button? </p>\n\n<p>If not, is there another way to create a custom button in java?</p>\n', 'answers': ["<p>I haven't done SWING development since my early CS classes but if it wasn't built in you could just inherit javax.swing.AbstractButton and create your own. Should be pretty simple to wire something together with their existing framework.</p>\n", '<p>You could always try the Synth look &amp; feel. You provide an xml file that acts as a sort of stylesheet, along with any images you want to use. The code might look like this:</p>\n\n<pre><code>try {\n    SynthLookAndFeel synth = new SynthLookAndFeel();\n    Class aClass = MainFrame.class;\n    InputStream stream = aClass.getResourceAsStream("\\\\default.xml");\n\n    if (stream == null) {\n        System.err.println("Missing configuration file");\n        System.exit(-1);                \n    }\n\n    synth.load(stream, aClass);\n\n    UIManager.setLookAndFeel(synth);\n} catch (ParseException pe) {\n    System.err.println("Bad configuration file");\n    pe.printStackTrace();\n    System.exit(-2);\n} catch (UnsupportedLookAndFeelException ulfe) {\n    System.err.println("Old JRE in use. Get a new one");\n    System.exit(-3);\n}\n</code></pre>\n\n<p>From there, go on and add your JButton like you normally would. The only change is that you use the setName(string) method to identify what the button should map to in the xml file.</p>\n\n<p>The xml file might look like this:</p>\n\n<pre><code>&lt;synth&gt;\n    &lt;style id="button"&gt;\n        &lt;font name="DIALOG" size="12" style="BOLD"/&gt;\n        &lt;state value="MOUSE_OVER"&gt;\n            &lt;imagePainter method="buttonBackground" path="dirt.png" sourceInsets="2 2 2 2"/&gt;\n            &lt;insets top="2" botton="2" right="2" left="2"/&gt;\n        &lt;/state&gt;\n        &lt;state value="ENABLED"&gt;\n            &lt;imagePainter method="buttonBackground" path="dirt.png" sourceInsets="2 2 2 2"/&gt;\n            &lt;insets top="2" botton="2" right="2" left="2"/&gt;\n        &lt;/state&gt;\n    &lt;/style&gt;\n    &lt;bind style="button" type="name" key="dirt"/&gt;\n&lt;/synth&gt;\n</code></pre>\n\n<p>The bind element there specifies what to map to (in this example, it will apply that styling to any buttons whose name property has been set to "dirt").</p>\n\n<p>And a couple of useful links:</p>\n\n<p><a href="http://javadesktop.org/articles/synth/" rel="noreferrer">http://javadesktop.org/articles/synth/</a></p>\n\n<p><a href="http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html" rel="noreferrer">http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html</a></p>\n', '<p>Yes, this is possible. One of the main pros for using Swing is the ease with which the abstract controls can be created and manipulates.</p>\n\n<p>Here is a quick and dirty way to extend the existing JButton class to draw a circle to the right of the text.</p>\n\n<pre><code>package test;\n\nimport java.awt.Color;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Graphics;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\n\npublic class MyButton extends JButton {\n\n    private static final long serialVersionUID = 1L;\n\n    private Color circleColor = Color.BLACK;\n\n    public MyButton(String label) {\n        super(label);\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n\n        Dimension originalSize = super.getPreferredSize();\n        int gap = (int) (originalSize.height * 0.2);\n        int x = originalSize.width + gap;\n        int y = gap;\n        int diameter = originalSize.height - (gap * 2);\n\n        g.setColor(circleColor);\n        g.fillOval(x, y, diameter, diameter);\n    }\n\n    @Override\n    public Dimension getPreferredSize() {\n        Dimension size = super.getPreferredSize();\n        size.width += size.height;\n        return size;\n    }\n\n    /*Test the button*/\n    public static void main(String[] args) {\n        MyButton button = new MyButton("Hello, World!");\n\n        JFrame frame = new JFrame();\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(400, 400);\n\n        Container contentPane = frame.getContentPane();\n        contentPane.setLayout(new FlowLayout());\n        contentPane.add(button);\n\n        frame.setVisible(true);\n    }\n\n}\n</code></pre>\n\n<p>Note that by overriding <strong>paintComponent</strong> that the contents of the button can be changed, but that the border is painted by the <strong>paintBorder</strong> method. The <strong>getPreferredSize</strong> method also needs to be managed in order to dynamically support changes to the content. Care needs to be taken when measuring font metrics and image dimensions.</p>\n\n<p>For creating a control that you can rely on, the above code is not the correct approach. Dimensions and colours are dynamic in Swing and are dependent on the look and feel being used. Even the default <em>Metal</em> look has changed across JRE versions. It would be better to implement <strong>AbstractButton</strong> and conform to the guidelines set out by the Swing API. A good starting point is to look at the <strong>javax.swing.LookAndFeel</strong> and <strong>javax.swing.UIManager</strong> classes.</p>\n\n<p><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html" rel="noreferrer">http://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html</a></p>\n\n<p><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/UIManager.html" rel="noreferrer">http://docs.oracle.com/javase/8/docs/api/javax/swing/UIManager.html</a></p>\n\n<p>Understanding the anatomy of LookAndFeel is useful for writing controls:\n<a href="http://wayback.archive.org/web/20090309070901/http://java.sun.com/products/jfc/tsc/articles/sce/index.html" rel="noreferrer">Creating a Custom Look and Feel</a></p>\n', '<p>When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one <code>JPanel</code>.  The benefit of extending <code>Swing</code> components, of course, is to have the ability to add support for keyboard shortcuts and other accessibility features that you can\'t do just by having a <code>paint()</code> method print a pretty picture.  It may not be done the best way however, but it may be a good starting point for you.</p>\n\n<p>Edit 8/6 - If it wasn\'t apparent from the images, each Die is a button you can click. This will move it to the <code>DiceContainer</code> below.  Looking at the source code you can see that each Die button is drawn dynamically, based on its value.</p>\n\n<p><img src="https://i.stack.imgur.com/pgyQp.jpg" alt="alt text"><br>\n<img src="https://i.stack.imgur.com/jkYRd.jpg" alt="alt text"><br>\n<img src="https://i.stack.imgur.com/9BI34.jpg" alt="alt text"></p>\n\n<p>Here are the basic steps:</p>\n\n<ol>\n<li>Create a class that extends <code>JComponent</code></li>\n<li>Call parent constructor <code>super()</code> in your constructors</li>\n<li>Make sure you class implements <code>MouseListener</code></li>\n<li><p>Put this in the constructor:</p>\n\n<pre><code>enableInputMethods(true);   \naddMouseListener(this);\n</code></pre></li>\n<li><p>Override these methods:</p>\n\n<pre><code>public Dimension getPreferredSize()  \npublic Dimension getMinimumSize()  \npublic Dimension getMaximumSize()\n</code></pre></li>\n<li><p>Override this method:</p>\n\n<pre><code>public void paintComponent(Graphics g)\n</code></pre></li>\n</ol>\n\n<p>The amount of space you have to work with when drawing your button is defined by <code>getPreferredSize()</code>, assuming <code>getMinimumSize()</code> and <code>getMaximumSize()</code> return the same value.  I haven\'t experimented too much with this but, depending on the layout you use for your GUI your button could look completely different.</p>\n\n<p>And finally, the <a href="https://github.com/kdeloach/labs/blob/master/java/yahtzee/src/Dice.java" rel="noreferrer">source code</a>.  In case I missed anything.  </p>\n', "<p>I'm probably going a million miles in the wrong direct (but i'm only young :P ). but couldn't you add the graphic to a panel and then a mouselistener to the graphic object so that when the user on the graphic your action is preformed.</p>\n"]}
{'questionId': '2931', 'questionText': '<p>I have been working with <em>JXTA</em> 2.3 for the last year or so for a peer-to-peer computing platform I am developing. I am migrating to <em>JXTA</em> 2.5 and in the process I am trying to clean up a lot of my use of <em>JXTA</em>. For the most part, I approached <em>JXTA</em> with a <strong>just make it work</strong> attitude. I used it to jumpstart creating and managing my peer-to-peer overlay network and providing basic communication services. I would like to use it in a more <em>JXTA</em> way since I am making changes to move to 2.5 anyway.</p>\n\n<p>My first step would be a basic creation of a custom <code>PeerGroup</code>. I see some new new mechanisms that are using the <code>META-INF.services</code> infrastructure of Java. Should I be listing a related <code>PeerGroup</code> implementing object here with a <em>GUID</em> in <code>net.jxta.platform.Module</code>? As I understand it, if I do this, when a group with a spec ID matching the <em>GUID</em> is encountered and joined or created it should automatically use the matching object. I should be able to just manually tie a <code>PeerGroup</code> object to the group but this new method using <code>META-INF</code> seems to be a lot easier to manage.</p>\n\n<p>Does anyone have any pointers or examples of using this infrastructure for <code>PeerGroup</code> implementation? Also, some general information on the <code>META-INF.services</code> mechanism in Java would be helpful.</p>\n', 'answers': ['<p>The META-INF.services stuff is known by its class name in the API: <a href="http://java.sun.com/javase/6/docs/api/java/util/ServiceLoader.html" rel="nofollow noreferrer">ServiceLoader</a>. A Google search for <a href="http://www.google.ca/search?hl=en&amp;q=ServiceLoader" rel="nofollow noreferrer">ServiceLoader</a> yields some information.</p>\n\n<p>I am not really familiar with it, but sometimes it\'s all about knowing the right search keywords.</p>\n']}
{'questionId': '2968', 'questionText': '<p>For parsing player commands, I\'ve most often used the <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#split%28java.lang.String%29" rel="noreferrer">split</a> method to split a string by delimiters and then to then just figure out the rest by a series of <code>if</code>s or <code>switch</code>es. What are some different ways of parsing strings in Java?</p>\n', 'answers': ['<p>I really like regular expressions. As long as the command strings are fairly simple, you can write a few regexes that could take a few pages of code to manually parse.</p>\n\n<p>I would suggest you check out <a href="http://www.regular-expressions.info" rel="noreferrer">http://www.regular-expressions.info</a> for a good intro to regexes, as well as specific examples for Java.</p>\n', '<p>A simple string tokenizer on spaces should work, but there are really many ways you could do this.</p>\n\n<p>Here is an example using a tokenizer:</p>\n\n<pre><code>String command = "kick person";\nStringTokenizer tokens = new StringTokenizer(command);\nString action = null;\n\nif (tokens.hasMoreTokens()) {\n    action = tokens.nextToken();\n}\n\nif (action != null) {\n    doCommand(action, tokens);\n}\n</code></pre>\n\n<p>Then tokens can be further used for the arguments.  This all assumes no spaces are used in the arguments... so you might want to roll your own simple parsing mechanism (like getting the first whitespace and using text before as the action, or using a regular expression if you don\'t mind the speed hit), just abstract it out so it can be used anywhere.</p>\n', '<p>I would look at <a href="http://www.google.com/search?q=Zork+in+Java" rel="noreferrer">Java migrations</a> of <a href="http://en.wikipedia.org/wiki/Zork" rel="noreferrer">Zork</a>, and lean towards a simple <a href="http://en.wikipedia.org/wiki/Natural_language_processing" rel="noreferrer">Natural Language Processor</a> (driven either by tokenizing or regex) such as the following (from this link):</p>\n\n<pre>\n    public static boolean simpleNLP( String inputline, String keywords[])\n    {\n        int i;\n        int maxToken = keywords.length;\n        int to,from;\n        if( inputline.length() = inputline.length()) return false; // check for blank and empty lines\n        while( to >=0 )\n        {\n            to = inputline.indexOf(\' \',from);\n            if( to > 0){\n                lexed.addElement(inputline.substring(from,to));\n                from = to;\n                while( inputline.charAt(from) == \' \'\n                && from = keywords.length) { status = true; break;}\n            }\n        }\n        return status;\n    }\n</pre>\n\n<p>...</p>\n\n<p>Anything which gives a programmer a reason to look at Zork again is good in my book, just watch out for Grues.</p>\n\n<p>...</p>\n', '<p>I assume you\'re trying to make the command interface as forgiving as possible. If this is the case, I suggest you use an algorithm similar to this:</p>\n\n<ol>\n<li>Read in the string\n\n<ul>\n<li>Split the string into tokens</li>\n<li>Use a dictionary to convert synonyms to a common form </li>\n<li>For example, convert "hit", "punch", "strike", and "kick" all to "hit"</li>\n<li>Perform actions on an unordered, inclusive base</li>\n<li><strong>Unordered</strong> - "punch the monkey in the face" is the same thing as "the face in the monkey punch"</li>\n<li><strong>Inclusive</strong> - If the command is supposed to be "punch the monkey in the face" and they supply "punch monkey", you should check how many commands this matches. If only one command, do this action. It might even be a good idea to have command priorities, and even if there were even matches, it would perform the top action.</li>\n</ul></li>\n</ol>\n', '<p>@CodingTheWheel Heres your code, a bit clean up and through eclipse (<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>f</kbd>) and the inserted back here :)</p>\n\n<p>Including the four spaces in front each line.</p>\n\n<pre><code>public static boolean simpleNLP(String inputline, String keywords[]) {\n    if (inputline.length() &lt; 1)\n        return false;\n\n    List&lt;String&gt; lexed = new ArrayList&lt;String&gt;(); \n    for (String ele : inputline.split(" ")) {\n        lexed.add(ele);\n    }\n\n\n    boolean status = false;\n    to = 0;\n    for (i = 0; i &lt; lexed.size(); i++) {\n        String s = (String) lexed.get(i);\n        if (s.equalsIgnoreCase(keywords[to])) {\n            to++;\n            if (to &gt;= keywords.length) {\n                status = true;\n                break;\n            }\n        }\n    }\n    return status;\n}\n</code></pre>\n', '<p>When the separator String for the command is allways the same String or char (like the ";") y recomend you use the StrinkTokenizer class:</p>\n\n<p><a href="http://java.sun.com/javase/6/docs/api/java/util/StringTokenizer.html" rel="nofollow noreferrer">StringTokenizer</a></p>\n\n<p>but when the separator varies or is complex y recomend you to use the regular expresions, wich can be used by the String class itself, method split, since 1.4. It uses the Pattern class from the java.util.regex package</p>\n\n<p><a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" rel="nofollow noreferrer">Pattern</a></p>\n', "<p>Sun itself recommends staying away from StringTokenizer and using the String.spilt method instead. </p>\n\n<p>You'll also want to look at the Pattern class.</p>\n", '<p>Parsing manually is a lot of fun... at the beginning:) </p>\n\n<p>In practice if commands aren\'t very sophisticated you can treat them the same way as those used in command line interpreters. There\'s a list of libraries that you can use: <a href="http://java-source.net/open-source/command-line" rel="noreferrer">http://java-source.net/open-source/command-line</a>. I think you can start with <a href="http://commons.apache.org/cli" rel="noreferrer">apache commons CLI</a> or <a href="http://args4j.kohsuke.org/" rel="noreferrer">args4j</a> (uses annotations). They are well documented and really simple in use. They handle parsing automatically and the only thing you need to do is to read particular fields in an object.</p>\n\n<p>If you have more sophisticated commands, then maybe creating a formal grammar would be a better idea. There is a very good library with graphical editor, debugger and interpreter for grammars. It\'s called <a href="http://www.antlr.org/" rel="noreferrer">ANTLR</a> (and the editor <a href="http://www.antlr.org/works/index.html" rel="noreferrer">ANTLRWorks</a>) and it\'s free:) There are also some example grammars and tutorials.</p>\n', '<p>If this is to parse command lines I would suggest using <a href="http://commons.apache.org/cli/" rel="nofollow noreferrer">Commons Cli</a>.</p>\n\n<blockquote>\n  <p>The Apache Commons CLI library provides an API for processing command line interfaces. </p>\n</blockquote>\n', '<p>Another vote for ANTLR/ANTLRWorks.  If you create two versions of the file, one with the Java code for actually executing the commands, and one without (with just the grammar), then you have an executable specification of the language, which is great for testing, a boon for documentation, and a big timesaver if you ever decide to port it.</p>\n', '<p>Try <a href="https://java.net/projects/javacc" rel="nofollow noreferrer">JavaCC</a> a parser generator for Java.</p>\n\n<p>It has a lot of features for interpreting languages, and it\'s well supported on Eclipse.</p>\n', '<p>If the language is dead simple like just </p>\n\n<p>VERB NOUN</p>\n\n<p>then splitting by hand works well.</p>\n\n<p>If it\'s more complex, you should really look into a tool like ANTLR or JavaCC.</p>\n\n<p>I\'ve got a tutorial on ANTLR (v2) at <a href="http://javadude.com/articles/antlrtut" rel="nofollow noreferrer">http://javadude.com/articles/antlrtut</a> which will give you an idea of how it works.</p>\n', '<p><a href="http://beust.com/jcommander/" rel="nofollow noreferrer">JCommander</a> seems quite good, although I have yet to test it.</p>\n', '<p>If your text contains some delimiters then you can your <code>split</code> method.<br>\nIf text contains irregular strings means different format in it then you must use <code>regular expressions</code>.</p>\n', '<p>split method can split a string into an array of the specified substring expression <code>regex</code>.\nIts arguments in two forms, namely: split (<code>String regex</code>) and split (<code>String regex, int limit</code>), which split (<code>String regex</code>) is actually by calling split (String regex, int limit) to achieve, <em>limit is 0</em>. Then, when the <em>limit> 0</em> and <em>limit &lt;0</em> represents what? </p>\n\n<p>When the <strong>jdk</strong> explained: when <em>limit> 0</em> sub-array lengths up to limit, that is, if possible, can be <em>limit-1</em> sub-division, remaining as a substring (except by limit-1 times the character has string split end); </p>\n\n<p><em>limit &lt;0</em> indicates no limit on the length of the array; </p>\n\n<p><em>limit = 0</em> end of the string empty string will be truncated. \n<code>StringTokenizer</code> class is for compatibility reasons and is preserved legacy class, so we should try to use the split method of the String class.\nrefer to <a href="http://codingkit.com/java/9529.html" rel="nofollow">link</a></p>\n']}
{'questionId': '3049', 'questionText': '<p>I need to send and receive data over serial connections (RS-232 and RS-422).</p>\n\n<p>How do I set up and communicate with such a connection?  How do I figure out what the configuration settings (e.g. baud rate) should be and how do I set them?</p>\n\n<p>In particular I am looking to do this in Java, C/C++, or one of the major Unix shells but I also have some interest in serial programming using Windows/Hyperterminal.</p>\n', 'answers': ['<p>Build a time machine and go back to 1987? Ho ho.</p>\n\n<p>Ok, no more snarky comments.</p>\n\n<blockquote>\n  <p>How do I figure out what the configuration settings (e.g. baud rate) should be...</p>\n</blockquote>\n\n<p>Read the datasheet? Ok, ok. Seriously, last one. If you don\'t know the baud rate of the device you are trying to communicate with, you have two choices. Start guessing, or possibly bust out an o-scope. If you need a good starting point, let me suggest 9600-8-N-1. My suspicion is you can get there with brute force relatively quickly. There\'s a third option of having an old-school ninja who can tell just by the LOOK of the garbled characters at some standard baud rate what actual baud rate is. An impressive party trick to be sure.</p>\n\n<p>Hopefully though you have access to this information. In unix/linux, you can get ahold of minicom to play with the serial port directly. This should make it fairly quick to get the configuration figured out.</p>\n\n<blockquote>\n  <p>one of the major Unix shells</p>\n</blockquote>\n\n<p>In Unix the serial port(s) is/are file-mapped into the /dev/ subdir. ttyS0, for example. If you setup the correct baud rate and whatnot using minicom, you can even cat stuff to that file to send stuff out there.</p>\n\n<p>On to the meat of the question, you can access it programmatically through the POSIX headers. termios.h is the big one. </p>\n\n<p><strike>See: <a href="http://www.easysw.com/~mike/serial/serial.html#3_1" rel="nofollow noreferrer">http://www.easysw.com/~mike/serial/serial.html#3_1</a></strike>\n<strong>(NOT AVAILABLE ANYMORE)</strong></p>\n\n<blockquote>\n  <p>but I also have some interest in serial programming using Windows/Hyperterminal.</p>\n</blockquote>\n\n<p>Hyperterminal and minicom are basically the same program. As for how Windows let\'s you get access to the serial port, I\'ll leave that question for someone else. I haven\'t done that in Windows since the Win95 days.</p>\n', '<p>From the other side, if you want to do it using C#, which will run on both Windows and Linux--with some <a href="http://www.mono-project.com/HowToSystemIOPorts" rel="nofollow noreferrer">limitations</a> (EDIT: which may be out of date. I have no way to test it.). Just create a <a href="http://msdn.microsoft.com/en-us/library/system.io.ports.serialport.aspx" rel="nofollow noreferrer">SerialPort</a> object, set its baudrate, port and any other odd settings, call open on it, and write out your byte[]s. After all the setup, the SerialPort object acts very similar to any networked stream, so it should be easy enough to figure out.</p>\n\n<p>And as ibrandy states, you need to know all these settings, like baud rate, before you even start attempting to communicate to any serial device. </p>\n', '<p>At work we use teraterm and realterm for checking serial data is correctly formatted. Also we have a hardware splitter with a switch so we can monitor traffic to our application via a cable back to another port.</p>\n\n<p>Windows allows you access to the serial port via CreateFile. That gives you a handle and from there you can configure access.</p>\n', '<p>From Java the <strike><a href="http://www.rxtx.org/" rel="nofollow noreferrer">rxtx</a></strike> (<strong>NOT AVAILABLE ANYMORE</strong>)library is quite good. It picks up where Sun\'s serial IO framework left off. </p>\n', '<p>For C/C++ on Windows you have (at least) two choices:</p>\n\n<ol>\n<li>Use the SerialPort class provided by .NET.</li>\n<li>Use the Win32 API. There is an <a href="http://msdn.microsoft.com/en-us/library/ms810467.aspx" rel="noreferrer">extensive MSDN article</a> dating back to 1995, and many free libraries and examples on the web to get you started.</li>\n</ol>\n\n<p>The .NET option will be much easier.</p>\n', '<p>If you want to code in Java I really recommend SerialIOs <a href="http://serialio.com/products/serialport/serialport.php" rel="nofollow noreferrer">SerialPort</a>. It is very easy to use and saves you days of work. I\'ve never found an open source library as good as SerialIO, REALLY!</p>\n\n<p>My advice: do not use Sun\'s serial IO framework! It is from 1998 and full of bugs. You can use <a href="http://www.rxtx.org/" rel="nofollow noreferrer">rxtx</a> but serialio is better!</p>\n', '<p>If it needs to be cross platfrom, I would suggest looking at Boost <a href="http://www.boost.org/doc/libs/1_36_0/doc/html/boost_asio.html" rel="nofollow noreferrer">Asio</a>.</p>\n', "<p>Awhile back I wrote a decent sized application to route connections from a farm of modems through to a TCP/IP network address.</p>\n\n<p>Initially I looked for an unencumbered (free) Serial IO library.  I tried Sun's, IBM's and RxTx.  They were fine for developing the application, and in initial testing, but in production they each proved unstable.</p>\n\n<p>Finally I paid for SerialIO's SerialPort.  Converting over was literally an exercise in changing imports, and the library has been <strong><em>absolutely</em></strong> rock solid - I cannot recommend it enough.  My application has been running in the field 24/7 for a couple of years now, with not a single problem encountered by multiple customers.</p>\n\n<p>If you start development using SerialPort, they have a better API and I would use it.</p>\n\n<p>If you need cross platform support, Java with SerialPort was the best choice I could find.</p>\n\n<p>Lastly, their licensing is pretty darn reasonable as long as you are not preinstalling software on the equipment for your customer(s).</p>\n", "<p>Depending on the device You are trying to communicate with, there may be more parameters than the baud rate, number of data bits, type of parity checking and number of stop bits to consider. If I recall correctly, modems use nine lines of the RS-232C interface. Some devices like, for example cash registers, may use hardware handshaking on RTS/CTS lines or on DTR/STR lines.  </p>\n\n<p>In general it's good to know how the interface works. You can't communicate if the baud rate doesn't match, but wrong setting of other parameters might kind of work. For example You can easily send data to the device expecting 1 stop bit with 2 stop bits set. Problems start when You try to receive data in such case. You can also use appropriately set parity bit as one of stop bits, etc.</p>\n", '<p>I have been using purejavacomm:\n<a href="http://www.sparetimelabs.com/purejavacomm/index.html" rel="nofollow">It is an implementation of javax.comm written in pure java + JNA</a></p>\n\n<p>Unlike rxtx, you don\'t need to install a dll. It is written in pure Java + JNA, which solved the problem of portability between Windows and Linux for me. It should be easy to port to other OS-es that JNA supports, such as Solaris and FreeBSD, but I haven\'t tried it. </p>\n\n<p>You might expect a pure java library to lag behind a native implementation such as rxtx in performance, but with modern CPU\'s, the bottleneck is very likely to be the bitrate of your serial port, not CPU cycles. Also, it\'s much easier to debug than a mixed Java/Native library or pure compiled native code. </p>\n', '<p>If you are not forced to use a particular compiler I suggest to use Qt and in the new 5.3 version you will find a class dedicated to serial ports:</p>\n\n<p><a href="http://qt-project.org/doc/qt-5/qserialport.html" rel="nofollow">http://qt-project.org/doc/qt-5/qserialport.html</a></p>\n\n<p>The code you will write will run on all supprited Qt platforms, at least those that have serial ports. </p>\n']}
{'questionId': '3881', 'questionText': '<p>I have a simple setter method for a property and <code>null</code> is not appropriate for this particular property. I have always been torn in this situation: should I throw an <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html" rel="noreferrer"><code>IllegalArgumentException</code></a>, or a <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html" rel="noreferrer"><code>NullPointerException</code></a>? From the javadocs, both seem appropriate. Is there some kind of an understood standard?  Or is this just one of those things that you should do whatever you prefer and both are really correct?</p>\n', 'answers': ["<p>It seems like an <code>IllegalArgumentException</code> is called for if you don't want <code>null</code> to be an allowed value, and the <code>NullPointerException</code> would be thrown if you were trying to <em>use</em> a variable that turns out to be <code>null</code>.</p>\n", "<p>If it's a <code>setter</code> method and <code>null</code> is being passed to it, I think it would make more sense to throw an <code>IllegalArgumentException</code>. A <code>NullPointerException</code> seems to make more sense in the case where you're attempting to actually use the <code>null</code>.</p>\n\n<p>So, if you're using it and it's <code>null</code>, <code>NullPointer</code>. If it's being passed in and it's <code>null</code>, <code>IllegalArgument</code>.</p>\n", '<p>I tend to follow the design of JDK libraries, especially Collections and Concurrency (Joshua Bloch, Doug Lea, those guys know how to design solid APIs). Anyway, many APIs in the JDK pro-actively throws <code>NullPointerException</code>. </p>\n\n<p>For example, the Javadoc for <code>Map.containsKey</code> states:</p>\n\n<blockquote>\n  <p>@throws NullPointerException if the key is null and this map\n    does not permit null keys (optional).</p>\n</blockquote>\n\n<p>It\'s perfectly valid to throw your own NPE. The convention is to include the parameter name which was null in the message of the exception. </p>\n\n<p>The pattern goes:</p>\n\n<pre><code>public void someMethod(Object mustNotBeNull) {  \n    if (mustNotBeNull == null) {  \n        throw new NullPointerException("mustNotBeNull must not be null");  \n    }  \n}\n</code></pre>\n\n<p>Whatever you do, don\'t allow a bad value to get set and throw an exception later when other code attempts to use it. That makes debugging a nightmare. You should always the follow the "fail-fast" principle.</p>\n', '<p>If you choose to throw a NPE and you are using the argument in your method, it might be redundant and expensive to explicitly check for a null. I think the VM already does that for you.</p>\n', '<p>The accepted practice if to use the <em>IllegalArgumentException( String message )</em> to declare a parameter to be invalid and give as much detail as possible... So to say that a parameters was found to be null while exception non-null, you would do something like this:</p>\n\n<pre><code>if( variable == null )\n    throw new IllegalArgumentException("The object \'variable\' cannot be null");\n</code></pre>\n\n<p>You have virtually no reason to implicitly use the "NullPointerException". The NullPointerException is an exception thrown by the Java Virtual Machine when you try to execute code on null reference (Like <em>toString()</em>).</p>\n', '<p>The standard is to throw the NullPointerException. The generally infallible "Effective Java" discusses this briefly in Item 42 (in the first edition) or Item 60 (in the second edition) "Favor the use of standard exceptions":</p>\n\n<blockquote>\n  <p>"Arguably, all erroneous method\n  invocations boil down to an illegal\n  argument or illegal state, but other\n  exceptions are standardly used for\n  certain kinds of illegal arguments and\n  states. If a caller passes null in\n  some parameter for which null values\n  are prohibited, convention dictates\n  that NullPointerException be thrown\n  rather than IllegalArgumentException."</p>\n</blockquote>\n', '<p>The definitions from the links to the two exceptions above are\nIllegalArgumentException: Thrown to indicate that a method has been passed an illegal or inappropriate argument. \nNullPointerException: Thrown when an application attempts to use null in a case where an object is required.</p>\n\n<p>The big difference here is the IllegalArgumentException is supposed to be used when checking that an argument to a method is valid. NullPointerException is supposed to be used whenever an object being "used" when it is null.</p>\n\n<p>I hope that helps put the two in perspective.</p>\n', "<p>Couldn't agree more with what's being said.  Fail early, fail fast.  Pretty good Exception mantra. </p>\n\n<p>The question about which Exception to throw is mostly a matter of personal taste.  In my mind IllegalArgumentException seems more specific than using a NPE since it's telling me that the problem was with an argument I passed to the method and not with a value that may have been generated while performing the method.</p>\n\n<p>My 2 Cents</p>\n", '<p>If it\'s a "setter", or somewhere I\'m getting a member to use later, I tend to use IllegalArgumentException.</p>\n\n<p>If it\'s something I\'m going to use (dereference) right now in the method, I throw a NullPointerException proactively. I like this better than letting the runtime do it, because I can provide a helpful message (seems like the runtime could do this too, but that\'s a rant for another day).</p>\n\n<p>If I\'m overriding a method, I use whatever the overridden method uses.</p>\n', "<p>In general, a developer should <strong>never</strong> throw a NullPointerException. This exception is thrown by the runtime when code attempts to dereference a variable who's value is null. Therefore, if your method wants to explicitly disallow null, as opposed to just happening to have a null value raise a NullPointerException, you should throw an IllegalArgumentException.</p>\n", '<p>You should be using <code>IllegalArgumentException</code> (IAE), not <code>NullPointerException</code> (NPE) for the following reasons:</p>\n\n<p>First, the <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/NullPointerException.html" rel="noreferrer">NPE JavaDoc</a> explicitly lists the cases where NPE is appropriate.  Notice that all of them are thrown <em>by the runtime</em> when <code>null</code> is used inappropriately.  In contrast, the <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/IllegalArgumentException.html" rel="noreferrer">IAE JavaDoc</a> couldn\'t be more clear: "Thrown to indicate that a method has been passed an illegal or inappropriate argument."  Yup, that\'s you!</p>\n\n<p>Second, when you see an NPE in a stack trace, what do you assume?  Probably that someone dereferenced a <code>null</code>.  When you see IAE, you assume the caller of the method at the top of the stack passed in an illegal value.  Again, the latter assumption is true, the former is misleading.</p>\n\n<p>Third, since IAE is clearly designed for validating parameters, you have to assume it as the default choice of exception, so why would you choose NPE instead?  Certainly not for different behavior -- do you really expect calling code to catch NPE\'s separately from IAE and do something different as a result?  Are you trying to communicate a more specific error message?  But you can do that in the exception message text anyway, as you should for all other incorrect parameters.</p>\n\n<p>Fourth, all other incorrect parameter data will be IAE, so why not be consistent?  Why is it that an illegal <code>null</code> is so special that it deserves a separate exception from all other types of illegal arguments?</p>\n\n<p>Finally, I accept the argument given by other answers that parts of the Java API use NPE in this manner.  However, the Java API is inconsistent with everything from exception types to naming conventions, so I think just blindly copying (your favorite part of) the Java API isn\'t a good enough argument to trump these other considerations.</p>\n', "<p>You should throw an IllegalArgumentException, as it will make it obvious to the programmer that he has done something invalid.  Developers are so used to seeing NPE thrown by the VM, that any programmer would not immediately realize his error, and would start looking around randomly, or worse, blame your code for being 'buggy'.</p>\n", '<p>It\'s a "Holy War" style question. In others words, both alternatives are good, but people will have their preferences which they will defend to the death.</p>\n', '<p>In this case, IllegalArgumentException conveys clear information to the user using your API that the " should not be null". As other forum users pointed out you could use NPE if you want to as long as you convey the right information to the user using your API. </p>\n\n<p>GaryF and tweakt dropped "Effective Java" (which I swear by) references which recommends using NPE. And looking at how other good APIs are constructed is the best way to see how to construct your API.</p>\n\n<p>Another good example is to look at the Spring APIs. For example, org.springframework.beans.BeanUtils.instantiateClass(Constructor ctor, Object[] args) has a Assert.notNull(ctor, "Constructor must not be null") line. org.springframework.util.Assert.notNull(Object object, String message) method checks to see if the argument (object) passed in is null and if it is it throws a new IllegalArgumentException(message) which is then caught in the org.springframework.beans.BeanUtils.instantiateClass(...) method.</p>\n', '<p>I wanted to single out Null arguments from other illegal arguments, so I derived an exception from IAE named NullArgumentException. Without even needing to read the exception message, I know that a null argument was passed into a method and by reading the message, I find out which argument was null. I still catch the NullArgumentException with an IAE handler, but in my logs is where I can see the difference quickly.</p>\n', '<p>Apache Commons Lang has a <a href="http://commons.apache.org/lang/apidocs/org/apache/commons/lang/NullArgumentException.html" rel="noreferrer">NullArgumentException</a> that does a number of the things discussed here: it extends IllegalArgumentException and its sole constructor takes the name of the argument which should have been non-null.</p>\n\n<p>While I feel that throwing something like a NullArgumentException or IllegalArgumentException more accurately describes the exceptional circumstances, my colleagues and I have chosen to defer to Bloch\'s advice on the subject.</p>\n', '<p>Voted up Jason Cohen\'s argument because it was well presented. Let me dismember it step by step. ;-)</p>\n\n<ul>\n<li><p>The <a href="http://docs.oracle.com/javase/7/docs/api/" rel="noreferrer">NPE JavaDoc</a> explicitly says, <em>"other illegal uses of the null object"</em>. If it was just limited to situations where the runtime encounters a null when it shouldn\'t, all such cases could be defined far more succinctly.</p></li>\n<li><p>Can\'t help it if you assume the wrong thing, but assuming encapsulation is applied properly, you really shouldn\'t care or notice whether a null was dereferenced inappropriately vs. whether a method detected an inappropriate null and fired an exception off.</p></li>\n<li><p>I\'d choose <a href="http://docs.oracle.com/javase/7/docs/api/" rel="noreferrer">NPE</a> over <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html" rel="noreferrer">IAE</a> for multiple reasons</p>\n\n<ul>\n<li>It is more specific about the nature of the illegal operation</li>\n<li>Logic that mistakenly allows nulls tends to be very different from logic that mistakenly allows illegal values. For example, if I\'m validating data entered by a user, if I get value that is unacceptable, the source of that error is with the end user of the application. If I get a null, that\'s programmer error.</li>\n<li>Invalid values can cause things like stack overflows, out of memory errors, parsing exceptions, etc. Indeed, most errors generally present, at some point, as an invalid value in some method call. For this reason I see IAE as actually the <em>MOST GENERAL</em> of all exceptions under RuntimeException.</li>\n</ul></li>\n<li><p>Actually, other invalid arguments can result in all kinds of other exceptions. <a href="http://docs.oracle.com/javase/7/docs/api/java/net/UnknownHostException.html" rel="noreferrer">UnknownHostException</a>, <a href="http://docs.oracle.com/javase/7/docs/api/java/io/FileNotFoundException.html" rel="noreferrer">FileNotFoundException</a>, a variety of syntax error exceptions, <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/IndexOutOfBoundsException.html" rel="noreferrer">IndexOutOfBoundsException</a>, authentication failures, etc., etc.</p></li>\n</ul>\n\n<p>In general, I feel NPE is much maligned because traditionally has been associated with code that fails to follow the <a href="http://www.martinfowler.com/ieeeSoftware/failFast.pdf" rel="noreferrer">fail fast principle</a>. That, plus the JDK\'s failure to populate NPE\'s with a message string really has created a strong negative sentiment that isn\'t well founded. Indeed, the difference between NPE and IAE from a runtime perspective is strictly the name. From that perspective, the more precise you are with the name, the more clarity you give to the caller.</p>\n', '<p>I was all in favour of throwing <code>IllegalArgumentException</code> for null parameters, until today, when I noticed the <code>java.util.Objects.requireNonNull</code> method in Java 7.  With that method, instead of doing:</p>\n\n<pre><code>if (param == null) {\n    throw new IllegalArgumentException("param cannot be null.");\n}\n</code></pre>\n\n<p>you can do:</p>\n\n<pre><code>Objects.requireNonNull(param);\n</code></pre>\n\n<p>and it will throw a <code>NullPointerException</code> if the parameter you pass it is <code>null</code>.</p>\n\n<p>Given that that method is right bang in the middle of <code>java.util</code> I take its existence to be a pretty strong indication that throwing <code>NullPointerException</code> is "the Java way of doing things".</p>\n\n<p>I think I\'m decided at any rate.</p>\n\n<p>Note that the arguments about hard debugging are bogus because you can of course provide a message to <code>NullPointerException</code> saying what was null and why it shouldn\'t be null.  Just like with <code>IllegalArgumentException</code>.</p>\n\n<p>One added advantage of <code>NullPointerException</code> is that, in highly performance critical code, you could dispense with an explicit check for null (and a <code>NullPointerException</code> with a friendly error message), and just rely on the <code>NullPointerException</code> you\'ll get automatically when you call a method on the null parameter.  Provided you call a method quickly (i.e. fail fast), then you have essentially the same effect, just not quite as user friendly for the developer.  Most times it\'s probably better to check explicitly and throw with a useful message to indicate which parameter was null, but it\'s nice to have the option of changing that if performance dictates without breaking the published contract of the method/constructor.</p>\n', '<p>the dichotomy... Are they non-overlapping? Only non-overlapping parts of a whole can make a dichotomy. As i see it:</p>\n\n<pre><code>throw new IllegalArgumentException(new NullPointerException(NULL_ARGUMENT_IN_METHOD_BAD_BOY_BAD));\n</code></pre>\n', '<p>Some collections assume that <code>null</code> is rejected using <code>NullPointerException</code> rather than <code>IllegalArgumentException</code>. For example, if you compare a set containing <code>null</code> to a set that rejects <code>null</code>, the first set will call <code>containsAll</code> on the other and catch its <code>NullPointerException</code> -- but not <code>IllegalArgumentException</code>. (I\'m looking at the implementation of <code>AbstractSet.equals</code>.)</p>\n\n<p>You could reasonably argue that using unchecked exceptions in this way is an antipattern, that comparing collections that contain <code>null</code> to collections that can\'t contain <code>null</code> is a likely bug that really <em>should</em> produce an exception, or that putting <code>null</code> in a collection at all is a bad idea. Nevertheless, unless you\'re willing to say that <code>equals</code> should throw an exception in such a case, you\'re stuck remembering that <code>NullPointerException</code> is required in certain circumstances but not in others. ("IAE before NPE except after \'c\'...")</p>\n', '<p>Throwing an exception that\'s exclusive to <code>null</code> arguments (whether <code>NullPointerException</code> or a custom type) makes automated <code>null</code> testing more reliable. This automated testing can be done with reflection and a set of default values, as in <a href="http://code.google.com/p/guava-libraries/" rel="nofollow">Guava</a>\'s <a href="http://code.google.com/p/guava-libraries/source/browse/guava-testlib/src/com/google/common/testing/NullPointerTester.java" rel="nofollow"><code>NullPointerTester</code></a>. For example, <code>NullPointerTester</code> would attempt to call the following method...</p>\n\n<pre><code>Foo(String string, List&lt;?&gt; list) {\n  checkArgument(string.length() &gt; 0);\n  // missing null check for list!\n  this.string = string;\n  this.list = list;\n}\n</code></pre>\n\n<p>...with two lists of arguments: <code>"", null</code> and <code>null, ImmutableList.of()</code>. It would test that each of these calls throws the expected <code>NullPointerException</code>. For this implementation, passing a <code>null</code> list does <em>not</em> produce <code>NullPointerException</code>. It does, however, happen to produce an <code>IllegalArgumentException</code> because <code>NullPointerTester</code> happens to use a default string of <code>""</code>. If <code>NullPointerTester</code> expects only <code>NullPointerException</code> for <code>null</code> values, it catches the bug. If it expects <code>IllegalArgumentException</code>, it misses it.</p>\n', '<p>Actually, the question of throwing IllegalArgumentException or NullPointerException is in my humble view only a "holy war" for a minority with an incomlete understanding of exception handling in Java. In general, the rules are simple, and as follows:</p>\n\n<ul>\n<li>argument constraint violations must be indicated as fast as possible (-> fast fail), in order to avoid illegal states which are much harder to debug</li>\n<li>in case of an invalid null pointer for whatever reason, throw NullPointerException</li>\n<li>in case of an illegal array/collection index, throw ArrayIndexOutOfBounds</li>\n<li>in case of a negative array/collection size, throw NegativeArraySizeException</li>\n<li>in case of an illegal argument that is not covered by the above, and for which you don\'t have another more specific exception type, throw IllegalArgumentException as a wastebasket</li>\n<li>on the other hand, in case of a constraint violation WITHIN A FIELD that could not be avoided by fast fail for some valid reason, catch and rethrow as IllegalStateException or a more specific checked exception. Never let pass the original NullPointerException, ArrayIndexOutOfBounds, etc in this case!</li>\n</ul>\n\n<p>There are at least three very good reasons against the case of mapping all kinds of argument constraint violations to IllegalArgumentException, with the third probably being so severe as to mark the practice bad style:</p>\n\n<p>(1) A programmer cannot a safely assume that all cases of argument constraint violations result in IllegalArgumentException, because the large majority of standard classes use this exception rather as a wastebasket if there is no more specific kind of exception available. Trying to map all cases of argument constraint violations to IllegalArgumentException in your API only leads to programmer frustration using your classes, as the standard libraries mostly follow different rules that violate yours, and most of your API users will use them as well!</p>\n\n<p>(2) Mapping the exceptions actually results in a different kind of anomaly, caused by single inheritance: All Java exceptions are classes, and therefore support single inheritance only. Therefore, there is no way to create an exception that is truly say both a NullPointerException and an IllegalArgumentException, as subclasses can only inherit from one or the other. Throwing an IllegalArgumentException in case of a null argument therefore makes it harder for API users to distinguish between problems whenever a program tries to programmatically correct the problem, for example by feeding default values into a call repeat!</p>\n\n<p>(3) Mapping actually creates the danger of bug masking: In order to map argument constraint violations into IllegalArgumentException, you\'ll need to code an outer try-catch within every method that has any constrained arguments. However, simply catching RuntimeException in this catch block is out of the question, because that risks mapping documented RuntimeExceptions thrown by libery methods used within yours into IllegalArgumentException, even if they are no caused by argument constraint violations. So you need to be very specific, but even that effort doesn\'t protect you from the case that you accidentally map an undocumented runtime exception of another API (i.e. a bug) into an IllegalArgumentException of your API. Even the most careful mapping therefore risks masking programming errors of other library makers as argument constraint violations of your method\'s users, which is simply hillareous behavior!</p>\n\n<p>With the standard practice on the other hand, the rules stay simple, and exception causes stay unmasked and specific. For the method caller, the rules are easy as well:\n- if you encounter a documented runtime exception of any kind because you passed an illegal value, either repeat the call with a default (for this specific exceptions are neccessary), or correct your code\n- if on the other hand you enccounter a runtime exception that is not documented to happen for a given set of arguments, file a bug report to the method\'s makers to ensure that either their code or their documentation is fixed.</p>\n', '<p>According to your scenario, <code>IllegalArgumentException</code> is the best pick, because <code>null</code> is not a valid value for your property.</p>\n', '<p>NullPointerException thrown when attempting to access an object with a reference variable whose current value is null</p>\n\n<p>IllegalArgumentException thrown when a method receives an argument formatted differently than the method expects</p>\n', '<p>Ideally runtime exceptions should not be thrown. A checked exception(business exception) should be created for your scenario. Because if either of these exception is thrown and logged, it misguides the developer while going through the logs. Instead business exceptions do not create that panic and usually ignored while troubleshooting logs.</p>\n', '<p>As an subjective question this should be closed, but as its still open:</p>\n\n<p>This is part of the the internal policy used at my previous place of employment and it worked really well. This is all from memory so I can\'t remember the exact wording. Its worth noting that they did not use checked exceptions, but that is beyond the scope of the question. The unchecked exceptions they did use fell into 3 main categories.</p>\n\n<p>NullPointerException: Do not throw intentionally. NPEs are to be thrown only by the VM when dereferencing a null reference. All possible effort is to be made to ensure that these are never thrown. @Nullable and @NotNull should be used in conjunction with code analysis tools to find these errors.</p>\n\n<p>IllegalArgumentException: Thrown when an argument to a function does not conform to the public documentation, such that the error can be identified and described in terms of the arguments passed in. The OP\'s situation would fall into this category.</p>\n\n<p>IllegalStateException: Thrown when a function is called and its arguments are either unexpected at the time they are passed or incompatible with the state of the object the method is a member of.</p>\n\n<p>For example, there were two internal versions of the IndexOutOfBoundsException used in things that had a length. One a sub-class of IllegalStateException, used if the index was larger than the length. The other a subclass of IllegalArgumentException, used if the index was negative. This was because you could add more items to the object and the argument would be valid, while a negative number is never valid.</p>\n\n<p>As I said, this system works really well, and it took someone to explain why the distinction is there: "Depending on the type of error it is quite straight forward for you to figure out what to do. Even if you can\'t actually figure out what went wrong you can figure out where to catch that error and create additional debugging information."</p>\n\n<p>NullPointerException: Handle the Null case or put in an assertion so that the NPE is not thrown. If you put in an assertion it must one of the other two types. If possible, continue debugging as if the assertion was there in the first place.</p>\n\n<p>IllegalArgumentException: you have something wrong at your callsite. If the values being passed in are from another function, find out why you are receiving an incorrect value. If you are passing in one of your arguments propagate the error checks up the call stack until you find the function that is not returning what you expect.</p>\n\n<p>IllegalStateException: You have not called your functions in the correct order. If you are using one of your arguments, check them and throw an IllegalArgumentException describing the issue. You can then propagate the cheeks up the stack until you find the issue.</p>\n\n<p>Anyway, his point was that you can only copy the IllegalArgumentAssertions up the stack. There is no way for you to propagate the IllegalStateExceptions or NullPointerExceptions up the stack because they had something to do with your function.</p>\n']}
{'questionId': '4080', 'questionText': "<p>What code analysis tools do you use on your Java projects?</p>\n\n<p>I am interested in all kinds</p>\n\n<ul>\n<li>static code analysis tools (FindBugs, PMD, and any others)</li>\n<li>code coverage tools (Cobertura, Emma, and any others)</li>\n<li>any other instrumentation-based tools </li>\n<li>anything else, if I'm missing something</li>\n</ul>\n\n<p>If applicable, also state what build tools you use and how well these tools integrate with both your IDEs and build tools. </p>\n\n<p>If a tool is only available a specific way (as an IDE plugin, or, say, a build tool plugin) that information is also worth noting.</p>\n", 'answers': ["<p>We use FindBugs and JDepend integrated with Ant. We use JUnit but we're not using any coverage tool. </p>\n\n<p>I'm not using it integrated to Rational Application Developer (the IDE I'm using to develop J2EE applications) because I like how neat it looks when you run javac in the Windows console. :P</p>\n", '<p><a href="http://checkstyle.sourceforge.net/" rel="nofollow noreferrer">Checkstyle</a> is another one I\'ve used at a previous company... it\'s mainly for style checking, but it can do some static analysis too.  Also, <a href="http://www.atlassian.com/software/clover/" rel="nofollow noreferrer">Clover</a> for code coverage, though be aware it is not a free tool.</p>\n', "<p>We are using FindBugs and Checkstyle as well as Clover for Code Coverage. </p>\n\n<p>I think it's important to have some kind of static analysis, supporting your development. Unfortunately it's still not widely spread that these tools are important.</p>\n", '<p>I am looking for many answers to learn about new tools and consolidate this knowledge in a one question/thread, so I doubt there will be 1 true answer to this question.</p>\n\n<p>My answer to my own question is that we use:</p>\n\n<ul>\n<li>Findbugs to look for common errors bad/coding - run from maven, and also integrates easily into Eclipse</li>\n<li>Cobertura for our coverage reports - run from maven</li>\n</ul>\n\n<p>Hudson also has a task-scanner plugin that will display a count of your TODO and FIXMEs, as well as show where they are in the source files.</p>\n\n<p>All are integrated with Maven 1.x in our case and tied into Hudson, which runs our builds on check-in as well as extra things nightly and weekly. Hudson trend graphs our JUnit tests, coverage, findbugs, as well as open tasks. There is also a Hudson plugin that reports and graphs our compile warnings. We also have several performance tests with their own graphs of performance and memory use over time using the Hudson plots plugin as well.</p>\n', '<p>All of the following we use and integrate easiy in both our Maven 2.x builds and Eclipse/RAD 7:</p>\n\n<ul>\n<li>Testing - JUnit/TestNG</li>\n<li>Code analysis - FindBugs, PMD</li>\n<li>Code coverage - Clover</li>\n</ul>\n\n<p>In addition, in our Maven builds we have:</p>\n\n<ul>\n<li>JDepend</li>\n<li>Tag checker (TODO, FIXME, etc)</li>\n</ul>\n\n<p>Furthermore, if you\'re using Maven 2.x, CodeHaus has a collection of handy Maven plugins in their <a href="http://mojo.codehaus.org/plugins.html" rel="noreferrer">Mojo project</a>.</p>\n\n<p>Note: Clover has out-of-the-box integration with the Bamboo CI server (since they\'re both Atlassian products). There are also Bamboo plugins for FindBugs, PMD, and CheckStyle but, as noted, the free Hudson CI server has those too.</p>\n', '<p>For static analysis tools I often use CPD, <a href="http://pmd.sourceforge.net" rel="nofollow noreferrer">PMD</a>, <a href="http://findbugs.sourceforge.net" rel="nofollow noreferrer">FindBugs</a>, and <a href="http://checkstyle.sourceforge.net" rel="nofollow noreferrer">Checkstyle</a>.</p>\n\n<p><p>CPD is the PMD "Copy/Paste Detector" tool. I was using PMD for a little while before I noticed the <a href="http://pmd.sourceforge.net/cpd.html" rel="nofollow noreferrer">"Finding Duplicated Code" link</a> on the <a href="http://pmd.sourceforge.net" rel="nofollow noreferrer">PMD web page</a>.</p>\n\n<p><p>I\'d like to point out that these tools can sometimes be extended beyond their "out-of-the-box" set of rules. And not just because they\'re open source so that you can rewrite them. Some of these tools come with applications or "hooks" that allow them to be extended. For example, PMD comes with the <a href="http://pmd.sourceforge.net/howtowritearule.html" rel="nofollow noreferrer">"designer" tool</a> that allows you to create new rules. Also, Checkstyle has the <a href="http://checkstyle.sourceforge.net/config_misc.html#DescendantToken" rel="nofollow noreferrer">DescendantToken</a> check that has properties that allow for substantial customization.</p>\n\n<p><p>I integrate these tools with <a href="http://virtualteamtls.svn.sourceforge.net/viewvc/virtualteamtls/trunk/scm/common.xml?view=markup" rel="nofollow noreferrer">an Ant-based build</a>. You can follow the link to see my commented configuration.</p>\n\n<p><p>In addition to the simple integration into the build, I find it helpful to configure the tools to be somewhat "integrated" in a couple of other ways. Namely, report generation and warning suppression uniformity. I\'d like to add these aspects to this discussion (which should probably have the "static-analysis" tag also): how are folks configuring these tools to create a "unified" solution? (I\'ve asked this question separately <a href="https://stackoverflow.com/questions/79918/configuring-static-analysis-tools-for-uniformity">here</a>)</p>\n\n<p><p>First, for warning reports, I transform the output so that each warning has the simple format:</p>\n\n<pre><code>/absolute-path/filename:line-number:column-number: warning(tool-name): message</code></pre>\n\n<p><p>This is often called the "Emacs format," but even if you aren\'t using Emacs, it\'s a reasonable format for homogenizing reports. For example:</p>\n\n<pre><code>/project/src/com/example/Foo.java:425:9: warning(Checkstyle):Missing a Javadoc comment.</code></pre>\n\n<p><p>My warning format transformations are done by my Ant script with Ant <a href="http://ant.apache.org/manual/Types/filterchain.html" rel="nofollow noreferrer">filterchains</a>.</p>\n\n<p><p>The second "integration" that I do is for warning suppression. By default, each tool supports comments or an annotation (or both) that you can place in your code to silence a warning that you want to ignore. But these various warning suppression requests do not have a consistent look which seems somewhat silly. When you\'re suppressing a warning, you\'re suppressing a warning, so why not always write "<code>SuppressWarning</code>?"</p>\n\n<p><p>For example, PMD\'s default configuration suppresses warning generation on lines of code with the string "<code>NOPMD</code>" in a comment. Also, PMD supports Java\'s <code>@SuppressWarnings</code> annotation. I configure PMD to use comments containing "<code>SuppressWarning(PMD.</code>" instead of <code>NOPMD</code> so that PMD suppressions look alike. I fill in the particular rule that is violated when using the comment style suppression:</p>\n\n<pre><code>// SuppressWarnings(PMD.PreserveStackTrace) justification: (false positive) exceptions are chained</code></pre>\n\n<p><p>Only the "<code>SuppressWarnings(PMD.</code>" part is significant for a comment, but it is consistent with PMD\'s support for the <code>@SuppressWarning</code> annotation which does recognize individual rule violations by name:</p>\n\n<pre><code>@SuppressWarnings("PMD.CompareObjectsWithEquals") // justification: identity comparision intended</code></pre>\n\n<p><p>Similarly, Checkstyle suppresses warning generation between pairs of comments (no annotation support is provided). By default, comments to turn Checkstyle off and on contain the strings <code>CHECKSTYLE:OFF</code> and <code>CHECKSTYLE:ON</code>, respectively. Changing this configuration (with Checkstyle\'s "SuppressionCommentFilter") to use the strings "<code>BEGIN&nbsp;SuppressWarnings(CheckStyle.</code>" and "<code>END&nbsp;SuppressWarnings(CheckStyle.</code>" makes the controls look more like PMD:</p>\n\n<pre>\n<code>// BEGIN SuppressWarnings(Checkstyle.HiddenField) justification: "Effective Java," 2nd ed., Bloch, Item 2</code>\n<code>// END SuppressWarnings(Checkstyle.HiddenField)</code>\n</pre>\n\n<p><p>With Checkstyle comments, the particular check violation (<code>HiddenField</code>) <em>is</em> significant because each check has its own "<code>BEGIN/END</code>" comment pair.</p>\n\n<p><p>FindBugs also supports warning generation suppression with a <code>@SuppressWarnings</code> annotation, so no further configuration is required to achieve some level of uniformity with other tools. Unfortunately, Findbugs has to support a custom <code>@SuppressWarnings</code> annotation because the built-in Java <code>@SuppressWarnings</code> annotation has a <code>SOURCE</code> retention policy which is not strong enough to retain the annotation in the class file where FindBugs needs it. I fully qualify FindBugs warnings suppressions to avoid clashing with Java\'s <code>@SuppressWarnings</code> annotation:</p>\n\n<pre><code>@edu.umd.cs.findbugs.annotations.SuppressWarnings("UWF&#95;FIELD&#95;NOT&#95;INITIALIZED&#95;IN&#95;CONSTRUCTOR")</code></pre>\n\n<p><p>These techniques makes things look reasonably consistent across tools. Note that having each warning suppression contain the string "<code>SuppressWarnings</code>" makes it easy to run a simple search to find all instances for all tools over an entire code base.</p>\n', "<p>I've had good luck with Cobertura.  It's a code coverage tool which can be executed via your ant script as part of your normal build and can be integrated into Hudson.</p>\n", '<p>I use the static analysis built into IntelliJ IDEA. Perfect integration.</p>\n\n<p>I use the code coverage built into Intellij IDEA (based on EMMA). Again, perfect integration.</p>\n\n<p>This integrated solution is reliable, powerful, and easy-to-use compared to piecing together tools from various vendors.</p>\n', "<p>Our team use PMD and Cobertura, actually our projects are maven projects and there is very simple to include plug ins for code analysis. The real question would be for specific project which analysis you need to use, my opinion is that it's you couldn't use the same plugins for each project.</p>\n", '<p>I use a combination of Cobertura, Checkstyle, (Ecl)Emma and Findbugs.</p>\n\n<p><a href="http://www.eclemma.org/" rel="noreferrer">EclEmma</a> is an <em>awesome</em> Eclipse plugin that shows the code coverage by coloring the java source in the editor (<a href="http://www.eclemma.org/images/screen.png" rel="noreferrer">screenshot</a>) - the coverage is generated by running a JUnit test. This is really useful when you are trying to figure out which lines are covered in a particular class, or if you want to see just which lines are covered by a single test. This is much more user friendly and useful than generating a report and then looking through the report to see which classes have low coverage.</p>\n\n<p>The Checkstyle and Findbugs Eclipse plugins are also useful, they generate warnings in the editor as you type.</p>\n\n<p>Maven2 has report plugins that work with the above tools to generate reports at build time. We use this to get overall project reports, which are more useful when you want aggregate numbers. These are generated by our CI builds, which run using <a href="http://continuum.apache.org/" rel="noreferrer">Continuum</a>.</p>\n', '<p>in our project we use Sonar in front of checkstyle, pmd.... together with the CI (Bamboo, Hudson) we get also a nice history of our source quality and what directing we go. I do like Sonar, because you one central tool in the CI Stack that does it for you, and you can easy customize the rules for each project.</p>\n', '<p><a href="http://www.headwaysoftware.com/" rel="nofollow">Structure 101</a> is good at code analysis and finding the cyclic package dependencies.</p>\n']}
{'questionId': '4149', 'questionText': "<p>I have an application that writes information to file. This information is used post-execution to determine pass/failure/correctness of the application. I'd like to be able to read the file as it is being written so that I can do these pass/failure/correctness checks in realtime.</p>\n\n<p>I assume it is possible to do this, but what are the gotchas involved when using Java? If the reading catches up to the writing, will it just wait for more writes up until the file is closed, or will the read throw an exception at this point? If the latter, what do I do then? </p>\n\n<p>My intuition is currently pushing me towards BufferedStreams. Is this the way to go?</p>\n", 'answers': ["<p>Not Java per-se, but you may run into issues where you have written something to a file, but it hasn't been actually written yet - it might be in a cache somewhere, and reading from the same file may not actually give you the new information.</p>\n\n<p>Short version - use flush() or whatever the relevant system call is to ensure that your data is actually written to the file.</p>\n\n<p>Note I am not talking about the OS level disk cache - if your data gets into here, it should appear in a read() after this point.  It may be that the language itself caches writes, waiting until a buffer fills up or file is flushed/closed.</p>\n", "<p>I've never tried it, but you should write a test case to see if reading from a stream after you have hit the end will work, regardless of if there is more data written to the file.</p>\n\n<p>Is there a reason you can't use a piped input/output stream?  Is the data being written and read from the same application (if so, you have the data, why do you need to read from the file)?</p>\n\n<p>Otherwise, maybe read till end of file, then monitor for changes and seek to where you left off and continue... though watch out for race conditions.</p>\n", '<p>The answer seems to be "no" ... and "yes". There seems to be no real way to know if a file is open for writing by another application. So, reading from such a file will just progress until content is exhausted. I took Mike\'s advice and wrote some test code:</p>\n\n<p>Writer.java writes a string to file and then waits for the user to hit enter before writing another line to file. The idea being that it could be started up, then a reader can be started to see how it copes with the "partial" file. The reader I wrote is in Reader.java.</p>\n\n<p><strong>Writer.java</strong></p>\n\n<pre><code>public class Writer extends Object\n{\n    Writer () {\n\n    }\n\n    public static String[] strings = \n        {\n            "Hello World", \n            "Goodbye World"\n        };\n\n    public static void main(String[] args) \n        throws java.io.IOException {\n\n        java.io.PrintWriter pw =\n            new java.io.PrintWriter(new java.io.FileOutputStream("out.txt"), true);\n\n        for(String s : strings) {\n            pw.println(s);\n            System.in.read();\n        }\n\n        pw.close();\n    }\n}\n</code></pre>\n\n<p><strong>Reader.java</strong></p>\n\n<pre><code>public class Reader extends Object\n{\n    Reader () {\n\n    }\n\n    public static void main(String[] args) \n        throws Exception {\n\n        java.io.FileInputStream in = new java.io.FileInputStream("out.txt");\n\n        java.nio.channels.FileChannel fc = in.getChannel();\n        java.nio.ByteBuffer bb = java.nio.ByteBuffer.allocate(10);\n\n        while(fc.read(bb) &gt;= 0) {\n            bb.flip();\n            while(bb.hasRemaining()) {\n                System.out.println((char)bb.get());\n            }\n            bb.clear();\n        }\n\n        System.exit(0);\n    }\n}\n</code></pre>\n\n<p>No guarantees that this code is best practice.</p>\n\n<p>This leaves the option suggested by Mike of periodically checking if there is new data to be read from the file. This then requires user intervention to close the file reader when it is determined that the reading is completed. Or, the reader needs to be made aware the content of the file and be able to determine and end of write condition. If the content were XML, the end of document could be used to signal this.</p>\n', '<p>You might also take a look at java channel for locking a part of a file.</p>\n\n<p><a href="http://java.sun.com/javase/6/docs/api/java/nio/channels/FileChannel.html" rel="noreferrer">http://java.sun.com/javase/6/docs/api/java/nio/channels/FileChannel.html</a></p>\n\n<p>This function of the <code>FileChannel</code> might be a start</p>\n\n<pre><code>lock(long position, long size, boolean shared) \n</code></pre>\n\n<p>An invocation of this method will block until the region can be locked</p>\n', '<p>Could not get the example to work using <code>FileChannel.read(ByteBuffer)</code> because it isn\'t a blocking read. Did however get the code below to work:</p>\n\n<pre><code>boolean running = true;\nBufferedInputStream reader = new BufferedInputStream(new FileInputStream( "out.txt" ) );\n\npublic void run() {\n    while( running ) {\n        if( reader.available() &gt; 0 ) {\n            System.out.print( (char)reader.read() );\n        }\n        else {\n            try {\n                sleep( 500 );\n            }\n            catch( InterruptedException ex ) {\n                running = false;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Of course the same thing would work as a timer instead of a thread, but I leave that up to the programmer. I\'m still looking for a better way, but this works for me for now.</p>\n\n<p>Oh, and I\'ll caveat this with: I\'m using 1.4.2. Yes I know I\'m in the stone ages still.</p>\n', '<p>Look into using the <a href="https://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/input/Tailer.html" rel="nofollow noreferrer">Tailer</a> from Apache Commons IO. It handles most of the edge cases.</p>\n', '<p>There are a Open Source Java Graphic Tail that does this.</p>\n\n<p><a href="https://stackoverflow.com/a/559146/1255493">https://stackoverflow.com/a/559146/1255493</a></p>\n\n<pre><code>public void run() {\n    try {\n        while (_running) {\n            Thread.sleep(_updateInterval);\n            long len = _file.length();\n            if (len &lt; _filePointer) {\n                // Log must have been jibbled or deleted.\n                this.appendMessage("Log file was reset. Restarting logging from start of file.");\n                _filePointer = len;\n            }\n            else if (len &gt; _filePointer) {\n                // File must have had something added to it!\n                RandomAccessFile raf = new RandomAccessFile(_file, "r");\n                raf.seek(_filePointer);\n                String line = null;\n                while ((line = raf.readLine()) != null) {\n                    this.appendLine(line);\n                }\n                _filePointer = raf.getFilePointer();\n                raf.close();\n            }\n        }\n    }\n    catch (Exception e) {\n        this.appendMessage("Fatal error reading log file, log tailing has stopped.");\n    }\n    // dispose();\n}\n</code></pre>\n', '<p>I totally agree with <a href="https://stackoverflow.com/a/10803105/2003986">Joshua\'s response</a>, <a href="https://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/input/Tailer.html" rel="nofollow noreferrer">Tailer</a> is fit for the job in this situation. Here is an example :</p>\n\n<p>It writes a line every 150 ms in a file, while reading this very same file every 2500 ms</p>\n\n<pre><code>public class TailerTest\n{\n    public static void main(String[] args)\n    {\n        File f = new File("/tmp/test.txt");\n        MyListener listener = new MyListener();\n        Tailer.create(f, listener, 2500);\n\n        try\n        {\n            FileOutputStream fos = new FileOutputStream(f);\n            int i = 0;\n            while (i &lt; 200)\n            {\n                fos.write(("test" + ++i + "\\n").getBytes());\n                Thread.sleep(150);\n            }\n            fos.close();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    private static class MyListener extends TailerListenerAdapter\n    {\n        @Override\n        public void handle(String line)\n        {\n            System.out.println(line);\n        }\n    }\n}\n</code></pre>\n', '<p>If you want to read a file while it is being written and only read the new content then following will help you achieve the same.</p>\n\n<p>To run this program you will launch it from command prompt/terminal window and pass the file name to read. It will read the file unless you kill the program.</p>\n\n<p>java FileReader c:\\myfile.txt</p>\n\n<p>As you type a line of text save it from notepad and you will see the text printed in the console.</p>\n\n<pre><code>public class FileReader {\n\n    public static void main(String args[]) throws Exception {\n        if(args.length&gt;0){\n            File file = new File(args[0]);\n            System.out.println(file.getAbsolutePath());\n            if(file.exists() &amp;&amp; file.canRead()){\n                long fileLength = file.length();\n                readFile(file,0L);\n                while(true){\n\n                    if(fileLength&lt;file.length()){\n                        readFile(file,fileLength);\n                        fileLength=file.length();\n                    }\n                }\n            }\n        }else{\n            System.out.println("no file to read");\n        }\n    }\n\n    public static void readFile(File file,Long fileLength) throws IOException {\n        String line = null;\n\n        BufferedReader in = new BufferedReader(new java.io.FileReader(file));\n        in.skip(fileLength);\n        while((line = in.readLine()) != null)\n        {\n            System.out.println(line);\n        }\n        in.close();\n    }\n}\n</code></pre>\n', "<p>You can't read a file which is opened from another process using FileInputStream, FileReader or RandomAccessFile.</p>\n\n<p>But using FileChannel directly will work:</p>\n\n<pre><code>private static byte[] readSharedFile(File file) throws IOException {\n    byte buffer[] = new byte[(int) file.length()];\n    final FileChannel fc = FileChannel.open(file.toPath(), EnumSet.of(StandardOpenOption.READ));\n    final ByteBuffer dst = ByteBuffer.wrap(buffer);\n    fc.read(dst);\n    fc.close();\n    return buffer;\n}\n</code></pre>\n"]}
{'questionId': '4242', 'questionText': "<p>I want to convert a primitive to a string, and I tried:</p>\n\n<pre><code>myInt.toString();\n</code></pre>\n\n<p>This fails with the error:</p>\n\n<pre><code>int cannot be dereferenced\n</code></pre>\n\n<p>Now, I get that primitives are not reference types (ie, not an Object) and so cannot have methods.  However, Java 5 introduced autoboxing and unboxing (a la C#... which I never liked in C#, but that's beside the point).  So with autoboxing, I would expect the above to convert myInt to an Integer and then call toString() on that.</p>\n\n<p>Furthermore, I believe C# allows such a call, unless I remember incorrectly.  Is this just an unfortunate shortcoming of Java's autoboxing/unboxing specification, or is there a good reason for this?</p>\n", 'answers': ['<p>Java autoboxing/unboxing doesn\'t go to the extent to allow you to dereference a primitive, so your compiler prevents it. Your compiler still knows <code>myInt</code> as a primitive.  There\'s a paper about this issue at <a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/autoboxing.html" rel="noreferrer">jcp.org</a>.</p>\n\n<p>Autoboxing is mainly useful during assignment or parameter passing -- allowing you to pass a primitive as an object (or vice versa), or assign a primitive to an object (or vice versa).</p>\n\n<p>So unfortunately, you would have to do it like this: (kudos Patrick, I switched to your way)</p>\n\n<pre><code>Integer.toString(myInt);\n</code></pre>\n', '<p>Ditto on what Justin said, but you should do this instead:</p>\n\n<pre><code>Integer.toString(myInt);\n</code></pre>\n\n<p>It saves an allocation or two and is more readable.</p>\n', '<blockquote>\n  <p>seems like a shortcoming of the\n  specification to me</p>\n</blockquote>\n\n<p>There are more shortcomings and this is a subtle topic. Check <a href="http://kiranthakkar.blogspot.com/2007/05/method-overloading-with-new-features-of.html" rel="noreferrer">this</a> out:</p>\n\n<pre><code>public class methodOverloading{\n   public static void hello(Integer x){\n      System.out.println("Integer");\n   }\n\n   public static void hello(long x){\n      System.out.println("long");\n   }\n\n   public static void main(String[] args){\n      int i = 5;\n      hello(i);\n   }\n}\n</code></pre>\n\n<p>Here "long" would be printed (haven\'t checked it myself), because the compiler choses widening over autoboxing. Be careful when using autoboxing or don\'t use it at all!</p>\n', '<p>One other way to do it is to use:</p>\n\n<pre><code>String.valueOf(myInt);\n</code></pre>\n\n<p>This method is overloaded for every primitive type and <code>Object</code>. This way you don\'t even have to think about the type you\'re using. Implementations of the method will call the appropriate method of the given type for you, e.g. <code>Integer.toString(myInt)</code>.</p>\n\n<p>See <a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html" rel="noreferrer">http://java.sun.com/javase/6/docs/api/java/lang/String.html</a>.</p>\n', '<p>In C#, integers are neither reference types nor do they have to be boxed in order for <em>ToString()</em> to be called. They <strong>are</strong> considered objects in the Framework (as a ValueType, so they have value semantics), however. In the CLR, methods on primitives are called by "indirectly" loading them onto the stack (ldind).</p>\n', "<p>The valid syntax closest to your example is</p>\n\n<pre><code>((Integer) myInt).toString();\n</code></pre>\n\n<p>When the compiler finishes, that's equivalent to</p>\n\n<pre><code>Integer.valueOf(myInt).toString();\n</code></pre>\n\n<p>However, this doesn't perform as well as the conventional usage, <code>String.valueOf(myInt)</code>, because, except in special cases, it creates a new Integer instance, then immediately throws it away, resulting in more unnecessary garbage. (A small range of integers are cached, and access by an array access.) Perhaps language designers wanted to discourage this usage for performance reasons.</p>\n\n<p>Edit: I'd appreciate it if the downvoter(s) would comment about why this is not helpful.</p>\n", '<p>As everyone has pointed out, autoboxing lets you simplify some code, but you cannot pretend that primitives are complex types.</p>\n\n<p>Also interesting: <a href="http://gafter.blogspot.com/2008/01/is-java-dying.html" rel="nofollow noreferrer">"autoboxing is a compiler-level hack"</a> in Java. Autoboxing is basically a strange kludge added onto Java. Check out <a href="http://bexhuff.com/2006/11/java-1-5-autoboxing-wackyness" rel="nofollow noreferrer">this post</a> for more details about how strange it is.</p>\n', "<p>It would be helpful if Java defined certain static methods to operate on primitive types and built into the compiler some syntactic sugar so that</p>\n\n<pre><code>5.asInteger\n</code></pre>\n\n<p>would be equivalent to</p>\n\n<pre><code>some.magic.stuff.Integer.asInteger(5);\n</code></pre>\n\n<p>I don't think such a feature would cause incompatibility with any code that compiles under the current rules, and it would help reduce syntactic clutter in many cases.  If Java were to autobox primitives that were dereferenced, people might assume that it was mapping the dereferencing syntax to static method calls (which is effectively what happens in .NET), and thus that operations written in that form were no more costly than would be the equivalent static method invocations.  Adding a new language feature that would encourage people to write bad code (e.g. auto-boxing dereferenced primitives) doesn't seem like a good idea, though allowing dereferencing-style methods might be.</p>\n"]}
{'questionId': '4630', 'questionText': "<p>Example: I have two shared objects (same should apply to .dlls). The first shared object is from a third-party library, we'll call it libA.so. I have wrapped some of this with JNI and created my own library, libB.so. Now libB depends on libA.</p>\n\n<p>When webstarting, both libraries are places in some webstart working area. My java code attempts to load libB. At this point the system loader will attempt to load libA which is not in the system library path (java.library.path won't help this). The end result is that libB has an unsatisfied link and cannot be used. </p>\n\n<p>I have tried loading libA before libB, but that still does not work. Seems the OS wants to do that loading for me. Is there any way I can make this work other than statically  compiling?</p>\n", 'answers': ["<p>I'm not sure if this would be handled exactly the same way for webstart, but we ran into this situation in a desktop application when dealing with a set of native libraries (dlls in our case).</p>\n\n<p>Loading libA before libB should work, unless one of those libraries has a dependency that is unaccounted for and not in the path. My understanding is that once it gets to a system loadLibrary call (i.e. Java has found the library in its java.library.path and is now telling the OS to load it) - it is completely dependent on the operating system to find any dependent libraries, because at that point it is the operating system that is loading the library for the process, and the OS only knows how to look in the system path. That seems hard to set in the case of a Webstart app, but there is a way around this that does not involve static compiling. You may be able to shuffle where your libraries are - I am unsure </p>\n\n<p>If you use a custom classloader, you can override loadLibrary and findLibrary so that it can locate your libraries from within a jar in your classpath, and if you also make it aware of your native library dependencies (i.e. libB depends on libA depends on libX, then when loading libB you can catch yourself and ensure you load libA first, and in checking that notice and load libX first. Then the OS doesn't try to find a library that isn't in your path. It's klunky and a bit painful, but ensuring Java finds them and loads them all in the correct order can work.</p>\n", '<p>Are both native libraries packaged into a <em>signed</em> jar which is listed as</p>\n\n<pre><code>&lt;nativelib ...&gt; \n</code></pre>\n\n<p>In the JNLP file?</p>\n', '<p>Static compilation proved to be the only way to webstart multiple dependent native libraries.</p>\n']}
{'questionId': '4922', 'questionText': '<p>I saw this in <a href="https://stackoverflow.com/a/4384/697449">an answer to another question</a>, in reference to shortcomings of the java spec:</p>\n\n<blockquote>\n  <p>There are more shortcomings and this is a subtle topic. Check <a href="http://kiranthakkar.blogspot.com/2007/05/method-overloading-with-new-features-of.html" rel="nofollow noreferrer">this</a> out:</p>\n\n<pre><code>public class methodOverloading{\n     public static void hello(Integer x){\n          System.out.println("Integer");\n     }\n\n     public static void hello(long x){\n          System.out.println("long");\n     }\n\n     public static void main(String[] args){\n         int i = 5;\n         hello(i);\n     }\n}\n</code></pre>\n  \n  <p>Here "long" would be printed (haven\'t checked it myself), because the compiler choses >widening over autoboxing. Be careful when using autoboxing or don\'t use it at all!</p>\n</blockquote>\n\n<p><em>Are we sure that this is actually an example of widening instead of autoboxing, or is it something else entirely?</em></p>\n\n<p>On my initial scanning, I would agree with the statement that the output would be "long" on the basis of <code>i</code> being declared as a primitive and not an object.  However, if you changed </p>\n\n<pre><code>hello(long x)\n</code></pre>\n\n<p>to</p>\n\n<pre><code>hello(Long x)\n</code></pre>\n\n<p>the output would print "Integer"</p>\n\n<p>What\'s really going on here?  I know nothing about the compilers/bytecode interpreters for java...</p>\n', 'answers': ['<p>Yes it is, try it out in a test.  You will see "long" printed.  It is widening because Java will choose to widen the int into a long before it chooses to autobox it to an Integer, so the hello(long) method is chosen to be called.</p>\n\n<p>Edit: <a href="https://stackoverflow.com/questions/4242/why-cant-i-call-tostring-on-a-java-primitive#4384">the original post being referenced</a>.</p>\n\n<p>Further Edit: The reason the second option would print Integer is because there is no "widening" into a larger primitive as an option, so it MUST box it up, thus Integer is the only option.  Furthermore, java will only autobox to the original type, so it would give a compiler error if you leave the hello(Long) and removed hello(Integer).</p>\n', '<p>In the first case, you have a widening conversion happening. This can be see when runinng the "javap" utility program (included w/ the JDK), on the compiled class:</p>\n\n<pre><code>public static void main(java.lang.String[]);\n  Code:\n   0:   iconst_ 5\n   1:   istore_ 1\n   2:   iload_ 1\n   3:   i2l\n   4:   invokestatic    #6; //Method hello:(J)V\n   7:   return\n\n}\n</code></pre>\n\n<p>Clearly, you see the I2L, which is the mnemonic for the widening Integer-To-Long bytecode instruction. See reference <a href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc6.html" rel="noreferrer">here</a>.</p>\n\n<p>And in the other case, replacing the "long x" with the object "Long x" signature, you\'ll have this code in the main method:</p>\n\n<pre><code>public static void main(java.lang.String[]);\n  Code:\n   0:   iconst_ 5\n   1:   istore_ 1\n   2:   iload_ 1\n   3:   invokestatic    #6; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n   6:   invokestatic    #7; //Method hello:(Ljava/lang/Integer;)V\n   9:   return\n\n}\n</code></pre>\n\n<p>So you see the compiler has created the instruction Integer.valueOf(int), to box the primitive inside the wrapper.</p>\n', '<p>Another interesting thing with this example is the method overloading. The combination of type widening and method overloading only working because the compiler has to make a decision of which method to choose. Consider the following example:</p>\n\n<pre><code>public static void hello(Collection x){\n   System.out.println("Collection");\n}\n\npublic static void hello(List x){\n   System.out.println("List");\n}\n\npublic static void main(String[] args){\n   Collection col = new ArrayList();\n   hello(col);\n}\n</code></pre>\n\n<p>It doesn\'t use the run-time type which is List, it uses the compile-time type which is Collection and thus prints "Collection". </p>\n\n<p>I encourage your to read <a href="http://books.google.com/books?id=ZZOiqZQIbRMC" rel="nofollow noreferrer">Effective Java</a>, which opened my eyes to some corner cases of the JLS.</p>\n']}
{'questionId': '5222', 'questionText': "<p>What is the Java equivalent of PHP's <code>$_POST</code>? After searching the web for an hour, I'm still nowhere closer.</p>\n", 'answers': ['<p>Your <code>HttpServletRequest</code> object has a <code>getParameter(String paramName)</code> method that can be used to get parameter values.  <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)" rel="noreferrer">http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)</a></p>\n', '<p>POST variables should be accessible via the request object: <a href="http://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/ServletRequest.html#getParameterMap()" rel="noreferrer">HttpRequest.getParameterMap()</a>. The exception is if the form is sending multipart MIME data (the FORM has <strong>enctype="multipart/form-data"</strong>). In that case, you need to parse the byte stream with a MIME parser. You can write your own or use an existing one like the Apache <a href="http://commons.apache.org/fileupload/" rel="noreferrer">Commons File Upload</a> API.</p>\n', '<p>Here\'s a simple example. I didn\'t get fancy with the html or the servlet, but you should get the idea.</p>\n\n<p>I hope this helps you out.</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;form method="post" action="/myServlet"&gt;\n&lt;input type="text" name="username" /&gt;\n&lt;input type="password" name="password" /&gt;\n&lt;input type="submit" /&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Now for the Servlet</p>\n\n<pre><code>import java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\n\npublic class MyServlet extends HttpServlet {\n  public void doPost(HttpServletRequest request,\n                    HttpServletResponse response)\n      throws ServletException, IOException {\n\n    String userName = request.getParameter("username");\n    String password = request.getParameter("password");\n    ....\n    ....\n  }\n}\n</code></pre>\n', '<p>The previous answers are correct but remember to use the name attribute in the input fields (html form) or you won\'t get anything. Example:</p>\n\n<p><code>\n    &lt;input type="text" id="username" /&gt; &lt;!-- won\'t work --&gt;\n    &lt;input type="text" name="username" /&gt; &lt;!-- will work --&gt;\n    &lt;input type="text" name="username" id="username" /&gt; &lt;!-- will work too --&gt;\n</code></p>\n\n<p>All this code is HTML valid, but using getParameter(java.lang.String) you will need the name attribute been set in all parameters you want to receive.</p>\n']}
{'questionId': '5328', 'questionText': '<p>So, in Java, the first line of your constructor HAS to be a call to super... be it implicitly calling super(), or explicitly calling another constructor.  What I want to know is, why can\'t I put a try block around that?</p>\n\n<p>My specific case is that I have a mock class for a test.  There is no default constructor, but I want one to make the tests simpler to read.  I also want to wrap the exceptions thrown from the constructor into a RuntimeException.</p>\n\n<p>So, what I want to do is effectively this:</p>\n\n<pre><code>public class MyClassMock extends MyClass {\n    public MyClassMock() {\n        try {\n            super(0);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    // Mocked methods\n}\n</code></pre>\n\n<p>But Java complains that super isn\'t the first statement.</p>\n\n<p>My workaround:</p>\n\n<pre><code>public class MyClassMock extends MyClass {\n    public static MyClassMock construct() {\n        try {\n            return new MyClassMock();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public MyClassMock() throws Exception {\n        super(0);\n    }\n\n    // Mocked methods\n}\n</code></pre>\n\n<p>Is this the best workaround?  Why doesn\'t Java let me do the former?</p>\n\n<hr>\n\n<p>My best guess as to the "why" is that Java doesn\'t want to let me have a constructed object in a potentially inconsistent state... however, in doing a mock, I don\'t care about that.  It seems I should be able to do the above... or at least I know that the above is safe for my case... or seems as though it should be anyways.</p>\n\n<p>I am overriding any methods I use from the tested class, so there is no risk that I am using uninitialized variables.</p>\n', 'answers': ["<p>Unfortunately, compilers can't work on theoretical principles, and even though you may know that it is safe in your case, if they allowed it, it would have to be safe for all cases.</p>\n\n<p>In other words, the compiler isn't stopping just you, it's stopping everyone, including all those that don't know that it is unsafe and needs special handling. There are probably other reasons for this as well, as all languages usually have ways to do <em>unsafe</em> things if one knows how to deal with them.</p>\n\n<p>In C# .NET there are similar provisions, and the only way to declare a constructor that calls a base constructor is this:</p>\n\n<pre><code>public ClassName(...) : base(...)\n</code></pre>\n\n<p>in doing so, the base constructor will be called before the body of the constructor, and you cannot change this order.</p>\n", "<p>I don't know how Java is implemented internally, but if the constructor of the superclass throws an exception, then there isn't a instance of the class you extend.  It would be impossible to call the <code>toString()</code> or <code>equals()</code> methods, for example, since they are inherited in most cases.</p>\n\n<p>Java may allow a try/catch around the super() call in the constructor if 1. you override ALL methods from the superclasses, and 2. you don't use the super.XXX() clause, but that all sounds too complicated to me.</p>\n", "<p>I can't presume to have a deep understanding of Java internals, but it is my understanding that, when a compiler needs to instantiate a derived class, it has to first create the base (and its base before that(...)) and then slap on the extensions made in the subclass. </p>\n\n<p>So it is not even the danger of uninited variables or anything like that at all. When you try to do something in the subclass' constructor <em>before</em> the base class' <strong>constructor</strong>, you are basically asking the compiler to extend a base object instance that doesn't exist yet.</p>\n\n<p>Edit:In your case, <strong>MyClass</strong> becomes the base object, and <strong>MyClassMock</strong> is a subclass.</p>\n", "<p>It's done to prevent someone from creating a new <code>SecurityManager</code> object from untrusted code.</p>\n\n<pre><code>public class Evil : SecurityManager {\n  Evil()\n  {\n      try {\n         super();\n      } catch { Throwable t }\n      {\n      }\n   }\n}\n</code></pre>\n", '<p>I know this is an old question, but I liked it, and as such, I decided to give it an answer of my own. Perhaps my understanding of why this cannot be done will contribute to the discussion and to future readers of your interesting question.</p>\n\n<p>Let me start with an example of failing object construction.</p>\n\n<p>Let\'s define a class A, such that:</p>\n\n<pre><code>class A {\n   private String a = "A";\n\n   public A() throws Exception {\n        throw new Exception();\n   }\n}\n</code></pre>\n\n<p>Now, let\'s assume we would like to create an object of type A in a <code>try...catch</code> block.</p>\n\n<pre><code>A a = null;\ntry{\n  a = new A();\n}catch(Exception e) {\n  //...\n}\nSystem.out.println(a);\n</code></pre>\n\n<p>Evidently, the output of this code will be: <code>null</code>.</p>\n\n<p>Why Java does not return a partially constructed version of <code>A</code>? After all, by the point the constructor fails, the object\'s <code>name</code> field has already been initialized, right?</p>\n\n<p>Well, Java can\'t return a partially constructed version of <code>A</code> because the object was not successfully built. The object is in a inconsistent state, and it is therefore discarded by Java. Your variable A is not even initialized, it is kept as null. </p>\n\n<p>Now, as you know, to fully build a new object, all its super classes must be initialized first. If one of the super classes failed to execute, what would be the final state of the object? It is impossible to determine that.</p>\n\n<p>Look at this more elaborate example</p>\n\n<pre><code>class A {\n   private final int a;\n   public A() throws Exception { \n      a = 10;\n   }\n}\n\nclass B extends A {\n   private final int b;\n   public B() throws Exception {\n       methodThatThrowsException(); \n       b = 20;\n   }\n}\n\nclass C extends B {\n   public C() throws Exception { super(); }\n}\n</code></pre>\n\n<p>When the constructor of <code>C</code> is invoked, if an exception occurs while initializing <code>B</code>, what would be the value of the final <code>int</code> variable <code>b</code>?</p>\n\n<p>As such, the object C cannot be created, it is bogus, it is trash, it is not fully initialized.</p>\n\n<p>For me, this explains why your code is illegal.</p>\n', '<p>One way to get around it is by calling a private static function. The try-catch can then be placed in the function body.</p>\n\n<pre><code>public class Test  {\n  public Test()  {\n     this(Test.getObjectThatMightThrowException());\n  }\n  public Test(Object o)  {\n     //...\n  }\n  private static final Object getObjectThatMightThrowException()  {\n     try  {\n        return  new ObjectThatMightThrowAnException();\n     }  catch(RuntimeException rtx)  {\n        throw  new RuntimeException("It threw an exception!!!", rtx);\n     }\n  }\n}\n</code></pre>\n', "<p>I know this question has numerous answers, but I'd like to give my little tidbit on why this wouldn't be allowed, specifically to answer why Java does not allow you to do this. So here you go...</p>\n\n<p>Now, keep in mind that <code>super()</code> has to be called before anything else in a subclass's constructor, so, if you did use <code>try</code> and <code>catch</code> blocks around your <code>super()</code> call, the blocks would have to look like this:</p>\n\n<pre><code>try {\n   super();\n   ...\n} catch (Exception e) {\n   super(); //This line will throw the same error...\n   ...\n}\n</code></pre>\n\n<p>If super()<code>fails in the</code>try<code>block, it HAS to be executed first in the</code>catch<code>block, so that</code>super<code>runs before anything in your subclass</code>s constructor. This leaves you with the same problem you had at the beginning: if an exception is thrown, it isn't caught. (In this case it just gets thrown again in the catch block.)</p>\n\n<p>Now, the above code is in no way allowed by Java either. This code may execute half of the first super call, and then call it again, which could cause some problems with some super classes.</p>\n\n<p>Now, the reason that Java doesn't let you throw an exception <em>instead</em> of calling <code>super()</code> is because the exception could be caught somewhere else, and the program would continue <strong>without calling <code>super()</code> on your subclass object,</strong> and possibly because the exception could take your object as a parameter and try to change the value of inherited instance variables, which would not yet have been initialized.</p>\n"]}
{'questionId': '5527', 'questionText': '<p>I just saw a <a href="https://stackoverflow.com/questions/5516/what-happened-to-all-of-the-java-developers-how-can-i-get-started-in-net#5522">comment of suggesting J#</a>, and it made me wonder... is there a real, beneficial use of J# over Java?  So, my feeling is that the only reason you would even consider using J# is that management has decreed that the company should jump on the Java bandwagon... and the .NET bandwagon.  If you use J#, you are effectively losing the biggest benefit of picking Java... rich cross platform support.  Sure there is Mono, but it\'s not as richly supported or as full featured right?  I remember hearing Forms are not fully (perhaps at all) supported.</p>\n\n<p>I\'m not trying to bash .NET here, I\'m just saying, if you are going to go the Microsoft route, why not just use C#?  If you are going to go the Java route, why would J# enter the picture?</p>\n\n<p>I\'m hoping to find some real world cases here, so please especially respond if you\'ve ACTUALLY used J# in a REAL project, and why.</p>\n', 'answers': ['<p>J# is no longer included in VS2008. Unless you already have J# code, you should probably stay away.</p>\n\n<p>From <a href="http://msdn.microsoft.com/en-us/vjsharp/default.aspx" rel="noreferrer">j# product page:</a></p>\n\n<blockquote>\n  <p>Since customers have told us that the\n  existing J# feature set largely meets\n  their needs and usage of J# is\n  declining, Microsoft is retiring the\n  Visual J# product and Java Language\n  Conversion Assistant tool to better\n  allocate resources for other customer\n  requirements. The J# language and JLCA\n  tool will not be available in future\n  versions of Visual Studio. To preserve\n  existing customer investments in J#,\n  Microsoft will continue to support the\n  J# and JLCA technology that shipped\n  with Visual Studio 2005 through to\n  2015 as per our product life-cycle\n  strategy. For more information, see\n  Expanded Microsoft Support Lifecycle\n  Policy for Business &amp; Development\n  Products.</p>\n</blockquote>\n', '<p>The whole purpose of J# is to ease the transition of Java developers to the .NET environment which didn\'t work so well (I guessing here) so Microsoft dropped J# from Visual Studio 2008.\nFor your question, "Is there a real benefit of using J#?"..\nin a nutshell... No..</p>\n', "<p>One of the killers I've found with J# in the past is that there is no built in support for referencing web services. That alone has been enough to deter me from it ever since.</p>\n", '<p>C# syntax is so close to Java (and better in some ways) that you might as well learn C# instead of J#.  And since C# is more widely used, you can easily find Java --> C# tutorials on google or check out <a href="http://www.asp.net/learn" rel="nofollow noreferrer">http://www.asp.net/learn</a> and watch some videos.</p>\n', '<p>Instead of J#, I would rather prefer IKVM (<a href="http://www.ikvm.net/" rel="nofollow noreferrer">http://www.ikvm.net/</a>) to convert my JARs to .NET assemblies as well as access Java APIs in C#.</p>\n', '<p>Strongly agree that syntactically C# beats Java hands down, so there is really no reason to lament the demise of j#.  Now trying to get c# compiling to Java bytecode might be an interesting move as Sun\'s hotspot jvm is great software.</p>\n\n<p>Or, for a bit of fun with what might well become the next generation of Java, how about <a href="http://www.scala-lang.org/node/168" rel="nofollow noreferrer">Scala on the CLR</a>...</p>\n', "<p>I don't think it's a matter of which language is better. In the .NET world there are some inconsistencies between the libraries different languages provide. There are certain functionality that is available in VB.NET that you might like to use from C# but can't. I remember I had to use J# to use some ZIP libraries that were not available in any other language in .NET.</p>\n", "<p>I have used J# as an easy interim step to port a java library into C#.  It made for a good way to port code I don't plan to maintain from Java to .Net.  However, all new development is being done in C#.</p>\n"]}
{'questionId': '5855', 'questionText': "<p>I've found many sources that talk about the automated Eclipse PDE process.  I feel these sources don't do a good job explaining what's going on.</p>\n\n<p>I can create the deployable package, in a semi-manual process via the Feature Export.  </p>\n\n<p>The automated process requires knowledge of how the org.eclipse.pde.build scripts work.  I have gotten a build created, but not for JNLP.</p>\n\n<p>Questions:</p>\n\n<ol>\n<li>Has anyone ever deployed RCP through JNLP?</li>\n<li>Were you able to automate the builds?</li>\n</ol>\n", 'answers': ['<p>I haven\'t done this before, but I found <a href="http://i-proving.com/space/RCP+and+Java+Web+Start" rel="nofollow noreferrer">this site</a> on the web giving an explanation.</p>\n']}
{'questionId': '6222', 'questionText': "<p>Is anyone successfully using the latest 64-bit Ganymede release of Eclipse on Windows XP or Vista 64-bit?</p>\n\n<p>Currently I run the normal Eclipse 3.4 distribution on a 32bit JDK and launch &amp; compile my apps with a 64bit JDK. Our previous experience has been that the 64bit Eclipse distro is unstable for us, so I'm curious if anyone is using it successfully.</p>\n\n<p>We are using JDK 1.6.0_05.</p>\n", 'answers': ['<p>I\'ve been successfully using it on Vista x64 for some light Java work.  Nothing too involved and no extra plugins, but basic Java coding has been working without any issues.  I\'m using the 3.4M7 build but it looks like the <a href="http://download.eclipse.org/eclipse/downloads/drops/R-3.4-200806172000/index.php" rel="nofollow noreferrer">3.4 stable build</a> supports Vista x64 now.</p>\n', "<p>I'm using Eclipse with a 64bit VM. However I have to use Java 1.5, because with Java 1.6, even 1.6.0_10ea, Eclipse crashed when changing the .classpath-file. On Linux I had the same problems and could only get the 64bit Eclipse to work with 64bit Java 1.5.</p>\n\n<p>The problem seems to be with the just in time compilation, since with vmparam -Xint eclipse works -- but this is not a sollution, because it's slow then.</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>With 1.6.0_11 it seems to work. </p>\n\n<p>1.6_10 final might work as well as mentioned in the comment, but I've not tested that.</p>\n"]}
{'questionId': '6392', 'questionText': '<p>I am running a Tomcat application, and I need to display some time values.  Unfortunately, the time is coming up an hour off.  I looked into it and discovered that my default TimeZone is being set to:</p>\n\n<pre><code>sun.util.calendar.ZoneInfo[id="GMT-08:00",\n                           offset=-28800000,\n                           dstSavings=0,\n                           useDaylight=false,\n                           transitions=0,\n                           lastRule=null]\n</code></pre>\n\n<p>Rather than the Pacific time zone.  This is further indicated when I try to print the default time zone\'s <a href="http://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html#getDisplayName()" rel="noreferrer">display name</a>, and it comes up "GMT-08:00", which seems to indicate to me that it is not correctly set to the US Pacific time zone.  I am running on Ubuntu Hardy Heron, upgraded from Gutsy Gibbon.</p>\n\n<p>Is there a configuration file I can update to tell the JRE to use Pacific with all the associated daylight savings time information?  The time on my machine shows correctly, so it doesn\'t seem to be an OS-wide misconfiguration.</p>\n\n<hr>\n\n<p>Ok, here\'s an update. A coworker suggested I update JAVA_OPTS in my /etc/profile to include "-Duser.timezone=US/Pacific", which worked (I also saw CATALINA_OPTS, which I updated as well). Actually, I just exported the change into the variables rather than use the new /etc/profile (a reboot later will pick up the changes and I will be golden).</p>\n\n<p>However, I still think there is a better solution... there should be a configuration for Java somewhere that says what timezone it is using, or how it is grabbing the timezone. If someone knows such a setting, that would be awesome, but for now this is a decent workaround.</p>\n\n<hr>\n\n<p>I am using 1.5, and it is most definitely a DST problem.  As you can see, the time zone is set to not use daylight savings.  My belief is it is generically set to -8 offset rather than the specific Pacific timezone.  Since the generic -8 offset has no daylight savings info, it\'s of course not using it, but the question is, where do I tell Java to use Pacific time zone when it starts up?  I\'m NOT looking for a programmatic solution, it should be a configuration solution.</p>\n', 'answers': ['<p>Hmm... off by one hour. DST possibly?</p>\n\n<p>Is the date set correctly? \nWhat version of the JDK is this running on? ("java -version")</p>\n', '<p>It\'s a "quirk" in the way the JVM looks up the zoneinfo file.  See <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6456628" rel="noreferrer">Bug ID 6456628</a>.</p>\n\n<p>The easiest workaround is to make /etc/localtime a symlink to the correct zoneinfo file.  For Pacific time, the following commands should work:</p>\n\n<pre><code># sudo cp /etc/localtime /etc/localtime.dist\n# sudo ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime\n</code></pre>\n\n<p>I haven\'t had any problems with the symlink approach.</p>\n\n<p>Edit: Added "sudo" to the commands.</p>\n', '<p>It may help to double-check the timezone rules your OS is using.</p>\n\n<pre><code>/usr/bin/zdump -v /etc/localtime | less\n</code></pre>\n\n<p>This file should contain your daylight savings rules, like this one for the year 2080:</p>\n\n<pre><code>/etc/localtime  Sun Mar 31 01:00:00 2080 UTC = Sun Mar 31 02:00:00 2080 BST isdst=1 gmtoff=3600\n</code></pre>\n\n<p>You can compare this with the timezone rules you think you should be using. They can be found in <strong>/usr/share/zoneinfo/</strong>.</p>\n', '<p>I had a similar issue, possibly the same one. However my tomcat server runs on a windows box so the symlink solution will not work. </p>\n\n<p>I set "-Duser.timezone=Australia/Sydney" in the JAVA_OPTS however tomcat would not recognize that DST was in effect. As a workaround i changed Australia/Sydney (+10 GMT) to Pacific/Numea (+11 GMT) so that times would correctly display however i would love to know the actual solution or bug, if any.</p>\n', '<p>On Ubuntu, it\'s not enough to just change the /etc/localtime file. It seems to read /etc/timezone file, too. It\'s better follow the <a href="https://help.ubuntu.com/community/UbuntuTime" rel="noreferrer">instruction</a> to set the time zone properly. In particular, do the following:</p>\n\n<pre><code>$ sudo cp /etc/timezone /etc/timezone.dist\n$ echo "Australia/Adelaide" | sudo tee /etc/timezone\nAustralia/Adelaide\n$ sudo dpkg-reconfigure --frontend noninteractive tzdata\n\nCurrent default time zone: \'Australia/Adelaide\'\nLocal time is now:      Sat May  8 21:19:24 CST 2010.\nUniversal Time is now:  Sat May  8 11:49:24 UTC 2010.\n</code></pre>\n\n<p>On my Ubuntu, if /etc/localtime and /etc/timezone are inconsistent, Java seems to read default time zone from /etc/timezone .</p>\n']}
{'questionId': '6612', 'questionText': '<p>On a recent Java project, we needed a free Java based real-time data plotting utility.  After much searching, we found this tool called the <a href="http://www.epic.noaa.gov/java/sgt/" rel="nofollow noreferrer">Scientific Graphics Toolkit or SGT</a> from NOAA.  It seemed pretty robust, but we found out that it wasn\'t terribly configurable.  Or at least not configurable enough to meet our needs.  We ended up digging very deeply into the Java code and reverse engineering the code and changing it all around to make the plot tool look and act the way we wanted it to look and act.  Of course, this killed any chance for future upgrades from NOAA.  </p>\n\n<p>So what free or cheap Java based data plotting tools or libraries do you use?</p>\n\n<p><em>Followup:  Thanks for the <a href="http://www.jfree.org/jfreechart/" rel="nofollow noreferrer">JFreeChart</a> suggestions.  I checked out their website and it looks like a very nice data charting and plotting utility.  I should have made it clear in my original question that I was looking specifically to plot real-time data.  I corrected my question above to make that point clear.  It appears that <a href="http://www.jfree.org/jfreechart/faq.html#FAQ5" rel="nofollow noreferrer">JFreeChart support for live data is marginal at best, though</a>.  Any other suggestions out there?</em></p>\n', 'answers': ['<p>I used JFreeChart (<a href="http://www.jfree.org/jfreechart/" rel="nofollow noreferrer">http://www.jfree.org/jfreechart/</a>) on a previous project.  It has some very good built-in capabilities, and the design was WAY extensible so you could always roll your own extension later if you needed some custom chart annotation or wanted an axis to render differently, or whatever.  It\'s definitely worth checking out.</p>\n', '<p>I\'ve had success using <a href="http://www.jfree.org/jfreechart/" rel="noreferrer">JFreeChart</a> on multiple projects. It is <em>very</em> configurable. JFreeChart is open source, but they charge for the <a href="http://www.jfree.org/jfreechart/devguide.html" rel="noreferrer">developer guide</a>. If you\'re doing something simple, the sample code is probably good enough. Otherwise, $50 for the developer guide is a pretty good bargain.</p>\n\n<p>With respect to "real-time" data, I\'ve also used JFreeChart for these sorts of applications. Unfortunately, I had to create some custom data models with appropriate synchronization mechanisms to avoid race conditions. However, it wasn\'t terribly difficult and JFreeChart would still be my first choice. However, as the FAQ suggests, JFreeChart might not give you the best performance if that is a big concern.</p>\n', '<p>I\'ve used <a href="http://www.jfree.org/jfreechart/" rel="nofollow noreferrer">JFreeChart</a> in a rather complex application that needed to visualize data streams and calculations based on the data. We implemented the ability to visually edit the data plots by mouse and had a very large set of data points. JFreeChart handled it very well.</p>\n\n<p>Unfortunately I was stuck with v0.7, but the newest release are sooo much better when it comes to API clarity. The community is very helpful and the developers are responding to mails too.</p>\n\n<p>If you\'re doing a web application and don\'t want to bother with libraries, you can check the <a href="http://code.google.com/apis/chart/" rel="nofollow noreferrer">Google Chart API</a>. Didn\'t use it myself, but I started some tests which were very promising.</p>\n', '<p>Check ILOG\'s <a href="http://www.ilog.com/products/jviews/" rel="nofollow noreferrer">JViews</a> - they have a lot of stuff and something might fit your needs. All of them are extremely configurable and quite fast. Not free though.</p>\n', '<p>For real-time plotting you can use QN Plot, JOpenChart or its fork Openchart2.</p>\n', '<p>JHandles is an alternative graphics package for Octave (a math package).  It is probably worth looking into, but being Octave specific may not have what you need.</p>\n\n<p>-Adam</p>\n', '<p><a href="http://www.live-graph.org/" rel="nofollow noreferrer">Live Graph</a> supports real-time rendering.</p>\n', '<p>I just ran into a similar issue (displaying fast-updating data for engineering purposes), and I\'m using <a href="http://jchart2d.sourceforge.net/docs/javadoc/index.html" rel="nofollow noreferrer">JChart2D</a>. It\'s pretty minimalist and has a few quirks but it seems fairly fast: I\'m running a benchmark speed test where it\'s adding 2331 points per second (333x7 traces) to a strip chart and uses 1% of the CPU on my 3GHz Pentium 4.</p>\n', '<p>You might want to check out JMathPlot</p>\n', '<p><a href="http://www.softpedia.com/get/Programming/Components-Libraries/Plot4j.shtml" rel="nofollow noreferrer">Plot4j</a> supports also real-time plotting!</p>\n', '<p>I\'m using <a href="http://trac.erichseifert.de/gral" rel="nofollow noreferrer">GRAL</a> for real-time plotting. It\'s an LGPL Java library. Although it\'s not as powerful as JFreeChart it has a nicer API. I got a plot up and running in very short time. They also ship a real-time plotting example.</p>\n', '<p><a href="http://ptolemy.berkeley.edu/java/ptplot/" rel="nofollow">PtPlot</a>\nmay be a good choice.  Formerly called Ptolemy.</p>\n', '<p>I found this question when I was googling for open source plotting libraries for java. I wasn\'t quite happy with the answers posted here so I did some further research on the issue.\nAlthough this question has been posted back in 2008 this might still be interesting to someone.</p>\n\n<p>Here is a list of <a href="http://java-source.net/open-source/charting-and-reporting" rel="nofollow">Open Source Charting &amp; Reporting Tools in Java</a></p>\n', '<p><a href="http://autoplot.org/" rel="nofollow">http://autoplot.org/</a> allows for real-time updates and can be used to create many types of scientific plots.</p>\n\n<p>To update the plot, specify the URL to a data file and then append <code>&amp;filePollUpdates=1&amp;tail=100</code>.  See the example at <a href="http://autoplot.org/cookbook#Loading_Data" rel="nofollow">http://autoplot.org/cookbook#Loading_Data</a></p>\n', '<p>jcckit can handle real-time plotting.  It\'s a bear to use though.</p>\n\n<p>I forked it, and made a very simple wrapper around it for non-realtime plotting.  The underlying complicated interface can be used directly too.</p>\n\n<p><a href="https://bitbucket.org/hughperkins/easyjcckit" rel="nofollow">https://bitbucket.org/hughperkins/easyjcckit</a></p>\n', '<p>Waterloo Scientific Graphics is a new LGPL project. Data objects are observable and could be updated in a real time plotting scenario.\nFor details see <a href="http://waterloo.sourceforge.net/" rel="nofollow noreferrer">http://waterloo.sourceforge.net/</a></p>\n\n<p>A few screenshots:</p>\n\n<p><img src="https://i.stack.imgur.com/cSqxZ.png" alt="http://waterloo.sourceforge.net/images/AnatomyZ.png"></p>\n\n<p><img src="https://i.stack.imgur.com/NjLsK.png" alt="http://waterloo.sourceforge.net/images/contour.png"></p>\n\n<p><img src="https://i.stack.imgur.com/m8ABZ.png" alt="http://waterloo.sourceforge.net/images/errorbar.png"></p>\n']}
{'questionId': '6639', 'questionText': '<p>How should I load files into my Java application?</p>\n', 'answers': [u'<p><strong>The short answer</strong></p>\n\n<p>Use one of these two methods:</p>\n\n<ul>\n<li><a href="http://java.sun.com/javase/6/docs/api/java/lang/Class.html#getResource(java.lang.String)" rel="noreferrer"><code>Class.getResource(String)</code></a></li>\n<li><a href="http://java.sun.com/javase/6/docs/api/java/lang/Class.html#getResourceAsStream(java.lang.String)" rel="noreferrer"><code>Class.getResourceAsStream(String)</code></a></li>\n</ul>\n\n<p>For example:</p>\n\n<pre><code>InputStream inputStream = YourClass.class.getResourceAsStream("image.jpg");\n</code></pre>\n\n<p>--</p>\n\n<p><strong>The long answer</strong></p>\n\n<p>Typically, one would not want to load files using absolute paths. For example, don\u2019t do this if you can help it:</p>\n\n<pre><code>File file = new File("C:\\\\Users\\\\Joe\\\\image.jpg");\n</code></pre>\n\n<p>This technique is not recommended for at least two reasons. First, it creates a dependency on a particular operating system, which prevents the application from easily moving to another operating system. One of Java\u2019s main benefits is the ability to run the same bytecode on many different platforms. Using an absolute path like this makes the code much less portable.</p>\n\n<p>Second, depending on the relative location of the file, this technique might create an external dependency and limit the application\u2019s mobility. If the file exists outside the application\u2019s current directory, this creates an external dependency and one would have to be aware of the dependency in order to move the application to another machine (error prone).</p>\n\n<p>Instead, use the <code>getResource()</code> methods in the <code>Class</code> class. This makes the application much more portable. It  can be moved to different platforms, machines, or directories and still function correctly.</p>\n', '<p>getResource is fine, but using relative paths will work just as well too, as long as you can control where your working directory is (which you usually can).</p>\n\n<p>Furthermore the platform dependence regarding the separator character can be gotten around using <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/File.html#separator" rel="noreferrer">File.separator</a>, <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/io/File.html#separatorChar" rel="noreferrer">File.separatorChar</a>, or <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html#getProperties()" rel="noreferrer">System.getProperty("file.separator")</a>.</p>\n', '<p>I haven\'t had a problem just using unix-style path separators, even on Windows (though it is good practice to check <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/File.html#separatorChar" rel="nofollow noreferrer">File.separatorChar</a>).</p>\n\n<p>The technique of using <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ClassLoader.html#getResource(java.lang.String)" rel="nofollow noreferrer">ClassLoader.getResource()</a> is best for read-only resources that are going to be loaded from JAR files. Sometimes, <a href="http://illegalargumentexception.blogspot.com/2008/04/java-finding-application-directory.html" rel="nofollow noreferrer">you can programmatically determine the application directory</a>, which is useful for admin-configurable files or server applications. (Of course, user-editable files should be stored somewhere in the <a href="http://java.sun.com/j2se/1.4.2/docs/api/index.html" rel="nofollow noreferrer">System.getProperty("user.home")</a> directory.)</p>\n', '<p>What are you loading the files for - configuration or data (like an input file) or as a resource?</p>\n\n<ul>\n<li>If as a resource, follow the suggestion and example given by <a href="https://stackoverflow.com/questions/6639/how-should-i-load-files-into-my-java-application#6640">Will and Justin</a> </li>\n<li>If configuration, then you can use a <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/ResourceBundle.html" rel="nofollow noreferrer">ResourceBundle</a> or <a href="http://www.springframework.org/" rel="nofollow noreferrer">Spring</a> (if your configuration is more complex).</li>\n<li>If you need to read a file in order to process the data inside, this code snippet may help <code>BufferedReader file = new BufferedReader(new FileReader(filename))</code> and then read each line of the file using <code>file.readLine();</code>  Don\'t forget to close the file.</li>\n</ul>\n', '<pre><code>public byte[] loadBinaryFile (String name) {\n    try {\n\n        DataInputStream dis = new DataInputStream(new FileInputStream(name));\n        byte[] theBytes = new byte[dis.available()];\n        dis.read(theBytes, 0, dis.available());\n        dis.close();\n        return theBytes;\n    } catch (IOException ex) {\n    }\n    return null;\n} // ()\n</code></pre>\n']}
{'questionId': '6658', 'questionText': '<p>At work we are currently still using JUnit 3 to run our tests. We have been considering switching over to JUnit 4 for <strong>new</strong> tests being written but I have been keeping an eye on TestNG for a while now. What experiences have you all had with either JUnit 4 or TestNG, and which seems to work better for very large numbers of tests? Having flexibility in writing tests is also important to us since our functional tests cover a wide aspect and need to be written in a variety of ways to get results.</p>\n\n<p>Old tests will not be re-written as they do their job just fine. What I would like to see in new tests though is flexibility in the way the test can be written, natural assertions, grouping, and easily distributed test executions.</p>\n', 'answers': ['<p>First I would say, don\'t rewrite all your tests just to suit the latest fad.  Junit3 works perfectly well, and the introduction of annotations in 4 doesn\'t buy you very much (in my opinion).  It is much more important that you guys <em>write</em> tests, and it sounds like you do.  </p>\n\n<p>Use whatever seems most natural and helps you get your work done.</p>\n\n<p>I can\'t comment on TestNG b/c I haven\'t used it.  But I would recommend <a href="http://www.unitils.org/summary.html" rel="noreferrer">unitils</a>, a great wrapper for JUnit/TestNG/DBUnit/EasyMock, regardless of which route you take. (It supports all the flavors mentioned above)</p>\n', '<p>I\'ve used both, but I have to agree with Justin Standard that you shouldn\'t really consider rewriting your existing tests to any new format.  Regardless of the decision, it is pretty trivial to run both.  TestNG strives to be much more configurable than JUnit, but in the end they both work equally well.</p>\n\n<p>TestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.  Thus you can mark tests that run slowly as in the "slow" group and then ignore them when you want quick results.  A suggestion from their documentation is to mark some subset as "checkin" tests which should be run whenever you check new files in.  I never saw such a feature in JUnit, but then again, if you don\'t have it, you don\'t REALLY miss it.</p>\n\n<p>For all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn\'t do what I wanted to do... I wish I could remember what it is, but I wanted to bring it up so you know that it\'s not perfect.</p>\n\n<p>The biggest advantage TestNG has is annotations... which JUnit added in version 4 anyways.</p>\n', "<p>About a year ago, we had the same problem. I spent sometime considering which move was better, and eventually we realized that TestNG has no 'killer features'. It's nice, and has some features JUnit 4 doesn't have, but we don't need them.<br>\nWe didn't want people to feel uncomfortable writing tests while getting to know TestNG because we wanted them to keep writing a lot of tests.<br>\nAlso, JUnit is pretty much the de-facto standard in the Java world. There's no decent tool that doesn't support it from the box, you can find a lot of help on the web and they added a lot of new features in the past year which shows it's alive.</p>\n\n<p>We decided to stick with JUnit and never looked back.</p>\n", "<p>TestNG's biggest draw cards for me include its support test groups, and more importantly - test group dependencies (marking a test as being dependent of a group causes the tests to simply skip running when the dependent group fails).</p>\n\n<p>TestNG's other big draw cards for me include test parameters, data providers, annotation transformers, and more than anything - the vibrant and responsive user community.</p>\n\n<p>Whilst on the surface one might not think all of TestNGs features above might not be needed, once you start to understand the flexibility bring to your tests, you'll wonder how you coped with JUnit.</p>\n\n<p>(disclaimer - I've not used JUnit 4.x at all, so am unable to really comment on advances or new features there).</p>\n", '<p>A couple of additions to Mike Stone\'s reply:</p>\n\n<p>1) The most frequent thing I use TestNG\'s groups for is when I want to run a single test method in a test suite.  I simply add this test to the group "phil" and then run this group.  When I was using JUnit 3, I would comment out the entries for all methods but the one I wanted to run in the "suite" method, but then would commonly forget to uncomment them before checkin.  With the groups, I no longer have this problem.</p>\n\n<p>2) Depending on the complexity of the tests, migrating tests from JUnit3 to TestNG can be done somewhat automatically with sed and creating a base class to replace TestCase that static imports all of the TestNG assert methods.</p>\n\n<p>I have info on my migration from JUnit to TestNG <a href="http://www.philvarner.com/blog/2008/01/30/testng-migration/" rel="nofollow noreferrer">here</a> and <a href="http://www.philvarner.com/blog/2008/02/10/testng-part-2/" rel="nofollow noreferrer">here</a>.</p>\n', "<p>Also one more advantage of TestNG is supporting of parallel testing. In our era of multicores it's important, i think.</p>\n\n<p>I also used both frameworks. But i using hamcrest for assertations. Hamcrest allows you easily write your own assert method. So instead of</p>\n\n<pre><code>assertEquals(operation.getStatus(), Operation.Status.Active);\n</code></pre>\n\n<p>You can write</p>\n\n<pre><code>assertThat(operation, isActive());\n</code></pre>\n\n<p>That gives you opportunity to use higher level of abstraction in your tests. And this makes your tests more robust. </p>\n", '<p>I wanted to share the one I encountered today. I found built-in Parameterized runner is quite crude in Junit4 as compare to TestNG (I know each framework has its strengths but still). The Junit4 annotation @parameters is restricted to one set of parameters. I encountered this problem while testing the valid and invalid behavior for functionality in same test class. So the first public, static annotated method that it finds will be used, but it may find them in any order. This causes us to write different classes unnecessarily. However TestNG provides clean way to provide different kind of data providers for each and every method. So we can test the same unit of code with valid and invalid way in same test class putting the valid/invalid data separately. I will go with TestNG.</p>\n', "<p>Cheers to all the above. Some other things I've personally found I like more in TestNG are:</p>\n\n<ol>\n<li><p>The <code>@BeforeClass</code> for TestNG takes place after class creation, so you aren't constrained by only being able to call static methods of your class in it.</p></li>\n<li><p>Parallel and parameterized tests, maybe I just don't have enough of a life... but I just get a kick writing one set of Selenium tests, accepting a driver name as a parameter. Then defining 3 parallel test groups, 1 each for the IE, FF and Chrome drivers, and watching the race! I originally did 4, but way too many of the pages I've worked on break the <code>HtmlUnit</code> driver for one reason or another.</p></li>\n</ol>\n\n<p>Yeah, probably need to find that life. ;)</p>\n", '<p>I like the neat and easy integration of TestNG with Guice.</p>\n', '<p>Your question seems two folded to me. On one had you would like to compare two test frameworks, on the other hand you would like to implement tests easily, have natural assertions, etc...</p>\n\n<p>Ok, firstly JUnit has been playing catchup with TestNG in terms of functionality, they have bridged the gap some what with v4, but not well enough in my opinion. Things like annotations and dataproviders are still much better in TestNG. Also they are more flexible in terms of test execution, since TestNG has test dependency, grouping and ordering.</p>\n\n<p>JUnit still requires certain before/after methods to be static, which limits what you can do prior to the running of tests, TestNG never has this issue.</p>\n\n<p>TBH, mostly the differences between the two frameworks don\'t mean much, unless your focusing on integration/automation testing. JUnit from my experience is built from the ground up for unit testing and is now being pushed towards higher levels of testing, which IMO makes it the wrong tool for the job. TestNG does well at unit testing and due to its robust dataproviding and great test execution abilities, works even better at integration/automation test level.</p>\n\n<p>Now for what I believe is a separate issue, how to write well structured, readable and maintainable tests. Most of this I am sure you know, but things like <strong>Factory Pattern</strong>, <strong>Command Pattern</strong> and <strong>PageObjects</strong> (if your testing websites) are vital, it is very important to have a layer of abstraction between what your testing (SUT) and what the actual test is (assertions of business logic). In order to have much nicer assertions, you can use <a href="https://code.google.com/p/hamcrest/" rel="nofollow" title="hamcrest">Hamcrest</a>. Make use of javas inheritance/interfaces to reduce repetition and enforce commonality.</p>\n\n<p>Almost forgot, also use the <strong>Test Data Builder Pattern</strong>, this coupled with TestNG\'s dataprovider annotation is very useful.</p>\n', "<p>My opinion about what makes TestNG truly far more powerful:</p>\n\n<pre><code>1.  JUnit still requires the before/after class methods to be static, which limits\n    what you can do prior to the running of tests, TestNG never has this issue.\n\n2.  TestNG @Configuration methods can all take an optional argument to their \n    annotated methods in the form of a ITestResult, XmlTest, Method, or \n    ITestContext.  This allows you to pass things around that JUnit wouldn't \n    provide you.  JUnit only does this in listeners and it is limited in use.\n\n3.  TestNG comes with some pre-made report generation classes that you can copy\n     and edit and make into your own beautiful test output with very little \n     effort. Just copy the report class into your project and add a listener \n     to run it.  Also, ReportNG is available.\n\n4.  TestNG has a handful of nice listeners that you can hook onto so you can do\n     additional AOP style magic at certain phases during testing.\n</code></pre>\n", u'<p><strong>JUnit 4 Vs TestNG \u2013 Comparison by mkyong.com ( updated on 2013).</strong></p>\n\n<p>Conclusion: I suggest to use TestNG as core unit test framework for Java project, because TestNG is <strong>more</strong> advance in parameterize testing, dependency testing and suite testing (Grouping concept). </p>\n\n<p>TestNG is meant for functional, high-level testing and complex integration test. Its flexibility is especially useful with large test suites. </p>\n\n<p>In addition, <strong>TestNG also cover the entire core JUnit4 functionality</strong>. It\u2019s just no reason for me to use JUnit anymore.</p>\n\n<pre><code>In simple terms, TestNG = JUnit + lot more...So, Why debate ? go and grab TestNG :-)\n</code></pre>\n\n<p>You can find more detailed comparison <a href="http://www.mkyong.com/unittest/junit-4-vs-testng-comparison/" rel="nofollow">here</a>.</p>\n']}
