Post-51, Answer-58591, Question-56865
There's roughly a gajillion HTTP client libraries (Restlet is quite a bit more than that, but I already had that code snippet for something else), but they should all provide support for sending GET requests. Here's a rather less featureful snippet that uses HttpClient from Apache Commons:

Post-52, Answer-68574, Question-66066
FWIW, a timeout in seconds value should probably be a configuration setting (read in from a properties file or through injection as in Spring) and not a constant.

Post-53, Answer-37460287, Question-37335
For exampl: On linux Platform for production mode preferable settings.  After downloading and configuring server with this way http://www.ehowstuff.com/how-to-install-and-setup-apache-tomcat-8-on-centos-7-1-rhel-7/  create setenv.sh file on folder /opt/tomcat/bin/ touch /opt/tomcat/bin/setenv.sh Open and write this params for setting preferable mode. nano  /opt/tomcat/bin/setenv.sh export CATALINA_OPTS="$CATALINA_OPTS -Xms512m" export CATALINA_OPTS="$CATALINA_OPTS -Xmx8192m" export CATALINA_OPTS="$CATALINA_OPTS -XX:MaxPermSize=256m" service tomcat restart

Post-54, Answer-76216, Question-63150
So a couple of things you might do to get the feel that it seems like you're looking for: 1) Extend List class - and add the join method to it.  The join method would simply do the work of concatenating and adding the delimiter (which could be a param to the join method) 2) It looks like Java 7 is going to be adding extension methods to java - which allows you just to attach a specific method on to a class:  so you could write that join method and add it as an extension method to List or even to Collection. Solution 1 is probably the only realistic one, now, though since Java 7 isn't out yet :) But it should work just fine. To use both of these, you'd just add all your items to the List or Collection as usual, and then call the new custom method to 'join' them.

Post-55, Answer-66163, Question-66104
It sounds like you're hitting a deadlock. If you can reproduce it in a dev environment then try attaching a debugger once it's happened.  Take a look at your threads and see if you have any deadlocks. If you can't get a debugger to attach you should be able to generate a thread dump, as Dustin pointed out.

Post-56, Answer-29756, Question-29751
have you tried adding the following before the call : The options are explained here. contentType : When sending data to the server, use this content-type. Default is "application/x-www-form-urlencoded", which is fine for most cases. scriptCharset : Only for requests with 'jsonp' or 'script' dataType and GET type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.

Post-57, Answer-8576, Question-8569
Focus first on the heart of Spring: Dependency Injection. Once you see all the ways that DI can be used, then start thinking about the more interesting pieces like AOP, Remoting, JDBC Templates etc. So my best bit of advice is let your use of Spring grow out from the core. Best practice? If you're using the standard XML config, manage the size of individual files and comment them judiciously. You may think that you and others will perfectly understand your bean definitions, but in practice they're somewhat harder to come back to than plain old java code. Good luck!

Post-58, Answer-15657, Question-11088
The best way to do bit manipulation/unsigned bytes is through using ints. Even though they are signed they have plenty of spare bits (32 total) to treat as an unsigned byte. Also, all of the mathematical operators will convert smaller fixed precision numbers to int. Example: Because of this it is best to just stick with integer and mask it to get the bits that you are interested in. Example: Here is some more info on Java primitive types http://mindprod.com/jgloss/primitive.html One last trivial note, there is one unsigned fixed precision number in Java. That is the char primitive.

Post-59, Answer-38286, Question-31693
Looks like, among other very interesting proposals, there is one about refining generics and breaking backwards compatibility: Currently, generics are implemented   using erasure, which means that the   generic type information is not   available at runtime, which makes some   kind of code hard to write. Generics   were implemented this way to support   backwards compatibility with older   non-generic code. Reified generics   would make the generic type   information available at runtime,   which would break legacy non-generic   code. However, Neal Gafter has   proposed making types reifiable only   if specified, so as to not break   backward compatibility. at Alex Miller's article about Java 7 Proposals

Post-60, Answer-25378169, Question-47605
Basically, there are two important differences between + and the concat method. If you are using the concat method then you would only be able to concatenate strings while in case of the + operator, you can also concatenate the string with any data type. For Example: In this case, the output should be 10Hello. In the above case you have to provide two strings mandatory. The second and main difference between + and concat is that: Case 1: Suppose I concat the same strings with concat operator in this way In this case total number of objects created in the pool are 7 like this: Case 2: Now I am going to concatinate the same strings via + operator In the above case total number of objects created are only 5. Actually when we concatinate the strings via + operator then it maintains a StringBuffer class to perform the same task as follows:- In this way it will create only five objects. So guys these are the basic differences between + and the concat method. Enjoy :)

Post-61, Answer-51623, Question-51582
An instance of Test has no information as to what E is at runtime. So, you need to pass a Class<E> to the constructor of Test. If you want an "instanceof" relationship, use Class.isAssignableFrom instead of the Class comparison. Note, E will need to be a non-generic type, for the same reason Test needs the Class object. For examples in the Java API, see java.util.Collections.checkedSet and similar.

Post-62, Answer-3401803, Question-19893
Here's a good example of how to proceed XEP-0239 PS: don't forget to read Mo's answer. PS2: read the NOTICE section on the XEP.

Post-63, Answer-20514020, Question-26305
For playing sound in java, you can refer to the following code.

Post-64, Answer-55390, Question-55375
You can use .NET reflection to retrieve the labels and values from an existing enum at run-time (Enum.GetNames() and Enum.GetValues() are the two specific methods you would use) and then use code injection to create a new one with those elements plus some new ones. This seems somewhat analagous to "inheriting from an existing enum".

Post-65, Answer-61810, Question-61559
There are other language choices too. I've become quite fond of Python, which works well on Windows, Linux, and Mac, and has a rich set of libraries.

Post-66, Answer-12100, Question-12088
I use proguard for JavaME development. It's not only very very good at making jar files smaller (Essential for mobile) but it is useful as a nicer way of doing device-specific code without resorting to IDE-unfriendly preprocessing tools such as antenna. E.g. This gets compiled, obfuscated, and the class file ends up as though you had written: So you can have variants of code to work around manufacturer bugs in JVM/library implementations without bulking out the final executable class files. I believe that some commercial obfuscators can also merge class files together in certain cases. This is useful because the more classes you have, the larger the size overhead you have in the zip (jar) file.

Post-67, Answer-12133, Question-12088
If you do obfuscate, stay away from obfuscators that modify the code by changing code flow and/or adding exception blocks and such to make it hard to disassemble it. To make the code unreadable it is usually enough to just change all names of methods, fields and classes. The reason to stay away from changing code flow is that some of those changes makes it impossible for the JVM to efficiently optimize the code. In effect it will actually degrade the performance of your application.

Post-68, Answer-54896, Question-54882
As well as what @jjnguy said, if you don't have an exception, you can also call Thread.getStackTrace().

Post-69, Answer-86373, Question-26458
I like Eclipse's VisualEditor, sometime ago I've tried to switch to another editor, but found it impossible. Visual editor has this feature that it generates manageable, readable, editable, and easy to understand code. Unlike both mentioned earlier NetBeans editor and WidnowBuilder it uses lazy initialization pattern to separate initialization of components. Also it does not need to lock down parts of code that you cant edit, you may edit code by hand, and VE is still able to work with your changes. Only disadvantage of VE is that it uses eclipse callisto (there is no official build for ganymede, or europa), so effectively you have to use two eclipses one for VE and one for rest of developement.  I took it from recent discussion on comp.lang.java.gui (I was the autor of this post so I could do it rightfully), here is the link to whole discussion.

Post-70, Answer-55582, Question-55487
Reporting the value for InitialContext.getEnvironment().get(Context.PROVIDER_URL) might be helpful.

Post-71, Answer-46659, Question-46642
JProfiler is a really good one.  It integrates with all the major IDEs and application servers.

Post-72, Answer-35821, Question-35785
The "Official" Java API for this is now JAXB - Java API for XML Binding. See Tutorial by Oracle. The reference implementation lives at http://jaxb.java.net/

Post-73, Answer-54894, Question-54886
Crtl+1 is my favorite.   The quick fixes for the red-squiggles. It is also located in the Edit Menu -> Quick Fix.

Post-74, Answer-176808, Question-38183
I feel your pain, this is not an answer, as much as an observation that the Java World in general suffers from the lack of good applications that go beyond the tutorial. Some of the sample .NET applications are very good and show interesting techniques, while solving small enough problems that the novice can wrap their heads around the entire application and see "real code" doing "real things". I have not looked at the Seam examples, so they may well be an exception, but having sample applications, particularly the CRUD, Query, Report style back office applications you're talking about, are a great help to folks and I wish there were more in the Java community.

Post-75, Answer-318846, Question-39399
As of the 2.4 version of the Servlet specification you are allowed to have a servlet in the welcome file list. Note that this may not be a URL (such as /myproject/MyAction.action). It must be a named servlet and you cannot pass a query string to the servlet. Your controller servlet would need to have a default action.
