Post-76, Answer-118405, Question-68113
I am currently requiring this to run an Eclipse-based application but I need to set some variables first that is local to that application. sc.exe will only allow executables but not scripts so I turned to autoexnt.exe which is part of the Windows 2003 resource kit. It restricts the service to a single batch file but I only need one batch script to be converted into a service. ciao!

Post-77, Answer-3394371, Question-24596
After a long while of testing various solutions, for me it turned out to be: Spring MVC for the presentation and controller layer (NO Spring Webflow though, because my flows are based on ajax) jQuery for all the client side stuff Spring Security for the, well, security aspect Hibernate / JPA2 Jetty for the sake of continuations (comet) One month of an extraordinarily steep learning curve, but now I am happy. I would also like to mention that I was just a little step away from skipping all that Java stuff and learing Scala/LIFT instead. As far as I am concerned, everything in Java that is related with cutting edge web development (comet, async communication, security (yes, even with Spring Security!)) still is a bit of a hack (proove me wrong by evidence, pleeease!). To me, Scala/LIFT seems to be a more out-of-the-box and all-in-one solution. The reason why I finally decided not to go with Scala is as a project leader I must consider human resources and Java developers are much easier to find than Scala developers for most developers in my team, Scala's funcional concept, as excellent as it is, is hard to understand Cheers Er

Post-78, Answer-28825937, Question-52353
This answer is not related to Object size, but when you are using array to accommodate the objects; how much memory size it will allocate for the object. So arrays, list, or map all those collection won't be going to store objects really (only at the time of primitives, real object memory size is needed), it will store only references for those objects.  Now the Used heap memory = sizeOfObj + sizeOfRef (* 4 bytes) in collection (4/8 bytes) depends on (32/64 bit) OS PRIMITIVES OBJECTS I mean to say all the object REFERENCE needs only 4 bytes of memory. It may be String reference OR Double object reference, But depends on object creation the memory needed will vary. e.g) If i create object for the below class ReferenceMemoryTest then 4 + 4 + 4 = 12 bytes of memory will be created. The memory may differ when you are trying to initialize the references. So when are creating object/reference array, all its contents will be occupied with NULL references. And we know each reference requires 4 bytes. And finally, memory allocation for the below code is 20 bytes. ReferenceMemoryTest ref1 = new ReferenceMemoryTest(); ( 4(ref1) + 12 = 16 bytes) ReferenceMemoryTest ref2 = ref1;                      ( 4(ref2) + 16 = 20 bytes)

Post-79, Answer-59132, Question-59128
There's a standalone JUnit runner that has a UI, but I recommend using one of the builtin test runners in the Java IDEs (Eclipse, Netbeans, and IntelliJ all have good ones).  They all support JUnit, and most support TestNG as well.

Post-80, Answer-56441, Question-56347
C++ library (the part formerly known as STL) iterators are designed to be compatible with pointers. Java, without pointer arithmetic, had the freedom to be more programmer-friendly. In C++ you end up having to use a pair of iterators. In Java you either use an iterator or a collection. Iterators are supposed to be the glue between algorithm and data structure. Code written for 1.5+ rarely need mention iterators, unless it is implementing a particular algorithm or data structure (which the vary majority of programmers have no need to do). As Java goes for dynamic polymorphism subsets and the like are much easier to handle.

Post-81, Answer-504353, Question-26458
I have tried a few and the closest I have found that comes close to Visual Studio is Netbeans.  V6.5 is excellent and realy improved over v5.

Post-82, Answer-178835, Question-61906
You are doing something wrong. I did not test your code, but you should never need to force the initialization of proxies, the property accessors do that for you. If you are using Hibernate explicitly, never mind using JPA, since you already have lost portability. Hibernate should detect automatically whenever it needs to fetch or write to db. If you issue a getProperty() from a proxy, hibernate or any other jpa provider should fetch the correspondent row from the db. The only situation I'm not sure hibernate is clever enough is if you issue a save() and then issue a get() with the id of the saved object, there might be a problem if the save() didn't flush the object to db.

Post-83, Answer-208799, Question-123
You could use XSLT.  Google it and you will find a few examples e.g. CSV to XML If you use XSLT you can then convert the XML to whatever format you want.

Post-84, Answer-46989, Question-46898
This is a two part question: How to iterate over the entries of a Map - @ScArcher2 has answered that perfectly. What is the order of iteration - if you are just using Map, then strictly speaking, there are no ordering guarantees.  So you shouldn't really rely on the ordering given by any implementation.  However, the SortedMap interface extends Map and provides exactly what you are looking for - implementations will aways give a consistent sort order. NavigableMap is another useful extension - this is a SortedMap with additional methods for finding entries by their ordered position in the key set.  So potentially this can remove the need for iterating in the first place - you might be able to find the specific entry you are after using the higherEntry, lowerEntry, ceilingEntry, or floorEntry methods.  The descendingMap method even gives you an explicit method of reversing the traversal order.

Post-85, Answer-16665089, Question-59787
Two options: OPTION 1 Generate a thread dump using JMX Console In order to generate a thread dump: Open the JMXConsole (for example: http://localhost:8080 ) Navigate to jboss.system:type=ServerInfo mbean (hint: you can probably just CTRL-F and enter type=ServerInfo in the dialog box) Click on the link for the Server Info mbean. Navigate to the bottom where it says listThreadDump Click it and get your thread dump Notes: If you are using Internet Explorer you should use File > Save As to save the output instead of copying the data to a text editor.  For some reason when you copy the text from Internet Explorer the line breaks are not copied and all of the output ends up on a single line. OPTION 2 Generate a Thread Dump using Twiddle Alternatively you can use twiddle to execute the listThreadDump() method and pipe the returned HTML directly to file. Use this command line:

Post-86, Answer-14017856, Question-35186
To answer the original question. According to java docs here "NoSuchMethodError" Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed.  !) if it happens in the run time, check the class containing the method is in class path. 2) Check if you have added new version of jar and the method is compatible.

Post-87, Answer-64618, Question-15496
Transfer of control in a finally block throws away any exception.  The following code does not throw RuntimeException -- it is lost. From http://jamesjava.blogspot.com/2006/03/dont-return-in-finally-clause.html

Post-88, Answer-44029, Question-27129
ChartFX (http://www.softwarefx.com) has been a leader in charting for years.  I personally have used several different versions for over 8 years and it is rock solid. I have re-evaluated charting options periodically, and ChartFX has won in my environment based almost purely on feature set.  It is not free or cheap, but it is well worth the price they charge. -Geoffrey

Post-89, Answer-152412, Question-16140
When learning a new technology rich tooling gets you into things without big headaches. At this point the community at ops4j.org provides a rich toolset called "PAX" which includes: Pax Runner: Run and switch between Felix, Equinox, Knopflerfish and Concierge easily Pax Construct: Construct, Organize & Build OSGi projects with maven easily Pax Drone: Test your OSGi bundles with Junit while being framework independent (uses PaxRunner) Then there are many implementations of OSGi compendium services:  Pax Logging (logging),  Pax Web (http service),  Pax Web Extender (war support),  Pax Coin (configuration),  Pax Shell (shell implementation, part of the next osgi release)  and much more. .. and there is a helpful, framework independend community, - but thats now advertisement ;-)

Post-90, Answer-59413, Question-54886
Alt-Shift-R stands for rename, not refactor. Refactoring is a more general term (as defined by the book). Nevertheless, it is one of my favorite refactorings. Others include: Alt-Shift-M: Extract Method (when a code block or an expression is selected) Alt-Shift-L: Extract Local Variable (when an expression is selected) Extract Local Variable is especially useful when I don't remember (or bother to type) the result type of a method. Assuming you have a method JdbcTemplate createJdbcTemplate() in your class, write some code such as this: Select the expression createJdbcTemplate(), click Alt-Shift-L, type the name of variable and press enter.

Post-91, Answer-37240, Question-37198
My docs would probably best be handled by accessing: Look up the docs on System.getProperty.

Post-92, Answer-60172, Question-60160
Difference between Pattern.quote and Matcher.quoteReplacement was not clear to me before I saw following example

Post-93, Answer-79671, Question-64989
Do those waiting threads wait for ever, or do they eventually proceed? If the latter, it may be that the lock is held by the garbage collector. You can add the arguments -verbose:gc with -XX:+PrintGCDetails on your java command line to be told when GCs are occurring. If gc activity coincides with your slowdowns it may indicate that this is the problem. Here's some information on garbage collection.

Post-94, Answer-37300, Question-37271
db4objects might be the best choice

Post-95, Answer-5841923, Question-62289
As has been noted, the Preferences API uses the registry to store preferences, but cannot be used to access the whole registry. However, a pirate called David Croft has worked out that it's possible to use methods in Sun's implementation of the Preferences API for reading the Windows registry from Java without JNI. There are some dangers to that, but it is worth a look.

Post-96, Answer-31614, Question-31584
This idea is seen a lot in c++, it allows operations to be cascaded... for example is where the stream method << returns an instance of itself (*this). see this: http://www.java2s.com/Tutorial/Cpp/0180__Class/Cascadingmemberfunctioncallswiththethispointer.htm

Post-97, Answer-37349, Question-37335
Ultimately you always have a finite max of heap to use no matter what platform you are running on. In Windows 32 bit this is around 2gb (not specifically heap but total amount of memory per process). It just happens that Java chooses to make the default smaller (presumably so that the programmer can't create programs that have runaway memory allocation without running into this problem and having to examine exactly what they are doing). So this given there are several approaches you could take to either determine what amount of memory you need or to reduce the amount of memory you are using. One common mistake with garbage collected languages such as Java or C# is to keep around references to objects that you no longer are using, or allocating many objects when you could reuse them instead. As long as objects have a reference to them they will continue to use heap space as the garbage collector will not delete them. In this case you can use a Java memory profiler to determine what methods in your program are allocating large number of objects and then determine if there is a way to make sure they are no longer referenced, or to not allocate them in the first place. One option which I have used in the past is "JMP" http://www.khelekore.org/jmp/. If you determine that you are allocating these objects for a reason and you need to keep around references (depending on what you are doing this might be the case), you will just need to increase the max heap size when you start the program. However, once you do the memory profiling and understand how your objects are getting allocated you should have a better idea about how much memory you need.  In general if you can't guarantee that your program will run in some finite amount of memory (perhaps depending on input size) you will always run into this problem. Only after exhausting all of this will you need to look into caching objects out to disk etc. At this point you should have a very good reason to say "I need Xgb of memory" for something and you can't work around it by improving your algorithms or memory allocation patterns. Generally this will only usually be the case for algorithms operating on large datasets (like a database or some scientific analysis program) and then techniques like caching and memory mapped IO become useful.

Post-98, Answer-66212, Question-66066
What about an enumeration?

Post-99, Answer-1777666, Question-59936
audacity does it out of the box and it's free. THere are several plug ins for mp3 players as well that are free. Apparently it's pretty easy to do with an mp3 since it's already coded in the frequency domain.

Post-100, Answer-65282, Question-65035
The finally block is always executed unless there is abnormal program termination, either resulting from a JVM crash or from a call to System.exit(0). On top of that, any value returned from within the finally block will override the value returned prior to execution of the finally block, so be careful of checking all exit points when using try finally.
